(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (global){
(function() {
  var Aether, defaults, esprima, execution, interpreter, languages, optionsValidator, problems, protectBuiltins, self, transforms, traversal, _, _ref, _ref1, _ref2,
    __slice = [].slice;

  if ((typeof window !== "undefined" && window !== null) && (typeof self === "undefined" || self === null)) {
    self = window;
  }

  if ((typeof global !== "undefined" && global !== null) && (self == null)) {
    self = global;
  }

  if (self.self == null) {
    self.self = self;
  }

  _ = (_ref = (_ref1 = (_ref2 = typeof window !== "undefined" && window !== null ? window._ : void 0) != null ? _ref2 : self != null ? self._ : void 0) != null ? _ref1 : typeof global !== "undefined" && global !== null ? global._ : void 0) != null ? _ref : require('lodash');

  esprima = require('esprima');

  defaults = require('./defaults');

  problems = require('./problems');

  execution = require('./execution');

  traversal = require('./traversal');

  transforms = require('./transforms');

  protectBuiltins = require('./protectBuiltins');

  optionsValidator = require('./validators/options');

  languages = require('./languages/languages');

  interpreter = require('./interpreter');

  module.exports = Aether = (function() {
    Aether.execution = execution;

    Aether.addGlobal = protectBuiltins.addGlobal;

    Aether.replaceBuiltin = protectBuiltins.replaceBuiltin;

    Aether.globals = protectBuiltins.addedGlobals;

    Aether.prototype.depth = 0;

    Aether.prototype.getAddedGlobals = function() {
      return protectBuiltins.addedGlobals;
    };

    Aether.prototype.addGlobal = function(name, value) {
      if (this.esperEngine != null) {
        return this.esperEngine.addGlobal(name, value);
      }
    };

    function Aether(options) {
      var defaultsCopy, validationResults;
      if (options == null) {
        options = {};
      }
      validationResults = optionsValidator(options);
      if (!validationResults.valid) {
        throw new Error("Aether options are invalid: " + JSON.stringify(validationResults.errors, null, 4));
      }
      this.originalOptions = _.cloneDeep(options);
      defaultsCopy = _.cloneDeep(defaults);
      this.options = _.merge(defaultsCopy, options);
      this.setLanguage(this.options.language);
      this.allGlobals = this.options.globals.concat(protectBuiltins.builtinNames, Object.keys(this.language.runtimeGlobals));
      Object.defineProperty(this, 'lastStatementRange', {
        get: function() {
          var rng, _ref3, _ref4, _ref5;
          rng = (_ref3 = this.esperEngine) != null ? (_ref4 = _ref3.evaluator) != null ? (_ref5 = _ref4.lastASTNodeProcessed) != null ? _ref5.originalRange : void 0 : void 0 : void 0;
          if (rng) {
            return [rng.start, rng.end];
          }
        }
      });
    }

    Aether.prototype.setLanguage = function(language) {
      var validationResults;
      if (this.language && this.language.id === language) {
        return;
      }
      validationResults = optionsValidator({
        language: language
      });
      if (!validationResults.valid) {
        throw new Error("New language is invalid: " + JSON.stringify(validationResults.errors, null, 4));
      }
      this.originalOptions.language = this.options.language = language;
      this.language = new languages[language]();
      if (this.languageJS == null) {
        this.languageJS = language === 'javascript' ? this.language : new languages.javascript('ES5');
      }
      this.reset();
      return language;
    };

    Aether.prototype.reset = function() {
      this.problems = {
        errors: [],
        warnings: [],
        infos: []
      };
      this.style = {};
      this.flow = {};
      this.metrics = {};
      return this.pure = null;
    };

    Aether.prototype.serialize = function() {
      return _.pick(this, ['originalOptions', 'raw', 'pure', 'problems', 'flow', 'metrics', 'style', 'ast']);
    };

    Aether.deserialize = function(serialized) {
      var aether, prop, val;
      aether = new Aether(serialized.originalOptions);
      for (prop in serialized) {
        val = serialized[prop];
        if (prop !== "originalOptions") {
          aether[prop] = val;
        }
      }
      return aether;
    };

    Aether.prototype.canTranspile = function(rawCode, thorough) {
      if (thorough == null) {
        thorough = false;
      }
      if (!rawCode) {
        return true;
      }
      if (this.language.obviouslyCannotTranspile(rawCode)) {
        return false;
      }
      if (!thorough) {
        return true;
      }
      return this.lint(rawCode, this).errors.length === 0;
    };

    Aether.prototype.hasChangedSignificantly = function(a, b, careAboutLineNumbers, careAboutLint) {
      if (careAboutLineNumbers == null) {
        careAboutLineNumbers = false;
      }
      if (careAboutLint == null) {
        careAboutLint = false;
      }
      if (!((a != null) && (b != null))) {
        return true;
      }
      if (a === b) {
        return false;
      }
      if (careAboutLineNumbers && this.language.hasChangedLineNumbers(a, b)) {
        return true;
      }
      if (careAboutLint && this.hasChangedLintProblems(a, b)) {
        return true;
      }
      return this.language.hasChangedASTs(a, b);
    };

    Aether.prototype.hasChangedLintProblems = function(a, b) {
      var aLintProblems, bLintProblems, p;
      aLintProblems = (function() {
        var _i, _len, _ref3, _results;
        _ref3 = this.getAllProblems(this.lint(a));
        _results = [];
        for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
          p = _ref3[_i];
          _results.push([p.id, p.message, p.hint]);
        }
        return _results;
      }).call(this);
      bLintProblems = (function() {
        var _i, _len, _ref3, _results;
        _ref3 = this.getAllProblems(this.lint(b));
        _results = [];
        for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
          p = _ref3[_i];
          _results.push([p.id, p.message, p.hint]);
        }
        return _results;
      }).call(this);
      return !_.isEqual(aLintProblems, bLintProblems);
    };

    Aether.prototype.beautify = function(rawCode) {
      return this.language.beautify(rawCode, this);
    };

    Aether.prototype.transpile = function(raw) {
      var loopProblems, rawCode, _ref3, _ref4;
      this.raw = raw;
      this.reset();
      rawCode = this.raw;
      if (this.options.simpleLoops) {
        rawCode = _.cloneDeep(this.raw);
        _ref3 = this.language.replaceLoops(rawCode), rawCode = _ref3[0], this.replacedLoops = _ref3[1], loopProblems = _ref3[2];
      }
      this.problems = this.lint(rawCode);
      if (loopProblems == null) {
        loopProblems = [];
      }
      if (loopProblems.length > 0) {
        (_ref4 = this.problems.warnings).push.apply(_ref4, loopProblems);
      }
      this.pure = this.purifyCode(rawCode);
      return this.pure;
    };

    Aether.prototype.lint = function(rawCode) {
      var lintProblems, problem, _i, _len, _ref3;
      lintProblems = {
        errors: [],
        warnings: [],
        infos: []
      };
      _ref3 = this.language.lint(rawCode, this);
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        problem = _ref3[_i];
        this.addProblem(problem, lintProblems);
      }
      return lintProblems;
    };

    Aether.prototype.createFunction = function() {
      return interpreter.createFunction(this);
    };

    Aether.prototype.createMethod = function(thisValue) {
      return _.bind(this.createFunction(), thisValue);
    };

    Aether.prototype.run = function() {
      var args, error, fn, problem;
      fn = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      try {
        if (fn == null) {
          fn = this.createFunction();
        }
      } catch (_error) {
        error = _error;
        problem = this.createUserCodeProblem({
          error: error,
          code: this.raw,
          type: 'transpile',
          reporter: 'aether'
        });
        this.addProblem(problem);
        return;
      }
      try {
        return fn.apply(null, args);
      } catch (_error) {
        error = _error;
        problem = this.createUserCodeProblem({
          error: error,
          code: this.raw,
          type: 'runtime',
          reporter: 'aether'
        });
        this.addProblem(problem);
      }
    };

    Aether.prototype.createUserCodeProblem = problems.createUserCodeProblem;

    Aether.prototype.createThread = function(fx) {
      return interpreter.createThread(this, fx);
    };

    Aether.prototype.updateProblemContext = function(problemContext) {
      return this.options.problemContext = problemContext;
    };

    Aether.prototype.addProblem = function(problem, problems) {
      if (problems == null) {
        problems = null;
      }
      if (problem.level === "ignore") {
        return;
      }
      (problems != null ? problems : this.problems)[problem.level + "s"].push(problem);
      return problem;
    };

    Aether.prototype.getAllProblems = function(problems) {
      return _.flatten(_.values(problems != null ? problems : this.problems));
    };

    Aether.prototype.purifyCode = function(rawCode) {
      var error, nodeGatherer, originalNodeRanges, parameter, preNormalizationTransforms, preprocessedCode, problemOptions, transformedAST, transformedCode, varNames, wrappedCode, _i, _len, _ref3, _ref4, _ref5,
        _this = this;
      preprocessedCode = this.language.hackCommonMistakes(rawCode, this);
      wrappedCode = this.language.wrap(preprocessedCode, this);
      originalNodeRanges = [];
      varNames = {};
      _ref3 = this.options.functionParameters;
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        parameter = _ref3[_i];
        varNames[parameter] = true;
      }
      preNormalizationTransforms = [transforms.makeGatherNodeRanges(originalNodeRanges, wrappedCode, this.language.wrappedCodePrefix), transforms.makeCheckThisKeywords(this.allGlobals, varNames, this.language, this.options.problemContext), transforms.makeCheckIncompleteMembers(this.language, this.options.problemContext)];
      try {
        _ref4 = this.transform(wrappedCode, preNormalizationTransforms, this.language.parse), transformedCode = _ref4[0], transformedAST = _ref4[1];
        this.ast = transformedAST;
      } catch (_error) {
        error = _error;
        problemOptions = {
          error: error,
          code: wrappedCode,
          codePrefix: this.language.wrappedCodePrefix,
          reporter: this.language.parserID,
          kind: error.index || error.id,
          type: 'transpile'
        };
        this.addProblem(this.createUserCodeProblem(problemOptions));
        if (!this.language.parseDammit) {
          return '';
        }
        originalNodeRanges.splice();
        try {
          _ref5 = this.transform(wrappedCode, preNormalizationTransforms, this.language.parseDammit), transformedCode = _ref5[0], transformedAST = _ref5[1];
          this.ast = transformedAST;
        } catch (_error) {
          error = _error;
          problemOptions.kind = error.index || error.id;
          if (this.language.id === 'javascript') {
            problemOptions.reporter = 'acorn_loose';
          }
          this.addProblem(this.createUserCodeProblem(problemOptions));
          return '';
        }
      }
      nodeGatherer = transforms.makeGatherNodeRanges(originalNodeRanges, wrappedCode, this.language.wrappedCodePrefix);
      traversal.walkASTCorrect(this.ast, function(node) {
        var startEndRangeArray;
        nodeGatherer(node);
        if (node.originalRange != null) {
          startEndRangeArray = _this.language.removeWrappedIndent([node.originalRange.start, node.originalRange.end]);
          return node.originalRange = {
            start: startEndRangeArray[0],
            end: startEndRangeArray[1]
          };
        }
      });
      return rawCode;
    };

    Aether.prototype.transform = function(code, transforms, parseFn) {
      var t, transformedAST, transformedCode;
      transformedCode = traversal.morphAST(code, (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = transforms.length; _i < _len; _i++) {
          t = transforms[_i];
          _results.push(_.bind(t, this));
        }
        return _results;
      }).call(this), parseFn, this);
      transformedAST = parseFn(transformedCode, this);
      return [transformedCode, transformedAST];
    };

    Aether.getFunctionBody = function(func) {
      var indent, line, lines, source;
      source = _.isString(func) ? func : func.toString();
      if (source.trim() === "function () {}") {
        return "";
      }
      source = source.substring(source.indexOf('{') + 2, source.lastIndexOf('}'));
      lines = source.split(/\r?\n/);
      indent = lines.length ? lines[0].length - lines[0].replace(/^ +/, '').length : 0;
      return ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = lines.length; _i < _len; _i++) {
          line = lines[_i];
          _results.push(line.slice(indent));
        }
        return _results;
      })()).join('\n');
    };

    Aether.prototype.convertToNativeType = function(obj) {
      return this.language.convertToNativeType(obj);
    };

    Aether.prototype.getStatementCount = function() {
      var count, root;
      count = 0;
      if (this.language.usesFunctionWrapping()) {
        root = this.ast.body[0].body;
      } else {
        root = this.ast.body;
      }
      traversal.walkASTCorrect(root, function(node) {
        var _ref3;
        if (node.type == null) {
          return;
        }
        if (node.userCode === false) {
          return;
        }
        if ((_ref3 = node.type) === 'ExpressionStatement' || _ref3 === 'ReturnStatement' || _ref3 === 'ForStatement' || _ref3 === 'ForInStatement' || _ref3 === 'WhileStatement' || _ref3 === 'DoWhileStatement' || _ref3 === 'FunctionDeclaration' || _ref3 === 'VariableDeclaration' || _ref3 === 'IfStatement' || _ref3 === 'SwitchStatement' || _ref3 === 'ThrowStatement' || _ref3 === 'ContinueStatement' || _ref3 === 'BreakStatement') {
          return ++count;
        }
      });
      return count;
    };

    return Aether;

  })();

  if (self != null) {
    self.Aether = Aether;
  }

  if (typeof window !== "undefined" && window !== null) {
    window.Aether = Aether;
  }

  if (self != null) {
    if (self.esprima == null) {
      self.esprima = esprima;
    }
  }

  if (typeof window !== "undefined" && window !== null) {
    if (window.esprima == null) {
      window.esprima = esprima;
    }
  }

}).call(this);

}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./defaults":2,"./execution":3,"./interpreter":4,"./languages/languages":10,"./problems":13,"./protectBuiltins":14,"./transforms":16,"./traversal":17,"./validators/options":18,"esprima":39,"lodash":41}],2:[function(require,module,exports){
(function (global){
(function() {
  var defaults, execution, _, _ref, _ref1, _ref2;

  execution = require('./execution');

  _ = (_ref = (_ref1 = (_ref2 = typeof window !== "undefined" && window !== null ? window._ : void 0) != null ? _ref2 : typeof self !== "undefined" && self !== null ? self._ : void 0) != null ? _ref1 : typeof global !== "undefined" && global !== null ? global._ : void 0) != null ? _ref : require('lodash');

  module.exports = defaults = {
    thisValue: null,
    globals: [],
    language: "javascript",
    functionName: null,
    functionParameters: [],
    yieldAutomatically: false,
    yieldConditionally: false,
    executionCosts: {},
    noSerializationInFlow: false,
    noVariablesInFlow: false,
    skipDuplicateUserInfoInFlow: false,
    includeFlow: true,
    includeMetrics: true,
    includeStyle: true,
    protectBuiltins: true,
    protectAPI: false,
    debug: false
  };

}).call(this);

}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./execution":3,"lodash":41}],3:[function(require,module,exports){
(function() {
  var execution;

  module.exports = execution = {
    ArrayExpression: 1,
    ArrayPattern: 1,
    ArrowFunctionExpression: 1,
    AssignmentExpression: 1,
    BinaryExpression: 1,
    BlockStatement: 1,
    BreakStatement: 1,
    CallExpression: 1,
    CatchClause: 1,
    ClassBody: 1,
    ClassDeclaration: 1,
    ClassExpression: 1,
    ClassHeritage: 1,
    ComprehensionBlock: 1,
    ComprehensionExpression: 1,
    ConditionalExpression: 1,
    ContinueStatement: 1,
    DebuggerStatement: 1,
    DoWhileStatement: 1,
    EmptyStatement: 1,
    ExportDeclaration: 1,
    ExportBatchSpecifier: 1,
    ExportSpecifier: 1,
    ExpressionStatement: 1,
    ForInStatement: 1,
    ForOfStatement: 1,
    ForStatement: 1,
    FunctionDeclaration: 1,
    FunctionExpression: 1,
    Identifier: 1,
    IfStatement: 1,
    ImportDeclaration: 1,
    ImportSpecifier: 1,
    LabeledStatement: 1,
    Literal: 1,
    LogicalExpression: 1,
    MemberExpression: 1,
    MethodDefinition: 1,
    ModuleDeclaration: 1,
    NewExpression: 1,
    ObjectExpression: 1,
    ObjectPattern: 1,
    Program: 1,
    Property: 1,
    ReturnStatement: 1,
    SequenceExpression: 1,
    SpreadElement: 1,
    SwitchCase: 1,
    SwitchStatement: 1,
    TaggedTemplateExpression: 1,
    TemplateElement: 1,
    TemplateLiteral: 1,
    ThisExpression: 1,
    ThrowStatement: 1,
    TryStatement: 1,
    UnaryExpression: 1,
    UpdateExpression: 1,
    VariableDeclaration: 1,
    VariableDeclarator: 1,
    WhileStatement: 1,
    WithStatement: 1,
    YieldExpression: 1
  };

}).call(this);

},{}],4:[function(require,module,exports){
(function (global){
(function() {
  var addedGlobals, debugDumper, emptyAST, isStatement, makeYieldFilter, shouldFlow, updateState, upgradeEvaluator, _, _ref, _ref1, _ref2;

  _ = (_ref = (_ref1 = (_ref2 = typeof window !== "undefined" && window !== null ? window._ : void 0) != null ? _ref2 : typeof self !== "undefined" && self !== null ? self._ : void 0) != null ? _ref1 : typeof global !== "undefined" && global !== null ? global._ : void 0) != null ? _ref : require('lodash');

  addedGlobals = require('./protectBuiltins').addedGlobals;

  isStatement = function(name) {
    return name !== 'Literal' && name !== 'Identifier' && name !== 'ThisExpression' && name !== 'BlockStatement' && name !== 'MemberExpression' && name !== 'FunctionExpression' && name !== 'LogicalExpression' && name !== 'BinaryExpression' && name !== 'UnaryExpression' && name !== 'Program';
  };

  shouldFlow = function(name) {
    return name !== 'IfStatement' && name !== 'WhileStatement' && name !== 'DoWhileStatement' && name !== 'ForStatement' && name !== 'ForInStatement' && name !== 'ForOfStatement';
  };

  updateState = function(aether, evaluator) {
    var astStack, bottom, f, frame_stack, n, p, rng, s, statementStack, top, variables, x, _base, _base1, _base2, _i, _j, _len, _ref3, _ref4;
    frame_stack = evaluator.frames;
    top = frame_stack[0];
    bottom = frame_stack[frame_stack.length - 1];
    if (aether.options.includeFlow) {
      if (bottom.flow == null) {
        bottom.flow = {
          statementsExecuted: 0,
          statements: []
        };
        if ((_base = aether.flow).states == null) {
          _base.states = [];
        }
        aether.flow.states.push(bottom.flow);
      }
    }
    if (aether.options.includeMetrics) {
      if ((_base1 = aether.metrics).statementsExecuted == null) {
        _base1.statementsExecuted = 0;
      }
      if ((_base2 = aether.metrics).callsExecuted == null) {
        _base2.callsExecuted = 0;
      }
    }
    astStack = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = frame_stack.length; _i < _len; _i++) {
        x = frame_stack[_i];
        if (x.ast != null) {
          _results.push(x.ast);
        }
      }
      return _results;
    })();
    statementStack = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = astStack.length; _i < _len; _i++) {
        x = astStack[_i];
        if (isStatement(x.type)) {
          _results.push(x);
        }
      }
      return _results;
    })();
    if (top.ast != null) {
      if (aether.options.includeMetrics && top.ast.type === 'CallExpression') {
        ++aether.metrics.callsExecuted;
      }
      if (isStatement(top.ast.type)) {
        if (aether.options.includeMetrics) {
          ++aether.metrics.statementsExecuted;
        }
        if (bottom.flow != null) {
          ++bottom.flow.statementsExecuted;
        }
        if ((bottom.flow != null) && shouldFlow(top.ast.type)) {
          f = {};
          if (aether._userInfo != null) {
            f.userInfo = _.cloneDeep(aether._userInfo);
          }
          if (!aether.options.noVariablesInFlow) {
            variables = {};
            for (s = _i = _ref3 = frame_stack.length - 2; _ref3 <= 0 ? _i <= 0 : _i >= 0; s = _ref3 <= 0 ? ++_i : --_i) {
              p = frame_stack[s];
              if (!(p && p.scope)) {
                continue;
              }
              _ref4 = Object.keys(p.scope.object.properties);
              for (_j = 0, _len = _ref4.length; _j < _len; _j++) {
                n = _ref4[_j];
                if (n[0] === '_') {
                  continue;
                }
                if (p.value) {
                  variables[n] = p.value.debugString;
                }
              }
            }
            f.variables = variables;
          }
          rng = top.ast.originalRange;
          if (rng) {
            f.range = [rng.start, rng.end];
          }
          f.type = top.ast.type;
          if (!!f.range) {
            return bottom.flow.statements.push(f);
          }
        }
      }
    }
  };

  module.exports.createFunction = function(aether, code) {
    var engine, error, esper, fx, fxName, messWithLoops, name, state, _i, _len, _ref3, _ref4, _ref5, _ref6;
    esper = (_ref3 = (_ref4 = (_ref5 = typeof window !== "undefined" && window !== null ? window.esper : void 0) != null ? _ref5 : typeof self !== "undefined" && self !== null ? self.esper : void 0) != null ? _ref4 : typeof global !== "undefined" && global !== null ? global.esper : void 0) != null ? _ref3 : require('esper.js');
    state = {};
    messWithLoops = false;
    if (aether.options.whileTrueAutoYield || aether.options.simpleLoops) {
      messWithLoops = true;
    }
    if (!aether.esperEngine) {
      aether.esperEngine = new esper.Engine({
        strict: aether.language.id !== 'python',
        foreignObjectMode: aether.options.protectAPI ? 'smart' : 'link',
        extraErrorInfo: true,
        yieldPower: 2,
        debug: aether.options.debug
      });
    }
    engine = aether.esperEngine;
    fxName = aether.options.functionName || 'foo';
    aether.language.setupInterpreter(engine);
    if (aether.language.injectCode != null) {
      engine.evalASTSync(aether.language.injectCode, {
        nonUserCode: true
      });
    } else {
      engine.evalSync('');
    }
    _ref6 = Object.keys(addedGlobals);
    for (_i = 0, _len = _ref6.length; _i < _len; _i++) {
      name = _ref6[_i];
      engine.addGlobal(name, addedGlobals[name]);
    }
    upgradeEvaluator(aether, engine.evaluator);
    try {
      if (aether.language.usesFunctionWrapping()) {
        engine.evalASTSync(aether.ast);
        if (aether.options.yieldConditionally) {
          fx = engine.fetchFunction(fxName, makeYieldFilter(aether));
        } else if (aether.options.yieldAutomatically) {
          fx = engine.fetchFunction(fxName, function(engine) {
            return true;
          });
        } else {
          fx = engine.fetchFunctionSync(fxName);
        }
      } else {
        if (aether.options.yieldConditionally) {
          fx = engine.functionFromAST(aether.ast, makeYieldFilter(aether));
        } else if (aether.options.yieldAutomatically) {
          fx = engine.functionFromAST(aether.ast, function(engine) {
            return true;
          });
        } else {
          fx = engine.functionFromASTSync(aether.ast);
        }
      }
    } catch (_error) {
      error = _error;
      console.log('Esper: error parsing AST. Returning empty function.', error.message);
      if (aether.language.id === 'javascript') {
        error.message = "Couldn't understand your code. Are your { and } braces matched?";
      } else {
        error.message = "Couldn't understand your code. Do you have extra spaces at the beginning, or unmatched ( and ) parentheses?";
      }
      aether.addProblem(aether.createUserCodeProblem({
        error: error,
        code: aether.raw,
        type: 'transpile',
        reporter: 'aether'
      }));
      engine.evalASTSync(emptyAST);
    }
    return fx;
  };

  debugDumper = _.debounce(function(evaluator) {
    return evaluator.dumpProfilingInformation();
  }, 5000);

  makeYieldFilter = function(aether) {
    return function(engine, evaluator, e) {
      var currentMark, frame_stack, top, yieldValue;
      frame_stack = evaluator.frames;
      top = frame_stack[0];
      if ((e != null) && e.type === 'event' && e.event === 'loopBodyStart') {
        if (top.srcAst.type === 'WhileStatement' && top.srcAst.test.type === 'Literal') {
          if (aether.whileLoopMarker != null) {
            currentMark = aether.whileLoopMarker();
            if (currentMark === top.mark) {
              top.mark = currentMark + 1;
              return true;
            } else {
              top.mark = currentMark;
            }
          }
        }
      }
      if (aether._shouldYield) {
        yieldValue = aether._shouldYield;
        aether._shouldYield = false;
        if (frame_stack[1].type === 'loop') {
          frame_stack[1].didYield = true;
        }
        return true;
      }
      return false;
    };
  };

  module.exports.createThread = function(aether, fx) {
    var engine, internalFx;
    internalFx = esper.Value.getBookmark(fx);
    engine = aether.esperEngine.fork();
    upgradeEvaluator(aether, engine.evaluator);
    return engine.makeFunctionFromClosure(internalFx, makeYieldFilter(aether));
  };

  module.exports.upgradeEvaluator = upgradeEvaluator = function(aether, evaluator) {
    var executionCount;
    executionCount = 0;
    return evaluator.instrument = function(evalu, evt) {
      debugDumper(evaluator);
      if (++executionCount > aether.options.executionLimit) {
        throw new TypeError('Statement execution limit reached');
      }
      return updateState(aether, evalu, evt);
    };
  };

  emptyAST = {
    "type": "Program",
    "body": [
      {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "plan",
          "range": [9, 13],
          "loc": {
            "start": {
              "line": 1,
              "column": 9
            },
            "end": {
              "line": 1,
              "column": 13
            }
          },
          "originalRange": {
            "start": {
              "ofs": -8,
              "row": 0,
              "col": -8
            },
            "end": {
              "ofs": -4,
              "row": 0,
              "col": -4
            }
          }
        },
        "params": [],
        "defaults": [],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "VariableDeclaration",
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "hero"
                  },
                  "init": {
                    "type": "ThisExpression"
                  }
                }
              ],
              "kind": "var",
              "userCode": false
            }
          ],
          "range": [16, 19],
          "loc": {
            "start": {
              "line": 1,
              "column": 16
            },
            "end": {
              "line": 2,
              "column": 1
            }
          },
          "originalRange": {
            "start": {
              "ofs": -1,
              "row": 0,
              "col": -1
            },
            "end": {
              "ofs": 2,
              "row": 1,
              "col": 1
            }
          }
        },
        "rest": null,
        "generator": false,
        "expression": false,
        "range": [0, 19],
        "loc": {
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 1
          }
        },
        "originalRange": {
          "start": {
            "ofs": -17,
            "row": 0,
            "col": -17
          },
          "end": {
            "ofs": 2,
            "row": 1,
            "col": 1
          }
        }
      }
    ],
    "range": [0, 19],
    "loc": {
      "start": {
        "line": 1,
        "column": 0
      },
      "end": {
        "line": 2,
        "column": 1
      }
    },
    "originalRange": {
      "start": {
        "ofs": -17,
        "row": 0,
        "col": -17
      },
      "end": {
        "ofs": 2,
        "row": 1,
        "col": 1
      }
    }
  };

}).call(this);

}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./protectBuiltins":14,"esper.js":41,"lodash":41}],5:[function(require,module,exports){
(function (global){
(function() {
  var CoffeeScript, Language, StructuredCode, estraverse, fixLocations, parserHolder, _, _ref, _ref1, _ref2,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = (_ref = (_ref1 = (_ref2 = typeof window !== "undefined" && window !== null ? window._ : void 0) != null ? _ref2 : typeof self !== "undefined" && self !== null ? self._ : void 0) != null ? _ref1 : typeof global !== "undefined" && global !== null ? global._ : void 0) != null ? _ref : require('lodash');

  parserHolder = {};

  estraverse = require('estraverse');

  Language = require('./language');

  module.exports = CoffeeScript = (function(_super) {
    __extends(CoffeeScript, _super);

    CoffeeScript.prototype.name = 'CoffeeScript';

    CoffeeScript.prototype.id = 'coffeescript';

    CoffeeScript.prototype.parserID = 'csredux';

    CoffeeScript.prototype.thisValue = '@';

    CoffeeScript.prototype.thisValueAccess = '@';

    CoffeeScript.prototype.heroValueAccess = 'hero.';

    CoffeeScript.prototype.wrappedCodeIndentLen = 4;

    function CoffeeScript() {
      var _ref3;
      CoffeeScript.__super__.constructor.apply(this, arguments);
      this.indent = Array(this.wrappedCodeIndentLen + 1).join(' ');
      if (parserHolder.csredux == null) {
        parserHolder.csredux = (_ref3 = typeof self !== "undefined" && self !== null ? self.aetherCoffeeScriptRedux : void 0) != null ? _ref3 : require('coffee-script-redux');
      }
    }

    CoffeeScript.prototype.wrap = function(rawCode, aether) {
      var indentedCode, line;
      if (this.wrappedCodePrefix == null) {
        this.wrappedCodePrefix = "" + (aether.options.functionName || 'foo') + " = (" + (aether.options.functionParameters.join(', ')) + ") ->\n\n";
      }
      if (this.wrappedCodeSuffix == null) {
        this.wrappedCodeSuffix = '\n';
      }
      indentedCode = ((function() {
        var _i, _len, _ref3, _results;
        _ref3 = rawCode.split('\n');
        _results = [];
        for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
          line = _ref3[_i];
          _results.push(this.indent + line);
        }
        return _results;
      }).call(this)).join('\n');
      return this.wrappedCodePrefix + indentedCode + this.wrappedCodeSuffix;
    };

    CoffeeScript.prototype.removeWrappedIndent = function(range) {
      range = _.cloneDeep(range);
      range[0].ofs -= this.wrappedCodeIndentLen * range[0].row;
      range[1].ofs -= this.wrappedCodeIndentLen * range[1].row;
      return range;
    };

    CoffeeScript.prototype.parse = function(code, aether) {
      var csAST, jsAST;
      csAST = parserHolder.csredux.parse(code, {
        optimise: false,
        raw: true
      });
      jsAST = parserHolder.csredux.compile(csAST, {
        bare: true
      });
      fixLocations(jsAST);
      return jsAST;
    };

    return CoffeeScript;

  })(Language);

  StructuredCode = (function() {
    function StructuredCode(code) {
      var _ref3;
      _ref3 = this.generateOffsets(code), this.cursors = _ref3[0], this.indentations = _ref3[1];
      this.length = this.cursors.length;
    }

    StructuredCode.prototype.generateOffsets = function(code) {
      var cursor, indentations, reg, res, result, _ref3, _ref4;
      reg = /(?:\r\n|[\r\n\u2028\u2029])/g;
      result = [0];
      indentations = [0];
      while (res = reg.exec(code)) {
        cursor = res.index + res[0].length;
        reg.lastIndex = cursor;
        result.push(cursor);
        indentations.push((_ref3 = code.substr(cursor).match(/^\s+/)) != null ? (_ref4 = _ref3[0]) != null ? _ref4.length : void 0 : void 0);
      }
      return [result, indentations];
    };

    StructuredCode.prototype.column = function(offset) {
      return this.loc(offset).column;
    };

    StructuredCode.prototype.line = function(offset) {
      return this.loc(offset).line;
    };

    StructuredCode.prototype.fixRange = function(range, loc) {
      var fix;
      fix = Math.floor(this.indentations[loc.start.line - 1] + 5 / 4);
      range[0] -= fix;
      range[1] -= fix;
      return range;
    };

    StructuredCode.prototype.loc = function(offset) {
      var column, index, line;
      index = _.sortedIndex(this.cursors, offset);
      if (this.cursors.length > index && this.cursors[index] === offset) {
        column = 0;
        line = index + 1;
      } else {
        column = offset - 4 - this.cursors[index - 1];
        line = index;
      }
      return {
        column: column,
        line: line
      };
    };

    return StructuredCode;

  })();

  fixLocations = function(program) {
    var structured;
    structured = new StructuredCode(program.raw);
    return estraverse.traverse(program, {
      leave: function(node, parent) {
        var loc;
        if (node.range != null) {
          loc = {
            start: null,
            end: structured.loc(node.range[1])
          };
          if (node.loc != null) {
            loc.start = node.loc.start;
          } else {
            loc.start = structured.loc(node.range[0]);
          }
          if (_.isNaN(loc.end.column)) {
            loc.end.column = loc.start.column + 1;
          }
          node.loc = loc;
          if (node.range[1] == null) {
            node.range[1] = node.range[0] + 1;
          }
          node.range = structured.fixRange(node.range, loc);
        } else {
          node.loc = (function() {
            var _ref3;
            switch (node.type) {
              case 'BlockStatement':
                if (node.body.length) {
                  return {
                    start: node.body[0].loc.start,
                    end: node.body[node.body.length - 1].loc.end
                  };
                } else {
                  return parent.loc;
                }
                break;
              case 'VariableDeclarator':
                if ((node != null ? (_ref3 = node.init) != null ? _ref3.loc : void 0 : void 0) != null) {
                  return {
                    start: node.id.loc.start,
                    end: node.init.loc.end
                  };
                } else {
                  return node.id.loc;
                }
                break;
              case 'ExpressionStatement':
                return node.expression.loc;
              case 'ReturnStatement':
                if (node.argument != null) {
                  return node.argument.loc;
                } else {
                  return node.loc;
                }
                break;
              case 'VariableDeclaration':
                return {
                  start: node.declarations[0].loc.start,
                  end: node.declarations[node.declarations.length - 1].loc.end
                };
              default:
                return {
                  start: {
                    line: 0,
                    column: 0
                  },
                  end: {
                    line: 0,
                    column: 0
                  }
                };
            }
          })();
        }
      }
    });
  };

}).call(this);

}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./language":9,"coffee-script-redux":41,"estraverse":40,"lodash":41}],6:[function(require,module,exports){
(function (global){
(function() {
  var HTML, Language, _, _ref, _ref1, _ref2,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = (_ref = (_ref1 = (_ref2 = typeof window !== "undefined" && window !== null ? window._ : void 0) != null ? _ref2 : typeof self !== "undefined" && self !== null ? self._ : void 0) != null ? _ref1 : typeof global !== "undefined" && global !== null ? global._ : void 0) != null ? _ref : require('lodash');

  Language = require('./language');

  module.exports = HTML = (function(_super) {
    __extends(HTML, _super);

    HTML.prototype.name = 'HTML';

    HTML.prototype.id = 'html';

    HTML.prototype.parserID = 'html';

    function HTML() {
      HTML.__super__.constructor.apply(this, arguments);
    }

    HTML.prototype.hasChangedASTs = function(a, b) {
      return a.replace(/\s/g) !== b.replace(/\s/g);
    };

    HTML.prototype.usesFunctionWrapping = function() {
      return false;
    };

    HTML.prototype.parse = function(code, aether) {
      return code;
    };

    HTML.prototype.replaceLoops = function(rawCode) {
      return [rawCode, []];
    };

    return HTML;

  })(Language);

}).call(this);

}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./language":9,"lodash":41}],7:[function(require,module,exports){
(function() {
  var Java, Language, parserHolder,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Language = require('./language');

  parserHolder = {};

  module.exports = Java = (function(_super) {
    __extends(Java, _super);

    Java.prototype.name = 'Java';

    Java.prototype.id = 'java';

    Java.prototype.parserID = 'cashew';

    function Java() {
      var _ref;
      Java.__super__.constructor.apply(this, arguments);
      if (parserHolder.cashew == null) {
        parserHolder.cashew = (_ref = typeof self !== "undefined" && self !== null ? self.aetherCashew : void 0) != null ? _ref : require('cashew-js');
      }
      this.runtimeGlobals = {
        ___JavaRuntime: parserHolder.cashew.___JavaRuntime,
        _Object: parserHolder.cashew._Object,
        Integer: parserHolder.cashew.Integer,
        Double: parserHolder.cashew.Double,
        _NotInitialized: parserHolder.cashew._NotInitialized,
        _ArrayList: parserHolder.cashew._ArrayList
      };
    }

    Java.prototype.obviouslyCannotTranspile = function(rawCode) {
      return false;
    };

    Java.prototype.parse = function(code, aether) {
      var ast;
      ast = parserHolder.cashew.Parse(code);
      ast = parserHolder.cashew.wrapFunction(ast, aether.options.functionName, aether.className, aether.staticCall);
      return ast;
    };

    return Java;

  })(Language);

}).call(this);

},{"./language":9,"cashew-js":41}],8:[function(require,module,exports){
(function (global){
(function() {
  var JavaScript, Language, acorn_loose, escodegen, esprima, jshintHolder, traversal, _, _ref, _ref1, _ref2,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = (_ref = (_ref1 = (_ref2 = typeof window !== "undefined" && window !== null ? window._ : void 0) != null ? _ref2 : typeof self !== "undefined" && self !== null ? self._ : void 0) != null ? _ref1 : typeof global !== "undefined" && global !== null ? global._ : void 0) != null ? _ref : require('lodash');

  jshintHolder = {};

  esprima = require('esprima');

  acorn_loose = require('acorn/acorn_loose');

  escodegen = require('escodegen');

  Language = require('./language');

  traversal = require('../traversal');

  module.exports = JavaScript = (function(_super) {
    __extends(JavaScript, _super);

    JavaScript.prototype.name = 'JavaScript';

    JavaScript.prototype.id = 'javascript';

    JavaScript.prototype.parserID = 'esprima';

    JavaScript.prototype.thisValue = 'this';

    JavaScript.prototype.thisValueAccess = 'this.';

    JavaScript.prototype.heroValueAccess = 'hero.';

    function JavaScript() {
      var _ref3;
      JavaScript.__super__.constructor.apply(this, arguments);
      if (jshintHolder.jshint == null) {
        jshintHolder.jshint = ((_ref3 = typeof self !== "undefined" && self !== null ? self.aetherJSHint : void 0) != null ? _ref3 : require('jshint')).JSHINT;
      }
    }

    JavaScript.prototype.obviouslyCannotTranspile = function(rawCode) {
      var e;
      try {
        eval("'use strict;'\nthrow 0;" + rawCode);
      } catch (_error) {
        e = _error;
        if (e !== 0) {
          return true;
        }
      }
      return false;
    };

    JavaScript.prototype.hasChangedASTs = function(a, b) {
      var aAST, bAST, options, removeLocations, _ref3, _ref4, _ref5;
      options = {
        loc: false,
        range: false,
        comment: false,
        tolerant: true
      };
      _ref3 = [null, null], aAST = _ref3[0], bAST = _ref3[1];
      try {
        aAST = esprima.parse(a, options);
      } catch (_error) {}
      try {
        bAST = esprima.parse(b, options);
      } catch (_error) {}
      if ((!aAST || !bAST) && (aAST || bAST)) {
        return true;
      }
      if (aAST && bAST) {
        if (((_ref4 = aAST.errors) != null ? _ref4 : []).length !== ((_ref5 = bAST.errors) != null ? _ref5 : []).length) {
          return true;
        }
        return !_.isEqual(aAST.body, bAST.body);
      }
      options = {
        locations: false,
        tabSize: 4,
        ecmaVersion: 5
      };
      aAST = acorn_loose.parse_dammit(a, options);
      bAST = acorn_loose.parse_dammit(b, options);
      if (!(aAST && bAST)) {
        console.log("Couldn't even loosely parse; are you sure " + a + " and " + b + " are " + this.name + "?");
        return true;
      }
      removeLocations = function(node) {
        if (node) {
          return node.start = node.end = null;
        }
      };
      traversal.walkAST(aAST, removeLocations);
      traversal.walkAST(bAST, removeLocations);
      return !_.isEqual(aAST, bAST);
    };

    JavaScript.prototype.replaceLoops = function(rawCode) {
      var a, convertedCode, line, lineNumber, lines, rangeIndex, replacedLoops, start, _i, _len, _ref3;
      if (rawCode.indexOf('loop') === -1) {
        return [rawCode, []];
      }
      convertedCode = "";
      replacedLoops = [];
      rangeIndex = 0;
      lines = rawCode.split('\n');
      for (lineNumber = _i = 0, _len = lines.length; _i < _len; lineNumber = ++_i) {
        line = lines[lineNumber];
        if (line.replace(/^\s+/g, "").indexOf('loop') === 0) {
          start = line.indexOf('loop');
          a = line.split("");
          [].splice.apply(a, [start, (start + 3) - start + 1].concat(_ref3 = 'while (true)'.split(""))), _ref3;
          line = a.join("");
          replacedLoops.push(rangeIndex + start);
        }
        convertedCode += line;
        if (lineNumber !== lines.length - 1) {
          convertedCode += '\n';
        }
        rangeIndex += line.length + 1;
      }
      return [convertedCode, replacedLoops];
    };

    JavaScript.prototype.lint = function(rawCode, aether) {
      var c, e, error, firstParen, firstSemiColon, g, i, jshintGlobals, jshintOptions, jshintSuccess, line, lines, lintProblems, offset, parenCount, row, wrappedCode, _i, _j, _k, _len, _len1, _len2, _ref3, _ref4;
      lintProblems = [];
      if (!jshintHolder.jshint) {
        return lintProblems;
      }
      wrappedCode = this.wrap(rawCode, aether);
      jshintOptions = {
        browser: false,
        couch: false,
        devel: false,
        dojo: false,
        jquery: false,
        mootools: false,
        node: false,
        nonstandard: false,
        phantom: false,
        prototypejs: false,
        rhino: false,
        worker: false,
        wsh: false,
        yui: false
      };
      jshintGlobals = _.zipObject(jshintGlobals, (function() {
        var _i, _len, _ref3, _results;
        _ref3 = aether.allGlobals;
        _results = [];
        for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
          g = _ref3[_i];
          _results.push(false);
        }
        return _results;
      })());
      try {
        jshintSuccess = jshintHolder.jshint(wrappedCode, jshintOptions, jshintGlobals);
      } catch (_error) {
        e = _error;
        console.warn("JSHint died with error", e);
      }
      _ref3 = jshintHolder.jshint.errors;
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        error = _ref3[_i];
        lintProblems.push(aether.createUserCodeProblem({
          type: 'transpile',
          reporter: 'jshint',
          error: error,
          code: wrappedCode,
          codePrefix: this.wrappedCodePrefix
        }));
      }
      if (_.isEmpty(lintProblems)) {
        lines = rawCode.split(/\r\n|[\n\r\u2028\u2029]/g);
        offset = 0;
        for (row = _j = 0, _len1 = lines.length; _j < _len1; row = ++_j) {
          line = lines[row];
          if (/^\s*if /.test(line)) {
            if ((firstParen = line.indexOf('(')) >= 0) {
              parenCount = 1;
              _ref4 = line.slice(firstParen + 1, +line.length + 1 || 9e9);
              for (i = _k = 0, _len2 = _ref4.length; _k < _len2; i = ++_k) {
                c = _ref4[i];
                if (c === '(') {
                  parenCount++;
                }
                if (c === ')') {
                  parenCount--;
                }
                if (parenCount === 0) {
                  break;
                }
              }
              i += firstParen + 1 + 1;
              if (parenCount === 0 && /^[ \t]*;/.test(line.slice(i, +line.length + 1 || 9e9))) {
                firstSemiColon = line.indexOf(';');
                lintProblems.push({
                  type: 'transpile',
                  reporter: 'aether',
                  level: 'warning',
                  message: "Don't put a ';' after an if statement.",
                  range: [
                    {
                      ofs: offset + firstSemiColon,
                      row: row,
                      col: firstSemiColon
                    }, {
                      ofs: offset + firstSemiColon + 1,
                      row: row,
                      col: firstSemiColon + 1
                    }
                  ]
                });
                break;
              }
            }
          }
          offset += line.length + 1;
        }
      }
      return lintProblems;
    };

    JavaScript.prototype.beautify = function(rawCode, aether) {
      var ast, beautified, e;
      try {
        ast = esprima.parse(rawCode, {
          range: true,
          tokens: true,
          comment: true,
          tolerant: true
        });
        ast = escodegen.attachComments(ast, ast.comments, ast.tokens);
      } catch (_error) {
        e = _error;
        console.log('got error beautifying', e);
        ast = acorn_loose.parse_dammit(rawCode, {
          tabSize: 4,
          ecmaVersion: 5
        });
      }
      beautified = escodegen.generate(ast, {
        comment: true,
        parse: esprima.parse
      });
      return beautified;
    };

    JavaScript.prototype.usesFunctionWrapping = function() {
      return false;
    };

    JavaScript.prototype.hackCommonMistakes = function(code, aether) {
      code = code.replace(/this\.\s*?\n/g, "this.IncompleteThisReference;");
      return code;
    };

    JavaScript.prototype.parse = function(code, aether) {
      var ast, errors, x;
      ast = esprima.parse(code, {
        range: true,
        loc: true,
        tolerant: true
      });
      errors = [];
      if (ast.errors) {
        errors = (function() {
          var _i, _len, _ref3, _results;
          _ref3 = ast.errors;
          _results = [];
          for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
            x = _ref3[_i];
            if (x.description !== 'Illegal return statement') {
              _results.push(x);
            }
          }
          return _results;
        })();
        delete ast.errors;
      }
      if (errors[0]) {
        throw errors[0];
      }
      return ast;
    };

    JavaScript.prototype.parseDammit = function(code, aether) {
      var ast, fixNodeRange, lines, locToRange, posToOffset;
      ast = acorn_loose.parse_dammit(code, {
        locations: true,
        tabSize: 4,
        ecmaVersion: 5
      });
      if ((ast != null) && ast.body.length !== 1) {
        ast.body = ast.body.slice(0, 0);
      }
      ast;
      lines = code.replace(/\n/g, '\n空').split('空');
      posToOffset = function(pos) {
        return _.reduce(lines.slice(0, pos.line - 1), (function(sum, line) {
          return sum + line.length;
        }), 0) + pos.column;
      };
      locToRange = function(loc) {
        return [posToOffset(loc.start), posToOffset(loc.end)];
      };
      fixNodeRange = function(node) {
        if (node && node.loc) {
          return node.range = locToRange(node.loc);
        }
      };
      traversal.walkAST(ast, fixNodeRange);
      return ast;
    };

    return JavaScript;

  })(Language);

}).call(this);

}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../traversal":17,"./language":9,"acorn/acorn_loose":20,"escodegen":23,"esprima":39,"jshint":41,"lodash":41}],9:[function(require,module,exports){
(function (global){
(function() {
  var Language, _, _ref, _ref1, _ref2;

  _ = (_ref = (_ref1 = (_ref2 = typeof window !== "undefined" && window !== null ? window._ : void 0) != null ? _ref2 : typeof self !== "undefined" && self !== null ? self._ : void 0) != null ? _ref1 : typeof global !== "undefined" && global !== null ? global._ : void 0) != null ? _ref : require('lodash');

  module.exports = Language = (function() {
    Language.prototype.name = 'Abstract Language';

    Language.prototype.id = 'abstract-language';

    Language.prototype.parserID = 'abstract-parser';

    Language.prototype.runtimeGlobals = {};

    Language.prototype.thisValue = 'this';

    Language.prototype.thisValueAccess = 'this.';

    Language.prototype.heroValueAccess = 'hero.';

    Language.prototype.wrappedCodeIndentLen = 0;

    function Language() {}

    Language.prototype.obviouslyCannotTranspile = function(rawCode) {
      return false;
    };

    Language.prototype.hasChangedASTs = function(a, b) {
      return true;
    };

    Language.prototype.hasChangedLineNumbers = function(a, b) {
      if (!String.prototype.trimRight) {
        String.prototype.trimRight = function() {
          return String(this).replace(/\s\s*$/, '');
        };
      }
      a = a.replace(/^[ \t]+\/\/.*/g, '').trimRight();
      b = b.replace(/^[ \t]+\/\/.*/g, '').trimRight();
      return a.split('\n').length !== b.split('\n').length;
    };

    Language.prototype.replaceLoops = function(rawCode) {
      console.warn("Simple loop not implemented for " + this.name);
      return [rawCode, []];
    };

    Language.prototype.lint = function(rawCode, aether) {
      return [];
    };

    Language.prototype.beautify = function(rawCode, aether) {
      return rawCode;
    };

    Language.prototype.wrap = function(rawCode, aether) {
      if (this.wrappedCodePrefix == null) {
        this.wrappedCodePrefix = '';
      }
      if (this.wrappedCodeSuffix == null) {
        this.wrappedCodeSuffix = '';
      }
      return this.wrappedCodePrefix + rawCode + this.wrappedCodeSuffix;
    };

    Language.prototype.removeWrappedIndent = function(range) {
      return range;
    };

    Language.prototype.hackCommonMistakes = function(rawCode, aether) {
      return rawCode;
    };

    Language.prototype.parse = function(code, aether) {
      throw new Error("parse() not implemented for " + this.id + ".");
    };

    Language.prototype.convertToNativeType = function(obj) {
      return obj;
    };

    Language.prototype.usesFunctionWrapping = function() {
      return true;
    };

    Language.prototype.cloneObj = function(obj, cloneFn) {
      var k, result, v;
      if (cloneFn == null) {
        cloneFn = function(o) {
          return o;
        };
      }
      if (_.isArray(obj)) {
        result = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = obj.length; _i < _len; _i++) {
            v = obj[_i];
            _results.push(cloneFn(v));
          }
          return _results;
        })();
      } else if (_.isObject(obj)) {
        result = {};
        for (k in obj) {
          v = obj[k];
          result[k] = cloneFn(v);
        }
      } else {
        result = cloneFn(obj);
      }
      return result;
    };

    Language.prototype.pryOpenCall = function(call, val, finder) {
      return null;
    };

    Language.prototype.rewriteFunctionID = function(fid) {
      return fid;
    };

    Language.prototype.setupInterpreter = function(esper) {};

    return Language;

  })();

}).call(this);

}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"lodash":41}],10:[function(require,module,exports){
(function() {
  module.exports = {
    javascript: require('./javascript'),
    coffeescript: require('./coffeescript'),
    python: require('./python'),
    lua: require('./lua'),
    java: require('./java'),
    html: require('./html')
  };

}).call(this);

},{"./coffeescript":5,"./html":6,"./java":7,"./javascript":8,"./lua":11,"./python":12}],11:[function(require,module,exports){
(function() {
  var Language, Lua, parserHolder, ranges,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Language = require('./language');

  ranges = require('../ranges');

  parserHolder = {};

  module.exports = Lua = (function(_super) {
    __extends(Lua, _super);

    Lua.prototype.name = 'Lua';

    Lua.prototype.id = 'lua';

    Lua.prototype.parserID = 'lua2js';

    Lua.prototype.heroValueAccess = 'hero:';

    function Lua() {
      var _ref;
      Lua.__super__.constructor.apply(this, arguments);
      if (parserHolder.lua2js == null) {
        parserHolder.lua2js = (_ref = typeof self !== "undefined" && self !== null ? self.aetherLua2JS : void 0) != null ? _ref : require('lua2js');
      }
      this.runtimeGlobals = parserHolder.lua2js.stdlib;
      this.injectCode = require('aether-lang-stdlibs/lua-stdlib.ast.json');
      this.fidMap = {};
    }

    Lua.prototype.obviouslyCannotTranspile = function(rawCode) {
      return false;
    };

    Lua.prototype.callParser = function(code, loose) {
      var ast;
      ast = parserHolder.lua2js.parse(code, {
        loose: loose,
        forceVar: false,
        decorateLuaObjects: true,
        luaCalls: true,
        luaOperators: true,
        encloseWithFunctions: false
      });
      return ast;
    };

    Lua.prototype.replaceLoops = function(rawCode) {
      var a, convertedCode, line, lineNumber, lines, rangeIndex, replacedLoops, start, _i, _len, _ref;
      if (rawCode.indexOf('loop') === -1) {
        return [rawCode, []];
      }
      convertedCode = "";
      replacedLoops = [];
      rangeIndex = 0;
      lines = rawCode.split('\n');
      for (lineNumber = _i = 0, _len = lines.length; _i < _len; lineNumber = ++_i) {
        line = lines[lineNumber];
        if (line.replace(/^\s+/g, "").indexOf('loop') === 0) {
          start = line.indexOf('loop');
          a = line.split("");
          [].splice.apply(a, [start, (start + 3) - start + 1].concat(_ref = 'while true do'.split(""))), _ref;
          line = a.join("");
          replacedLoops.push(rangeIndex + start);
        }
        convertedCode += line;
        if (lineNumber !== lines.length - 1) {
          convertedCode += '\n';
        }
        rangeIndex += line.length + 1;
      }
      return [convertedCode, replacedLoops];
    };

    Lua.prototype.lint = function(rawCode, aether) {
      var ast, e, error, lintProblems, rng, _i, _len, _ref;
      lintProblems = [];
      try {
        ast = this.callParser(rawCode, true);
      } catch (_error) {
        e = _error;
        return [];
        return [
          aether.createUserCodeProblem({
            type: 'transpile',
            reporter: 'lua2js',
            error: e,
            code: rawCode,
            codePrefix: ""
          })
        ];
      }
      _ref = ast.errors;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        error = _ref[_i];
        rng = ranges.offsetsToRange(error.range[0], error.range[1], rawCode, '');
        lintProblems.push(aether.createUserCodeProblem({
          type: 'transpile',
          reporter: 'lua2js',
          message: error.msg,
          code: rawCode,
          codePrefix: "",
          range: [rng.start, rng.end]
        }));
      }
      return lintProblems;
    };

    Lua.prototype.usesFunctionWrapping = function() {
      return false;
    };

    Lua.prototype.wrapResult = function(ast, name, params) {
      ast.body.unshift({
        "type": "VariableDeclaration",
        "declarations": [
          {
            "type": "VariableDeclarator",
            "id": {
              "type": "Identifier",
              "name": "self"
            },
            "init": {
              "type": "ThisExpression"
            }
          }
        ],
        "kind": "var",
        "userCode": false
      });
      return ast;
    };

    Lua.prototype.parse = function(code, aether) {
      var ast;
      ast = Lua.prototype.wrapResult(Lua.prototype.callParser(code, false), aether.options.functionName, aether.options.functionParameters);
      return ast;
    };

    Lua.prototype.parseDammit = function(code, aether) {
      var ast, error;
      try {
        ast = Lua.prototype.wrapResult(Lua.prototype.callParser(code, true), aether.options.functionName, aether.options.functionParameters);
        return ast;
      } catch (_error) {
        error = _error;
        return {
          "type": {
            "BlockStatement": {
              body: [
                {
                  type: "EmptyStatement"
                }
              ]
            }
          }
        };
      }
    };

    Lua.prototype.pryOpenCall = function(call, val, finder) {
      var node, target;
      node = call.right;
      if (val[1] !== "__lua") {
        return null;
      }
      if (val[2] === "call") {
        target = node["arguments"][1];
        return finder(target);
      }
      if (val[2] === "makeFunction") {
        this.fidMap[node["arguments"][0].name] = finder(call.left);
      }
      return null;
    };

    Lua.prototype.rewriteFunctionID = function(fid) {
      return this.fidMap[fid] || fid;
    };

    return Lua;

  })(Language);

}).call(this);

},{"../ranges":15,"./language":9,"aether-lang-stdlibs/lua-stdlib.ast.json":21,"lua2js":41}],12:[function(require,module,exports){
(function (global){
(function() {
  var Language, Python, parserHolder, traversal, _, _ref, _ref1, _ref2,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = (_ref = (_ref1 = (_ref2 = typeof window !== "undefined" && window !== null ? window._ : void 0) != null ? _ref2 : typeof self !== "undefined" && self !== null ? self._ : void 0) != null ? _ref1 : typeof global !== "undefined" && global !== null ? global._ : void 0) != null ? _ref : require('lodash');

  parserHolder = {};

  traversal = require('../traversal');

  Language = require('./language');

  module.exports = Python = (function(_super) {
    var selfToThis;

    __extends(Python, _super);

    Python.prototype.name = 'Python';

    Python.prototype.id = 'python';

    Python.prototype.parserID = 'filbert';

    Python.prototype.thisValue = 'self';

    Python.prototype.thisValueAccess = 'self.';

    Python.prototype.heroValueAccess = 'hero.';

    Python.prototype.wrappedCodeIndentLen = 4;

    function Python() {
      var _ref3, _ref4, _ref5;
      Python.__super__.constructor.apply(this, arguments);
      this.injectCode = require('aether-lang-stdlibs/python-stdlib.ast.json');
      this.indent = Array(this.wrappedCodeIndentLen + 1).join(' ');
      if (((_ref3 = parserHolder.parser) != null ? _ref3.pythonRuntime : void 0) == null) {
        if (parserHolder.parser != null) {
          console.log('Aether python parser ONLY missing pythonRuntime');
        }
        parserHolder.parser = (_ref4 = typeof self !== "undefined" && self !== null ? self.aetherFilbert : void 0) != null ? _ref4 : require('skulpty');
        if (!parserHolder.parser.pythonRuntime) {
          console.error("Couldn't import Python runtime; our filbert import only gave us", parserHolder.parser);
        }
      }
      if (parserHolder.parserLoose == null) {
        parserHolder.parserLoose = (_ref5 = typeof self !== "undefined" && self !== null ? self.aetherFilbertLoose : void 0) != null ? _ref5 : require('skulpty');
      }
      this.runtimeGlobals = {
        __pythonRuntime: parserHolder.parser.pythonRuntime
      };
    }

    Python.prototype.hasChangedASTs = function(a, b) {
      var aAST, bAST, error, options, _ref3;
      try {
        _ref3 = [null, null], aAST = _ref3[0], bAST = _ref3[1];
        options = {
          locations: false,
          ranges: false
        };
        aAST = parserHolder.parserLoose.parse_dammit(a, options);
        bAST = parserHolder.parserLoose.parse_dammit(b, options);
        if (!(aAST && bAST)) {
          return true;
        }
        return !_.isEqual(aAST, bAST);
      } catch (_error) {
        error = _error;
        return true;
      }
    };

    Python.prototype.replaceLoops = function(rawCode) {
      var a, convertedCode, end, line, lineNumber, lines, problems, rangeIndex, start, _i, _len, _ref3;
      if (!rawCode.match(/^\s*loop/m)) {
        return [rawCode, []];
      }
      convertedCode = "";
      this.replacedLoops = [];
      problems = [];
      rangeIndex = 0;
      lines = rawCode.split('\n');
      for (lineNumber = _i = 0, _len = lines.length; _i < _len; lineNumber = ++_i) {
        line = lines[lineNumber];
        if (line.match(/^\s*loop\b/, "") && lineNumber < lines.length - 1) {
          start = line.indexOf('loop');
          end = start + 4;
          while (end < line.length && line[end].match(/\s/)) {
            end++;
          }
          if (line[end] !== ':') {
            problems.push({
              type: 'transpile',
              message: "You are missing a ':' after 'loop'. Try `loop:`",
              range: [
                {
                  row: lineNumber,
                  column: start
                }, {
                  row: lineNumber,
                  column: end
                }
              ]
            });
          }
          a = line.split("");
          [].splice.apply(a, [start, end - start + 1].concat(_ref3 = 'while True:'.split(""))), _ref3;
          line = a.join("");
          this.replacedLoops.push(rangeIndex + start);
        }
        convertedCode += line;
        if (lineNumber !== lines.length - 1) {
          convertedCode += '\n';
        }
        rangeIndex += line.length + 1;
      }
      return [convertedCode, this.replacedLoops, problems];
    };

    Python.prototype.lint = function(rawCode, aether) {
      var ast, error, problems,
        _this = this;
      problems = [];
      try {
        ast = parserHolder.parser.parse(rawCode, {
          locations: true,
          ranges: true,
          allowReturnOutsideFunction: true
        });
        traversal.walkASTCorrect(ast, function(node) {
          if (node.type !== "WhileStatement") {
            return;
          }
          if (node.body.body.length !== 0) {
            return;
          }
          return problems.push({
            type: 'transpile',
            reporter: 'aether',
            level: 'warning',
            message: "Empty loop. Put 4 spaces in front of statements inside loops.",
            range: [
              {
                ofs: node.range[0],
                row: node.loc.start.line - 1,
                col: node.loc.start.column
              }, {
                ofs: node.range[1],
                row: node.loc.end.line - 1,
                col: node.loc.end.column
              }
            ]
          });
        });
        if (problems.length === 0) {
          traversal.walkASTCorrect(ast, function(node) {
            if (node.type !== "IfStatement") {
              return;
            }
            if (node.consequent.body.length !== 0) {
              return;
            }
            return problems.push({
              type: 'transpile',
              reporter: 'aether',
              level: 'warning',
              message: "Empty if statement. Put 4 spaces in front of statements inside the if statement.",
              range: [
                {
                  ofs: node.range[0],
                  row: node.loc.start.line - 1,
                  col: node.loc.start.column
                }, {
                  ofs: node.range[1],
                  row: node.loc.end.line - 1,
                  col: node.loc.end.column
                }
              ]
            });
          });
        }
      } catch (_error) {
        error = _error;
      }
      return problems;
    };

    Python.prototype.usesFunctionWrapping = function() {
      return false;
    };

    Python.prototype.removeWrappedIndent = function(range) {
      range = _.cloneDeep(range);
      return range;
    };

    Python.prototype.parse = function(code, aether) {
      var ast;
      ast = parserHolder.parser.parse(code, {
        locations: false,
        ranges: true,
        allowReturnOutsideFunction: true
      });
      selfToThis(ast);
      return ast;
    };

    Python.prototype.parseDammit = function(code, aether) {
      var ast, error;
      try {
        ast = parserHolder.parserLoose.parse_dammit(code, {
          locations: false,
          ranges: true
        });
        selfToThis(ast);
      } catch (_error) {
        error = _error;
        ast = {
          type: "Program",
          body: [
            {
              "type": "EmptyStatement"
            }
          ]
        };
      }
      return ast;
    };

    Python.prototype.convertToNativeType = function(obj) {
      if (!(obj != null ? obj._isPython : void 0) && _.isArray(obj)) {
        parserHolder.parser.pythonRuntime.utils.convertToList(obj);
      }
      if (!(obj != null ? obj._isPython : void 0) && _.isObject(obj)) {
        parserHolder.parser.pythonRuntime.utils.convertToDict(obj);
      }
      return obj;
    };

    Python.prototype.cloneObj = function(obj, cloneFn) {
      var k, result, v, _i, _len;
      if (cloneFn == null) {
        cloneFn = function(o) {
          return o;
        };
      }
      if (_.isArray(obj)) {
        result = new parserHolder.parser.pythonRuntime.objects.list();
        for (_i = 0, _len = obj.length; _i < _len; _i++) {
          v = obj[_i];
          result.append(cloneFn(v));
        }
      } else if (_.isObject(obj)) {
        result = new parserHolder.parser.pythonRuntime.objects.dict();
        for (k in obj) {
          v = obj[k];
          result[k] = cloneFn(v);
        }
      } else {
        result = cloneFn(obj);
      }
      return result;
    };

    selfToThis = function(ast) {
      ast.body.unshift({
        "type": "VariableDeclaration",
        "declarations": [
          {
            "type": "VariableDeclarator",
            "id": {
              "type": "Identifier",
              "name": "self"
            },
            "init": {
              "type": "ThisExpression"
            }
          }
        ],
        "kind": "var",
        "userCode": false
      });
      return ast;
    };

    Python.prototype.setupInterpreter = function(esper) {
      var realm;
      realm = esper.realm;
      return realm.options.linkValueCallReturnValueWrapper = function(value) {
        var ArrayPrototype, defineProperties, gen, it, listPropertyDescriptor;
        ArrayPrototype = realm.ArrayPrototype;
        if (value.jsTypeName !== 'object') {
          return value;
        }
        if (value.clazz === 'Array') {
          defineProperties = realm.Object.getImmediate('defineProperties');
          listPropertyDescriptor = realm.globalScope.get('__pythonRuntime').getImmediate('utils').getImmediate('listPropertyDescriptor');
          gen = defineProperties.call(realm.Object, [value, listPropertyDescriptor], realm.globalScope);
          it = gen.next();
          while (!it.done) {
            it = gen.next();
          }
        }
        return value;
      };
    };

    return Python;

  })(Language);

}).call(this);

}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../traversal":17,"./language":9,"aether-lang-stdlibs/python-stdlib.ast.json":22,"lodash":41,"skulpty":44}],13:[function(require,module,exports){
(function (global){
(function() {
  var HintCreator, acceptMatchThreshold, extractRuntimeErrorDetails, extractTranspileErrorDetails, getRuntimeHint, getTranspileHint, ranges, scoreFuzziness, string_score, _, _ref, _ref1, _ref2,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  ranges = require('./ranges');

  string_score = require('string_score');

  _ = (_ref = (_ref1 = (_ref2 = typeof window !== "undefined" && window !== null ? window._ : void 0) != null ? _ref2 : typeof self !== "undefined" && self !== null ? self._ : void 0) != null ? _ref1 : typeof global !== "undefined" && global !== null ? global._ : void 0) != null ? _ref : require('lodash');

  scoreFuzziness = 0.8;

  acceptMatchThreshold = 0.5;

  module.exports.createUserCodeProblem = function(options) {
    var config, id, kind, p, reporter, _ref3, _ref4, _ref5, _ref6;
    if (options == null) {
      options = {};
    }
    if (options.aether == null) {
      options.aether = this;
    }
    if (options.type === 'transpile' && options.error) {
      extractTranspileErrorDetails(options);
    }
    if (options.type === 'runtime') {
      extractRuntimeErrorDetails(options);
    }
    reporter = options.reporter || 'unknown';
    kind = options.kind || 'Unknown';
    id = reporter + '_' + kind;
    config = ((_ref3 = options.aether) != null ? (_ref4 = _ref3.options) != null ? (_ref5 = _ref4.problems) != null ? _ref5[id] : void 0 : void 0 : void 0) || {};
    p = {
      isUserCodeProblem: true
    };
    p.id = id;
    p.level = config.level || options.level || 'error';
    p.type = options.type || 'generic';
    p.message = config.message || options.message || ("Unknown " + p.type + " " + p.level);
    p.hint = config.hint || options.hint || '';
    p.range = options.range;
    p.userInfo = (_ref6 = options.userInfo) != null ? _ref6 : {};
    return p;
  };

  extractTranspileErrorDetails = function(options) {
    var code, codePrefix, col, columnOffset, doubleVar, end, endCol, error, errorContext, languageID, line, lineOffset, originalLines, range, rng, row, start, startCol, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
    code = options.code || '';
    codePrefix = options.codePrefix || '';
    error = options.error;
    options.message = error.message;
    errorContext = options.problemContext || ((_ref3 = options.aether) != null ? (_ref4 = _ref3.options) != null ? _ref4.problemContext : void 0 : void 0);
    languageID = (_ref5 = options.aether) != null ? (_ref6 = _ref5.options) != null ? _ref6.language : void 0 : void 0;
    originalLines = code.slice(codePrefix.length).split('\n');
    lineOffset = codePrefix.split('\n').length - 1;
    switch (options.reporter) {
      case 'jshint':
        if (options.message == null) {
          options.message = error.reason;
        }
        if (options.kind == null) {
          options.kind = error.code;
        }
        if (doubleVar = options.message.match(/'([\w]+)' is already defined\./)) {
          options.hint = "Don't use the 'var' keyword for '" + doubleVar[1] + "' the second time.";
        }
        if (!options.level) {
          options.level = {
            E: 'error',
            W: 'warning',
            I: 'info'
          }[error.code[0]];
        }
        line = error.line - codePrefix.split('\n').length;
        if (line >= 0) {
          if ((_ref7 = error.evidence) != null ? _ref7.length : void 0) {
            startCol = originalLines[line].indexOf(error.evidence);
            endCol = startCol + error.evidence.length;
          } else {
            _ref8 = [0, originalLines[line].length - 1], startCol = _ref8[0], endCol = _ref8[1];
          }
          options.range = [ranges.rowColToPos(line, startCol, code, codePrefix), ranges.rowColToPos(line, endCol, code, codePrefix)];
        } else {
          options.range = [ranges.offsetToPos(0, code, codePrefix), ranges.offsetToPos(code.length - 1, code, codePrefix)];
        }
        break;
      case 'esprima':
        options.range = [ranges.rowColToPos(error.lineNumber - 1 - lineOffset, error.column - 1, code, codePrefix), ranges.rowColToPos(error.lineNumber - 1 - lineOffset, error.column, code, codePrefix)];
        break;
      case 'acorn_loose':
        null;
        break;
      case 'csredux':
        options.range = [ranges.rowColToPos(error.lineNumber - 1 - lineOffset, error.column - 1, code, codePrefix), ranges.rowColToPos(error.lineNumber - 1 - lineOffset, error.column, code, codePrefix)];
        break;
      case 'aether':
        null;
        break;
      case 'closer':
        if (error.startOffset && error.endOffset) {
          range = ranges.offsetsToRange(error.startOffset, error.endOffset, code);
          options.range = [range.start, range.end];
        }
        break;
      case 'lua2js':
        if (options.message == null) {
          options.message = error.message;
        }
        rng = ranges.offsetsToRange(error.offset, error.offset, code, '');
        options.range = [rng.start, rng.end];
        break;
      case 'filbert':
        if (error.loc) {
          columnOffset = 0;
          row = error.loc.line - lineOffset - 1;
          col = error.loc.column - columnOffset;
          start = ranges.rowColToPos(row, col, code, codePrefix);
          end = ranges.rowColToPos(row, col + error.raisedAt - error.pos, code, codePrefix);
          options.range = [start, end];
        }
        break;
      case 'iota':
        null;
        break;
      case 'cashew':
        options.range = [ranges.offsetToPos(error.range[0], code, codePrefix), ranges.offsetToPos(error.range[1], code, codePrefix)];
        options.hint = error.message;
        break;
      default:
        console.warn("Unhandled UserCodeProblem reporter", options.reporter);
    }
    options.hint = error.hint || getTranspileHint(options.message, errorContext, languageID, options.aether.raw, options.range, (_ref9 = options.aether.options) != null ? _ref9.simpleLoops : void 0);
    return options;
  };

  getTranspileHint = function(msg, context, languageID, code, range, simpleLoops) {
    var c, codeSnippet, firstQuoteIndex, hintCreator, index, lineStart, lineStartLow, nonAlphNumMatch, parens, prevIndex, quoteCharacter, _i, _len;
    if (simpleLoops == null) {
      simpleLoops = false;
    }
    if ((msg === "Unterminated string constant" || msg === "Unclosed string.") && (range != null)) {
      codeSnippet = code.substring(range[0].ofs, range[1].ofs);
      firstQuoteIndex = codeSnippet.search(/['"]/);
      if (firstQuoteIndex !== -1) {
        quoteCharacter = codeSnippet[firstQuoteIndex];
        codeSnippet = codeSnippet.slice(firstQuoteIndex + 1);
        if (nonAlphNumMatch = codeSnippet.match(/[^\w]/)) {
          codeSnippet = codeSnippet.substring(0, nonAlphNumMatch.index);
        }
        return "Missing a quotation mark. Try `" + quoteCharacter + codeSnippet + quoteCharacter + "`";
      }
    } else if (msg === "Unexpected indent") {
      if (range != null) {
        index = range[0].ofs;
        while (index > 0 && /\s/.test(code[index])) {
          index--;
        }
        if (index >= 3 && /else/.test(code.substring(index - 3, index + 1))) {
          return "You are missing a ':' after 'else'. Try `else:`";
        }
      }
      return "Code needs to line up.";
    } else if (((msg.indexOf("Unexpected token") >= 0) || (msg.indexOf("Unexpected identifier") >= 0)) && (context != null)) {
      codeSnippet = code.substring(range[0].ofs, range[1].ofs);
      lineStart = code.substring(range[0].ofs - range[0].col, range[0].ofs);
      lineStartLow = lineStart.toLowerCase();
      hintCreator = new HintCreator(context, languageID);
      if (lineStart.indexOf(hintCreator.thisValue) === 0 && lineStart.trim().length < lineStart.length) {
        if (codeSnippet.indexOf(hintCreator.thisValue) === 0) {
          return "Delete extra `" + hintCreator.thisValue + "`";
        } else {
          return hintCreator.getReferenceErrorHint(codeSnippet);
        }
      }
      prevIndex = range[0].ofs - 1;
      while (prevIndex >= 0 && /[\t ]/.test(code[prevIndex])) {
        prevIndex--;
      }
      if (prevIndex >= 0 && code[prevIndex] === ')') {
        if (codeSnippet === ')') {
          return "Delete extra `)`";
        } else if (!/^\s*$/.test(codeSnippet)) {
          return "Put each command on a separate line";
        }
      }
      parens = 0;
      for (_i = 0, _len = lineStart.length; _i < _len; _i++) {
        c = lineStart[_i];
        parens += (c === '(' ? 1 : c === ')' ? -1 : 0);
      }
      if (parens !== 0) {
        return "Your parentheses must match.";
      }
      if (simpleLoops && codeSnippet === ':' && lineStart !== lineStartLow && lineStartLow === 'loop') {
        return "Should be lowercase. Try `loop`";
      }
      if (/^\s*if /.test(lineStart)) {
        if (codeSnippet === ':') {
          return "Your if statement is missing a test clause. Try `if True:`";
        } else if (/^\s*$/.test(codeSnippet)) {
          return "You are missing a ':' after '" + lineStart + "'. Try `" + lineStart + ":`";
        }
      }
      if (/Unexpected [token|identifier]/.test(msg)) {
        return "There is a problem with your code.";
      }
    }
  };

  extractRuntimeErrorDetails = function(options) {
    var error, lineNumber, _ref3;
    if (error = options.error) {
      if (options.kind == null) {
        options.kind = error.name;
      }
      if (options.aether.options.useInterpreter) {
        options.message = error.toString();
      } else {
        options.message = error.message || error.toString();
      }
      console.log("Extracting", error);
      options.hint = error.hint || getRuntimeHint(options);
      if (options.level == null) {
        options.level = error.level;
      }
      if (options.userInfo == null) {
        options.userInfo = error.userInfo;
      }
    }
    if (options.range == null) {
      options.range = (_ref3 = options.aether) != null ? _ref3.lastStatementRange : void 0;
    }
    if (options.range != null) {
      lineNumber = options.range[0].row + 1;
      if (options.message.search(/^Line \d+/) !== -1) {
        return options.message = options.message.replace(/^Line \d+/, function(match, n) {
          return "Line " + lineNumber;
        });
      } else {
        return options.message = "Line " + lineNumber + ": " + options.message;
      }
    }
  };

  getRuntimeHint = function(options) {
    var code, context, hint, hintCreator, index, languageID, simpleLoops, _ref3, _ref4, _ref5;
    code = options.aether.raw || '';
    context = options.problemContext || ((_ref3 = options.aether.options) != null ? _ref3.problemContext : void 0);
    languageID = (_ref4 = options.aether.options) != null ? _ref4.language : void 0;
    simpleLoops = (_ref5 = options.aether.options) != null ? _ref5.simpleLoops : void 0;
    if (options.message === "RangeError: Maximum call stack size exceeded") {
      return "Did you call a function recursively?";
    }
    if (simpleLoops && languageID === 'python' && /ReferenceError: loop is not defined/.test(options.message)) {
      if (options.range != null) {
        index = options.range[1].ofs;
        while (index < code.length && /[^\n:]/.test(code[index])) {
          index++;
        }
        if (index >= code.length || code[index] === '\n') {
          hint = "You are missing a ':' after 'loop'. Try `loop:`";
        }
      } else {
        hint = "Are you missing a ':' after 'loop'? Try `loop:`";
      }
      return hint;
    }
    if (context == null) {
      return;
    }
    hintCreator = new HintCreator(context, languageID);
    return hintCreator.getHint(code, options);
  };

  HintCreator = (function() {
    function HintCreator(context, languageID) {
      this.thisValue = (function() {
        switch (languageID) {
          case 'python':
            return 'self';
          case 'cofeescript':
            return '@';
          default:
            return 'this';
        }
      })();
      this.realThisValueAccess = (function() {
        switch (languageID) {
          case 'python':
            return 'self.';
          case 'cofeescript':
            return '@';
          default:
            return 'this.';
        }
      })();
      this.thisValueAccess = (function() {
        switch (languageID) {
          case 'python':
            return 'hero.';
          case 'cofeescript':
            return 'hero.';
          case 'lua':
            return 'hero:';
          default:
            return 'hero.';
        }
      })();
      this.newVariableTemplate = (function() {
        switch (languageID) {
          case 'javascript':
            return _.template('var <%= name %> = ');
          default:
            return _.template('<%= name %> = ');
        }
      })();
      this.methodRegex = (function() {
        switch (languageID) {
          case 'python':
            return new RegExp("self\\.(\\w+)\\s*\\(");
          case 'cofeescript':
            return new RegExp("@(\\w+)\\s*\\(");
          default:
            return new RegExp("this\\.(\\w+)\\(");
        }
      })();
      this.context = context != null ? context : {};
    }

    HintCreator.prototype.getHint = function(code, _arg) {
      var aether, ast, candidatesLow, codeSnippet, error, extra, hint, idx, line, message, missingMethodMatch, missingProperty, missingReference, newName, nullObjMatch, nullObjRegex, range, s, sm, target;
      message = _arg.message, range = _arg.range, error = _arg.error, aether = _arg.aether;
      if (this.context == null) {
        return;
      }
      if (error.code === 'UndefinedVariable' && error.when === 'write' && aether.language.id === 'javascript') {
        return "Missing `var`. Use `var " + error.ident + " =` to make a new variable.";
      }
      if (error.code === "CallNonFunction") {
        ast = error.targetAst;
        if (ast.type === "MemberExpression" && !ast.computed) {
          extra = "";
          target = ast.property.name;
          if (error.candidates != null) {
            candidatesLow = (function() {
              var _i, _len, _ref3, _results;
              _ref3 = error.candidates;
              _results = [];
              for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
                s = _ref3[_i];
                _results.push(s.toLowerCase());
              }
              return _results;
            })();
            idx = candidatesLow.indexOf(target.toLowerCase());
            if (idx !== -1) {
              newName = error.targetName.replace(target, error.candidates[idx]);
              return "Look out for capitalization: `" + error.targetName + "` should be `" + newName + "`.";
            }
            sm = this.getScoreMatch(target, [
              {
                candidates: error.candidates,
                msgFormatFn: function(match) {
                  return match;
                }
              }
            ]);
            if (sm != null) {
              newName = error.targetName.replace(target, sm);
              return "Look out for spelling issues: did you mean `" + newName + "` instead of `" + error.targetName + "`?";
            }
          }
          return "`" + ast.object.srcName + "` has no method `" + ast.property.name + "`.";
        }
      }
      if ((missingMethodMatch = message.match(/has no method '(.*?)'/)) || message.match(/is not a function/) || message.match(/has no method/)) {
        if (missingMethodMatch) {
          target = missingMethodMatch[1];
        } else if (range != null) {
          codeSnippet = code.substring(range[0].ofs, range[1].ofs);
          missingMethodMatch = this.methodRegex.exec(codeSnippet);
          if (missingMethodMatch != null) {
            target = missingMethodMatch[1];
          }
        }
        hint = target != null ? this.getNoFunctionHint(target) : void 0;
      } else if (missingReference = message.match(/([^\s]+) is not defined/)) {
        hint = this.getReferenceErrorHint(missingReference[1]);
      } else if (missingProperty = message.match(/Cannot (?:read|call) (?:property|method) '([\w]+)' of (?:undefined|null)/)) {
        hint = this.getReferenceErrorHint(missingProperty[1]);
        if ((hint == null) && (range != null)) {
          line = code.substring(range[0].ofs - range[0].col, code.indexOf('\n', range[1].ofs));
          nullObjRegex = new RegExp("(\\w+)\\." + missingProperty[1]);
          if (nullObjMatch = nullObjRegex.exec(line)) {
            hint = "'" + nullObjMatch[1] + "' was null. Use a null check before accessing properties. Try `if " + nullObjMatch[1] + ":`";
          }
        }
      }
      return hint;
    };

    HintCreator.prototype.getNoFunctionHint = function(target) {
      var hint,
        _this = this;
      hint = this.getNoCaseMatch(target, this.context.thisMethods, function(match) {
        return "Uppercase or lowercase problem. Try `" + _this.thisValueAccess + match + "()`";
      });
      if (hint == null) {
        hint = this.getScoreMatch(target, [
          {
            candidates: this.context.thisMethods,
            msgFormatFn: function(match) {
              return "Try `" + _this.thisValueAccess + match + "()`";
            }
          }
        ]);
      }
      if (hint == null) {
        hint = this.getExactMatch(target, this.context.commonThisMethods, function(match) {
          return "You do not have an item equipped with the " + match + " skill.";
        });
      }
      if (hint == null) {
        hint = this.getNoCaseMatch(target, this.context.commonThisMethods, function(match) {
          return "Did you mean " + match + "? You do not have an item equipped with that skill.";
        });
      }
      if (hint == null) {
        hint = this.getScoreMatch(target, [
          {
            candidates: this.context.commonThisMethods,
            msgFormatFn: function(match) {
              return "Did you mean " + match + "? You do not have an item equipped with that skill.";
            }
          }
        ]);
      }
      if (hint == null) {
        hint = "You don't have a `" + target + "` method.";
      }
      return hint;
    };

    HintCreator.prototype.getReferenceErrorHint = function(target) {
      var hint, method, thisPrefixed, _ref3,
        _this = this;
      hint = this.getExactMatch(target, this.context.stringReferences, function(match) {
        return "Missing quotes. Try `\"" + match + "\"`";
      });
      if (hint == null) {
        hint = this.getExactMatch(target, this.context.thisMethods, function(match) {
          return "Try `" + _this.thisValueAccess + match + "()`";
        });
      }
      if (hint == null) {
        hint = this.getExactMatch(target, this.context.thisProperties, function(match) {
          return "Try `" + _this.thisValueAccess + match + "`";
        });
      }
      if ((hint == null) && target.toLowerCase() === this.thisValue.toLowerCase()) {
        hint = "Uppercase or lowercase problem. Try `" + this.thisValue + "`";
      }
      if (hint == null) {
        hint = this.getNoCaseMatch(target, this.context.stringReferences, function(match) {
          return "Missing quotes.  Try `\"" + match + "\"`";
        });
      }
      if (hint == null) {
        hint = this.getNoCaseMatch(target, this.context.thisMethods, function(match) {
          return "Try `" + _this.thisValueAccess + match + "()`";
        });
      }
      if (hint == null) {
        hint = this.getNoCaseMatch(target, this.context.thisProperties, function(match) {
          return "Try `" + _this.thisValueAccess + match + "`";
        });
      }
      if (hint == null) {
        hint = this.getScoreMatch(target, [
          {
            candidates: [this.thisValue],
            msgFormatFn: function(match) {
              return "Try `" + match + "`";
            }
          }, {
            candidates: this.context.stringReferences,
            msgFormatFn: function(match) {
              return "Missing quotes. Try `\"" + match + "\"`";
            }
          }, {
            candidates: this.context.thisMethods,
            msgFormatFn: function(match) {
              return "Try `" + _this.thisValueAccess + match + "()`";
            }
          }, {
            candidates: this.context.thisProperties,
            msgFormatFn: function(match) {
              return "Try `" + _this.thisValueAccess + match + "`";
            }
          }
        ]);
      }
      if (hint == null) {
        hint = this.getExactMatch(target, this.context.commonThisMethods, function(match) {
          return "You do not have an item equipped with the " + match + " skill.";
        });
      }
      if (hint == null) {
        hint = this.getNoCaseMatch(target, this.context.commonThisMethods, function(match) {
          return "Did you mean " + match + "? You do not have an item equipped with that skill.";
        });
      }
      if (hint == null) {
        hint = this.getScoreMatch(target, [
          {
            candidates: this.context.commonThisMethods,
            msgFormatFn: function(match) {
              return "Did you mean " + match + "? You do not have an item equipped with that skill.";
            }
          }
        ]);
      }
      if (!hint && target.toLowerCase().indexOf('enemy') > -1 && _.contains(this.context.thisMethods, 'findNearestEnemy')) {
        hint = "There is no `" + target + "`. Use `" + (this.newVariableTemplate({
          name: target
        })) + this.thisValueAccess + "findNearestEnemy()` first.";
      }
      if ((hint == null) && (((_ref3 = this.context) != null ? _ref3.thisMethods : void 0) != null)) {
        thisPrefixed = (function() {
          var _i, _len, _ref4, _results;
          _ref4 = this.context.thisMethods;
          _results = [];
          for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
            method = _ref4[_i];
            _results.push(this.thisValueAccess + method);
          }
          return _results;
        }).call(this);
        hint = this.getScoreMatch(target, [
          {
            candidates: thisPrefixed,
            msgFormatFn: function(match) {
              return "Try `" + match + "()`";
            }
          }
        ]);
      }
      return hint;
    };

    HintCreator.prototype.getExactMatch = function(target, candidates, msgFormatFn) {
      if (candidates == null) {
        return;
      }
      if (__indexOf.call(candidates, target) >= 0) {
        return msgFormatFn(target);
      }
    };

    HintCreator.prototype.getNoCaseMatch = function(target, candidates, msgFormatFn) {
      var candidatesLow, index, s;
      if (candidates == null) {
        return;
      }
      candidatesLow = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = candidates.length; _i < _len; _i++) {
          s = candidates[_i];
          _results.push(s.toLowerCase());
        }
        return _results;
      })();
      if ((index = candidatesLow.indexOf(target.toLowerCase())) >= 0) {
        return msgFormatFn(candidates[index]);
      }
    };

    HintCreator.prototype.getScoreMatch = function(target, candidatesList) {
      var closestMatch, closestScore, match, matchScore, msg, set, _i, _j, _len, _len1, _ref3, _ref4, _ref5;
      if (string_score == null) {
        return;
      }
      _ref3 = ['', 0, ''], closestMatch = _ref3[0], closestScore = _ref3[1], msg = _ref3[2];
      for (_i = 0, _len = candidatesList.length; _i < _len; _i++) {
        set = candidatesList[_i];
        if (set.candidates != null) {
          _ref4 = set.candidates;
          for (_j = 0, _len1 = _ref4.length; _j < _len1; _j++) {
            match = _ref4[_j];
            matchScore = match.score(target, scoreFuzziness);
            if (matchScore > closestScore) {
              _ref5 = [match, matchScore, set.msgFormatFn(match)], closestMatch = _ref5[0], closestScore = _ref5[1], msg = _ref5[2];
            }
          }
        }
      }
      if (closestScore >= acceptMatchThreshold) {
        return msg;
      }
    };

    return HintCreator;

  })();

}).call(this);

}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./ranges":15,"lodash":41,"string_score":45}],14:[function(require,module,exports){
(function (global){
(function() {
  var addGlobal, addedGlobals, builtinClones, builtinNames, builtinObjectNames, builtinReal, defineProperty, getOwnPropertyDescriptor, getOwnPropertyNames, globalScope, name, problems, replaceBuiltin, _, _i, _len, _ref, _ref1, _ref2;

  _ = (_ref = (_ref1 = (_ref2 = typeof window !== "undefined" && window !== null ? window._ : void 0) != null ? _ref2 : typeof self !== "undefined" && self !== null ? self._ : void 0) != null ? _ref1 : typeof global !== "undefined" && global !== null ? global._ : void 0) != null ? _ref : require('lodash');

  problems = require('./problems');

  module.exports.builtinObjectNames = builtinObjectNames = ['Object', 'Function', 'Array', 'String', 'Boolean', 'Number', 'Date', 'RegExp', 'Math', 'JSON', 'Error', 'EvalError', 'RangeError', 'ReferenceError', 'SyntaxError', 'TypeError', 'URIError'];

  module.exports.builtinNames = builtinNames = builtinObjectNames.concat(['NaN', 'Infinity', 'undefined', 'parseInt', 'parseFloat', 'isNaN', 'isFinite', 'decodeURI', 'decodeURIComponent', 'encodeURI', 'encodeURIComponent']);

  getOwnPropertyNames = Object.getOwnPropertyNames;

  getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

  defineProperty = Object.defineProperty.bind(Object);

  globalScope = (function() {
    return this;
  })();

  builtinClones = [];

  builtinReal = [];

  module.exports.addedGlobals = addedGlobals = {};

  module.exports.addGlobal = addGlobal = function(name, value) {
    if (addedGlobals[name] != null) {
      return;
    }
    if (value == null) {
      value = globalScope[name];
    }
    return addedGlobals[name] = value;
  };

  for (_i = 0, _len = builtinObjectNames.length; _i < _len; _i++) {
    name = builtinObjectNames[_i];
    addGlobal(name);
  }

  module.exports.replaceBuiltin = replaceBuiltin = function(name, value) {};

}).call(this);

}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./problems":13,"lodash":41}],15:[function(require,module,exports){
(function() {
  var buildRowOffsets, lastRowOffsets, lastRowOffsetsPrefix, lastRowOffsetsSource, locToPos, locsToRange, offsetToPos, offsetToRow, offsetsToRange, rowColToPos, rowColsToRange, stringifyPos, stringifyRange;

  module.exports.offsetToPos = offsetToPos = function(offset, source, prefix) {
    var col, row, rowOffsets;
    if (prefix == null) {
      prefix = '';
    }
    rowOffsets = buildRowOffsets(source, prefix);
    offset -= prefix.length;
    row = offsetToRow(offset, rowOffsets);
    col = offset - rowOffsets[row];
    return {
      ofs: offset,
      row: row,
      col: col
    };
  };

  module.exports.offsetsToRange = offsetsToRange = function(start, end, source, prefix) {
    if (prefix == null) {
      prefix = '';
    }
    return {
      start: offsetToPos(start, source, prefix),
      end: offsetToPos(end, source, prefix)
    };
  };

  module.exports.rowColToPos = rowColToPos = function(row, col, source, prefix) {
    var offset, rowOffsets;
    if (prefix == null) {
      prefix = '';
    }
    rowOffsets = buildRowOffsets(source, prefix);
    offset = rowOffsets[row] + col;
    return {
      ofs: offset,
      row: row,
      col: col
    };
  };

  module.exports.rowColsToRange = rowColsToRange = function(start, end, source, prefix) {
    if (prefix == null) {
      prefix = '';
    }
    return {
      start: rowColToPos(start.row, start.col, source, prefix),
      end: rowColToPos(end.row, end.col, source, prefix)
    };
  };

  module.exports.locToPos = locToPos = function(loc, source, prefix) {
    if (prefix == null) {
      prefix = '';
    }
    return rowColToPos(loc.line, loc.column, source, prefix);
  };

  module.exports.locsToRange = locsToRange = function(start, end, source, prefix) {
    if (prefix == null) {
      prefix = '';
    }
    return {
      start: locToPos(start, source, prefix),
      end: locToPos(end, source, prefix)
    };
  };

  module.exports.stringifyPos = stringifyPos = function(pos) {
    return "{ofs: " + pos.ofs + ", row: " + pos.row + ", col: " + pos.col + "}";
  };

  module.exports.stringifyRange = stringifyRange = function(start, end) {
    return "[" + (stringifyPos(start)) + ", " + (stringifyPos(end)) + "]";
  };

  lastRowOffsets = null;

  lastRowOffsetsSource = null;

  lastRowOffsetsPrefix = null;

  buildRowOffsets = function(source, prefix) {
    var c, offset, rowOffsets, _i, _len, _ref;
    if (prefix == null) {
      prefix = '';
    }
    if (source === lastRowOffsetsSource && prefix === lastRowOffsetsPrefix) {
      return lastRowOffsets;
    }
    rowOffsets = [0];
    _ref = source.substr(prefix.length);
    for (offset = _i = 0, _len = _ref.length; _i < _len; offset = ++_i) {
      c = _ref[offset];
      if (c === '\n') {
        rowOffsets.push(offset + 1);
      }
    }
    lastRowOffsets = rowOffsets;
    lastRowOffsetsSource = source;
    lastRowOffsetsPrefix = prefix;
    return rowOffsets;
  };

  offsetToRow = function(offset, rowOffsets) {
    var alen, hi, lo, mid;
    alen = rowOffsets.length;
    if (offset <= 0) {
      return 0;
    }
    if (offset >= rowOffsets[alen - 1]) {
      return alen - 1;
    }
    lo = 0;
    hi = alen - 1;
    while (lo < hi) {
      mid = ~~((hi + lo) / 2);
      if (offset >= rowOffsets[mid] && offset < rowOffsets[mid + 1]) {
        return mid;
      }
      if (offset < rowOffsets[mid]) {
        hi = mid;
      } else {
        lo = mid;
      }
    }
    throw new Error("Bug in offsetToRow()");
  };

}).call(this);

},{}],16:[function(require,module,exports){
(function (global){
(function() {
  var S, getFunctionNestingLevel, getImmediateParentOfType, getParents, getParentsOfTypes, makeCheckIncompleteMembers, makeCheckThisKeywords, makeGatherNodeRanges, ranges, statements, _, _ref, _ref1, _ref2,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  _ = (_ref = (_ref1 = (_ref2 = typeof window !== "undefined" && window !== null ? window._ : void 0) != null ? _ref2 : typeof self !== "undefined" && self !== null ? self._ : void 0) != null ? _ref1 : typeof global !== "undefined" && global !== null ? global._ : void 0) != null ? _ref : require('lodash');

  S = require('esprima').Syntax;

  ranges = require('./ranges');

  statements = [S.EmptyStatement, S.ExpressionStatement, S.BreakStatement, S.ContinueStatement, S.DebuggerStatement, S.DoWhileStatement, S.ForStatement, S.FunctionDeclaration, S.ClassDeclaration, S.IfStatement, S.ReturnStatement, S.SwitchStatement, S.ThrowStatement, S.TryStatement, S.VariableStatement, S.WhileStatement, S.WithStatement, S.VariableDeclaration];

  getParents = function(node) {
    var parents;
    parents = [];
    while (node.parent) {
      parents.push(node = node.parent);
    }
    return parents;
  };

  getParentsOfTypes = function(node, types) {
    return _.filter(getParents(node), function(elem) {
      var _ref3;
      return _ref3 = elem.type, __indexOf.call(types, _ref3) >= 0;
    });
  };

  getFunctionNestingLevel = function(node) {
    return getParentsOfTypes(node, [S.FunctionExpression]).length;
  };

  getImmediateParentOfType = function(node, type) {
    while (node) {
      if (node.type === type) {
        return node;
      }
      node = node.parent;
    }
  };

  module.exports.makeGatherNodeRanges = makeGatherNodeRanges = function(nodeRanges, code, codePrefix) {
    return function(node) {
      if (!node.range) {
        return;
      }
      node.originalRange = ranges.offsetsToRange(node.range[0], node.range[1], code, codePrefix);
      if (node.source) {
        node.originalSource = node.source();
      } else {

      }
      return nodeRanges.push(node);
    };
  };

  module.exports.makeCheckThisKeywords = makeCheckThisKeywords = function(globals, varNames, language, problemContext) {
    return function(node) {
      var hint, message, p, param, problem, range, v, _i, _j, _k, _len, _len1, _len2, _ref3, _ref4, _ref5, _ref6, _results;
      if (node.type === S.VariableDeclarator) {
        return varNames[node.id.name] = true;
      } else if (node.type === S.AssignmentExpression) {
        return varNames[node.left.name] = true;
      } else if (node.type === S.FunctionDeclaration || node.type === S.FunctionExpression) {
        if (node.id != null) {
          varNames[node.id.name] = true;
        }
        _ref3 = node.params;
        _results = [];
        for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
          param = _ref3[_i];
          _results.push(varNames[param.name] = true);
        }
        return _results;
      } else if (node.type === S.CallExpression) {
        v = node;
        while ((_ref4 = v.type) === S.CallExpression || _ref4 === S.MemberExpression) {
          v = v.object != null ? v.object : v.callee;
        }
        v = v.name;
        if (v && !varNames[v] && !(__indexOf.call(globals, v) >= 0)) {
          if (!problemContext) {
            return;
          }
          _ref5 = getParentsOfTypes(node, [S.FunctionDeclaration, S.FunctionExpression, S.VariableDeclarator, S.AssignmentExpression]);
          for (_j = 0, _len1 = _ref5.length; _j < _len1; _j++) {
            p = _ref5[_j];
            if (p.id != null) {
              varNames[p.id.name] = true;
            }
            if (p.left != null) {
              varNames[p.left.name] = true;
            }
            if (p.params != null) {
              _ref6 = p.params;
              for (_k = 0, _len2 = _ref6.length; _k < _len2; _k++) {
                param = _ref6[_k];
                varNames[param.name] = true;
              }
            }
            if (varNames[v] === true) {
              return;
            }
          }
          if (/\$$/.test(v)) {
            return;
          }
          if (((problemContext != null ? problemContext.thisMethods : void 0) != null) && __indexOf.call(problemContext.thisMethods, v) < 0) {
            return;
          }
          message = "Missing `hero` keyword; should be `" + language.heroValueAccess + v + "`.";
          hint = "There is no function `" + v + "`, but `hero` has a method `" + v + "`.";
          if (node.originalRange) {
            range = language.removeWrappedIndent([node.originalRange.start, node.originalRange.end]);
          }
          problem = this.createUserCodeProblem({
            type: 'transpile',
            reporter: 'aether',
            kind: 'MissingThis',
            message: message,
            hint: hint,
            range: range
          });
          return this.addProblem(problem);
        }
      }
    };
  };

  module.exports.makeCheckIncompleteMembers = makeCheckIncompleteMembers = function(language, problemContext) {
    return function(node) {
      var exp, hint, kind, m, problem, range, _ref3, _ref4;
      if (node.type === 'ExpressionStatement') {
        exp = node.expression;
        if (exp.type === 'MemberExpression') {
          if (exp.property.name === "IncompleteThisReference") {
            kind = 'IncompleteThis';
            m = "this.what? (Check available spells below.)";
            return hint = '';
          } else if (exp.object.source() === language.thisValue) {
            kind = 'NoEffect';
            m = "" + (exp.source()) + " has no effect.";
            if (((problemContext != null ? problemContext.thisMethods : void 0) != null) && (_ref3 = exp.property.name, __indexOf.call(problemContext.thisMethods, _ref3) >= 0)) {
              m += " It needs parentheses: " + (exp.source()) + "()";
            } else if (((problemContext != null ? problemContext.commonThisMethods : void 0) != null) && (_ref4 = exp.property.name, __indexOf.call(problemContext.commonThisMethods, _ref4) >= 0)) {
              m = "" + (exp.source()) + " is not currently available.";
            } else {
              hint = "Is it a method? Those need parentheses: " + (exp.source()) + "()";
            }
            if (node.originalRange) {
              range = language.removeWrappedIndent([node.originalRange.start, node.originalRange.end]);
            }
            problem = this.createUserCodeProblem({
              type: 'transpile',
              reporter: 'aether',
              message: m,
              kind: kind,
              hint: hint,
              range: range
            });
            return this.addProblem(problem);
          }
        }
      }
    };
  };

}).call(this);

}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./ranges":15,"esprima":39,"lodash":41}],17:[function(require,module,exports){
(function (global){
(function() {
  var insertHelpers, morphAST, walkAST, walkASTCorrect, _, _ref, _ref1, _ref2;

  _ = (_ref = (_ref1 = (_ref2 = typeof window !== "undefined" && window !== null ? window._ : void 0) != null ? _ref2 : typeof self !== "undefined" && self !== null ? self._ : void 0) != null ? _ref1 : typeof global !== "undefined" && global !== null ? global._ : void 0) != null ? _ref : require('lodash');

  module.exports.walkAST = walkAST = function(node, fn) {
    var child, grandchild, key, _i, _len, _results;
    _results = [];
    for (key in node) {
      child = node[key];
      if (_.isArray(child)) {
        for (_i = 0, _len = child.length; _i < _len; _i++) {
          grandchild = child[_i];
          if (_.isString(grandchild != null ? grandchild.type : void 0)) {
            walkAST(grandchild, fn);
          }
        }
      } else if (_.isString(child != null ? child.type : void 0)) {
        walkAST(child, fn);
      }
      _results.push(fn(child));
    }
    return _results;
  };

  module.exports.walkASTCorrect = walkASTCorrect = function(node, fn) {
    var child, grandchild, key, _i, _len;
    for (key in node) {
      child = node[key];
      if (_.isArray(child)) {
        for (_i = 0, _len = child.length; _i < _len; _i++) {
          grandchild = child[_i];
          if (_.isString(grandchild != null ? grandchild.type : void 0)) {
            walkASTCorrect(grandchild, fn);
          }
        }
      } else if (_.isString(child != null ? child.type : void 0)) {
        walkASTCorrect(child, fn);
      }
    }
    return fn(node);
  };

  module.exports.morphAST = morphAST = function(source, transforms, parseFn, aether) {
    var ast, chunks, morphWalk;
    chunks = source.split('');
    ast = parseFn(source, aether);
    morphWalk = function(node, parent) {
      var child, grandchild, key, transform, _i, _j, _len, _len1, _results;
      insertHelpers(node, parent, chunks);
      for (key in node) {
        child = node[key];
        if (key === 'parent' || key === 'leadingComments') {
          continue;
        }
        if (_.isArray(child)) {
          for (_i = 0, _len = child.length; _i < _len; _i++) {
            grandchild = child[_i];
            if (_.isString(grandchild != null ? grandchild.type : void 0)) {
              morphWalk(grandchild, node);
            }
          }
        } else if (_.isString(child != null ? child.type : void 0)) {
          morphWalk(child, node);
        }
      }
      _results = [];
      for (_j = 0, _len1 = transforms.length; _j < _len1; _j++) {
        transform = transforms[_j];
        _results.push(transform(node, aether));
      }
      return _results;
    };
    morphWalk(ast, void 0);
    return chunks.join('');
  };

  insertHelpers = function(node, parent, chunks) {
    var update;
    if (!node.range) {
      return;
    }
    node.parent = parent;
    node.source = function() {
      return chunks.slice(node.range[0], node.range[1]).join('');
    };
    update = function(s) {
      var i, _i, _ref3, _ref4, _results;
      chunks[node.range[0]] = s;
      _results = [];
      for (i = _i = _ref3 = node.range[0] + 1, _ref4 = node.range[1]; _ref3 <= _ref4 ? _i < _ref4 : _i > _ref4; i = _ref3 <= _ref4 ? ++_i : --_i) {
        _results.push(chunks[i] = '');
      }
      return _results;
    };
    if (_.isObject(node.update)) {
      _.extend(update, node.update);
    }
    return node.update = update;
  };

}).call(this);

}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"lodash":41}],18:[function(require,module,exports){
(function() {
  var tv4;

  tv4 = require('tv4').tv4;

  module.exports = function(options) {
    return tv4.validateMultiple(options, {
      "type": "object",
      additionalProperties: false,
      properties: {
        thisValue: {
          required: false
        },
        globals: {
          type: 'array'
        },
        functionName: {
          type: 'string'
        },
        functionParameters: {
          type: ['array', 'undefined']
        },
        yieldAutomatically: {
          type: 'boolean'
        },
        yieldConditionally: {
          type: 'boolean'
        },
        executionCosts: {
          type: 'object'
        },
        executionLimit: {
          type: 'integer',
          minimum: 0,
          description: 'If given and non-zero, user code will throw execution exceeded errors after using too many statements.'
        },
        language: {
          type: 'string',
          description: "Input language",
          minLength: 1,
          'enum': ['javascript', 'coffeescript', 'python', 'lua', 'java', 'html']
        },
        languageVersion: {
          type: ['string', 'null', 'undefined']
        },
        problems: {
          type: ['object', 'undefined']
        },
        problemContext: {
          type: ['object', 'null', 'undefined']
        },
        includeFlow: {
          type: 'boolean',
          "default": true,
          description: "Whether to record control flow and variable values as user code executes."
        },
        noSerializationInFlow: {
          type: 'boolean',
          "default": false,
          description: "Whether to skip serializing variable values when recording variables in flow."
        },
        noVariablesInFlow: {
          type: 'boolean',
          "default": false,
          description: "Whether to skip capturing variable values at all when instrumenting flow."
        },
        skipDuplicateUserInfoInFlow: {
          type: 'boolean',
          "default": false,
          description: "Whether to skip recording calls with the same userInfo as the previous call when instrumenting flow."
        },
        includeMetrics: {
          type: 'boolean',
          "default": true
        },
        includeStyle: {
          type: 'boolean',
          "default": true
        },
        protectAPI: {
          type: ['boolean', 'null', 'undefined'],
          "default": false
        },
        simpleLoops: {
          type: 'boolean',
          "default": false,
          description: "Whether simple loops will be supported, per language.  E.g. 'loop()' will be transpiled as 'while(true)'."
        },
        protectBuiltins: {
          type: 'boolean',
          "default": true,
          description: 'Whether builtins will be protected and restored for enhanced security.'
        },
        whileTrueAutoYield: {
          type: 'boolean',
          "default": false,
          description: "Make while True loops automatically yield if no other yields"
        },
        useInterpreter: {
          type: ['boolean', 'null', 'undefined'],
          "default": true
        },
        debug: {
          type: ['boolean'],
          "default": false
        }
      }
    });
  };

}).call(this);

},{"tv4":46}],19:[function(require,module,exports){
// Acorn is a tiny, fast JavaScript parser written in JavaScript.
//
// Acorn was written by Marijn Haverbeke and released under an MIT
// license. The Unicode regexps (for identifiers and whitespace) were
// taken from [Esprima](http://esprima.org) by Ariya Hidayat.
//
// Git repositories for Acorn are available at
//
//     http://marijnhaverbeke.nl/git/acorn
//     https://github.com/marijnh/acorn.git
//
// Please use the [github bug tracker][ghbt] to report issues.
//
// [ghbt]: https://github.com/marijnh/acorn/issues
//
// This file defines the main parser interface. The library also comes
// with a [error-tolerant parser][dammit] and an
// [abstract syntax tree walker][walk], defined in other files.
//
// [dammit]: acorn_loose.js
// [walk]: util/walk.js

(function(mod) {
  if (typeof exports == "object" && typeof module == "object") return mod(exports); // CommonJS
  if (typeof define == "function" && define.amd) return define(["exports"], mod); // AMD
  mod(this.acorn || (this.acorn = {})); // Plain browser env
})(function(exports) {
  "use strict";

  exports.version = "0.3.1";

  // The main exported interface (under `self.acorn` when in the
  // browser) is a `parse` function that takes a code string and
  // returns an abstract syntax tree as specified by [Mozilla parser
  // API][api], with the caveat that the SpiderMonkey-specific syntax
  // (`let`, `yield`, inline XML, etc) is not recognized.
  //
  // [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API

  var options, input, inputLen, sourceFile;

  exports.parse = function(inpt, opts) {
    input = String(inpt); inputLen = input.length;
    setOptions(opts);
    initTokenState();
    return parseTopLevel(options.program);
  };

  // A second optional argument can be given to further configure
  // the parser process. These options are recognized:

  var defaultOptions = exports.defaultOptions = {
    // `ecmaVersion` indicates the ECMAScript version to parse. Must
    // be either 3 or 5. This
    // influences support for strict mode, the set of reserved words, and
    // support for getters and setter.
    ecmaVersion: 5,
    // Turn on `strictSemicolons` to prevent the parser from doing
    // automatic semicolon insertion.
    strictSemicolons: false,
    // When `allowTrailingCommas` is false, the parser will not allow
    // trailing commas in array and object literals.
    allowTrailingCommas: true,
    // By default, reserved words are not enforced. Enable
    // `forbidReserved` to enforce them.
    forbidReserved: false,
    // When `locations` is on, `loc` properties holding objects with
    // `start` and `end` properties in `{line, column}` form (with
    // line being 1-based and column 0-based) will be attached to the
    // nodes.
    locations: false,
    // A function can be passed as `onComment` option, which will
    // cause Acorn to call that function with `(block, text, start,
    // end)` parameters whenever a comment is skipped. `block` is a
    // boolean indicating whether this is a block (`/* */`) comment,
    // `text` is the content of the comment, and `start` and `end` are
    // character offsets that denote the start and end of the comment.
    // When the `locations` option is on, two more parameters are
    // passed, the full `{line, column}` locations of the start and
    // end of the comments.
    onComment: null,
    // Nodes have their start and end characters offsets recorded in
    // `start` and `end` properties (directly on the node, rather than
    // the `loc` object, which holds line/column data. To also add a
    // [semi-standardized][range] `range` property holding a `[start,
    // end]` array with the same numbers, set the `ranges` option to
    // `true`.
    //
    // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678
    ranges: false,
    // It is possible to parse multiple files into a single AST by
    // passing the tree produced by parsing the first file as
    // `program` option in subsequent parses. This will add the
    // toplevel forms of the parsed file to the `Program` (top) node
    // of an existing parse tree.
    program: null,
    // When `location` is on, you can pass this to record the source
    // file in every node's `loc` object.
    sourceFile: null
  };

  function setOptions(opts) {
    options = opts || {};
    for (var opt in defaultOptions) if (!Object.prototype.hasOwnProperty.call(options, opt))
      options[opt] = defaultOptions[opt];
    sourceFile = options.sourceFile || null;
  }

  // The `getLineInfo` function is mostly useful when the
  // `locations` option is off (for performance reasons) and you
  // want to find the line/column position for a given character
  // offset. `input` should be the code string that the offset refers
  // into.

  var getLineInfo = exports.getLineInfo = function(input, offset) {
    for (var line = 1, cur = 0;;) {
      lineBreak.lastIndex = cur;
      var match = lineBreak.exec(input);
      if (match && match.index < offset) {
        ++line;
        cur = match.index + match[0].length;
      } else break;
    }
    return {line: line, column: offset - cur};
  };

  // Acorn is organized as a tokenizer and a recursive-descent parser.
  // The `tokenize` export provides an interface to the tokenizer.
  // Because the tokenizer is optimized for being efficiently used by
  // the Acorn parser itself, this interface is somewhat crude and not
  // very modular. Performing another parse or call to `tokenize` will
  // reset the internal state, and invalidate existing tokenizers.

  exports.tokenize = function(inpt, opts) {
    input = String(inpt); inputLen = input.length;
    setOptions(opts);
    initTokenState();

    var t = {};
    function getToken(forceRegexp) {
      readToken(forceRegexp);
      t.start = tokStart; t.end = tokEnd;
      t.startLoc = tokStartLoc; t.endLoc = tokEndLoc;
      t.type = tokType; t.value = tokVal;
      return t;
    }
    getToken.jumpTo = function(pos, reAllowed) {
      tokPos = pos;
      if (options.locations) {
        tokCurLine = tokLineStart = lineBreak.lastIndex = 0;
        var match;
        while ((match = lineBreak.exec(input)) && match.index < pos) {
          ++tokCurLine;
          tokLineStart = match.index + match[0].length;
        }
      }
      var ch = input.charAt(pos - 1);
      tokRegexpAllowed = reAllowed;
      skipSpace();
    };
    return getToken;
  };

  // State is kept in (closure-)global variables. We already saw the
  // `options`, `input`, and `inputLen` variables above.

  // The current position of the tokenizer in the input.

  var tokPos;

  // The start and end offsets of the current token.

  var tokStart, tokEnd;

  // When `options.locations` is true, these hold objects
  // containing the tokens start and end line/column pairs.

  var tokStartLoc, tokEndLoc;

  // The type and value of the current token. Token types are objects,
  // named by variables against which they can be compared, and
  // holding properties that describe them (indicating, for example,
  // the precedence of an infix operator, and the original name of a
  // keyword token). The kind of value that's held in `tokVal` depends
  // on the type of the token. For literals, it is the literal value,
  // for operators, the operator name, and so on.

  var tokType, tokVal;

  // Interal state for the tokenizer. To distinguish between division
  // operators and regular expressions, it remembers whether the last
  // token was one that is allowed to be followed by an expression.
  // (If it is, a slash is probably a regexp, if it isn't it's a
  // division operator. See the `parseStatement` function for a
  // caveat.)

  var tokRegexpAllowed;

  // When `options.locations` is true, these are used to keep
  // track of the current line, and know when a new line has been
  // entered.

  var tokCurLine, tokLineStart;

  // These store the position of the previous token, which is useful
  // when finishing a node and assigning its `end` position.

  var lastStart, lastEnd, lastEndLoc;

  // This is the parser's state. `inFunction` is used to reject
  // `return` statements outside of functions, `labels` to verify that
  // `break` and `continue` have somewhere to jump to, and `strict`
  // indicates whether strict mode is on.

  var inFunction, labels, strict;

  // This function is used to raise exceptions on parse errors. It
  // takes an offset integer (into the current `input`) to indicate
  // the location of the error, attaches the position to the end
  // of the error message, and then raises a `SyntaxError` with that
  // message.

  function raise(pos, message) {
    var loc = getLineInfo(input, pos);
    message += " (" + loc.line + ":" + loc.column + ")";
    var err = new SyntaxError(message);
    err.pos = pos; err.loc = loc; err.raisedAt = tokPos;
    throw err;
  }

  // ## Token types

  // The assignment of fine-grained, information-carrying type objects
  // allows the tokenizer to store the information it has about a
  // token in a way that is very cheap for the parser to look up.

  // All token type variables start with an underscore, to make them
  // easy to recognize.

  // These are the general types. The `type` property is only used to
  // make them recognizeable when debugging.

  var _num = {type: "num"}, _regexp = {type: "regexp"}, _string = {type: "string"};
  var _name = {type: "name"}, _eof = {type: "eof"};

  // Keyword tokens. The `keyword` property (also used in keyword-like
  // operators) indicates that the token originated from an
  // identifier-like word, which is used when parsing property names.
  //
  // The `beforeExpr` property is used to disambiguate between regular
  // expressions and divisions. It is set on all token types that can
  // be followed by an expression (thus, a slash after them would be a
  // regular expression).
  //
  // `isLoop` marks a keyword as starting a loop, which is important
  // to know when parsing a label, in order to allow or disallow
  // continue jumps to that label.

  var _break = {keyword: "break"}, _case = {keyword: "case", beforeExpr: true}, _catch = {keyword: "catch"};
  var _continue = {keyword: "continue"}, _debugger = {keyword: "debugger"}, _default = {keyword: "default"};
  var _do = {keyword: "do", isLoop: true}, _else = {keyword: "else", beforeExpr: true};
  var _finally = {keyword: "finally"}, _for = {keyword: "for", isLoop: true}, _function = {keyword: "function"};
  var _if = {keyword: "if"}, _return = {keyword: "return", beforeExpr: true}, _switch = {keyword: "switch"};
  var _throw = {keyword: "throw", beforeExpr: true}, _try = {keyword: "try"}, _var = {keyword: "var"};
  var _while = {keyword: "while", isLoop: true}, _with = {keyword: "with"}, _new = {keyword: "new", beforeExpr: true};
  var _this = {keyword: "this"};

  // The keywords that denote values.

  var _null = {keyword: "null", atomValue: null}, _true = {keyword: "true", atomValue: true};
  var _false = {keyword: "false", atomValue: false};

  // Some keywords are treated as regular operators. `in` sometimes
  // (when parsing `for`) needs to be tested against specifically, so
  // we assign a variable name to it for quick comparing.

  var _in = {keyword: "in", binop: 7, beforeExpr: true};

  // Map keyword names to token types.

  var keywordTypes = {"break": _break, "case": _case, "catch": _catch,
                      "continue": _continue, "debugger": _debugger, "default": _default,
                      "do": _do, "else": _else, "finally": _finally, "for": _for,
                      "function": _function, "if": _if, "return": _return, "switch": _switch,
                      "throw": _throw, "try": _try, "var": _var, "while": _while, "with": _with,
                      "null": _null, "true": _true, "false": _false, "new": _new, "in": _in,
                      "instanceof": {keyword: "instanceof", binop: 7, beforeExpr: true}, "this": _this,
                      "typeof": {keyword: "typeof", prefix: true, beforeExpr: true},
                      "void": {keyword: "void", prefix: true, beforeExpr: true},
                      "delete": {keyword: "delete", prefix: true, beforeExpr: true}};

  // Punctuation token types. Again, the `type` property is purely for debugging.

  var _bracketL = {type: "[", beforeExpr: true}, _bracketR = {type: "]"}, _braceL = {type: "{", beforeExpr: true};
  var _braceR = {type: "}"}, _parenL = {type: "(", beforeExpr: true}, _parenR = {type: ")"};
  var _comma = {type: ",", beforeExpr: true}, _semi = {type: ";", beforeExpr: true};
  var _colon = {type: ":", beforeExpr: true}, _dot = {type: "."}, _question = {type: "?", beforeExpr: true};

  // Operators. These carry several kinds of properties to help the
  // parser use them properly (the presence of these properties is
  // what categorizes them as operators).
  //
  // `binop`, when present, specifies that this operator is a binary
  // operator, and will refer to its precedence.
  //
  // `prefix` and `postfix` mark the operator as a prefix or postfix
  // unary operator. `isUpdate` specifies that the node produced by
  // the operator should be of type UpdateExpression rather than
  // simply UnaryExpression (`++` and `--`).
  //
  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as
  // binary operators with a very low precedence, that should result
  // in AssignmentExpression nodes.

  var _slash = {binop: 10, beforeExpr: true}, _eq = {isAssign: true, beforeExpr: true};
  var _assign = {isAssign: true, beforeExpr: true}, _plusmin = {binop: 9, prefix: true, beforeExpr: true};
  var _incdec = {postfix: true, prefix: true, isUpdate: true}, _prefix = {prefix: true, beforeExpr: true};
  var _bin1 = {binop: 1, beforeExpr: true}, _bin2 = {binop: 2, beforeExpr: true};
  var _bin3 = {binop: 3, beforeExpr: true}, _bin4 = {binop: 4, beforeExpr: true};
  var _bin5 = {binop: 5, beforeExpr: true}, _bin6 = {binop: 6, beforeExpr: true};
  var _bin7 = {binop: 7, beforeExpr: true}, _bin8 = {binop: 8, beforeExpr: true};
  var _bin10 = {binop: 10, beforeExpr: true};

  // Provide access to the token types for external users of the
  // tokenizer.

  exports.tokTypes = {bracketL: _bracketL, bracketR: _bracketR, braceL: _braceL, braceR: _braceR,
                      parenL: _parenL, parenR: _parenR, comma: _comma, semi: _semi, colon: _colon,
                      dot: _dot, question: _question, slash: _slash, eq: _eq, name: _name, eof: _eof,
                      num: _num, regexp: _regexp, string: _string};
  for (var kw in keywordTypes) exports.tokTypes["_" + kw] = keywordTypes[kw];

  // This is a trick taken from Esprima. It turns out that, on
  // non-Chrome browsers, to check whether a string is in a set, a
  // predicate containing a big ugly `switch` statement is faster than
  // a regular expression, and on Chrome the two are about on par.
  // This function uses `eval` (non-lexical) to produce such a
  // predicate from a space-separated string of words.
  //
  // It starts by sorting the words by length.

  function makePredicate(words) {
    words = words.split(" ");
    var f = "", cats = [];
    out: for (var i = 0; i < words.length; ++i) {
      for (var j = 0; j < cats.length; ++j)
        if (cats[j][0].length == words[i].length) {
          cats[j].push(words[i]);
          continue out;
        }
      cats.push([words[i]]);
    }
    function compareTo(arr) {
      if (arr.length == 1) return f += "return str === " + JSON.stringify(arr[0]) + ";";
      f += "switch(str){";
      for (var i = 0; i < arr.length; ++i) f += "case " + JSON.stringify(arr[i]) + ":";
      f += "return true}return false;";
    }

    // When there are more than three length categories, an outer
    // switch first dispatches on the lengths, to save on comparisons.

    if (cats.length > 3) {
      cats.sort(function(a, b) {return b.length - a.length;});
      f += "switch(str.length){";
      for (var i = 0; i < cats.length; ++i) {
        var cat = cats[i];
        f += "case " + cat[0].length + ":";
        compareTo(cat);
      }
      f += "}";

    // Otherwise, simply generate a flat `switch` statement.

    } else {
      compareTo(words);
    }
    return new Function("str", f);
  }

  // The ECMAScript 3 reserved word list.

  var isReservedWord3 = makePredicate("abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile");

  // ECMAScript 5 reserved words.

  var isReservedWord5 = makePredicate("class enum extends super const export import");

  // The additional reserved words in strict mode.

  var isStrictReservedWord = makePredicate("implements interface let package private protected public static yield");

  // The forbidden variable names in strict mode.

  var isStrictBadIdWord = makePredicate("eval arguments");

  // And the keywords.

  var isKeyword = makePredicate("break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this");

  // ## Character categories

  // Big ugly regular expressions that match characters in the
  // whitespace, identifier, and identifier-start categories. These
  // are only applied when a character is found to actually have a
  // code point above 128.

  var nonASCIIwhitespace = /[\u1680\u180e\u2000-\u200a\u2028\u2029\u202f\u205f\u3000\ufeff]/;
  var nonASCIIidentifierStartChars = "\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0\u08a2-\u08ac\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097f\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58\u0c59\u0c60\u0c61\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d60\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191c\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19c1-\u19c7\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua697\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa80-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc";
  var nonASCIIidentifierChars = "\u0300-\u036f\u0483-\u0487\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u0610-\u061a\u0620-\u0649\u0672-\u06d3\u06e7-\u06e8\u06fb-\u06fc\u0730-\u074a\u0800-\u0814\u081b-\u0823\u0825-\u0827\u0829-\u082d\u0840-\u0857\u08e4-\u08fe\u0900-\u0903\u093a-\u093c\u093e-\u094f\u0951-\u0957\u0962-\u0963\u0966-\u096f\u0981-\u0983\u09bc\u09be-\u09c4\u09c7\u09c8\u09d7\u09df-\u09e0\u0a01-\u0a03\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a66-\u0a71\u0a75\u0a81-\u0a83\u0abc\u0abe-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ae2-\u0ae3\u0ae6-\u0aef\u0b01-\u0b03\u0b3c\u0b3e-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b56\u0b57\u0b5f-\u0b60\u0b66-\u0b6f\u0b82\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd7\u0be6-\u0bef\u0c01-\u0c03\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c62-\u0c63\u0c66-\u0c6f\u0c82\u0c83\u0cbc\u0cbe-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0ce2-\u0ce3\u0ce6-\u0cef\u0d02\u0d03\u0d46-\u0d48\u0d57\u0d62-\u0d63\u0d66-\u0d6f\u0d82\u0d83\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0df2\u0df3\u0e34-\u0e3a\u0e40-\u0e45\u0e50-\u0e59\u0eb4-\u0eb9\u0ec8-\u0ecd\u0ed0-\u0ed9\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f41-\u0f47\u0f71-\u0f84\u0f86-\u0f87\u0f8d-\u0f97\u0f99-\u0fbc\u0fc6\u1000-\u1029\u1040-\u1049\u1067-\u106d\u1071-\u1074\u1082-\u108d\u108f-\u109d\u135d-\u135f\u170e-\u1710\u1720-\u1730\u1740-\u1750\u1772\u1773\u1780-\u17b2\u17dd\u17e0-\u17e9\u180b-\u180d\u1810-\u1819\u1920-\u192b\u1930-\u193b\u1951-\u196d\u19b0-\u19c0\u19c8-\u19c9\u19d0-\u19d9\u1a00-\u1a15\u1a20-\u1a53\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1b46-\u1b4b\u1b50-\u1b59\u1b6b-\u1b73\u1bb0-\u1bb9\u1be6-\u1bf3\u1c00-\u1c22\u1c40-\u1c49\u1c5b-\u1c7d\u1cd0-\u1cd2\u1d00-\u1dbe\u1e01-\u1f15\u200c\u200d\u203f\u2040\u2054\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2d81-\u2d96\u2de0-\u2dff\u3021-\u3028\u3099\u309a\ua640-\ua66d\ua674-\ua67d\ua69f\ua6f0-\ua6f1\ua7f8-\ua800\ua806\ua80b\ua823-\ua827\ua880-\ua881\ua8b4-\ua8c4\ua8d0-\ua8d9\ua8f3-\ua8f7\ua900-\ua909\ua926-\ua92d\ua930-\ua945\ua980-\ua983\ua9b3-\ua9c0\uaa00-\uaa27\uaa40-\uaa41\uaa4c-\uaa4d\uaa50-\uaa59\uaa7b\uaae0-\uaae9\uaaf2-\uaaf3\uabc0-\uabe1\uabec\uabed\uabf0-\uabf9\ufb20-\ufb28\ufe00-\ufe0f\ufe20-\ufe26\ufe33\ufe34\ufe4d-\ufe4f\uff10-\uff19\uff3f";
  var nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
  var nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");

  // Whether a single character denotes a newline.

  var newline = /[\n\r\u2028\u2029]/;

  // Matches a whole line break (where CRLF is considered a single
  // line break). Used to count lines.

  var lineBreak = /\r\n|[\n\r\u2028\u2029]/g;

  // Test whether a given character code starts an identifier.

  var isIdentifierStart = exports.isIdentifierStart = function(code) {
    if (code < 65) return code === 36;
    if (code < 91) return true;
    if (code < 97) return code === 95;
    if (code < 123)return true;
    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));
  };

  // Test whether a given character is part of an identifier.

  var isIdentifierChar = exports.isIdentifierChar = function(code) {
    if (code < 48) return code === 36;
    if (code < 58) return true;
    if (code < 65) return false;
    if (code < 91) return true;
    if (code < 97) return code === 95;
    if (code < 123)return true;
    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));
  };

  // ## Tokenizer

  // These are used when `options.locations` is on, for the
  // `tokStartLoc` and `tokEndLoc` properties.

  function line_loc_t() {
    this.line = tokCurLine;
    this.column = tokPos - tokLineStart;
  }

  // Reset the token state. Used at the start of a parse.

  function initTokenState() {
    tokCurLine = 1;
    tokPos = tokLineStart = 0;
    tokRegexpAllowed = true;
    skipSpace();
  }

  // Called at the end of every token. Sets `tokEnd`, `tokVal`, and
  // `tokRegexpAllowed`, and skips the space after the token, so that
  // the next one's `tokStart` will point at the right position.

  function finishToken(type, val) {
    tokEnd = tokPos;
    if (options.locations) tokEndLoc = new line_loc_t;
    tokType = type;
    skipSpace();
    tokVal = val;
    tokRegexpAllowed = type.beforeExpr;
  }

  function skipBlockComment() {
    var startLoc = options.onComment && options.locations && new line_loc_t;
    var start = tokPos, end = input.indexOf("*/", tokPos += 2);
    if (end === -1) raise(tokPos - 2, "Unterminated comment");
    tokPos = end + 2;
    if (options.locations) {
      lineBreak.lastIndex = start;
      var match;
      while ((match = lineBreak.exec(input)) && match.index < tokPos) {
        ++tokCurLine;
        tokLineStart = match.index + match[0].length;
      }
    }
    if (options.onComment)
      options.onComment(true, input.slice(start + 2, end), start, tokPos,
                        startLoc, options.locations && new line_loc_t);
  }

  function skipLineComment() {
    var start = tokPos;
    var startLoc = options.onComment && options.locations && new line_loc_t;
    var ch = input.charCodeAt(tokPos+=2);
    while (tokPos < inputLen && ch !== 10 && ch !== 13 && ch !== 8232 && ch !== 8329) {
      ++tokPos;
      ch = input.charCodeAt(tokPos);
    }
    if (options.onComment)
      options.onComment(false, input.slice(start + 2, tokPos), start, tokPos,
                        startLoc, options.locations && new line_loc_t);
  }

  // Called at the start of the parse and after every token. Skips
  // whitespace and comments, and.

  function skipSpace() {
    while (tokPos < inputLen) {
      var ch = input.charCodeAt(tokPos);
      if (ch === 32) { // ' '
        ++tokPos;
      } else if(ch === 13) {
        ++tokPos;
        var next = input.charCodeAt(tokPos);
        if(next === 10) {
          ++tokPos;
        }
        if(options.locations) {
          ++tokCurLine;
          tokLineStart = tokPos;
        }
      } else if (ch === 10) {
        ++tokPos;
        ++tokCurLine;
        tokLineStart = tokPos;
      } else if(ch < 14 && ch > 8) {
        ++tokPos;
      } else if (ch === 47) { // '/'
        var next = input.charCodeAt(tokPos+1);
        if (next === 42) { // '*'
          skipBlockComment();
        } else if (next === 47) { // '/'
          skipLineComment();
        } else break;
      } else if ((ch < 14 && ch > 8) || ch === 32 || ch === 160) { // ' ', '\xa0'
        ++tokPos;
      } else if (ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {
        ++tokPos;
      } else {
        break;
      }
    }
  }

  // ### Token reading

  // This is the function that is called to fetch the next token. It
  // is somewhat obscure, because it works in character codes rather
  // than characters, and because operator parsing has been inlined
  // into it.
  //
  // All in the name of speed.
  //
  // The `forceRegexp` parameter is used in the one case where the
  // `tokRegexpAllowed` trick does not work. See `parseStatement`.

  function readToken_dot() {
    var next = input.charCodeAt(tokPos+1);
    if (next >= 48 && next <= 57) return readNumber(true);
    ++tokPos;
    return finishToken(_dot);
  }

  function readToken_slash() { // '/'
    var next = input.charCodeAt(tokPos+1);
    if (tokRegexpAllowed) {++tokPos; return readRegexp();}
    if (next === 61) return finishOp(_assign, 2);
    return finishOp(_slash, 1);
  }

  function readToken_mult_modulo() { // '%*'
    var next = input.charCodeAt(tokPos+1);
    if (next === 61) return finishOp(_assign, 2);
    return finishOp(_bin10, 1);
  }

  function readToken_pipe_amp(code) { // '|&'
    var next = input.charCodeAt(tokPos+1);
    if (next === code) return finishOp(code === 124 ? _bin1 : _bin2, 2);
    if (next === 61) return finishOp(_assign, 2);
    return finishOp(code === 124 ? _bin3 : _bin5, 1);
  }

  function readToken_caret() { // '^'
    var next = input.charCodeAt(tokPos+1);
    if (next === 61) return finishOp(_assign, 2);
    return finishOp(_bin4, 1);
  }

  function readToken_plus_min(code) { // '+-'
    var next = input.charCodeAt(tokPos+1);
    if (next === code) return finishOp(_incdec, 2);
    if (next === 61) return finishOp(_assign, 2);
    return finishOp(_plusmin, 1);
  }

  function readToken_lt_gt(code) { // '<>'
    var next = input.charCodeAt(tokPos+1);
    var size = 1;
    if (next === code) {
      size = code === 62 && input.charCodeAt(tokPos+2) === 62 ? 3 : 2;
      if (input.charCodeAt(tokPos + size) === 61) return finishOp(_assign, size + 1);
      return finishOp(_bin8, size);
    }
    if (next === 61)
      size = input.charCodeAt(tokPos+2) === 61 ? 3 : 2;
    return finishOp(_bin7, size);
  }

  function readToken_eq_excl(code) { // '=!'
    var next = input.charCodeAt(tokPos+1);
    if (next === 61) return finishOp(_bin6, input.charCodeAt(tokPos+2) === 61 ? 3 : 2);
    return finishOp(code === 61 ? _eq : _prefix, 1);
  }

  function getTokenFromCode(code) {
    switch(code) {
      // The interpretation of a dot depends on whether it is followed
      // by a digit.
    case 46: // '.'
      return readToken_dot();

      // Punctuation tokens.
    case 40: ++tokPos; return finishToken(_parenL);
    case 41: ++tokPos; return finishToken(_parenR);
    case 59: ++tokPos; return finishToken(_semi);
    case 44: ++tokPos; return finishToken(_comma);
    case 91: ++tokPos; return finishToken(_bracketL);
    case 93: ++tokPos; return finishToken(_bracketR);
    case 123: ++tokPos; return finishToken(_braceL);
    case 125: ++tokPos; return finishToken(_braceR);
    case 58: ++tokPos; return finishToken(_colon);
    case 63: ++tokPos; return finishToken(_question);

      // '0x' is a hexadecimal number.
    case 48: // '0'
      var next = input.charCodeAt(tokPos+1);
      if (next === 120 || next === 88) return readHexNumber();
      // Anything else beginning with a digit is an integer, octal
      // number, or float.
    case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: // 1-9
      return readNumber(false);

      // Quotes produce strings.
    case 34: case 39: // '"', "'"
      return readString(code);

    // Operators are parsed inline in tiny state machines. '=' (61) is
    // often referred to. `finishOp` simply skips the amount of
    // characters it is given as second argument, and returns a token
    // of the type given by its first argument.

    case 47: // '/'
      return readToken_slash(code);

    case 37: case 42: // '%*'
      return readToken_mult_modulo();

    case 124: case 38: // '|&'
      return readToken_pipe_amp(code);

    case 94: // '^'
      return readToken_caret();

    case 43: case 45: // '+-'
      return readToken_plus_min(code);

    case 60: case 62: // '<>'
      return readToken_lt_gt(code);

    case 61: case 33: // '=!'
      return readToken_eq_excl(code);

    case 126: // '~'
      return finishOp(_prefix, 1);
    }

    return false;
  }

  function readToken(forceRegexp) {
    if (!forceRegexp) tokStart = tokPos;
    else tokPos = tokStart + 1;
    if (options.locations) tokStartLoc = new line_loc_t;
    if (forceRegexp) return readRegexp();
    if (tokPos >= inputLen) return finishToken(_eof);

    var code = input.charCodeAt(tokPos);
    // Identifier or keyword. '\uXXXX' sequences are allowed in
    // identifiers, so '\' also dispatches to that.
    if (isIdentifierStart(code) || code === 92 /* '\' */) return readWord();

    var tok = getTokenFromCode(code);

    if (tok === false) {
      // If we are here, we either found a non-ASCII identifier
      // character, or something that's entirely disallowed.
      var ch = String.fromCharCode(code);
      if (ch === "\\" || nonASCIIidentifierStart.test(ch)) return readWord();
      raise(tokPos, "Unexpected character '" + ch + "'");
    }
    return tok;
  }

  function finishOp(type, size) {
    var str = input.slice(tokPos, tokPos + size);
    tokPos += size;
    finishToken(type, str);
  }

  // Parse a regular expression. Some context-awareness is necessary,
  // since a '/' inside a '[]' set does not end the expression.

  function readRegexp() {
    var content = "", escaped, inClass, start = tokPos;
    for (;;) {
      if (tokPos >= inputLen) raise(start, "Unterminated regular expression");
      var ch = input.charAt(tokPos);
      if (newline.test(ch)) raise(start, "Unterminated regular expression");
      if (!escaped) {
        if (ch === "[") inClass = true;
        else if (ch === "]" && inClass) inClass = false;
        else if (ch === "/" && !inClass) break;
        escaped = ch === "\\";
      } else escaped = false;
      ++tokPos;
    }
    var content = input.slice(start, tokPos);
    ++tokPos;
    // Need to use `readWord1` because '\uXXXX' sequences are allowed
    // here (don't ask).
    var mods = readWord1();
    if (mods && !/^[gmsiy]*$/.test(mods)) raise(start, "Invalid regexp flag");
    return finishToken(_regexp, new RegExp(content, mods));
  }

  // Read an integer in the given radix. Return null if zero digits
  // were read, the integer value otherwise. When `len` is given, this
  // will return `null` unless the integer has exactly `len` digits.

  function readInt(radix, len) {
    var start = tokPos, total = 0;
    for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {
      var code = input.charCodeAt(tokPos), val;
      if (code >= 97) val = code - 97 + 10; // a
      else if (code >= 65) val = code - 65 + 10; // A
      else if (code >= 48 && code <= 57) val = code - 48; // 0-9
      else val = Infinity;
      if (val >= radix) break;
      ++tokPos;
      total = total * radix + val;
    }
    if (tokPos === start || len != null && tokPos - start !== len) return null;

    return total;
  }

  function readHexNumber() {
    tokPos += 2; // 0x
    var val = readInt(16);
    if (val == null) raise(tokStart + 2, "Expected hexadecimal number");
    if (isIdentifierStart(input.charCodeAt(tokPos))) raise(tokPos, "Identifier directly after number");
    return finishToken(_num, val);
  }

  // Read an integer, octal integer, or floating-point number.

  function readNumber(startsWithDot) {
    var start = tokPos, isFloat = false, octal = input.charCodeAt(tokPos) === 48;
    if (!startsWithDot && readInt(10) === null) raise(start, "Invalid number");
    if (input.charCodeAt(tokPos) === 46) {
      ++tokPos;
      readInt(10);
      isFloat = true;
    }
    var next = input.charCodeAt(tokPos);
    if (next === 69 || next === 101) { // 'eE'
      next = input.charCodeAt(++tokPos);
      if (next === 43 || next === 45) ++tokPos; // '+-'
      if (readInt(10) === null) raise(start, "Invalid number");
      isFloat = true;
    }
    if (isIdentifierStart(input.charCodeAt(tokPos))) raise(tokPos, "Identifier directly after number");

    var str = input.slice(start, tokPos), val;
    if (isFloat) val = parseFloat(str);
    else if (!octal || str.length === 1) val = parseInt(str, 10);
    else if (/[89]/.test(str) || strict) raise(start, "Invalid number");
    else val = parseInt(str, 8);
    return finishToken(_num, val);
  }

  // Read a string value, interpreting backslash-escapes.

  function readString(quote) {
    tokPos++;
    var out = "";
    for (;;) {
      if (tokPos >= inputLen) raise(tokStart, "Unterminated string constant");
      var ch = input.charCodeAt(tokPos);
      if (ch === quote) {
        ++tokPos;
        return finishToken(_string, out);
      }
      if (ch === 92) { // '\'
        ch = input.charCodeAt(++tokPos);
        var octal = /^[0-7]+/.exec(input.slice(tokPos, tokPos + 3));
        if (octal) octal = octal[0];
        while (octal && parseInt(octal, 8) > 255) octal = octal.slice(0, octal.length - 1);
        if (octal === "0") octal = null;
        ++tokPos;
        if (octal) {
          if (strict) raise(tokPos - 2, "Octal literal in strict mode");
          out += String.fromCharCode(parseInt(octal, 8));
          tokPos += octal.length - 1;
        } else {
          switch (ch) {
          case 110: out += "\n"; break; // 'n' -> '\n'
          case 114: out += "\r"; break; // 'r' -> '\r'
          case 120: out += String.fromCharCode(readHexChar(2)); break; // 'x'
          case 117: out += String.fromCharCode(readHexChar(4)); break; // 'u'
          case 85: out += String.fromCharCode(readHexChar(8)); break; // 'U'
          case 116: out += "\t"; break; // 't' -> '\t'
          case 98: out += "\b"; break; // 'b' -> '\b'
          case 118: out += "\u000b"; break; // 'v' -> '\u000b'
          case 102: out += "\f"; break; // 'f' -> '\f'
          case 48: out += "\0"; break; // 0 -> '\0'
          case 13: if (input.charCodeAt(tokPos) === 10) ++tokPos; // '\r\n'
          case 10: // ' \n'
            if (options.locations) { tokLineStart = tokPos; ++tokCurLine; }
            break;
          default: out += String.fromCharCode(ch); break;
          }
        }
      } else {
        if (ch === 13 || ch === 10 || ch === 8232 || ch === 8329) raise(tokStart, "Unterminated string constant");
        out += String.fromCharCode(ch); // '\'
        ++tokPos;
      }
    }
  }

  // Used to read character escape sequences ('\x', '\u', '\U').

  function readHexChar(len) {
    var n = readInt(16, len);
    if (n === null) raise(tokStart, "Bad character escape sequence");
    return n;
  }

  // Used to signal to callers of `readWord1` whether the word
  // contained any escape sequences. This is needed because words with
  // escape sequences must not be interpreted as keywords.

  var containsEsc;

  // Read an identifier, and return it as a string. Sets `containsEsc`
  // to whether the word contained a '\u' escape.
  //
  // Only builds up the word character-by-character when it actually
  // containeds an escape, as a micro-optimization.

  function readWord1() {
    containsEsc = false;
    var word, first = true, start = tokPos;
    for (;;) {
      var ch = input.charCodeAt(tokPos);
      if (isIdentifierChar(ch)) {
        if (containsEsc) word += input.charAt(tokPos);
        ++tokPos;
      } else if (ch === 92) { // "\"
        if (!containsEsc) word = input.slice(start, tokPos);
        containsEsc = true;
        if (input.charCodeAt(++tokPos) != 117) // "u"
          raise(tokPos, "Expecting Unicode escape sequence \\uXXXX");
        ++tokPos;
        var esc = readHexChar(4);
        var escStr = String.fromCharCode(esc);
        if (!escStr) raise(tokPos - 1, "Invalid Unicode escape");
        if (!(first ? isIdentifierStart(esc) : isIdentifierChar(esc)))
          raise(tokPos - 4, "Invalid Unicode escape");
        word += escStr;
      } else {
        break;
      }
      first = false;
    }
    return containsEsc ? word : input.slice(start, tokPos);
  }

  // Read an identifier or keyword token. Will check for reserved
  // words when necessary.

  function readWord() {
    var word = readWord1();
    var type = _name;
    if (!containsEsc) {
      if (isKeyword(word)) type = keywordTypes[word];
      else if (options.forbidReserved &&
               (options.ecmaVersion === 3 ? isReservedWord3 : isReservedWord5)(word) ||
               strict && isStrictReservedWord(word))
        raise(tokStart, "The keyword '" + word + "' is reserved");
    }
    return finishToken(type, word);
  }

  // ## Parser

  // A recursive descent parser operates by defining functions for all
  // syntactic elements, and recursively calling those, each function
  // advancing the input stream and returning an AST node. Precedence
  // of constructs (for example, the fact that `!x[1]` means `!(x[1])`
  // instead of `(!x)[1]` is handled by the fact that the parser
  // function that parses unary prefix operators is called first, and
  // in turn calls the function that parses `[]` subscripts — that
  // way, it'll receive the node for `x[1]` already parsed, and wraps
  // *that* in the unary operator node.
  //
  // Acorn uses an [operator precedence parser][opp] to handle binary
  // operator precedence, because it is much more compact than using
  // the technique outlined above, which uses different, nesting
  // functions to specify precedence, for all of the ten binary
  // precedence levels that JavaScript defines.
  //
  // [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser

  // ### Parser utilities

  // Continue to the next token.

  function next() {
    lastStart = tokStart;
    lastEnd = tokEnd;
    lastEndLoc = tokEndLoc;
    readToken();
  }

  // Enter strict mode. Re-reads the next token to please pedantic
  // tests ("use strict"; 010; -- should fail).

  function setStrict(strct) {
    strict = strct;
    tokPos = lastEnd;
    while (tokPos < tokLineStart) {
      tokLineStart = input.lastIndexOf("\n", tokLineStart - 2) + 1;
      --tokCurLine;
    }
    skipSpace();
    readToken();
  }

  // Start an AST node, attaching a start offset.

  function node_t() {
    this.type = null;
    this.start = tokStart;
    this.end = null;
  }

  function node_loc_t() {
    this.start = tokStartLoc;
    this.end = null;
    if (sourceFile !== null) this.source = sourceFile;
  }

  function startNode() {
    var node = new node_t();
    if (options.locations)
      node.loc = new node_loc_t();
    if (options.ranges)
      node.range = [tokStart, 0];
    return node;
  }

  // Start a node whose start offset information should be based on
  // the start of another node. For example, a binary operator node is
  // only started after its left-hand side has already been parsed.

  function startNodeFrom(other) {
    var node = new node_t();
    node.start = other.start;
    if (options.locations) {
      node.loc = new node_loc_t();
      node.loc.start = other.loc.start;
    }
    if (options.ranges)
      node.range = [other.range[0], 0];

    return node;
  }

  // Finish an AST node, adding `type` and `end` properties.

  function finishNode(node, type) {
    node.type = type;
    node.end = lastEnd;
    if (options.locations)
      node.loc.end = lastEndLoc;
    if (options.ranges)
      node.range[1] = lastEnd;
    return node;
  }

  // Test whether a statement node is the string literal `"use strict"`.

  function isUseStrict(stmt) {
    return options.ecmaVersion >= 5 && stmt.type === "ExpressionStatement" &&
      stmt.expression.type === "Literal" && stmt.expression.value === "use strict";
  }

  // Predicate that tests whether the next token is of the given
  // type, and if yes, consumes it as a side effect.

  function eat(type) {
    if (tokType === type) {
      next();
      return true;
    }
  }

  // Test whether a semicolon can be inserted at the current position.

  function canInsertSemicolon() {
    return !options.strictSemicolons &&
      (tokType === _eof || tokType === _braceR || newline.test(input.slice(lastEnd, tokStart)));
  }

  // Consume a semicolon, or, failing that, see if we are allowed to
  // pretend that there is a semicolon at this position.

  function semicolon() {
    if (!eat(_semi) && !canInsertSemicolon()) unexpected();
  }

  // Expect a token of a given type. If found, consume it, otherwise,
  // raise an unexpected token error.

  function expect(type) {
    if (tokType === type) next();
    else unexpected();
  }

  // Raise an unexpected token error.

  function unexpected() {
    raise(tokStart, "Unexpected token");
  }

  // Verify that a node is an lval — something that can be assigned
  // to.

  function checkLVal(expr) {
    if (expr.type !== "Identifier" && expr.type !== "MemberExpression")
      raise(expr.start, "Assigning to rvalue");
    if (strict && expr.type === "Identifier" && isStrictBadIdWord(expr.name))
      raise(expr.start, "Assigning to " + expr.name + " in strict mode");
  }

  // ### Statement parsing

  // Parse a program. Initializes the parser, reads any number of
  // statements, and wraps them in a Program node.  Optionally takes a
  // `program` argument.  If present, the statements will be appended
  // to its body instead of creating a new node.

  function parseTopLevel(program) {
    lastStart = lastEnd = tokPos;
    if (options.locations) lastEndLoc = new line_loc_t;
    inFunction = strict = null;
    labels = [];
    readToken();

    var node = program || startNode(), first = true;
    if (!program) node.body = [];
    while (tokType !== _eof) {
      var stmt = parseStatement();
      node.body.push(stmt);
      if (first && isUseStrict(stmt)) setStrict(true);
      first = false;
    }
    return finishNode(node, "Program");
  }

  var loopLabel = {kind: "loop"}, switchLabel = {kind: "switch"};

  // Parse a single statement.
  //
  // If expecting a statement and finding a slash operator, parse a
  // regular expression literal. This is to handle cases like
  // `if (foo) /blah/.exec(foo);`, where looking at the previous token
  // does not help.

  function parseStatement() {
    if (tokType === _slash)
      readToken(true);

    var starttype = tokType, node = startNode();

    // Most types of statements are recognized by the keyword they
    // start with. Many are trivial to parse, some require a bit of
    // complexity.

    switch (starttype) {
    case _break: case _continue:
      next();
      var isBreak = starttype === _break;
      if (eat(_semi) || canInsertSemicolon()) node.label = null;
      else if (tokType !== _name) unexpected();
      else {
        node.label = parseIdent();
        semicolon();
      }

      // Verify that there is an actual destination to break or
      // continue to.
      for (var i = 0; i < labels.length; ++i) {
        var lab = labels[i];
        if (node.label == null || lab.name === node.label.name) {
          if (lab.kind != null && (isBreak || lab.kind === "loop")) break;
          if (node.label && isBreak) break;
        }
      }
      if (i === labels.length) raise(node.start, "Unsyntactic " + starttype.keyword);
      return finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement");

    case _debugger:
      next();
      semicolon();
      return finishNode(node, "DebuggerStatement");

    case _do:
      next();
      labels.push(loopLabel);
      node.body = parseStatement();
      labels.pop();
      expect(_while);
      node.test = parseParenExpression();
      semicolon();
      return finishNode(node, "DoWhileStatement");

      // Disambiguating between a `for` and a `for`/`in` loop is
      // non-trivial. Basically, we have to parse the init `var`
      // statement or expression, disallowing the `in` operator (see
      // the second parameter to `parseExpression`), and then check
      // whether the next token is `in`. When there is no init part
      // (semicolon immediately after the opening parenthesis), it is
      // a regular `for` loop.

    case _for:
      next();
      labels.push(loopLabel);
      expect(_parenL);
      if (tokType === _semi) return parseFor(node, null);
      if (tokType === _var) {
        var init = startNode();
        next();
        parseVar(init, true);
        if (init.declarations.length === 1 && eat(_in))
          return parseForIn(node, init);
        return parseFor(node, init);
      }
      var init = parseExpression(false, true);
      if (eat(_in)) {checkLVal(init); return parseForIn(node, init);}
      return parseFor(node, init);

    case _function:
      next();
      return parseFunction(node, true);

    case _if:
      next();
      node.test = parseParenExpression();
      node.consequent = parseStatement();
      node.alternate = eat(_else) ? parseStatement() : null;
      return finishNode(node, "IfStatement");

    case _return:
      if (!inFunction) raise(tokStart, "'return' outside of function");
      next();

      // In `return` (and `break`/`continue`), the keywords with
      // optional arguments, we eagerly look for a semicolon or the
      // possibility to insert one.

      if (eat(_semi) || canInsertSemicolon()) node.argument = null;
      else { node.argument = parseExpression(); semicolon(); }
      return finishNode(node, "ReturnStatement");

    case _switch:
      next();
      node.discriminant = parseParenExpression();
      node.cases = [];
      expect(_braceL);
      labels.push(switchLabel);

      // Statements under must be grouped (by label) in SwitchCase
      // nodes. `cur` is used to keep the node that we are currently
      // adding statements to.

      for (var cur, sawDefault; tokType != _braceR;) {
        if (tokType === _case || tokType === _default) {
          var isCase = tokType === _case;
          if (cur) finishNode(cur, "SwitchCase");
          node.cases.push(cur = startNode());
          cur.consequent = [];
          next();
          if (isCase) cur.test = parseExpression();
          else {
            if (sawDefault) raise(lastStart, "Multiple default clauses"); sawDefault = true;
            cur.test = null;
          }
          expect(_colon);
        } else {
          if (!cur) unexpected();
          cur.consequent.push(parseStatement());
        }
      }
      if (cur) finishNode(cur, "SwitchCase");
      next(); // Closing brace
      labels.pop();
      return finishNode(node, "SwitchStatement");

    case _throw:
      next();
      if (newline.test(input.slice(lastEnd, tokStart)))
        raise(lastEnd, "Illegal newline after throw");
      node.argument = parseExpression();
      semicolon();
      return finishNode(node, "ThrowStatement");

    case _try:
      next();
      node.block = parseBlock();
      node.handler = null;
      if (tokType === _catch) {
        var clause = startNode();
        next();
        expect(_parenL);
        clause.param = parseIdent();
        if (strict && isStrictBadIdWord(clause.param.name))
          raise(clause.param.start, "Binding " + clause.param.name + " in strict mode");
        expect(_parenR);
        clause.guard = null;
        clause.body = parseBlock();
        node.handler = finishNode(clause, "CatchClause");
      }
      node.finalizer = eat(_finally) ? parseBlock() : null;
      if (!node.handler && !node.finalizer)
        raise(node.start, "Missing catch or finally clause");
      return finishNode(node, "TryStatement");

    case _var:
      next();
      node = parseVar(node);
      semicolon();
      return node;

    case _while:
      next();
      node.test = parseParenExpression();
      labels.push(loopLabel);
      node.body = parseStatement();
      labels.pop();
      return finishNode(node, "WhileStatement");

    case _with:
      if (strict) raise(tokStart, "'with' in strict mode");
      next();
      node.object = parseParenExpression();
      node.body = parseStatement();
      return finishNode(node, "WithStatement");

    case _braceL:
      return parseBlock();

    case _semi:
      next();
      return finishNode(node, "EmptyStatement");

      // If the statement does not start with a statement keyword or a
      // brace, it's an ExpressionStatement or LabeledStatement. We
      // simply start parsing an expression, and afterwards, if the
      // next token is a colon and the expression was a simple
      // Identifier node, we switch to interpreting it as a label.

    default:
      var maybeName = tokVal, expr = parseExpression();
      if (starttype === _name && expr.type === "Identifier" && eat(_colon)) {
        for (var i = 0; i < labels.length; ++i)
          if (labels[i].name === maybeName) raise(expr.start, "Label '" + maybeName + "' is already declared");
        var kind = tokType.isLoop ? "loop" : tokType === _switch ? "switch" : null;
        labels.push({name: maybeName, kind: kind});
        node.body = parseStatement();
        labels.pop();
        node.label = expr;
        return finishNode(node, "LabeledStatement");
      } else {
        node.expression = expr;
        semicolon();
        return finishNode(node, "ExpressionStatement");
      }
    }
  }

  // Used for constructs like `switch` and `if` that insist on
  // parentheses around their expression.

  function parseParenExpression() {
    expect(_parenL);
    var val = parseExpression();
    expect(_parenR);
    return val;
  }

  // Parse a semicolon-enclosed block of statements, handling `"use
  // strict"` declarations when `allowStrict` is true (used for
  // function bodies).

  function parseBlock(allowStrict) {
    var node = startNode(), first = true, strict = false, oldStrict;
    node.body = [];
    expect(_braceL);
    while (!eat(_braceR)) {
      var stmt = parseStatement();
      node.body.push(stmt);
      if (first && isUseStrict(stmt)) {
        oldStrict = strict;
        setStrict(strict = true);
      }
      first = false
    }
    if (strict && !oldStrict) setStrict(false);
    return finishNode(node, "BlockStatement");
  }

  // Parse a regular `for` loop. The disambiguation code in
  // `parseStatement` will already have parsed the init statement or
  // expression.

  function parseFor(node, init) {
    node.init = init;
    expect(_semi);
    node.test = tokType === _semi ? null : parseExpression();
    expect(_semi);
    node.update = tokType === _parenR ? null : parseExpression();
    expect(_parenR);
    node.body = parseStatement();
    labels.pop();
    return finishNode(node, "ForStatement");
  }

  // Parse a `for`/`in` loop.

  function parseForIn(node, init) {
    node.left = init;
    node.right = parseExpression();
    expect(_parenR);
    node.body = parseStatement();
    labels.pop();
    return finishNode(node, "ForInStatement");
  }

  // Parse a list of variable declarations.

  function parseVar(node, noIn) {
    node.declarations = [];
    node.kind = "var";
    for (;;) {
      var decl = startNode();
      decl.id = parseIdent();
      if (strict && isStrictBadIdWord(decl.id.name))
        raise(decl.id.start, "Binding " + decl.id.name + " in strict mode");
      decl.init = eat(_eq) ? parseExpression(true, noIn) : null;
      node.declarations.push(finishNode(decl, "VariableDeclarator"));
      if (!eat(_comma)) break;
    }
    return finishNode(node, "VariableDeclaration");
  }

  // ### Expression parsing

  // These nest, from the most general expression type at the top to
  // 'atomic', nondivisible expression types at the bottom. Most of
  // the functions will simply let the function(s) below them parse,
  // and, *if* the syntactic construct they handle is present, wrap
  // the AST node that the inner parser gave them in another node.

  // Parse a full expression. The arguments are used to forbid comma
  // sequences (in argument lists, array literals, or object literals)
  // or the `in` operator (in for loops initalization expressions).

  function parseExpression(noComma, noIn) {
    var expr = parseMaybeAssign(noIn);
    if (!noComma && tokType === _comma) {
      var node = startNodeFrom(expr);
      node.expressions = [expr];
      while (eat(_comma)) node.expressions.push(parseMaybeAssign(noIn));
      return finishNode(node, "SequenceExpression");
    }
    return expr;
  }

  // Parse an assignment expression. This includes applications of
  // operators like `+=`.

  function parseMaybeAssign(noIn) {
    var left = parseMaybeConditional(noIn);
    if (tokType.isAssign) {
      var node = startNodeFrom(left);
      node.operator = tokVal;
      node.left = left;
      next();
      node.right = parseMaybeAssign(noIn);
      checkLVal(left);
      return finishNode(node, "AssignmentExpression");
    }
    return left;
  }

  // Parse a ternary conditional (`?:`) operator.

  function parseMaybeConditional(noIn) {
    var expr = parseExprOps(noIn);
    if (eat(_question)) {
      var node = startNodeFrom(expr);
      node.test = expr;
      node.consequent = parseExpression(true);
      expect(_colon);
      node.alternate = parseExpression(true, noIn);
      return finishNode(node, "ConditionalExpression");
    }
    return expr;
  }

  // Start the precedence parser.

  function parseExprOps(noIn) {
    return parseExprOp(parseMaybeUnary(noIn), -1, noIn);
  }

  // Parse binary operators with the operator precedence parsing
  // algorithm. `left` is the left-hand side of the operator.
  // `minPrec` provides context that allows the function to stop and
  // defer further parser to one of its callers when it encounters an
  // operator that has a lower precedence than the set it is parsing.

  function parseExprOp(left, minPrec, noIn) {
    var prec = tokType.binop;
    if (prec != null && (!noIn || tokType !== _in)) {
      if (prec > minPrec) {
        var node = startNodeFrom(left);
        node.left = left;
        node.operator = tokVal;
        next();
        node.right = parseExprOp(parseMaybeUnary(noIn), prec, noIn);
        var node = finishNode(node, /&&|\|\|/.test(node.operator) ? "LogicalExpression" : "BinaryExpression");
        return parseExprOp(node, minPrec, noIn);
      }
    }
    return left;
  }

  // Parse unary operators, both prefix and postfix.

  function parseMaybeUnary(noIn) {
    if (tokType.prefix) {
      var node = startNode(), update = tokType.isUpdate;
      node.operator = tokVal;
      node.prefix = true;
      next();
      node.argument = parseMaybeUnary(noIn);
      if (update) checkLVal(node.argument);
      else if (strict && node.operator === "delete" &&
               node.argument.type === "Identifier")
        raise(node.start, "Deleting local variable in strict mode");
      return finishNode(node, update ? "UpdateExpression" : "UnaryExpression");
    }
    var expr = parseExprSubscripts();
    while (tokType.postfix && !canInsertSemicolon()) {
      var node = startNodeFrom(expr);
      node.operator = tokVal;
      node.prefix = false;
      node.argument = expr;
      checkLVal(expr);
      next();
      expr = finishNode(node, "UpdateExpression");
    }
    return expr;
  }

  // Parse call, dot, and `[]`-subscript expressions.

  function parseExprSubscripts() {
    return parseSubscripts(parseExprAtom());
  }

  function parseSubscripts(base, noCalls) {
    if (eat(_dot)) {
      var node = startNodeFrom(base);
      node.object = base;
      node.property = parseIdent(true);
      node.computed = false;
      return parseSubscripts(finishNode(node, "MemberExpression"), noCalls);
    } else if (eat(_bracketL)) {
      var node = startNodeFrom(base);
      node.object = base;
      node.property = parseExpression();
      node.computed = true;
      expect(_bracketR);
      return parseSubscripts(finishNode(node, "MemberExpression"), noCalls);
    } else if (!noCalls && eat(_parenL)) {
      var node = startNodeFrom(base);
      node.callee = base;
      node.arguments = parseExprList(_parenR, false);
      return parseSubscripts(finishNode(node, "CallExpression"), noCalls);
    } else return base;
  }

  // Parse an atomic expression — either a single token that is an
  // expression, an expression started by a keyword like `function` or
  // `new`, or an expression wrapped in punctuation like `()`, `[]`,
  // or `{}`.

  function parseExprAtom() {
    switch (tokType) {
    case _this:
      var node = startNode();
      next();
      return finishNode(node, "ThisExpression");
    case _name:
      return parseIdent();
    case _num: case _string: case _regexp:
      var node = startNode();
      node.value = tokVal;
      node.raw = input.slice(tokStart, tokEnd);
      next();
      return finishNode(node, "Literal");

    case _null: case _true: case _false:
      var node = startNode();
      node.value = tokType.atomValue;
      node.raw = tokType.keyword
      next();
      return finishNode(node, "Literal");

    case _parenL:
      var tokStartLoc1 = tokStartLoc, tokStart1 = tokStart;
      next();
      var val = parseExpression();
      val.start = tokStart1;
      val.end = tokEnd;
      if (options.locations) {
        val.loc.start = tokStartLoc1;
        val.loc.end = tokEndLoc;
      }
      if (options.ranges)
        val.range = [tokStart1, tokEnd];
      expect(_parenR);
      return val;

    case _bracketL:
      var node = startNode();
      next();
      node.elements = parseExprList(_bracketR, true, true);
      return finishNode(node, "ArrayExpression");

    case _braceL:
      return parseObj();

    case _function:
      var node = startNode();
      next();
      return parseFunction(node, false);

    case _new:
      return parseNew();

    default:
      unexpected();
    }
  }

  // New's precedence is slightly tricky. It must allow its argument
  // to be a `[]` or dot subscript expression, but not a call — at
  // least, not without wrapping it in parentheses. Thus, it uses the

  function parseNew() {
    var node = startNode();
    next();
    node.callee = parseSubscripts(parseExprAtom(), true);
    if (eat(_parenL)) node.arguments = parseExprList(_parenR, false);
    else node.arguments = [];
    return finishNode(node, "NewExpression");
  }

  // Parse an object literal.

  function parseObj() {
    var node = startNode(), first = true, sawGetSet = false;
    node.properties = [];
    next();
    while (!eat(_braceR)) {
      if (!first) {
        expect(_comma);
        if (options.allowTrailingCommas && eat(_braceR)) break;
      } else first = false;

      var prop = {key: parsePropertyName()}, isGetSet = false, kind;
      if (eat(_colon)) {
        prop.value = parseExpression(true);
        kind = prop.kind = "init";
      } else if (options.ecmaVersion >= 5 && prop.key.type === "Identifier" &&
                 (prop.key.name === "get" || prop.key.name === "set")) {
        isGetSet = sawGetSet = true;
        kind = prop.kind = prop.key.name;
        prop.key = parsePropertyName();
        if (tokType !== _parenL) unexpected();
        prop.value = parseFunction(startNode(), false);
      } else unexpected();

      // getters and setters are not allowed to clash — either with
      // each other or with an init property — and in strict mode,
      // init properties are also not allowed to be repeated.

      if (prop.key.type === "Identifier" && (strict || sawGetSet)) {
        for (var i = 0; i < node.properties.length; ++i) {
          var other = node.properties[i];
          if (other.key.name === prop.key.name) {
            var conflict = kind == other.kind || isGetSet && other.kind === "init" ||
              kind === "init" && (other.kind === "get" || other.kind === "set");
            if (conflict && !strict && kind === "init" && other.kind === "init") conflict = false;
            if (conflict) raise(prop.key.start, "Redefinition of property");
          }
        }
      }
      node.properties.push(prop);
    }
    return finishNode(node, "ObjectExpression");
  }

  function parsePropertyName() {
    if (tokType === _num || tokType === _string) return parseExprAtom();
    return parseIdent(true);
  }

  // Parse a function declaration or literal (depending on the
  // `isStatement` parameter).

  function parseFunction(node, isStatement) {
    if (tokType === _name) node.id = parseIdent();
    else if (isStatement) unexpected();
    else node.id = null;
    node.params = [];
    var first = true;
    expect(_parenL);
    while (!eat(_parenR)) {
      if (!first) expect(_comma); else first = false;
      node.params.push(parseIdent());
    }

    // Start a new scope with regard to labels and the `inFunction`
    // flag (restore them to their old value afterwards).
    var oldInFunc = inFunction, oldLabels = labels;
    inFunction = true; labels = [];
    node.body = parseBlock(true);
    inFunction = oldInFunc; labels = oldLabels;

    // If this is a strict mode function, verify that argument names
    // are not repeated, and it does not try to bind the words `eval`
    // or `arguments`.
    if (strict || node.body.body.length && isUseStrict(node.body.body[0])) {
      for (var i = node.id ? -1 : 0; i < node.params.length; ++i) {
        var id = i < 0 ? node.id : node.params[i];
        if (isStrictReservedWord(id.name) || isStrictBadIdWord(id.name))
          raise(id.start, "Defining '" + id.name + "' in strict mode");
        if (i >= 0) for (var j = 0; j < i; ++j) if (id.name === node.params[j].name)
          raise(id.start, "Argument name clash in strict mode");
      }
    }

    return finishNode(node, isStatement ? "FunctionDeclaration" : "FunctionExpression");
  }

  // Parses a comma-separated list of expressions, and returns them as
  // an array. `close` is the token type that ends the list, and
  // `allowEmpty` can be turned on to allow subsequent commas with
  // nothing in between them to be parsed as `null` (which is needed
  // for array literals).

  function parseExprList(close, allowTrailingComma, allowEmpty) {
    var elts = [], first = true;
    while (!eat(close)) {
      if (!first) {
        expect(_comma);
        if (allowTrailingComma && options.allowTrailingCommas && eat(close)) break;
      } else first = false;

      if (allowEmpty && tokType === _comma) elts.push(null);
      else elts.push(parseExpression(true));
    }
    return elts;
  }

  // Parse the next token as an identifier. If `liberal` is true (used
  // when parsing properties), it will also convert keywords into
  // identifiers.

  function parseIdent(liberal) {
    var node = startNode();
    node.name = tokType === _name ? tokVal : (liberal && !options.forbidReserved && tokType.keyword) || unexpected();
    next();
    return finishNode(node, "Identifier");
  }

});

},{}],20:[function(require,module,exports){
// Acorn: Loose parser
//
// This module provides an alternative parser (`parse_dammit`) that
// exposes that same interface as `parse`, but will try to parse
// anything as JavaScript, repairing syntax error the best it can.
// There are circumstances in which it will raise an error and give
// up, but they are very rare. The resulting AST will be a mostly
// valid JavaScript AST (as per the [Mozilla parser API][api], except
// that:
//
// - Return outside functions is allowed
//
// - Label consistency (no conflicts, break only to existing labels)
//   is not enforced.
//
// - Bogus Identifier nodes with a name of `"✖"` are inserted whenever
//   the parser got too confused to return anything meaningful.
//
// [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API
//
// The expected use for this is to *first* try `acorn.parse`, and only
// if that fails switch to `parse_dammit`. The loose parser might
// parse badly indented code incorrectly, so **don't** use it as
// your default parser.
//
// Quite a lot of acorn.js is duplicated here. The alternative was to
// add a *lot* of extra cruft to that file, making it less readable
// and slower. Copying and editing the code allowed me to make
// invasive changes and simplifications without creating a complicated
// tangle.

(function(mod) {
  if (typeof exports == "object" && typeof module == "object") return mod(exports, require("./acorn")); // CommonJS
  if (typeof define == "function" && define.amd) return define(["exports", "./acorn"], mod); // AMD
  mod(this.acorn || (this.acorn = {}), this.acorn); // Plain browser env
})(function(exports, acorn) {
  "use strict";

  var tt = acorn.tokTypes;

  var options, input, fetchToken, context;

  exports.parse_dammit = function(inpt, opts) {
    if (!opts) opts = {};
    input = String(inpt);
    options = opts;
    if (!opts.tabSize) opts.tabSize = 4;
    fetchToken = acorn.tokenize(inpt, opts);
    sourceFile = options.sourceFile || null;
    context = [];
    nextLineStart = 0;
    ahead.length = 0;
    next();
    return parseTopLevel();
  };

  var lastEnd, token = {start: 0, end: 0}, ahead = [];
  var curLineStart, nextLineStart, curIndent, lastEndLoc, sourceFile;

  function next() {
    lastEnd = token.end;
    if (options.locations)
      lastEndLoc = token.endLoc;

    if (ahead.length)
      token = ahead.shift();
    else
      token = readToken();

    if (token.start >= nextLineStart) {
      while (token.start >= nextLineStart) {
        curLineStart = nextLineStart;
        nextLineStart = lineEnd(curLineStart) + 1;
      }
      curIndent = indentationAfter(curLineStart);
    }
  }

  function readToken() {
    for (;;) {
      try {
        return fetchToken();
      } catch(e) {
        if (!(e instanceof SyntaxError)) throw e;

        // Try to skip some text, based on the error message, and then continue
        var msg = e.message, pos = e.raisedAt, replace = true;
        if (/unterminated/i.test(msg)) {
          pos = lineEnd(e.pos);
          if (/string/.test(msg)) {
            replace = {start: e.pos, end: pos, type: tt.string, value: input.slice(e.pos + 1, pos)};
          } else if (/regular expr/i.test(msg)) {
            var re = input.slice(e.pos, pos);
            try { re = new RegExp(re); } catch(e) {}
            replace = {start: e.pos, end: pos, type: tt.regexp, value: re};
          } else {
            replace = false;
          }
        } else if (/invalid (unicode|regexp|number)|expecting unicode|octal literal|is reserved|directly after number/i.test(msg)) {
          while (pos < input.length && !isSpace(input.charCodeAt(pos))) ++pos;
        } else if (/character escape|expected hexadecimal/i.test(msg)) {
          while (pos < input.length) {
            var ch = input.charCodeAt(pos++);
            if (ch === 34 || ch === 39 || isNewline(ch)) break;
          }
        } else if (/unexpected character/i.test(msg)) {
          pos++;
          replace = false;
        } else {
          throw e;
        }
        resetTo(pos);
        if (replace === true) replace = {start: pos, end: pos, type: tt.name, value: "✖"};
        if (replace) {
          if (options.locations) {
            replace.startLoc = acorn.getLineInfo(input, replace.start);
            replace.endLoc = acorn.getLineInfo(input, replace.end);
          }
          return replace;
        }
      }
    }
  }

  function resetTo(pos) {
    var ch = input.charAt(pos - 1);
    var reAllowed = !ch || /[\[\{\(,;:?\/*=+\-~!|&%^<>]/.test(ch) ||
      /[enwfd]/.test(ch) && /\b(keywords|case|else|return|throw|new|in|(instance|type)of|delete|void)$/.test(input.slice(pos - 10, pos));
    fetchToken.jumpTo(pos, reAllowed);
  }

  function copyToken(token) {
    var copy = {start: token.start, end: token.end, type: token.type, value: token.value};
    if (options.locations) {
      copy.startLoc = token.startLoc;
      copy.endLoc = token.endLoc;
    }
    return copy;
  }

  function lookAhead(n) {
    // Copy token objects, because fetchToken will overwrite the one
    // it returns, and in this case we still need it
    if (!ahead.length)
      token = copyToken(token);
    while (n > ahead.length)
      ahead.push(copyToken(readToken()));
    return ahead[n-1];
  }

  var newline = /[\n\r\u2028\u2029]/;

  function isNewline(ch) {
    return ch === 10 || ch === 13 || ch === 8232 || ch === 8329;
  }
  function isSpace(ch) {
    return (ch < 14 && ch > 8) || ch === 32 || ch === 160 || isNewline(ch);
  }

  function pushCx() {
    context.push(curIndent);
  }
  function popCx() {
    curIndent = context.pop();
  }

  function lineEnd(pos) {
    while (pos < input.length && !isNewline(input.charCodeAt(pos))) ++pos;
    return pos;
  }
  function lineStart(pos) {
    while (pos > 0 && !isNewline(input.charCodeAt(pos - 1))) --pos;
    return pos;
  }
  function indentationAfter(pos) {
    for (var count = 0;; ++pos) {
      var ch = input.charCodeAt(pos);
      if (ch === 32) ++count;
      else if (ch === 9) count += options.tabSize;
      else return count;
    }
  }

  function closes(closeTok, indent, line, blockHeuristic) {
    if (token.type === closeTok || token.type === tt.eof) return true;
    if (line != curLineStart && curIndent < indent && tokenStartsLine() &&
        (!blockHeuristic || nextLineStart >= input.length ||
         indentationAfter(nextLineStart) < indent)) return true;
    return false;
  }

  function tokenStartsLine() {
    for (var p = token.start - 1; p >= curLineStart; --p) {
      var ch = input.charCodeAt(p);
      if (ch !== 9 && ch !== 32) return false;
    }
    return true;
  }

  function node_t(start) {
    this.type = null;
    this.start = start;
    this.end = null;
  }

  function node_loc_t(start) {
    this.start = start || token.startLoc || {line: 1, column: 0};
    this.end = null;
    if (sourceFile !== null) this.source = sourceFile;
  }

  function startNode() {
    var node = new node_t(token.start);
    if (options.locations)
      node.loc = new node_loc_t();
    return node;
  }

  function startNodeFrom(other) {
    var node = new node_t(other.start);
    if (options.locations)
      node.loc = new node_loc_t(other.loc.start);
    return node;
  }

  function finishNode(node, type) {
    node.type = type;
    node.end = lastEnd;
    if (options.locations)
      node.loc.end = lastEndLoc;
    return node;
  }

  function getDummyLoc() {
    if (options.locations) {
      var loc = new node_loc_t();
      loc.end = loc.start;
      return loc;
    }
  };

  function dummyIdent() {
    var dummy = new node_t(token.start);
    dummy.type = "Identifier";
    dummy.end = token.start;
    dummy.name = "✖";
    dummy.loc = getDummyLoc();
    return dummy;
  }
  function isDummy(node) { return node.name == "✖"; }

  function eat(type) {
    if (token.type === type) {
      next();
      return true;
    }
  }

  function canInsertSemicolon() {
    return (token.type === tt.eof || token.type === tt.braceR || newline.test(input.slice(lastEnd, token.start)));
  }
  function semicolon() {
    eat(tt.semi);
  }

  function expect(type) {
    if (eat(type)) return true;
    if (lookAhead(1).type == type) {
      next(); next();
      return true;
    }
    if (lookAhead(2).type == type) {
      next(); next(); next();
      return true;
    }
  }

  function checkLVal(expr) {
    if (expr.type === "Identifier" || expr.type === "MemberExpression") return expr;
    return dummyIdent();
  }

  function parseTopLevel() {
    var node = startNode();
    node.body = [];
    while (token.type !== tt.eof) node.body.push(parseStatement());
    return finishNode(node, "Program");
  }

  function parseStatement() {
    var starttype = token.type, node = startNode();

    switch (starttype) {
    case tt._break: case tt._continue:
      next();
      var isBreak = starttype === tt._break;
      node.label = token.type === tt.name ? parseIdent() : null;
      semicolon();
      return finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement");

    case tt._debugger:
      next();
      semicolon();
      return finishNode(node, "DebuggerStatement");

    case tt._do:
      next();
      node.body = parseStatement();
      node.test = eat(tt._while) ? parseParenExpression() : dummyIdent();
      semicolon();
      return finishNode(node, "DoWhileStatement");

    case tt._for:
      next();
      pushCx();
      expect(tt.parenL);
      if (token.type === tt.semi) return parseFor(node, null);
      if (token.type === tt._var) {
        var init = startNode();
        next();
        parseVar(init, true);
        if (init.declarations.length === 1 && eat(tt._in))
          return parseForIn(node, init);
        return parseFor(node, init);
      }
      var init = parseExpression(false, true);
      if (eat(tt._in)) {return parseForIn(node, checkLVal(init));}
      return parseFor(node, init);

    case tt._function:
      next();
      return parseFunction(node, true);

    case tt._if:
      next();
      node.test = parseParenExpression();
      node.consequent = parseStatement();
      node.alternate = eat(tt._else) ? parseStatement() : null;
      return finishNode(node, "IfStatement");

    case tt._return:
      next();
      if (eat(tt.semi) || canInsertSemicolon()) node.argument = null;
      else { node.argument = parseExpression(); semicolon(); }
      return finishNode(node, "ReturnStatement");

    case tt._switch:
      var blockIndent = curIndent, line = curLineStart;
      next();
      node.discriminant = parseParenExpression();
      node.cases = [];
      pushCx();
      expect(tt.braceL);

      for (var cur; !closes(tt.braceR, blockIndent, line, true);) {
        if (token.type === tt._case || token.type === tt._default) {
          var isCase = token.type === tt._case;
          if (cur) finishNode(cur, "SwitchCase");
          node.cases.push(cur = startNode());
          cur.consequent = [];
          next();
          if (isCase) cur.test = parseExpression();
          else cur.test = null;
          expect(tt.colon);
        } else {
          if (!cur) {
            node.cases.push(cur = startNode());
            cur.consequent = [];
            cur.test = null;
          }
          cur.consequent.push(parseStatement());
        }
      }
      if (cur) finishNode(cur, "SwitchCase");
      popCx();
      eat(tt.braceR);
      return finishNode(node, "SwitchStatement");

    case tt._throw:
      next();
      node.argument = parseExpression();
      semicolon();
      return finishNode(node, "ThrowStatement");

    case tt._try:
      next();
      node.block = parseBlock();
      node.handler = null;
      if (token.type === tt._catch) {
        var clause = startNode();
        next();
        expect(tt.parenL);
        clause.param = parseIdent();
        expect(tt.parenR);
        clause.guard = null;
        clause.body = parseBlock();
        node.handler = finishNode(clause, "CatchClause");
      }
      node.finalizer = eat(tt._finally) ? parseBlock() : null;
      if (!node.handler && !node.finalizer) return node.block;
      return finishNode(node, "TryStatement");

    case tt._var:
      next();
      node = parseVar(node);
      semicolon();
      return node;

    case tt._while:
      next();
      node.test = parseParenExpression();
      node.body = parseStatement();
      return finishNode(node, "WhileStatement");

    case tt._with:
      next();
      node.object = parseParenExpression();
      node.body = parseStatement();
      return finishNode(node, "WithStatement");

    case tt.braceL:
      return parseBlock();

    case tt.semi:
      next();
      return finishNode(node, "EmptyStatement");

    default:
      var maybeName = token.value, expr = parseExpression();
      if (isDummy(expr)) {
        next();
        if (token.type === tt.eof) return finishNode(node, "EmptyStatement");
        return parseStatement();
      } else if (starttype === tt.name && expr.type === "Identifier" && eat(tt.colon)) {
        node.body = parseStatement();
        node.label = expr;
        return finishNode(node, "LabeledStatement");
      } else {
        node.expression = expr;
        semicolon();
        return finishNode(node, "ExpressionStatement");
      }
    }
  }

  function parseBlock() {
    var node = startNode();
    pushCx();
    expect(tt.braceL);
    var blockIndent = curIndent, line = curLineStart;
    node.body = [];
    while (!closes(tt.braceR, blockIndent, line, true))
      node.body.push(parseStatement());
    popCx();
    eat(tt.braceR);
    return finishNode(node, "BlockStatement");
  }

  function parseFor(node, init) {
    node.init = init;
    node.test = node.update = null;
    if (eat(tt.semi) && token.type !== tt.semi) node.test = parseExpression();
    if (eat(tt.semi) && token.type !== tt.parenR) node.update = parseExpression();
    popCx();
    expect(tt.parenR);
    node.body = parseStatement();
    return finishNode(node, "ForStatement");
  }

  function parseForIn(node, init) {
    node.left = init;
    node.right = parseExpression();
    popCx();
    expect(tt.parenR);
    node.body = parseStatement();
    return finishNode(node, "ForInStatement");
  }

  function parseVar(node, noIn) {
    node.declarations = [];
    node.kind = "var";
    while (token.type === tt.name) {
      var decl = startNode();
      decl.id = parseIdent();
      decl.init = eat(tt.eq) ? parseExpression(true, noIn) : null;
      node.declarations.push(finishNode(decl, "VariableDeclarator"));
      if (!eat(tt.comma)) break;
    }
    return finishNode(node, "VariableDeclaration");
  }

  function parseExpression(noComma, noIn) {
    var expr = parseMaybeAssign(noIn);
    if (!noComma && token.type === tt.comma) {
      var node = startNodeFrom(expr);
      node.expressions = [expr];
      while (eat(tt.comma)) node.expressions.push(parseMaybeAssign(noIn));
      return finishNode(node, "SequenceExpression");
    }
    return expr;
  }

  function parseParenExpression() {
    pushCx();
    expect(tt.parenL);
    var val = parseExpression();
    popCx();
    expect(tt.parenR);
    return val;
  }

  function parseMaybeAssign(noIn) {
    var left = parseMaybeConditional(noIn);
    if (token.type.isAssign) {
      var node = startNodeFrom(left);
      node.operator = token.value;
      node.left = checkLVal(left);
      next();
      node.right = parseMaybeAssign(noIn);
      return finishNode(node, "AssignmentExpression");
    }
    return left;
  }

  function parseMaybeConditional(noIn) {
    var expr = parseExprOps(noIn);
    if (eat(tt.question)) {
      var node = startNodeFrom(expr);
      node.test = expr;
      node.consequent = parseExpression(true);
      node.alternate = expect(tt.colon) ? parseExpression(true, noIn) : dummyIdent();
      return finishNode(node, "ConditionalExpression");
    }
    return expr;
  }

  function parseExprOps(noIn) {
    var indent = curIndent, line = curLineStart;
    return parseExprOp(parseMaybeUnary(noIn), -1, noIn, indent, line);
  }

  function parseExprOp(left, minPrec, noIn, indent, line) {
    if (curLineStart != line && curIndent < indent && tokenStartsLine()) return left;
    var prec = token.type.binop;
    if (prec != null && (!noIn || token.type !== tt._in)) {
      if (prec > minPrec) {
        var node = startNodeFrom(left);
        node.left = left;
        node.operator = token.value;
        next();
        if (curLineStart != line && curIndent < indent && tokenStartsLine())
          node.right = dummyIdent();
        else
          node.right = parseExprOp(parseMaybeUnary(noIn), prec, noIn, indent, line);
        var node = finishNode(node, /&&|\|\|/.test(node.operator) ? "LogicalExpression" : "BinaryExpression");
        return parseExprOp(node, minPrec, noIn, indent, line);
      }
    }
    return left;
  }

  function parseMaybeUnary(noIn) {
    if (token.type.prefix) {
      var node = startNode(), update = token.type.isUpdate;
      node.operator = token.value;
      node.prefix = true;
      next();
      node.argument = parseMaybeUnary(noIn);
      if (update) node.argument = checkLVal(node.argument);
      return finishNode(node, update ? "UpdateExpression" : "UnaryExpression");
    }
    var expr = parseExprSubscripts();
    while (token.type.postfix && !canInsertSemicolon()) {
      var node = startNodeFrom(expr);
      node.operator = token.value;
      node.prefix = false;
      node.argument = checkLVal(expr);
      next();
      expr = finishNode(node, "UpdateExpression");
    }
    return expr;
  }

  function parseExprSubscripts() {
    var indent = curIndent, line = curLineStart;
    return parseSubscripts(parseExprAtom(), false, curIndent, line);
  }

  function parseSubscripts(base, noCalls, startIndent, line) {
    for (;;) {
      if (curLineStart != line && curIndent <= startIndent && tokenStartsLine()) {
        if (token.type == tt.dot && curIndent == startIndent)
          --startIndent;
        else
          return base;
      }

      if (eat(tt.dot)) {
        var node = startNodeFrom(base);
        node.object = base;
        if (curLineStart != line && curIndent <= startIndent && tokenStartsLine())
          node.property = dummyIdent();
        else
          node.property = parsePropertyName() || dummyIdent();
        node.computed = false;
        base = finishNode(node, "MemberExpression");
      } else if (token.type == tt.bracketL) {
        pushCx();
        next();
        var node = startNodeFrom(base);
        node.object = base;
        node.property = parseExpression();
        node.computed = true;
        popCx();
        expect(tt.bracketR);
        base = finishNode(node, "MemberExpression");
      } else if (!noCalls && token.type == tt.parenL) {
        pushCx();
        var node = startNodeFrom(base);
        node.callee = base;
        node.arguments = parseExprList(tt.parenR);
        base = finishNode(node, "CallExpression");
      } else {
        return base;
      }
    }
  }

  function parseExprAtom() {
    switch (token.type) {
    case tt._this:
      var node = startNode();
      next();
      return finishNode(node, "ThisExpression");
    case tt.name:
      return parseIdent();
    case tt.num: case tt.string: case tt.regexp:
      var node = startNode();
      node.value = token.value;
      node.raw = input.slice(token.start, token.end);
      next();
      return finishNode(node, "Literal");

    case tt._null: case tt._true: case tt._false:
      var node = startNode();
      node.value = token.type.atomValue;
      node.raw = token.type.keyword;
      next();
      return finishNode(node, "Literal");

    case tt.parenL:
      var tokStart1 = token.start;
      next();
      var val = parseExpression();
      val.start = tokStart1;
      val.end = token.end;
      expect(tt.parenR);
      return val;

    case tt.bracketL:
      var node = startNode();
      pushCx();
      node.elements = parseExprList(tt.bracketR);
      return finishNode(node, "ArrayExpression");

    case tt.braceL:
      return parseObj();

    case tt._function:
      var node = startNode();
      next();
      return parseFunction(node, false);

    case tt._new:
      return parseNew();

    default:
      return dummyIdent();
    }
  }

  function parseNew() {
    var node = startNode(), startIndent = curIndent, line = curLineStart;
    next();
    node.callee = parseSubscripts(parseExprAtom(), true, startIndent, line);
    if (token.type == tt.parenL) {
      pushCx();
      node.arguments = parseExprList(tt.parenR);
    } else {
      node.arguments = [];
    }
    return finishNode(node, "NewExpression");
  }

  function parseObj() {
    var node = startNode();
    node.properties = [];
    pushCx();
    next();
    var propIndent = curIndent, line = curLineStart;
    while (!closes(tt.braceR, propIndent, line)) {
      var name = parsePropertyName();
      if (!name) { if (isDummy(parseExpression(true))) next(); eat(tt.comma); continue; }
      var prop = {key: name}, isGetSet = false, kind;
      if (eat(tt.colon)) {
        prop.value = parseExpression(true);
        kind = prop.kind = "init";
      } else if (options.ecmaVersion >= 5 && prop.key.type === "Identifier" &&
                 (prop.key.name === "get" || prop.key.name === "set")) {
        isGetSet = true;
        kind = prop.kind = prop.key.name;
        prop.key = parsePropertyName() || dummyIdent();
        prop.value = parseFunction(startNode(), false);
      } else {
        next();
        eat(tt.comma);
        continue;
      }

      node.properties.push(prop);
      eat(tt.comma);
    }
    popCx();
    eat(tt.braceR);
    return finishNode(node, "ObjectExpression");
  }

  function parsePropertyName() {
    if (token.type === tt.num || token.type === tt.string) return parseExprAtom();
    if (token.type === tt.name || token.type.keyword) return parseIdent();
  }

  function parseIdent() {
    var node = startNode();
    node.name = token.type === tt.name ? token.value : token.type.keyword;
    next();
    return finishNode(node, "Identifier");
  }

  function parseFunction(node, isStatement) {
    if (token.type === tt.name) node.id = parseIdent();
    else if (isStatement) node.id = dummyIdent();
    else node.id = null;
    node.params = [];
    pushCx();
    expect(tt.parenL);
    while (token.type == tt.name) {
      node.params.push(parseIdent());
      eat(tt.comma);
    }
    popCx();
    eat(tt.parenR);
    node.body = parseBlock();
    return finishNode(node, isStatement ? "FunctionDeclaration" : "FunctionExpression");
  }

  function parseExprList(close) {
    var indent = curIndent, line = curLineStart, elts = [], continuedLine = nextLineStart;
    next(); // Opening bracket
    while (!closes(close, indent + (curLineStart <= continuedLine ? 1 : 0), line)) {
      var elt = parseExpression(true);
      if (isDummy(elt)) {
        if (closes(close, indent, line)) break;
        next();
      } else {
        elts.push(elt);
      }
      while (eat(tt.comma)) {}
    }
    popCx();
    eat(close);
    return elts;
  }
});

},{"./acorn":19}],21:[function(require,module,exports){
module.exports={"type":"Program","body":[{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"env","loc":{"start":{"line":1,"column":4},"end":{"line":1,"column":7}}},"init":{"type":"ObjectExpression","properties":[],"loc":{"start":{"line":1,"column":10},"end":{"line":1,"column":12}}},"loc":{"start":{"line":1,"column":4},"end":{"line":1,"column":12}}}],"kind":"var","loc":{"start":{"line":1,"column":0},"end":{"line":1,"column":13}}},{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"__lua","loc":{"start":{"line":2,"column":4},"end":{"line":2,"column":9}}},"init":{"type":"CallExpression","callee":{"type":"FunctionExpression","id":null,"params":[],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"isJSArray","loc":{"start":{"line":5,"column":5},"end":{"line":5,"column":14}}},"init":{"type":"LogicalExpression","operator":"||","left":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"Array","loc":{"start":{"line":5,"column":17},"end":{"line":5,"column":22}}},"property":{"type":"Identifier","name":"isArray","loc":{"start":{"line":5,"column":23},"end":{"line":5,"column":30}}},"loc":{"start":{"line":5,"column":17},"end":{"line":5,"column":30}}},"right":{"type":"FunctionExpression","id":null,"params":[{"type":"Identifier","name":"obj","loc":{"start":{"line":5,"column":43},"end":{"line":5,"column":46}}}],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"ReturnStatement","argument":{"type":"BinaryExpression","operator":"===","left":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"toString","loc":{"start":{"line":5,"column":57},"end":{"line":5,"column":65}}},"property":{"type":"Identifier","name":"call","loc":{"start":{"line":5,"column":66},"end":{"line":5,"column":70}}},"loc":{"start":{"line":5,"column":57},"end":{"line":5,"column":70}}},"arguments":[{"type":"Identifier","name":"obj","loc":{"start":{"line":5,"column":71},"end":{"line":5,"column":74}}}],"loc":{"start":{"line":5,"column":57},"end":{"line":5,"column":75}}},"right":{"type":"Literal","value":"[object Array]","raw":"'[object Array]'","loc":{"start":{"line":5,"column":80},"end":{"line":5,"column":96}}},"loc":{"start":{"line":5,"column":57},"end":{"line":5,"column":96}}},"loc":{"start":{"line":5,"column":50},"end":{"line":5,"column":97}}}],"loc":{"start":{"line":5,"column":48},"end":{"line":5,"column":99}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":5,"column":34},"end":{"line":5,"column":99}}},"loc":{"start":{"line":5,"column":17},"end":{"line":5,"column":99}}},"loc":{"start":{"line":5,"column":5},"end":{"line":5,"column":99}}}],"kind":"var","loc":{"start":{"line":5,"column":1},"end":{"line":5,"column":100}}},{"type":"FunctionDeclaration","id":{"type":"Identifier","name":"type","loc":{"start":{"line":7,"column":10},"end":{"line":7,"column":14}}},"params":[{"type":"Identifier","name":"what","loc":{"start":{"line":7,"column":15},"end":{"line":7,"column":19}}}],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"IfStatement","test":{"type":"LogicalExpression","operator":"||","left":{"type":"BinaryExpression","operator":"===","left":{"type":"Identifier","name":"what","loc":{"start":{"line":8,"column":7},"end":{"line":8,"column":11}}},"right":{"type":"Literal","value":null,"raw":"null","loc":{"start":{"line":8,"column":16},"end":{"line":8,"column":20}}},"loc":{"start":{"line":8,"column":7},"end":{"line":8,"column":20}}},"right":{"type":"BinaryExpression","operator":"===","left":{"type":"Identifier","name":"what","loc":{"start":{"line":8,"column":24},"end":{"line":8,"column":28}}},"right":{"type":"Identifier","name":"undefined","loc":{"start":{"line":8,"column":33},"end":{"line":8,"column":42}}},"loc":{"start":{"line":8,"column":24},"end":{"line":8,"column":42}}},"loc":{"start":{"line":8,"column":7},"end":{"line":8,"column":42}}},"consequent":{"type":"ReturnStatement","argument":{"type":"Literal","value":"nil","raw":"\"nil\"","loc":{"start":{"line":8,"column":52},"end":{"line":8,"column":57}}},"loc":{"start":{"line":8,"column":45},"end":{"line":8,"column":58}}},"alternate":null,"loc":{"start":{"line":8,"column":2},"end":{"line":8,"column":58}}},{"type":"IfStatement","test":{"type":"CallExpression","callee":{"type":"Identifier","name":"isNaN","loc":{"start":{"line":9,"column":7},"end":{"line":9,"column":12}}},"arguments":[{"type":"Identifier","name":"what","loc":{"start":{"line":9,"column":13},"end":{"line":9,"column":17}}}],"loc":{"start":{"line":9,"column":7},"end":{"line":9,"column":18}}},"consequent":{"type":"ReturnStatement","argument":{"type":"Literal","value":"number","raw":"\"number\"","loc":{"start":{"line":9,"column":28},"end":{"line":9,"column":36}}},"loc":{"start":{"line":9,"column":21},"end":{"line":9,"column":37}}},"alternate":null,"loc":{"start":{"line":9,"column":2},"end":{"line":9,"column":37}}},{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"t","loc":{"start":{"line":10,"column":6},"end":{"line":10,"column":7}}},"init":{"type":"UnaryExpression","operator":"typeof","argument":{"type":"Identifier","name":"what","loc":{"start":{"line":10,"column":17},"end":{"line":10,"column":21}}},"prefix":true,"loc":{"start":{"line":10,"column":10},"end":{"line":10,"column":21}}},"loc":{"start":{"line":10,"column":6},"end":{"line":10,"column":21}}}],"kind":"var","loc":{"start":{"line":10,"column":2},"end":{"line":10,"column":22}}},{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"==","left":{"type":"Identifier","name":"t","loc":{"start":{"line":11,"column":7},"end":{"line":11,"column":8}}},"right":{"type":"Literal","value":"object","raw":"\"object\"","loc":{"start":{"line":11,"column":12},"end":{"line":11,"column":20}}},"loc":{"start":{"line":11,"column":7},"end":{"line":11,"column":20}}},"consequent":{"type":"ReturnStatement","argument":{"type":"Literal","value":"table","raw":"\"table\"","loc":{"start":{"line":11,"column":30},"end":{"line":11,"column":37}}},"loc":{"start":{"line":11,"column":23},"end":{"line":11,"column":38}}},"alternate":null,"loc":{"start":{"line":11,"column":2},"end":{"line":11,"column":38}}},{"type":"ReturnStatement","argument":{"type":"Identifier","name":"t","loc":{"start":{"line":12,"column":9},"end":{"line":12,"column":10}}},"loc":{"start":{"line":12,"column":2},"end":{"line":12,"column":11}}}],"loc":{"start":{"line":7,"column":21},"end":{"line":13,"column":2}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":7,"column":1},"end":{"line":13,"column":2}}},{"type":"FunctionDeclaration","id":{"type":"Identifier","name":"numberForArith","loc":{"start":{"line":15,"column":10},"end":{"line":15,"column":24}}},"params":[{"type":"Identifier","name":"n","loc":{"start":{"line":15,"column":25},"end":{"line":15,"column":26}}}],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"==","left":{"type":"CallExpression","callee":{"type":"Identifier","name":"type","loc":{"start":{"line":16,"column":7},"end":{"line":16,"column":11}}},"arguments":[{"type":"Identifier","name":"n","loc":{"start":{"line":16,"column":12},"end":{"line":16,"column":13}}}],"loc":{"start":{"line":16,"column":7},"end":{"line":16,"column":14}}},"right":{"type":"Literal","value":"number","raw":"\"number\"","loc":{"start":{"line":16,"column":18},"end":{"line":16,"column":26}}},"loc":{"start":{"line":16,"column":7},"end":{"line":16,"column":26}}},"consequent":{"type":"ReturnStatement","argument":{"type":"Identifier","name":"n","loc":{"start":{"line":16,"column":36},"end":{"line":16,"column":37}}},"loc":{"start":{"line":16,"column":29},"end":{"line":16,"column":38}}},"alternate":{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"==","left":{"type":"UnaryExpression","operator":"typeof","argument":{"type":"Identifier","name":"n","loc":{"start":{"line":17,"column":19},"end":{"line":17,"column":20}}},"prefix":true,"loc":{"start":{"line":17,"column":12},"end":{"line":17,"column":20}}},"right":{"type":"Literal","value":"string","raw":"\"string\"","loc":{"start":{"line":17,"column":24},"end":{"line":17,"column":32}}},"loc":{"start":{"line":17,"column":12},"end":{"line":17,"column":32}}},"consequent":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"Identifier","name":"n","loc":{"start":{"line":18,"column":3},"end":{"line":18,"column":4}}},"right":{"type":"CallExpression","callee":{"type":"Identifier","name":"parseInt","loc":{"start":{"line":18,"column":7},"end":{"line":18,"column":15}}},"arguments":[{"type":"Identifier","name":"n","loc":{"start":{"line":18,"column":16},"end":{"line":18,"column":17}}}],"loc":{"start":{"line":18,"column":7},"end":{"line":18,"column":18}}},"loc":{"start":{"line":18,"column":3},"end":{"line":18,"column":18}}},"loc":{"start":{"line":18,"column":3},"end":{"line":18,"column":19}}},{"type":"IfStatement","test":{"type":"UnaryExpression","operator":"!","argument":{"type":"CallExpression","callee":{"type":"Identifier","name":"isNaN","loc":{"start":{"line":19,"column":9},"end":{"line":19,"column":14}}},"arguments":[{"type":"Identifier","name":"n","loc":{"start":{"line":19,"column":15},"end":{"line":19,"column":16}}}],"loc":{"start":{"line":19,"column":9},"end":{"line":19,"column":17}}},"prefix":true,"loc":{"start":{"line":19,"column":8},"end":{"line":19,"column":17}}},"consequent":{"type":"ReturnStatement","argument":{"type":"Identifier","name":"n","loc":{"start":{"line":19,"column":27},"end":{"line":19,"column":28}}},"loc":{"start":{"line":19,"column":20},"end":{"line":19,"column":29}}},"alternate":null,"loc":{"start":{"line":19,"column":3},"end":{"line":19,"column":29}}}],"loc":{"start":{"line":17,"column":35},"end":{"line":21,"column":3}}},"alternate":null,"loc":{"start":{"line":17,"column":7},"end":{"line":21,"column":3}}},"loc":{"start":{"line":16,"column":2},"end":{"line":21,"column":3}}},{"type":"ThrowStatement","argument":{"type":"BinaryExpression","operator":"+","left":{"type":"BinaryExpression","operator":"+","left":{"type":"BinaryExpression","operator":"+","left":{"type":"Literal","value":"attempt to perform arithmetic on a ","raw":"\"attempt to perform arithmetic on a \"","loc":{"start":{"line":23,"column":8},"end":{"line":23,"column":45}}},"right":{"type":"CallExpression","callee":{"type":"Identifier","name":"type","loc":{"start":{"line":23,"column":49},"end":{"line":23,"column":53}}},"arguments":[{"type":"Identifier","name":"n","loc":{"start":{"line":23,"column":54},"end":{"line":23,"column":55}}}],"loc":{"start":{"line":23,"column":49},"end":{"line":23,"column":56}}},"loc":{"start":{"line":23,"column":8},"end":{"line":23,"column":56}}},"right":{"type":"Literal","value":" value: ","raw":"\" value: \"","loc":{"start":{"line":23,"column":59},"end":{"line":23,"column":69}}},"loc":{"start":{"line":23,"column":8},"end":{"line":23,"column":69}}},"right":{"type":"Identifier","name":"n","loc":{"start":{"line":23,"column":72},"end":{"line":23,"column":73}}},"loc":{"start":{"line":23,"column":8},"end":{"line":23,"column":73}}},"loc":{"start":{"line":23,"column":2},"end":{"line":23,"column":74}}}],"loc":{"start":{"line":15,"column":28},"end":{"line":24,"column":2}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":15,"column":1},"end":{"line":24,"column":2}}},{"type":"FunctionDeclaration","id":{"type":"Identifier","name":"makeString","loc":{"start":{"line":26,"column":10},"end":{"line":26,"column":20}}},"params":[{"type":"Identifier","name":"a","loc":{"start":{"line":26,"column":21},"end":{"line":26,"column":22}}}],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"Identifier","name":"a","loc":{"start":{"line":27,"column":2},"end":{"line":27,"column":3}}},"right":{"type":"CallExpression","callee":{"type":"Identifier","name":"oneValue","loc":{"start":{"line":27,"column":6},"end":{"line":27,"column":14}}},"arguments":[{"type":"Identifier","name":"a","loc":{"start":{"line":27,"column":15},"end":{"line":27,"column":16}}}],"loc":{"start":{"line":27,"column":6},"end":{"line":27,"column":17}}},"loc":{"start":{"line":27,"column":2},"end":{"line":27,"column":17}}},"loc":{"start":{"line":27,"column":2},"end":{"line":27,"column":18}}},{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"mtf","loc":{"start":{"line":29,"column":6},"end":{"line":29,"column":9}}},"init":{"type":"CallExpression","callee":{"type":"Identifier","name":"lookupMetaTable","loc":{"start":{"line":29,"column":12},"end":{"line":29,"column":27}}},"arguments":[{"type":"Identifier","name":"a","loc":{"start":{"line":29,"column":28},"end":{"line":29,"column":29}}},{"type":"Literal","value":"__tostring","raw":"\"__tostring\"","loc":{"start":{"line":29,"column":31},"end":{"line":29,"column":43}}}],"loc":{"start":{"line":29,"column":12},"end":{"line":29,"column":44}}},"loc":{"start":{"line":29,"column":6},"end":{"line":29,"column":44}}}],"kind":"var","loc":{"start":{"line":29,"column":2},"end":{"line":29,"column":45}}},{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"!==","left":{"type":"Identifier","name":"mtf","loc":{"start":{"line":30,"column":7},"end":{"line":30,"column":10}}},"right":{"type":"Literal","value":null,"raw":"null","loc":{"start":{"line":30,"column":15},"end":{"line":30,"column":19}}},"loc":{"start":{"line":30,"column":7},"end":{"line":30,"column":19}}},"consequent":{"type":"ReturnStatement","argument":{"type":"CallExpression","callee":{"type":"Identifier","name":"mtf","loc":{"start":{"line":30,"column":29},"end":{"line":30,"column":32}}},"arguments":[{"type":"Identifier","name":"a","loc":{"start":{"line":30,"column":33},"end":{"line":30,"column":34}}}],"loc":{"start":{"line":30,"column":29},"end":{"line":30,"column":35}}},"loc":{"start":{"line":30,"column":22},"end":{"line":30,"column":36}}},"alternate":null,"loc":{"start":{"line":30,"column":2},"end":{"line":30,"column":36}}},{"type":"IfStatement","test":{"type":"LogicalExpression","operator":"||","left":{"type":"BinaryExpression","operator":"===","left":{"type":"Identifier","name":"a","loc":{"start":{"line":32,"column":7},"end":{"line":32,"column":8}}},"right":{"type":"Identifier","name":"undefined","loc":{"start":{"line":32,"column":13},"end":{"line":32,"column":22}}},"loc":{"start":{"line":32,"column":7},"end":{"line":32,"column":22}}},"right":{"type":"BinaryExpression","operator":"===","left":{"type":"Identifier","name":"a","loc":{"start":{"line":32,"column":26},"end":{"line":32,"column":27}}},"right":{"type":"Literal","value":null,"raw":"null","loc":{"start":{"line":32,"column":32},"end":{"line":32,"column":36}}},"loc":{"start":{"line":32,"column":26},"end":{"line":32,"column":36}}},"loc":{"start":{"line":32,"column":7},"end":{"line":32,"column":36}}},"consequent":{"type":"ReturnStatement","argument":{"type":"Literal","value":"nil","raw":"\"nil\"","loc":{"start":{"line":32,"column":46},"end":{"line":32,"column":51}}},"loc":{"start":{"line":32,"column":39},"end":{"line":32,"column":52}}},"alternate":null,"loc":{"start":{"line":32,"column":2},"end":{"line":32,"column":52}}},{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"instanceof","left":{"type":"Identifier","name":"a","loc":{"start":{"line":33,"column":7},"end":{"line":33,"column":8}}},"right":{"type":"Identifier","name":"LuaTable","loc":{"start":{"line":33,"column":20},"end":{"line":33,"column":28}}},"loc":{"start":{"line":33,"column":7},"end":{"line":33,"column":28}}},"consequent":{"type":"BlockStatement","body":[{"type":"ReturnStatement","argument":{"type":"BinaryExpression","operator":"+","left":{"type":"Literal","value":"table: 0x","raw":"\"table: 0x\"","loc":{"start":{"line":34,"column":10},"end":{"line":34,"column":21}}},"right":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"a","loc":{"start":{"line":34,"column":24},"end":{"line":34,"column":25}}},"property":{"type":"Identifier","name":"id","loc":{"start":{"line":34,"column":26},"end":{"line":34,"column":28}}},"loc":{"start":{"line":34,"column":24},"end":{"line":34,"column":28}}},"loc":{"start":{"line":34,"column":10},"end":{"line":34,"column":28}}},"loc":{"start":{"line":34,"column":3},"end":{"line":34,"column":29}}}],"loc":{"start":{"line":33,"column":31},"end":{"line":35,"column":3}}},"alternate":{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"==","left":{"type":"UnaryExpression","operator":"typeof","argument":{"type":"Identifier","name":"a","loc":{"start":{"line":35,"column":21},"end":{"line":35,"column":22}}},"prefix":true,"loc":{"start":{"line":35,"column":14},"end":{"line":35,"column":22}}},"right":{"type":"Literal","value":"number","raw":"\"number\"","loc":{"start":{"line":35,"column":26},"end":{"line":35,"column":34}}},"loc":{"start":{"line":35,"column":14},"end":{"line":35,"column":34}}},"consequent":{"type":"BlockStatement","body":[{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"==","left":{"type":"UnaryExpression","operator":"~","argument":{"type":"UnaryExpression","operator":"~","argument":{"type":"Identifier","name":"a","loc":{"start":{"line":36,"column":10},"end":{"line":36,"column":11}}},"prefix":true,"loc":{"start":{"line":36,"column":9},"end":{"line":36,"column":11}}},"prefix":true,"loc":{"start":{"line":36,"column":8},"end":{"line":36,"column":11}}},"right":{"type":"Identifier","name":"a","loc":{"start":{"line":36,"column":15},"end":{"line":36,"column":16}}},"loc":{"start":{"line":36,"column":8},"end":{"line":36,"column":16}}},"consequent":{"type":"ReturnStatement","argument":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"a","loc":{"start":{"line":36,"column":26},"end":{"line":36,"column":27}}},"property":{"type":"Identifier","name":"toString","loc":{"start":{"line":36,"column":28},"end":{"line":36,"column":36}}},"loc":{"start":{"line":36,"column":26},"end":{"line":36,"column":36}}},"arguments":[],"loc":{"start":{"line":36,"column":26},"end":{"line":36,"column":38}}},"loc":{"start":{"line":36,"column":19},"end":{"line":36,"column":39}}},"alternate":null,"loc":{"start":{"line":36,"column":3},"end":{"line":36,"column":39}}},{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"rep","loc":{"start":{"line":37,"column":7},"end":{"line":37,"column":10}}},"init":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"a","loc":{"start":{"line":37,"column":13},"end":{"line":37,"column":14}}},"property":{"type":"Identifier","name":"toPrecision","loc":{"start":{"line":37,"column":15},"end":{"line":37,"column":26}}},"loc":{"start":{"line":37,"column":13},"end":{"line":37,"column":26}}},"arguments":[],"loc":{"start":{"line":37,"column":13},"end":{"line":37,"column":28}}},"loc":{"start":{"line":37,"column":7},"end":{"line":37,"column":28}}}],"kind":"var","loc":{"start":{"line":37,"column":3},"end":{"line":37,"column":29}}},{"type":"IfStatement","test":{"type":"BinaryExpression","operator":">","left":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"rep","loc":{"start":{"line":38,"column":8},"end":{"line":38,"column":11}}},"property":{"type":"Identifier","name":"length","loc":{"start":{"line":38,"column":12},"end":{"line":38,"column":18}}},"loc":{"start":{"line":38,"column":8},"end":{"line":38,"column":18}}},"right":{"type":"Literal","value":14,"raw":"14","loc":{"start":{"line":38,"column":21},"end":{"line":38,"column":23}}},"loc":{"start":{"line":38,"column":8},"end":{"line":38,"column":23}}},"consequent":{"type":"ReturnStatement","argument":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"a","loc":{"start":{"line":38,"column":33},"end":{"line":38,"column":34}}},"property":{"type":"Identifier","name":"toPrecision","loc":{"start":{"line":38,"column":35},"end":{"line":38,"column":46}}},"loc":{"start":{"line":38,"column":33},"end":{"line":38,"column":46}}},"arguments":[{"type":"Literal","value":14,"raw":"14","loc":{"start":{"line":38,"column":47},"end":{"line":38,"column":49}}}],"loc":{"start":{"line":38,"column":33},"end":{"line":38,"column":50}}},"loc":{"start":{"line":38,"column":26},"end":{"line":38,"column":51}}},"alternate":null,"loc":{"start":{"line":38,"column":3},"end":{"line":38,"column":51}}},{"type":"ReturnStatement","argument":{"type":"Identifier","name":"rep","loc":{"start":{"line":39,"column":10},"end":{"line":39,"column":13}}},"loc":{"start":{"line":39,"column":3},"end":{"line":39,"column":14}}}],"loc":{"start":{"line":35,"column":37},"end":{"line":40,"column":3}}},"alternate":null,"loc":{"start":{"line":35,"column":9},"end":{"line":40,"column":3}}},"loc":{"start":{"line":33,"column":2},"end":{"line":40,"column":3}}},{"type":"ReturnStatement","argument":{"type":"BinaryExpression","operator":"+","left":{"type":"Literal","value":"","raw":"\"\"","loc":{"start":{"line":41,"column":9},"end":{"line":41,"column":11}}},"right":{"type":"Identifier","name":"a","loc":{"start":{"line":41,"column":14},"end":{"line":41,"column":15}}},"loc":{"start":{"line":41,"column":9},"end":{"line":41,"column":15}}},"loc":{"start":{"line":41,"column":2},"end":{"line":41,"column":16}}}],"loc":{"start":{"line":26,"column":24},"end":{"line":42,"column":2}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":26,"column":1},"end":{"line":42,"column":2}}},{"type":"FunctionDeclaration","id":{"type":"Identifier","name":"add","loc":{"start":{"line":44,"column":10},"end":{"line":44,"column":13}}},"params":[{"type":"Identifier","name":"a","loc":{"start":{"line":44,"column":14},"end":{"line":44,"column":15}}},{"type":"Identifier","name":"b","loc":{"start":{"line":44,"column":16},"end":{"line":44,"column":17}}}],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"Identifier","name":"a","loc":{"start":{"line":45,"column":2},"end":{"line":45,"column":3}}},"right":{"type":"CallExpression","callee":{"type":"Identifier","name":"oneValue","loc":{"start":{"line":45,"column":6},"end":{"line":45,"column":14}}},"arguments":[{"type":"Identifier","name":"a","loc":{"start":{"line":45,"column":15},"end":{"line":45,"column":16}}}],"loc":{"start":{"line":45,"column":6},"end":{"line":45,"column":17}}},"loc":{"start":{"line":45,"column":2},"end":{"line":45,"column":17}}},"loc":{"start":{"line":45,"column":2},"end":{"line":45,"column":18}}},{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"Identifier","name":"b","loc":{"start":{"line":45,"column":19},"end":{"line":45,"column":20}}},"right":{"type":"CallExpression","callee":{"type":"Identifier","name":"oneValue","loc":{"start":{"line":45,"column":23},"end":{"line":45,"column":31}}},"arguments":[{"type":"Identifier","name":"b","loc":{"start":{"line":45,"column":32},"end":{"line":45,"column":33}}}],"loc":{"start":{"line":45,"column":23},"end":{"line":45,"column":34}}},"loc":{"start":{"line":45,"column":19},"end":{"line":45,"column":34}}},"loc":{"start":{"line":45,"column":19},"end":{"line":45,"column":35}}},{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"mtf","loc":{"start":{"line":47,"column":6},"end":{"line":47,"column":9}}},"init":{"type":"CallExpression","callee":{"type":"Identifier","name":"lookupMetaTableBin","loc":{"start":{"line":47,"column":12},"end":{"line":47,"column":30}}},"arguments":[{"type":"Identifier","name":"a","loc":{"start":{"line":47,"column":31},"end":{"line":47,"column":32}}},{"type":"Identifier","name":"b","loc":{"start":{"line":47,"column":34},"end":{"line":47,"column":35}}},{"type":"Literal","value":"__add","raw":"\"__add\"","loc":{"start":{"line":47,"column":37},"end":{"line":47,"column":44}}}],"loc":{"start":{"line":47,"column":12},"end":{"line":47,"column":45}}},"loc":{"start":{"line":47,"column":6},"end":{"line":47,"column":45}}}],"kind":"var","loc":{"start":{"line":47,"column":2},"end":{"line":47,"column":46}}},{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"!==","left":{"type":"Identifier","name":"mtf","loc":{"start":{"line":48,"column":7},"end":{"line":48,"column":10}}},"right":{"type":"Literal","value":null,"raw":"null","loc":{"start":{"line":48,"column":15},"end":{"line":48,"column":19}}},"loc":{"start":{"line":48,"column":7},"end":{"line":48,"column":19}}},"consequent":{"type":"ReturnStatement","argument":{"type":"CallExpression","callee":{"type":"Identifier","name":"mtf","loc":{"start":{"line":48,"column":29},"end":{"line":48,"column":32}}},"arguments":[{"type":"Identifier","name":"a","loc":{"start":{"line":48,"column":33},"end":{"line":48,"column":34}}},{"type":"Identifier","name":"b","loc":{"start":{"line":48,"column":35},"end":{"line":48,"column":36}}}],"loc":{"start":{"line":48,"column":29},"end":{"line":48,"column":37}}},"loc":{"start":{"line":48,"column":22},"end":{"line":48,"column":38}}},"alternate":null,"loc":{"start":{"line":48,"column":2},"end":{"line":48,"column":38}}},{"type":"ReturnStatement","argument":{"type":"BinaryExpression","operator":"+","left":{"type":"CallExpression","callee":{"type":"Identifier","name":"numberForArith","loc":{"start":{"line":50,"column":9},"end":{"line":50,"column":23}}},"arguments":[{"type":"Identifier","name":"a","loc":{"start":{"line":50,"column":24},"end":{"line":50,"column":25}}}],"loc":{"start":{"line":50,"column":9},"end":{"line":50,"column":26}}},"right":{"type":"CallExpression","callee":{"type":"Identifier","name":"numberForArith","loc":{"start":{"line":50,"column":29},"end":{"line":50,"column":43}}},"arguments":[{"type":"Identifier","name":"b","loc":{"start":{"line":50,"column":44},"end":{"line":50,"column":45}}}],"loc":{"start":{"line":50,"column":29},"end":{"line":50,"column":46}}},"loc":{"start":{"line":50,"column":9},"end":{"line":50,"column":46}}},"loc":{"start":{"line":50,"column":2},"end":{"line":50,"column":47}}}],"loc":{"start":{"line":44,"column":19},"end":{"line":51,"column":2}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":44,"column":1},"end":{"line":51,"column":2}}},{"type":"FunctionDeclaration","id":{"type":"Identifier","name":"sub","loc":{"start":{"line":53,"column":10},"end":{"line":53,"column":13}}},"params":[{"type":"Identifier","name":"a","loc":{"start":{"line":53,"column":14},"end":{"line":53,"column":15}}},{"type":"Identifier","name":"b","loc":{"start":{"line":53,"column":16},"end":{"line":53,"column":17}}}],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"Identifier","name":"a","loc":{"start":{"line":54,"column":2},"end":{"line":54,"column":3}}},"right":{"type":"CallExpression","callee":{"type":"Identifier","name":"oneValue","loc":{"start":{"line":54,"column":6},"end":{"line":54,"column":14}}},"arguments":[{"type":"Identifier","name":"a","loc":{"start":{"line":54,"column":15},"end":{"line":54,"column":16}}}],"loc":{"start":{"line":54,"column":6},"end":{"line":54,"column":17}}},"loc":{"start":{"line":54,"column":2},"end":{"line":54,"column":17}}},"loc":{"start":{"line":54,"column":2},"end":{"line":54,"column":18}}},{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"Identifier","name":"b","loc":{"start":{"line":54,"column":19},"end":{"line":54,"column":20}}},"right":{"type":"CallExpression","callee":{"type":"Identifier","name":"oneValue","loc":{"start":{"line":54,"column":23},"end":{"line":54,"column":31}}},"arguments":[{"type":"Identifier","name":"b","loc":{"start":{"line":54,"column":32},"end":{"line":54,"column":33}}}],"loc":{"start":{"line":54,"column":23},"end":{"line":54,"column":34}}},"loc":{"start":{"line":54,"column":19},"end":{"line":54,"column":34}}},"loc":{"start":{"line":54,"column":19},"end":{"line":54,"column":35}}},{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"mtf","loc":{"start":{"line":56,"column":6},"end":{"line":56,"column":9}}},"init":{"type":"CallExpression","callee":{"type":"Identifier","name":"lookupMetaTableBin","loc":{"start":{"line":56,"column":12},"end":{"line":56,"column":30}}},"arguments":[{"type":"Identifier","name":"a","loc":{"start":{"line":56,"column":31},"end":{"line":56,"column":32}}},{"type":"Identifier","name":"b","loc":{"start":{"line":56,"column":34},"end":{"line":56,"column":35}}},{"type":"Literal","value":"__sub","raw":"\"__sub\"","loc":{"start":{"line":56,"column":37},"end":{"line":56,"column":44}}}],"loc":{"start":{"line":56,"column":12},"end":{"line":56,"column":45}}},"loc":{"start":{"line":56,"column":6},"end":{"line":56,"column":45}}}],"kind":"var","loc":{"start":{"line":56,"column":2},"end":{"line":56,"column":46}}},{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"!==","left":{"type":"Identifier","name":"mtf","loc":{"start":{"line":57,"column":7},"end":{"line":57,"column":10}}},"right":{"type":"Literal","value":null,"raw":"null","loc":{"start":{"line":57,"column":15},"end":{"line":57,"column":19}}},"loc":{"start":{"line":57,"column":7},"end":{"line":57,"column":19}}},"consequent":{"type":"ReturnStatement","argument":{"type":"CallExpression","callee":{"type":"Identifier","name":"mtf","loc":{"start":{"line":57,"column":29},"end":{"line":57,"column":32}}},"arguments":[{"type":"Identifier","name":"a","loc":{"start":{"line":57,"column":33},"end":{"line":57,"column":34}}},{"type":"Identifier","name":"b","loc":{"start":{"line":57,"column":35},"end":{"line":57,"column":36}}}],"loc":{"start":{"line":57,"column":29},"end":{"line":57,"column":37}}},"loc":{"start":{"line":57,"column":22},"end":{"line":57,"column":38}}},"alternate":null,"loc":{"start":{"line":57,"column":2},"end":{"line":57,"column":38}}},{"type":"ReturnStatement","argument":{"type":"BinaryExpression","operator":"-","left":{"type":"CallExpression","callee":{"type":"Identifier","name":"numberForArith","loc":{"start":{"line":59,"column":9},"end":{"line":59,"column":23}}},"arguments":[{"type":"Identifier","name":"a","loc":{"start":{"line":59,"column":24},"end":{"line":59,"column":25}}}],"loc":{"start":{"line":59,"column":9},"end":{"line":59,"column":26}}},"right":{"type":"CallExpression","callee":{"type":"Identifier","name":"numberForArith","loc":{"start":{"line":59,"column":29},"end":{"line":59,"column":43}}},"arguments":[{"type":"Identifier","name":"b","loc":{"start":{"line":59,"column":44},"end":{"line":59,"column":45}}}],"loc":{"start":{"line":59,"column":29},"end":{"line":59,"column":46}}},"loc":{"start":{"line":59,"column":9},"end":{"line":59,"column":46}}},"loc":{"start":{"line":59,"column":2},"end":{"line":59,"column":47}}}],"loc":{"start":{"line":53,"column":19},"end":{"line":60,"column":2}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":53,"column":1},"end":{"line":60,"column":2}}},{"type":"FunctionDeclaration","id":{"type":"Identifier","name":"mul","loc":{"start":{"line":62,"column":10},"end":{"line":62,"column":13}}},"params":[{"type":"Identifier","name":"a","loc":{"start":{"line":62,"column":14},"end":{"line":62,"column":15}}},{"type":"Identifier","name":"b","loc":{"start":{"line":62,"column":16},"end":{"line":62,"column":17}}}],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"Identifier","name":"a","loc":{"start":{"line":63,"column":2},"end":{"line":63,"column":3}}},"right":{"type":"CallExpression","callee":{"type":"Identifier","name":"oneValue","loc":{"start":{"line":63,"column":6},"end":{"line":63,"column":14}}},"arguments":[{"type":"Identifier","name":"a","loc":{"start":{"line":63,"column":15},"end":{"line":63,"column":16}}}],"loc":{"start":{"line":63,"column":6},"end":{"line":63,"column":17}}},"loc":{"start":{"line":63,"column":2},"end":{"line":63,"column":17}}},"loc":{"start":{"line":63,"column":2},"end":{"line":63,"column":18}}},{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"Identifier","name":"b","loc":{"start":{"line":63,"column":19},"end":{"line":63,"column":20}}},"right":{"type":"CallExpression","callee":{"type":"Identifier","name":"oneValue","loc":{"start":{"line":63,"column":23},"end":{"line":63,"column":31}}},"arguments":[{"type":"Identifier","name":"b","loc":{"start":{"line":63,"column":32},"end":{"line":63,"column":33}}}],"loc":{"start":{"line":63,"column":23},"end":{"line":63,"column":34}}},"loc":{"start":{"line":63,"column":19},"end":{"line":63,"column":34}}},"loc":{"start":{"line":63,"column":19},"end":{"line":63,"column":35}}},{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"mtf","loc":{"start":{"line":65,"column":6},"end":{"line":65,"column":9}}},"init":{"type":"CallExpression","callee":{"type":"Identifier","name":"lookupMetaTableBin","loc":{"start":{"line":65,"column":12},"end":{"line":65,"column":30}}},"arguments":[{"type":"Identifier","name":"a","loc":{"start":{"line":65,"column":31},"end":{"line":65,"column":32}}},{"type":"Identifier","name":"b","loc":{"start":{"line":65,"column":34},"end":{"line":65,"column":35}}},{"type":"Literal","value":"__mul","raw":"\"__mul\"","loc":{"start":{"line":65,"column":37},"end":{"line":65,"column":44}}}],"loc":{"start":{"line":65,"column":12},"end":{"line":65,"column":45}}},"loc":{"start":{"line":65,"column":6},"end":{"line":65,"column":45}}}],"kind":"var","loc":{"start":{"line":65,"column":2},"end":{"line":65,"column":46}}},{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"!==","left":{"type":"Identifier","name":"mtf","loc":{"start":{"line":66,"column":7},"end":{"line":66,"column":10}}},"right":{"type":"Literal","value":null,"raw":"null","loc":{"start":{"line":66,"column":15},"end":{"line":66,"column":19}}},"loc":{"start":{"line":66,"column":7},"end":{"line":66,"column":19}}},"consequent":{"type":"ReturnStatement","argument":{"type":"CallExpression","callee":{"type":"Identifier","name":"mtf","loc":{"start":{"line":66,"column":29},"end":{"line":66,"column":32}}},"arguments":[{"type":"Identifier","name":"a","loc":{"start":{"line":66,"column":33},"end":{"line":66,"column":34}}},{"type":"Identifier","name":"b","loc":{"start":{"line":66,"column":35},"end":{"line":66,"column":36}}}],"loc":{"start":{"line":66,"column":29},"end":{"line":66,"column":37}}},"loc":{"start":{"line":66,"column":22},"end":{"line":66,"column":38}}},"alternate":null,"loc":{"start":{"line":66,"column":2},"end":{"line":66,"column":38}}},{"type":"ReturnStatement","argument":{"type":"BinaryExpression","operator":"*","left":{"type":"CallExpression","callee":{"type":"Identifier","name":"numberForArith","loc":{"start":{"line":68,"column":9},"end":{"line":68,"column":23}}},"arguments":[{"type":"Identifier","name":"a","loc":{"start":{"line":68,"column":24},"end":{"line":68,"column":25}}}],"loc":{"start":{"line":68,"column":9},"end":{"line":68,"column":26}}},"right":{"type":"CallExpression","callee":{"type":"Identifier","name":"numberForArith","loc":{"start":{"line":68,"column":29},"end":{"line":68,"column":43}}},"arguments":[{"type":"Identifier","name":"b","loc":{"start":{"line":68,"column":44},"end":{"line":68,"column":45}}}],"loc":{"start":{"line":68,"column":29},"end":{"line":68,"column":46}}},"loc":{"start":{"line":68,"column":9},"end":{"line":68,"column":46}}},"loc":{"start":{"line":68,"column":2},"end":{"line":68,"column":47}}}],"loc":{"start":{"line":62,"column":19},"end":{"line":69,"column":2}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":62,"column":1},"end":{"line":69,"column":2}}},{"type":"FunctionDeclaration","id":{"type":"Identifier","name":"div","loc":{"start":{"line":71,"column":10},"end":{"line":71,"column":13}}},"params":[{"type":"Identifier","name":"a","loc":{"start":{"line":71,"column":14},"end":{"line":71,"column":15}}},{"type":"Identifier","name":"b","loc":{"start":{"line":71,"column":16},"end":{"line":71,"column":17}}}],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"Identifier","name":"a","loc":{"start":{"line":72,"column":2},"end":{"line":72,"column":3}}},"right":{"type":"CallExpression","callee":{"type":"Identifier","name":"oneValue","loc":{"start":{"line":72,"column":6},"end":{"line":72,"column":14}}},"arguments":[{"type":"Identifier","name":"a","loc":{"start":{"line":72,"column":15},"end":{"line":72,"column":16}}}],"loc":{"start":{"line":72,"column":6},"end":{"line":72,"column":17}}},"loc":{"start":{"line":72,"column":2},"end":{"line":72,"column":17}}},"loc":{"start":{"line":72,"column":2},"end":{"line":72,"column":18}}},{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"Identifier","name":"b","loc":{"start":{"line":72,"column":19},"end":{"line":72,"column":20}}},"right":{"type":"CallExpression","callee":{"type":"Identifier","name":"oneValue","loc":{"start":{"line":72,"column":23},"end":{"line":72,"column":31}}},"arguments":[{"type":"Identifier","name":"b","loc":{"start":{"line":72,"column":32},"end":{"line":72,"column":33}}}],"loc":{"start":{"line":72,"column":23},"end":{"line":72,"column":34}}},"loc":{"start":{"line":72,"column":19},"end":{"line":72,"column":34}}},"loc":{"start":{"line":72,"column":19},"end":{"line":72,"column":35}}},{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"mtf","loc":{"start":{"line":74,"column":6},"end":{"line":74,"column":9}}},"init":{"type":"CallExpression","callee":{"type":"Identifier","name":"lookupMetaTableBin","loc":{"start":{"line":74,"column":12},"end":{"line":74,"column":30}}},"arguments":[{"type":"Identifier","name":"a","loc":{"start":{"line":74,"column":31},"end":{"line":74,"column":32}}},{"type":"Identifier","name":"b","loc":{"start":{"line":74,"column":34},"end":{"line":74,"column":35}}},{"type":"Literal","value":"__div","raw":"\"__div\"","loc":{"start":{"line":74,"column":37},"end":{"line":74,"column":44}}}],"loc":{"start":{"line":74,"column":12},"end":{"line":74,"column":45}}},"loc":{"start":{"line":74,"column":6},"end":{"line":74,"column":45}}}],"kind":"var","loc":{"start":{"line":74,"column":2},"end":{"line":74,"column":46}}},{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"!==","left":{"type":"Identifier","name":"mtf","loc":{"start":{"line":75,"column":7},"end":{"line":75,"column":10}}},"right":{"type":"Literal","value":null,"raw":"null","loc":{"start":{"line":75,"column":15},"end":{"line":75,"column":19}}},"loc":{"start":{"line":75,"column":7},"end":{"line":75,"column":19}}},"consequent":{"type":"ReturnStatement","argument":{"type":"CallExpression","callee":{"type":"Identifier","name":"mtf","loc":{"start":{"line":75,"column":29},"end":{"line":75,"column":32}}},"arguments":[{"type":"Identifier","name":"a","loc":{"start":{"line":75,"column":33},"end":{"line":75,"column":34}}},{"type":"Identifier","name":"b","loc":{"start":{"line":75,"column":35},"end":{"line":75,"column":36}}}],"loc":{"start":{"line":75,"column":29},"end":{"line":75,"column":37}}},"loc":{"start":{"line":75,"column":22},"end":{"line":75,"column":38}}},"alternate":null,"loc":{"start":{"line":75,"column":2},"end":{"line":75,"column":38}}},{"type":"ReturnStatement","argument":{"type":"BinaryExpression","operator":"/","left":{"type":"CallExpression","callee":{"type":"Identifier","name":"numberForArith","loc":{"start":{"line":77,"column":9},"end":{"line":77,"column":23}}},"arguments":[{"type":"Identifier","name":"a","loc":{"start":{"line":77,"column":24},"end":{"line":77,"column":25}}}],"loc":{"start":{"line":77,"column":9},"end":{"line":77,"column":26}}},"right":{"type":"CallExpression","callee":{"type":"Identifier","name":"numberForArith","loc":{"start":{"line":77,"column":29},"end":{"line":77,"column":43}}},"arguments":[{"type":"Identifier","name":"b","loc":{"start":{"line":77,"column":44},"end":{"line":77,"column":45}}}],"loc":{"start":{"line":77,"column":29},"end":{"line":77,"column":46}}},"loc":{"start":{"line":77,"column":9},"end":{"line":77,"column":46}}},"loc":{"start":{"line":77,"column":2},"end":{"line":77,"column":47}}}],"loc":{"start":{"line":71,"column":19},"end":{"line":78,"column":2}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":71,"column":1},"end":{"line":78,"column":2}}},{"type":"FunctionDeclaration","id":{"type":"Identifier","name":"intdiv","loc":{"start":{"line":80,"column":10},"end":{"line":80,"column":16}}},"params":[{"type":"Identifier","name":"a","loc":{"start":{"line":80,"column":17},"end":{"line":80,"column":18}}},{"type":"Identifier","name":"b","loc":{"start":{"line":80,"column":19},"end":{"line":80,"column":20}}}],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"Identifier","name":"a","loc":{"start":{"line":81,"column":2},"end":{"line":81,"column":3}}},"right":{"type":"CallExpression","callee":{"type":"Identifier","name":"oneValue","loc":{"start":{"line":81,"column":6},"end":{"line":81,"column":14}}},"arguments":[{"type":"Identifier","name":"a","loc":{"start":{"line":81,"column":15},"end":{"line":81,"column":16}}}],"loc":{"start":{"line":81,"column":6},"end":{"line":81,"column":17}}},"loc":{"start":{"line":81,"column":2},"end":{"line":81,"column":17}}},"loc":{"start":{"line":81,"column":2},"end":{"line":81,"column":18}}},{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"Identifier","name":"b","loc":{"start":{"line":81,"column":19},"end":{"line":81,"column":20}}},"right":{"type":"CallExpression","callee":{"type":"Identifier","name":"oneValue","loc":{"start":{"line":81,"column":23},"end":{"line":81,"column":31}}},"arguments":[{"type":"Identifier","name":"b","loc":{"start":{"line":81,"column":32},"end":{"line":81,"column":33}}}],"loc":{"start":{"line":81,"column":23},"end":{"line":81,"column":34}}},"loc":{"start":{"line":81,"column":19},"end":{"line":81,"column":34}}},"loc":{"start":{"line":81,"column":19},"end":{"line":81,"column":35}}},{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"mtf","loc":{"start":{"line":83,"column":6},"end":{"line":83,"column":9}}},"init":{"type":"CallExpression","callee":{"type":"Identifier","name":"lookupMetaTableBin","loc":{"start":{"line":83,"column":12},"end":{"line":83,"column":30}}},"arguments":[{"type":"Identifier","name":"a","loc":{"start":{"line":83,"column":31},"end":{"line":83,"column":32}}},{"type":"Identifier","name":"b","loc":{"start":{"line":83,"column":34},"end":{"line":83,"column":35}}},{"type":"Literal","value":"__idiv","raw":"\"__idiv\"","loc":{"start":{"line":83,"column":37},"end":{"line":83,"column":45}}}],"loc":{"start":{"line":83,"column":12},"end":{"line":83,"column":46}}},"loc":{"start":{"line":83,"column":6},"end":{"line":83,"column":46}}}],"kind":"var","loc":{"start":{"line":83,"column":2},"end":{"line":83,"column":47}}},{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"!==","left":{"type":"Identifier","name":"mtf","loc":{"start":{"line":84,"column":7},"end":{"line":84,"column":10}}},"right":{"type":"Literal","value":null,"raw":"null","loc":{"start":{"line":84,"column":15},"end":{"line":84,"column":19}}},"loc":{"start":{"line":84,"column":7},"end":{"line":84,"column":19}}},"consequent":{"type":"ReturnStatement","argument":{"type":"CallExpression","callee":{"type":"Identifier","name":"mtf","loc":{"start":{"line":84,"column":29},"end":{"line":84,"column":32}}},"arguments":[{"type":"Identifier","name":"a","loc":{"start":{"line":84,"column":33},"end":{"line":84,"column":34}}},{"type":"Identifier","name":"b","loc":{"start":{"line":84,"column":35},"end":{"line":84,"column":36}}}],"loc":{"start":{"line":84,"column":29},"end":{"line":84,"column":37}}},"loc":{"start":{"line":84,"column":22},"end":{"line":84,"column":38}}},"alternate":null,"loc":{"start":{"line":84,"column":2},"end":{"line":84,"column":38}}},{"type":"ReturnStatement","argument":{"type":"UnaryExpression","operator":"~","argument":{"type":"UnaryExpression","operator":"~","argument":{"type":"BinaryExpression","operator":"/","left":{"type":"CallExpression","callee":{"type":"Identifier","name":"numberForArith","loc":{"start":{"line":86,"column":12},"end":{"line":86,"column":26}}},"arguments":[{"type":"Identifier","name":"a","loc":{"start":{"line":86,"column":27},"end":{"line":86,"column":28}}}],"loc":{"start":{"line":86,"column":12},"end":{"line":86,"column":29}}},"right":{"type":"CallExpression","callee":{"type":"Identifier","name":"numberForArith","loc":{"start":{"line":86,"column":32},"end":{"line":86,"column":46}}},"arguments":[{"type":"Identifier","name":"b","loc":{"start":{"line":86,"column":47},"end":{"line":86,"column":48}}}],"loc":{"start":{"line":86,"column":32},"end":{"line":86,"column":49}}},"loc":{"start":{"line":86,"column":12},"end":{"line":86,"column":49}}},"prefix":true,"loc":{"start":{"line":86,"column":10},"end":{"line":86,"column":50}}},"prefix":true,"loc":{"start":{"line":86,"column":9},"end":{"line":86,"column":50}}},"loc":{"start":{"line":86,"column":2},"end":{"line":86,"column":51}}}],"loc":{"start":{"line":80,"column":22},"end":{"line":87,"column":2}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":80,"column":1},"end":{"line":87,"column":2}}},{"type":"FunctionDeclaration","id":{"type":"Identifier","name":"mod","loc":{"start":{"line":89,"column":10},"end":{"line":89,"column":13}}},"params":[{"type":"Identifier","name":"a","loc":{"start":{"line":89,"column":14},"end":{"line":89,"column":15}}},{"type":"Identifier","name":"b","loc":{"start":{"line":89,"column":16},"end":{"line":89,"column":17}}}],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"Identifier","name":"a","loc":{"start":{"line":90,"column":2},"end":{"line":90,"column":3}}},"right":{"type":"CallExpression","callee":{"type":"Identifier","name":"oneValue","loc":{"start":{"line":90,"column":6},"end":{"line":90,"column":14}}},"arguments":[{"type":"Identifier","name":"a","loc":{"start":{"line":90,"column":15},"end":{"line":90,"column":16}}}],"loc":{"start":{"line":90,"column":6},"end":{"line":90,"column":17}}},"loc":{"start":{"line":90,"column":2},"end":{"line":90,"column":17}}},"loc":{"start":{"line":90,"column":2},"end":{"line":90,"column":18}}},{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"Identifier","name":"b","loc":{"start":{"line":90,"column":19},"end":{"line":90,"column":20}}},"right":{"type":"CallExpression","callee":{"type":"Identifier","name":"oneValue","loc":{"start":{"line":90,"column":23},"end":{"line":90,"column":31}}},"arguments":[{"type":"Identifier","name":"b","loc":{"start":{"line":90,"column":32},"end":{"line":90,"column":33}}}],"loc":{"start":{"line":90,"column":23},"end":{"line":90,"column":34}}},"loc":{"start":{"line":90,"column":19},"end":{"line":90,"column":34}}},"loc":{"start":{"line":90,"column":19},"end":{"line":90,"column":35}}},{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"mtf","loc":{"start":{"line":92,"column":6},"end":{"line":92,"column":9}}},"init":{"type":"CallExpression","callee":{"type":"Identifier","name":"lookupMetaTableBin","loc":{"start":{"line":92,"column":12},"end":{"line":92,"column":30}}},"arguments":[{"type":"Identifier","name":"a","loc":{"start":{"line":92,"column":31},"end":{"line":92,"column":32}}},{"type":"Identifier","name":"b","loc":{"start":{"line":92,"column":34},"end":{"line":92,"column":35}}},{"type":"Literal","value":"__mod","raw":"\"__mod\"","loc":{"start":{"line":92,"column":37},"end":{"line":92,"column":44}}}],"loc":{"start":{"line":92,"column":12},"end":{"line":92,"column":45}}},"loc":{"start":{"line":92,"column":6},"end":{"line":92,"column":45}}}],"kind":"var","loc":{"start":{"line":92,"column":2},"end":{"line":92,"column":46}}},{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"!==","left":{"type":"Identifier","name":"mtf","loc":{"start":{"line":93,"column":7},"end":{"line":93,"column":10}}},"right":{"type":"Literal","value":null,"raw":"null","loc":{"start":{"line":93,"column":15},"end":{"line":93,"column":19}}},"loc":{"start":{"line":93,"column":7},"end":{"line":93,"column":19}}},"consequent":{"type":"ReturnStatement","argument":{"type":"CallExpression","callee":{"type":"Identifier","name":"mtf","loc":{"start":{"line":93,"column":29},"end":{"line":93,"column":32}}},"arguments":[{"type":"Identifier","name":"a","loc":{"start":{"line":93,"column":33},"end":{"line":93,"column":34}}},{"type":"Identifier","name":"b","loc":{"start":{"line":93,"column":35},"end":{"line":93,"column":36}}}],"loc":{"start":{"line":93,"column":29},"end":{"line":93,"column":37}}},"loc":{"start":{"line":93,"column":22},"end":{"line":93,"column":38}}},"alternate":null,"loc":{"start":{"line":93,"column":2},"end":{"line":93,"column":38}}},{"type":"ReturnStatement","argument":{"type":"BinaryExpression","operator":"%","left":{"type":"CallExpression","callee":{"type":"Identifier","name":"numberForArith","loc":{"start":{"line":95,"column":9},"end":{"line":95,"column":23}}},"arguments":[{"type":"Identifier","name":"a","loc":{"start":{"line":95,"column":24},"end":{"line":95,"column":25}}}],"loc":{"start":{"line":95,"column":9},"end":{"line":95,"column":26}}},"right":{"type":"CallExpression","callee":{"type":"Identifier","name":"numberForArith","loc":{"start":{"line":95,"column":29},"end":{"line":95,"column":43}}},"arguments":[{"type":"Identifier","name":"b","loc":{"start":{"line":95,"column":44},"end":{"line":95,"column":45}}}],"loc":{"start":{"line":95,"column":29},"end":{"line":95,"column":46}}},"loc":{"start":{"line":95,"column":9},"end":{"line":95,"column":46}}},"loc":{"start":{"line":95,"column":2},"end":{"line":95,"column":47}}}],"loc":{"start":{"line":89,"column":19},"end":{"line":96,"column":2}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":89,"column":1},"end":{"line":96,"column":2}}},{"type":"FunctionDeclaration","id":{"type":"Identifier","name":"pow","loc":{"start":{"line":98,"column":10},"end":{"line":98,"column":13}}},"params":[{"type":"Identifier","name":"a","loc":{"start":{"line":98,"column":14},"end":{"line":98,"column":15}}},{"type":"Identifier","name":"b","loc":{"start":{"line":98,"column":16},"end":{"line":98,"column":17}}}],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"Identifier","name":"a","loc":{"start":{"line":99,"column":2},"end":{"line":99,"column":3}}},"right":{"type":"CallExpression","callee":{"type":"Identifier","name":"oneValue","loc":{"start":{"line":99,"column":6},"end":{"line":99,"column":14}}},"arguments":[{"type":"Identifier","name":"a","loc":{"start":{"line":99,"column":15},"end":{"line":99,"column":16}}}],"loc":{"start":{"line":99,"column":6},"end":{"line":99,"column":17}}},"loc":{"start":{"line":99,"column":2},"end":{"line":99,"column":17}}},"loc":{"start":{"line":99,"column":2},"end":{"line":99,"column":18}}},{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"Identifier","name":"b","loc":{"start":{"line":99,"column":19},"end":{"line":99,"column":20}}},"right":{"type":"CallExpression","callee":{"type":"Identifier","name":"oneValue","loc":{"start":{"line":99,"column":23},"end":{"line":99,"column":31}}},"arguments":[{"type":"Identifier","name":"b","loc":{"start":{"line":99,"column":32},"end":{"line":99,"column":33}}}],"loc":{"start":{"line":99,"column":23},"end":{"line":99,"column":34}}},"loc":{"start":{"line":99,"column":19},"end":{"line":99,"column":34}}},"loc":{"start":{"line":99,"column":19},"end":{"line":99,"column":35}}},{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"mtf","loc":{"start":{"line":101,"column":6},"end":{"line":101,"column":9}}},"init":{"type":"CallExpression","callee":{"type":"Identifier","name":"lookupMetaTableBin","loc":{"start":{"line":101,"column":12},"end":{"line":101,"column":30}}},"arguments":[{"type":"Identifier","name":"a","loc":{"start":{"line":101,"column":31},"end":{"line":101,"column":32}}},{"type":"Identifier","name":"b","loc":{"start":{"line":101,"column":34},"end":{"line":101,"column":35}}},{"type":"Literal","value":"__pow","raw":"\"__pow\"","loc":{"start":{"line":101,"column":37},"end":{"line":101,"column":44}}}],"loc":{"start":{"line":101,"column":12},"end":{"line":101,"column":45}}},"loc":{"start":{"line":101,"column":6},"end":{"line":101,"column":45}}}],"kind":"var","loc":{"start":{"line":101,"column":2},"end":{"line":101,"column":46}}},{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"!==","left":{"type":"Identifier","name":"mtf","loc":{"start":{"line":102,"column":7},"end":{"line":102,"column":10}}},"right":{"type":"Literal","value":null,"raw":"null","loc":{"start":{"line":102,"column":15},"end":{"line":102,"column":19}}},"loc":{"start":{"line":102,"column":7},"end":{"line":102,"column":19}}},"consequent":{"type":"ReturnStatement","argument":{"type":"CallExpression","callee":{"type":"Identifier","name":"mtf","loc":{"start":{"line":102,"column":29},"end":{"line":102,"column":32}}},"arguments":[{"type":"Identifier","name":"a","loc":{"start":{"line":102,"column":33},"end":{"line":102,"column":34}}},{"type":"Identifier","name":"b","loc":{"start":{"line":102,"column":35},"end":{"line":102,"column":36}}}],"loc":{"start":{"line":102,"column":29},"end":{"line":102,"column":37}}},"loc":{"start":{"line":102,"column":22},"end":{"line":102,"column":38}}},"alternate":null,"loc":{"start":{"line":102,"column":2},"end":{"line":102,"column":38}}},{"type":"ReturnStatement","argument":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"Math","loc":{"start":{"line":104,"column":9},"end":{"line":104,"column":13}}},"property":{"type":"Identifier","name":"pow","loc":{"start":{"line":104,"column":14},"end":{"line":104,"column":17}}},"loc":{"start":{"line":104,"column":9},"end":{"line":104,"column":17}}},"arguments":[{"type":"CallExpression","callee":{"type":"Identifier","name":"numberForArith","loc":{"start":{"line":104,"column":18},"end":{"line":104,"column":32}}},"arguments":[{"type":"Identifier","name":"a","loc":{"start":{"line":104,"column":33},"end":{"line":104,"column":34}}}],"loc":{"start":{"line":104,"column":18},"end":{"line":104,"column":35}}},{"type":"CallExpression","callee":{"type":"Identifier","name":"numberForArith","loc":{"start":{"line":104,"column":36},"end":{"line":104,"column":50}}},"arguments":[{"type":"Identifier","name":"b","loc":{"start":{"line":104,"column":51},"end":{"line":104,"column":52}}}],"loc":{"start":{"line":104,"column":36},"end":{"line":104,"column":53}}}],"loc":{"start":{"line":104,"column":9},"end":{"line":104,"column":54}}},"loc":{"start":{"line":104,"column":2},"end":{"line":104,"column":55}}}],"loc":{"start":{"line":98,"column":19},"end":{"line":105,"column":2}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":98,"column":1},"end":{"line":105,"column":2}}},{"type":"FunctionDeclaration","id":{"type":"Identifier","name":"concat","loc":{"start":{"line":107,"column":10},"end":{"line":107,"column":16}}},"params":[{"type":"Identifier","name":"a","loc":{"start":{"line":107,"column":17},"end":{"line":107,"column":18}}},{"type":"Identifier","name":"b","loc":{"start":{"line":107,"column":19},"end":{"line":107,"column":20}}}],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"Identifier","name":"a","loc":{"start":{"line":108,"column":2},"end":{"line":108,"column":3}}},"right":{"type":"CallExpression","callee":{"type":"Identifier","name":"oneValue","loc":{"start":{"line":108,"column":6},"end":{"line":108,"column":14}}},"arguments":[{"type":"Identifier","name":"a","loc":{"start":{"line":108,"column":15},"end":{"line":108,"column":16}}}],"loc":{"start":{"line":108,"column":6},"end":{"line":108,"column":17}}},"loc":{"start":{"line":108,"column":2},"end":{"line":108,"column":17}}},"loc":{"start":{"line":108,"column":2},"end":{"line":108,"column":18}}},{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"Identifier","name":"b","loc":{"start":{"line":108,"column":19},"end":{"line":108,"column":20}}},"right":{"type":"CallExpression","callee":{"type":"Identifier","name":"oneValue","loc":{"start":{"line":108,"column":23},"end":{"line":108,"column":31}}},"arguments":[{"type":"Identifier","name":"b","loc":{"start":{"line":108,"column":32},"end":{"line":108,"column":33}}}],"loc":{"start":{"line":108,"column":23},"end":{"line":108,"column":34}}},"loc":{"start":{"line":108,"column":19},"end":{"line":108,"column":34}}},"loc":{"start":{"line":108,"column":19},"end":{"line":108,"column":35}}},{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"mtf","loc":{"start":{"line":110,"column":6},"end":{"line":110,"column":9}}},"init":{"type":"CallExpression","callee":{"type":"Identifier","name":"lookupMetaTableBin","loc":{"start":{"line":110,"column":12},"end":{"line":110,"column":30}}},"arguments":[{"type":"Identifier","name":"a","loc":{"start":{"line":110,"column":31},"end":{"line":110,"column":32}}},{"type":"Identifier","name":"b","loc":{"start":{"line":110,"column":34},"end":{"line":110,"column":35}}},{"type":"Literal","value":"__concat","raw":"\"__concat\"","loc":{"start":{"line":110,"column":37},"end":{"line":110,"column":47}}}],"loc":{"start":{"line":110,"column":12},"end":{"line":110,"column":48}}},"loc":{"start":{"line":110,"column":6},"end":{"line":110,"column":48}}}],"kind":"var","loc":{"start":{"line":110,"column":2},"end":{"line":110,"column":49}}},{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"!==","left":{"type":"Identifier","name":"mtf","loc":{"start":{"line":111,"column":7},"end":{"line":111,"column":10}}},"right":{"type":"Literal","value":null,"raw":"null","loc":{"start":{"line":111,"column":15},"end":{"line":111,"column":19}}},"loc":{"start":{"line":111,"column":7},"end":{"line":111,"column":19}}},"consequent":{"type":"ReturnStatement","argument":{"type":"CallExpression","callee":{"type":"Identifier","name":"mtf","loc":{"start":{"line":111,"column":29},"end":{"line":111,"column":32}}},"arguments":[{"type":"Identifier","name":"a","loc":{"start":{"line":111,"column":33},"end":{"line":111,"column":34}}},{"type":"Identifier","name":"b","loc":{"start":{"line":111,"column":35},"end":{"line":111,"column":36}}}],"loc":{"start":{"line":111,"column":29},"end":{"line":111,"column":37}}},"loc":{"start":{"line":111,"column":22},"end":{"line":111,"column":38}}},"alternate":null,"loc":{"start":{"line":111,"column":2},"end":{"line":111,"column":38}}},{"type":"IfStatement","test":{"type":"LogicalExpression","operator":"||","left":{"type":"LogicalExpression","operator":"||","left":{"type":"LogicalExpression","operator":"||","left":{"type":"BinaryExpression","operator":"===","left":{"type":"Identifier","name":"a","loc":{"start":{"line":112,"column":7},"end":{"line":112,"column":8}}},"right":{"type":"Literal","value":null,"raw":"null","loc":{"start":{"line":112,"column":13},"end":{"line":112,"column":17}}},"loc":{"start":{"line":112,"column":7},"end":{"line":112,"column":17}}},"right":{"type":"BinaryExpression","operator":"===","left":{"type":"Identifier","name":"a","loc":{"start":{"line":112,"column":21},"end":{"line":112,"column":22}}},"right":{"type":"Identifier","name":"undefined","loc":{"start":{"line":112,"column":27},"end":{"line":112,"column":36}}},"loc":{"start":{"line":112,"column":21},"end":{"line":112,"column":36}}},"loc":{"start":{"line":112,"column":7},"end":{"line":112,"column":36}}},"right":{"type":"BinaryExpression","operator":"===","left":{"type":"Identifier","name":"b","loc":{"start":{"line":112,"column":40},"end":{"line":112,"column":41}}},"right":{"type":"Literal","value":null,"raw":"null","loc":{"start":{"line":112,"column":46},"end":{"line":112,"column":50}}},"loc":{"start":{"line":112,"column":40},"end":{"line":112,"column":50}}},"loc":{"start":{"line":112,"column":7},"end":{"line":112,"column":50}}},"right":{"type":"BinaryExpression","operator":"===","left":{"type":"Identifier","name":"b","loc":{"start":{"line":112,"column":54},"end":{"line":112,"column":55}}},"right":{"type":"Identifier","name":"undefined","loc":{"start":{"line":112,"column":60},"end":{"line":112,"column":69}}},"loc":{"start":{"line":112,"column":54},"end":{"line":112,"column":69}}},"loc":{"start":{"line":112,"column":7},"end":{"line":112,"column":69}}},"consequent":{"type":"ThrowStatement","argument":{"type":"Literal","value":"attempt to concatenate a nil value","raw":"\"attempt to concatenate a nil value\"","loc":{"start":{"line":112,"column":78},"end":{"line":112,"column":114}}},"loc":{"start":{"line":112,"column":72},"end":{"line":112,"column":115}}},"alternate":null,"loc":{"start":{"line":112,"column":2},"end":{"line":112,"column":115}}},{"type":"ReturnStatement","argument":{"type":"BinaryExpression","operator":"+","left":{"type":"CallExpression","callee":{"type":"Identifier","name":"makeString","loc":{"start":{"line":114,"column":10},"end":{"line":114,"column":20}}},"arguments":[{"type":"Identifier","name":"a","loc":{"start":{"line":114,"column":21},"end":{"line":114,"column":22}}}],"loc":{"start":{"line":114,"column":10},"end":{"line":114,"column":23}}},"right":{"type":"CallExpression","callee":{"type":"Identifier","name":"makeString","loc":{"start":{"line":114,"column":26},"end":{"line":114,"column":36}}},"arguments":[{"type":"Identifier","name":"b","loc":{"start":{"line":114,"column":37},"end":{"line":114,"column":38}}}],"loc":{"start":{"line":114,"column":26},"end":{"line":114,"column":39}}},"loc":{"start":{"line":114,"column":10},"end":{"line":114,"column":39}}},"loc":{"start":{"line":114,"column":2},"end":{"line":114,"column":40}}}],"loc":{"start":{"line":107,"column":22},"end":{"line":115,"column":2}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":107,"column":1},"end":{"line":115,"column":2}}},{"type":"FunctionDeclaration","id":{"type":"Identifier","name":"lte","loc":{"start":{"line":117,"column":10},"end":{"line":117,"column":13}}},"params":[{"type":"Identifier","name":"a","loc":{"start":{"line":117,"column":14},"end":{"line":117,"column":15}}},{"type":"Identifier","name":"b","loc":{"start":{"line":117,"column":16},"end":{"line":117,"column":17}}}],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"Identifier","name":"a","loc":{"start":{"line":118,"column":2},"end":{"line":118,"column":3}}},"right":{"type":"CallExpression","callee":{"type":"Identifier","name":"oneValue","loc":{"start":{"line":118,"column":6},"end":{"line":118,"column":14}}},"arguments":[{"type":"Identifier","name":"a","loc":{"start":{"line":118,"column":15},"end":{"line":118,"column":16}}}],"loc":{"start":{"line":118,"column":6},"end":{"line":118,"column":17}}},"loc":{"start":{"line":118,"column":2},"end":{"line":118,"column":17}}},"loc":{"start":{"line":118,"column":2},"end":{"line":118,"column":18}}},{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"Identifier","name":"b","loc":{"start":{"line":118,"column":19},"end":{"line":118,"column":20}}},"right":{"type":"CallExpression","callee":{"type":"Identifier","name":"oneValue","loc":{"start":{"line":118,"column":23},"end":{"line":118,"column":31}}},"arguments":[{"type":"Identifier","name":"b","loc":{"start":{"line":118,"column":32},"end":{"line":118,"column":33}}}],"loc":{"start":{"line":118,"column":23},"end":{"line":118,"column":34}}},"loc":{"start":{"line":118,"column":19},"end":{"line":118,"column":34}}},"loc":{"start":{"line":118,"column":19},"end":{"line":118,"column":35}}},{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"mtf","loc":{"start":{"line":120,"column":6},"end":{"line":120,"column":9}}},"init":{"type":"CallExpression","callee":{"type":"Identifier","name":"lookupMetaTableBin","loc":{"start":{"line":120,"column":12},"end":{"line":120,"column":30}}},"arguments":[{"type":"Identifier","name":"a","loc":{"start":{"line":120,"column":31},"end":{"line":120,"column":32}}},{"type":"Identifier","name":"b","loc":{"start":{"line":120,"column":34},"end":{"line":120,"column":35}}},{"type":"Literal","value":"__le","raw":"\"__le\"","loc":{"start":{"line":120,"column":37},"end":{"line":120,"column":43}}}],"loc":{"start":{"line":120,"column":12},"end":{"line":120,"column":44}}},"loc":{"start":{"line":120,"column":6},"end":{"line":120,"column":44}}}],"kind":"var","loc":{"start":{"line":120,"column":2},"end":{"line":120,"column":45}}},{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"!==","left":{"type":"Identifier","name":"mtf","loc":{"start":{"line":121,"column":7},"end":{"line":121,"column":10}}},"right":{"type":"Literal","value":null,"raw":"null","loc":{"start":{"line":121,"column":15},"end":{"line":121,"column":19}}},"loc":{"start":{"line":121,"column":7},"end":{"line":121,"column":19}}},"consequent":{"type":"ReturnStatement","argument":{"type":"CallExpression","callee":{"type":"Identifier","name":"mtf","loc":{"start":{"line":121,"column":29},"end":{"line":121,"column":32}}},"arguments":[{"type":"Identifier","name":"a","loc":{"start":{"line":121,"column":33},"end":{"line":121,"column":34}}},{"type":"Identifier","name":"b","loc":{"start":{"line":121,"column":35},"end":{"line":121,"column":36}}}],"loc":{"start":{"line":121,"column":29},"end":{"line":121,"column":37}}},"loc":{"start":{"line":121,"column":22},"end":{"line":121,"column":38}}},"alternate":null,"loc":{"start":{"line":121,"column":2},"end":{"line":121,"column":38}}},{"type":"ReturnStatement","argument":{"type":"BinaryExpression","operator":"<=","left":{"type":"Identifier","name":"a","loc":{"start":{"line":123,"column":9},"end":{"line":123,"column":10}}},"right":{"type":"Identifier","name":"b","loc":{"start":{"line":123,"column":14},"end":{"line":123,"column":15}}},"loc":{"start":{"line":123,"column":9},"end":{"line":123,"column":15}}},"loc":{"start":{"line":123,"column":2},"end":{"line":123,"column":16}}}],"loc":{"start":{"line":117,"column":19},"end":{"line":124,"column":2}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":117,"column":1},"end":{"line":124,"column":2}}},{"type":"FunctionDeclaration","id":{"type":"Identifier","name":"lt","loc":{"start":{"line":126,"column":10},"end":{"line":126,"column":12}}},"params":[{"type":"Identifier","name":"a","loc":{"start":{"line":126,"column":13},"end":{"line":126,"column":14}}},{"type":"Identifier","name":"b","loc":{"start":{"line":126,"column":15},"end":{"line":126,"column":16}}}],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"Identifier","name":"a","loc":{"start":{"line":127,"column":2},"end":{"line":127,"column":3}}},"right":{"type":"CallExpression","callee":{"type":"Identifier","name":"oneValue","loc":{"start":{"line":127,"column":6},"end":{"line":127,"column":14}}},"arguments":[{"type":"Identifier","name":"a","loc":{"start":{"line":127,"column":15},"end":{"line":127,"column":16}}}],"loc":{"start":{"line":127,"column":6},"end":{"line":127,"column":17}}},"loc":{"start":{"line":127,"column":2},"end":{"line":127,"column":17}}},"loc":{"start":{"line":127,"column":2},"end":{"line":127,"column":18}}},{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"Identifier","name":"b","loc":{"start":{"line":127,"column":19},"end":{"line":127,"column":20}}},"right":{"type":"CallExpression","callee":{"type":"Identifier","name":"oneValue","loc":{"start":{"line":127,"column":23},"end":{"line":127,"column":31}}},"arguments":[{"type":"Identifier","name":"b","loc":{"start":{"line":127,"column":32},"end":{"line":127,"column":33}}}],"loc":{"start":{"line":127,"column":23},"end":{"line":127,"column":34}}},"loc":{"start":{"line":127,"column":19},"end":{"line":127,"column":34}}},"loc":{"start":{"line":127,"column":19},"end":{"line":127,"column":35}}},{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"mtf","loc":{"start":{"line":129,"column":6},"end":{"line":129,"column":9}}},"init":{"type":"CallExpression","callee":{"type":"Identifier","name":"lookupMetaTableBin","loc":{"start":{"line":129,"column":12},"end":{"line":129,"column":30}}},"arguments":[{"type":"Identifier","name":"a","loc":{"start":{"line":129,"column":31},"end":{"line":129,"column":32}}},{"type":"Identifier","name":"b","loc":{"start":{"line":129,"column":34},"end":{"line":129,"column":35}}},{"type":"Literal","value":"__lt","raw":"\"__lt\"","loc":{"start":{"line":129,"column":37},"end":{"line":129,"column":43}}}],"loc":{"start":{"line":129,"column":12},"end":{"line":129,"column":44}}},"loc":{"start":{"line":129,"column":6},"end":{"line":129,"column":44}}}],"kind":"var","loc":{"start":{"line":129,"column":2},"end":{"line":129,"column":45}}},{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"!==","left":{"type":"Identifier","name":"mtf","loc":{"start":{"line":130,"column":7},"end":{"line":130,"column":10}}},"right":{"type":"Literal","value":null,"raw":"null","loc":{"start":{"line":130,"column":15},"end":{"line":130,"column":19}}},"loc":{"start":{"line":130,"column":7},"end":{"line":130,"column":19}}},"consequent":{"type":"ReturnStatement","argument":{"type":"CallExpression","callee":{"type":"Identifier","name":"mtf","loc":{"start":{"line":130,"column":29},"end":{"line":130,"column":32}}},"arguments":[{"type":"Identifier","name":"a","loc":{"start":{"line":130,"column":33},"end":{"line":130,"column":34}}},{"type":"Identifier","name":"b","loc":{"start":{"line":130,"column":35},"end":{"line":130,"column":36}}}],"loc":{"start":{"line":130,"column":29},"end":{"line":130,"column":37}}},"loc":{"start":{"line":130,"column":22},"end":{"line":130,"column":38}}},"alternate":null,"loc":{"start":{"line":130,"column":2},"end":{"line":130,"column":38}}},{"type":"ReturnStatement","argument":{"type":"BinaryExpression","operator":"<","left":{"type":"Identifier","name":"a","loc":{"start":{"line":132,"column":9},"end":{"line":132,"column":10}}},"right":{"type":"Identifier","name":"b","loc":{"start":{"line":132,"column":13},"end":{"line":132,"column":14}}},"loc":{"start":{"line":132,"column":9},"end":{"line":132,"column":14}}},"loc":{"start":{"line":132,"column":2},"end":{"line":132,"column":15}}}],"loc":{"start":{"line":126,"column":18},"end":{"line":133,"column":2}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":126,"column":1},"end":{"line":133,"column":2}}},{"type":"FunctionDeclaration","id":{"type":"Identifier","name":"gte","loc":{"start":{"line":135,"column":10},"end":{"line":135,"column":13}}},"params":[{"type":"Identifier","name":"a","loc":{"start":{"line":135,"column":14},"end":{"line":135,"column":15}}},{"type":"Identifier","name":"b","loc":{"start":{"line":135,"column":16},"end":{"line":135,"column":17}}}],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"ReturnStatement","argument":{"type":"CallExpression","callee":{"type":"Identifier","name":"lte","loc":{"start":{"line":135,"column":28},"end":{"line":135,"column":31}}},"arguments":[{"type":"Identifier","name":"b","loc":{"start":{"line":135,"column":32},"end":{"line":135,"column":33}}},{"type":"Identifier","name":"a","loc":{"start":{"line":135,"column":34},"end":{"line":135,"column":35}}}],"loc":{"start":{"line":135,"column":28},"end":{"line":135,"column":36}}},"loc":{"start":{"line":135,"column":21},"end":{"line":135,"column":37}}}],"loc":{"start":{"line":135,"column":19},"end":{"line":135,"column":39}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":135,"column":1},"end":{"line":135,"column":39}}},{"type":"FunctionDeclaration","id":{"type":"Identifier","name":"gt","loc":{"start":{"line":136,"column":10},"end":{"line":136,"column":12}}},"params":[{"type":"Identifier","name":"a","loc":{"start":{"line":136,"column":13},"end":{"line":136,"column":14}}},{"type":"Identifier","name":"b","loc":{"start":{"line":136,"column":15},"end":{"line":136,"column":16}}}],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"ReturnStatement","argument":{"type":"CallExpression","callee":{"type":"Identifier","name":"lt","loc":{"start":{"line":136,"column":27},"end":{"line":136,"column":29}}},"arguments":[{"type":"Identifier","name":"b","loc":{"start":{"line":136,"column":30},"end":{"line":136,"column":31}}},{"type":"Identifier","name":"a","loc":{"start":{"line":136,"column":32},"end":{"line":136,"column":33}}}],"loc":{"start":{"line":136,"column":27},"end":{"line":136,"column":34}}},"loc":{"start":{"line":136,"column":20},"end":{"line":136,"column":35}}}],"loc":{"start":{"line":136,"column":18},"end":{"line":136,"column":37}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":136,"column":1},"end":{"line":136,"column":37}}},{"type":"FunctionDeclaration","id":{"type":"Identifier","name":"forcomp","loc":{"start":{"line":139,"column":10},"end":{"line":139,"column":17}}},"params":[{"type":"Identifier","name":"d","loc":{"start":{"line":139,"column":18},"end":{"line":139,"column":19}}},{"type":"Identifier","name":"a","loc":{"start":{"line":139,"column":20},"end":{"line":139,"column":21}}},{"type":"Identifier","name":"b","loc":{"start":{"line":139,"column":22},"end":{"line":139,"column":23}}}],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"IfStatement","test":{"type":"BinaryExpression","operator":">","left":{"type":"Identifier","name":"d","loc":{"start":{"line":140,"column":7},"end":{"line":140,"column":8}}},"right":{"type":"Literal","value":0,"raw":"0","loc":{"start":{"line":140,"column":11},"end":{"line":140,"column":12}}},"loc":{"start":{"line":140,"column":7},"end":{"line":140,"column":12}}},"consequent":{"type":"ReturnStatement","argument":{"type":"BinaryExpression","operator":"<=","left":{"type":"Identifier","name":"a","loc":{"start":{"line":140,"column":22},"end":{"line":140,"column":23}}},"right":{"type":"Identifier","name":"b","loc":{"start":{"line":140,"column":27},"end":{"line":140,"column":28}}},"loc":{"start":{"line":140,"column":22},"end":{"line":140,"column":28}}},"loc":{"start":{"line":140,"column":15},"end":{"line":140,"column":29}}},"alternate":{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"<","left":{"type":"Identifier","name":"d","loc":{"start":{"line":141,"column":12},"end":{"line":141,"column":13}}},"right":{"type":"Literal","value":0,"raw":"0","loc":{"start":{"line":141,"column":16},"end":{"line":141,"column":17}}},"loc":{"start":{"line":141,"column":12},"end":{"line":141,"column":17}}},"consequent":{"type":"ReturnStatement","argument":{"type":"BinaryExpression","operator":"<=","left":{"type":"Identifier","name":"b","loc":{"start":{"line":141,"column":27},"end":{"line":141,"column":28}}},"right":{"type":"Identifier","name":"a","loc":{"start":{"line":141,"column":32},"end":{"line":141,"column":33}}},"loc":{"start":{"line":141,"column":27},"end":{"line":141,"column":33}}},"loc":{"start":{"line":141,"column":20},"end":{"line":141,"column":34}}},"alternate":{"type":"ReturnStatement","argument":{"type":"Literal","value":false,"raw":"false","loc":{"start":{"line":142,"column":14},"end":{"line":142,"column":19}}},"loc":{"start":{"line":142,"column":7},"end":{"line":142,"column":20}}},"loc":{"start":{"line":141,"column":7},"end":{"line":142,"column":20}}},"loc":{"start":{"line":140,"column":2},"end":{"line":142,"column":20}}}],"loc":{"start":{"line":139,"column":25},"end":{"line":143,"column":2}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":139,"column":1},"end":{"line":143,"column":2}}},{"type":"FunctionDeclaration","id":{"type":"Identifier","name":"eq","loc":{"start":{"line":146,"column":10},"end":{"line":146,"column":12}}},"params":[{"type":"Identifier","name":"a","loc":{"start":{"line":146,"column":13},"end":{"line":146,"column":14}}},{"type":"Identifier","name":"b","loc":{"start":{"line":146,"column":15},"end":{"line":146,"column":16}}}],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"Identifier","name":"a","loc":{"start":{"line":147,"column":2},"end":{"line":147,"column":3}}},"right":{"type":"CallExpression","callee":{"type":"Identifier","name":"oneValue","loc":{"start":{"line":147,"column":6},"end":{"line":147,"column":14}}},"arguments":[{"type":"Identifier","name":"a","loc":{"start":{"line":147,"column":15},"end":{"line":147,"column":16}}}],"loc":{"start":{"line":147,"column":6},"end":{"line":147,"column":17}}},"loc":{"start":{"line":147,"column":2},"end":{"line":147,"column":17}}},"loc":{"start":{"line":147,"column":2},"end":{"line":147,"column":18}}},{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"Identifier","name":"b","loc":{"start":{"line":147,"column":19},"end":{"line":147,"column":20}}},"right":{"type":"CallExpression","callee":{"type":"Identifier","name":"oneValue","loc":{"start":{"line":147,"column":23},"end":{"line":147,"column":31}}},"arguments":[{"type":"Identifier","name":"b","loc":{"start":{"line":147,"column":32},"end":{"line":147,"column":33}}}],"loc":{"start":{"line":147,"column":23},"end":{"line":147,"column":34}}},"loc":{"start":{"line":147,"column":19},"end":{"line":147,"column":34}}},"loc":{"start":{"line":147,"column":19},"end":{"line":147,"column":35}}},{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"mtf","loc":{"start":{"line":149,"column":6},"end":{"line":149,"column":9}}},"init":{"type":"CallExpression","callee":{"type":"Identifier","name":"lookupMetaTableBin","loc":{"start":{"line":149,"column":12},"end":{"line":149,"column":30}}},"arguments":[{"type":"Identifier","name":"a","loc":{"start":{"line":149,"column":31},"end":{"line":149,"column":32}}},{"type":"Identifier","name":"b","loc":{"start":{"line":149,"column":34},"end":{"line":149,"column":35}}},{"type":"Literal","value":"__eq","raw":"\"__eq\"","loc":{"start":{"line":149,"column":37},"end":{"line":149,"column":43}}}],"loc":{"start":{"line":149,"column":12},"end":{"line":149,"column":44}}},"loc":{"start":{"line":149,"column":6},"end":{"line":149,"column":44}}}],"kind":"var","loc":{"start":{"line":149,"column":2},"end":{"line":149,"column":45}}},{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"!==","left":{"type":"Identifier","name":"mtf","loc":{"start":{"line":150,"column":7},"end":{"line":150,"column":10}}},"right":{"type":"Literal","value":null,"raw":"null","loc":{"start":{"line":150,"column":15},"end":{"line":150,"column":19}}},"loc":{"start":{"line":150,"column":7},"end":{"line":150,"column":19}}},"consequent":{"type":"ReturnStatement","argument":{"type":"CallExpression","callee":{"type":"Identifier","name":"mtf","loc":{"start":{"line":150,"column":29},"end":{"line":150,"column":32}}},"arguments":[{"type":"Identifier","name":"a","loc":{"start":{"line":150,"column":33},"end":{"line":150,"column":34}}},{"type":"Identifier","name":"b","loc":{"start":{"line":150,"column":35},"end":{"line":150,"column":36}}}],"loc":{"start":{"line":150,"column":29},"end":{"line":150,"column":37}}},"loc":{"start":{"line":150,"column":22},"end":{"line":150,"column":38}}},"alternate":null,"loc":{"start":{"line":150,"column":2},"end":{"line":150,"column":38}}},{"type":"IfStatement","test":{"type":"LogicalExpression","operator":"||","left":{"type":"BinaryExpression","operator":"===","left":{"type":"Identifier","name":"a","loc":{"start":{"line":153,"column":7},"end":{"line":153,"column":8}}},"right":{"type":"Literal","value":null,"raw":"null","loc":{"start":{"line":153,"column":13},"end":{"line":153,"column":17}}},"loc":{"start":{"line":153,"column":7},"end":{"line":153,"column":17}}},"right":{"type":"BinaryExpression","operator":"===","left":{"type":"Identifier","name":"a","loc":{"start":{"line":153,"column":21},"end":{"line":153,"column":22}}},"right":{"type":"Identifier","name":"undefined","loc":{"start":{"line":153,"column":27},"end":{"line":153,"column":36}}},"loc":{"start":{"line":153,"column":21},"end":{"line":153,"column":36}}},"loc":{"start":{"line":153,"column":7},"end":{"line":153,"column":36}}},"consequent":{"type":"BlockStatement","body":[{"type":"ReturnStatement","argument":{"type":"LogicalExpression","operator":"||","left":{"type":"BinaryExpression","operator":"===","left":{"type":"Identifier","name":"b","loc":{"start":{"line":154,"column":12},"end":{"line":154,"column":13}}},"right":{"type":"Literal","value":null,"raw":"null","loc":{"start":{"line":154,"column":18},"end":{"line":154,"column":22}}},"loc":{"start":{"line":154,"column":12},"end":{"line":154,"column":22}}},"right":{"type":"BinaryExpression","operator":"===","left":{"type":"Identifier","name":"b","loc":{"start":{"line":154,"column":26},"end":{"line":154,"column":27}}},"right":{"type":"Identifier","name":"undefined","loc":{"start":{"line":154,"column":32},"end":{"line":154,"column":41}}},"loc":{"start":{"line":154,"column":26},"end":{"line":154,"column":41}}},"loc":{"start":{"line":154,"column":12},"end":{"line":154,"column":41}}},"loc":{"start":{"line":154,"column":3},"end":{"line":154,"column":44}}}],"loc":{"start":{"line":153,"column":39},"end":{"line":155,"column":3}}},"alternate":null,"loc":{"start":{"line":153,"column":2},"end":{"line":155,"column":3}}},{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"===","left":{"type":"Identifier","name":"a","loc":{"start":{"line":156,"column":7},"end":{"line":156,"column":8}}},"right":{"type":"Identifier","name":"b","loc":{"start":{"line":156,"column":13},"end":{"line":156,"column":14}}},"loc":{"start":{"line":156,"column":7},"end":{"line":156,"column":14}}},"consequent":{"type":"ReturnStatement","argument":{"type":"Literal","value":true,"raw":"true","loc":{"start":{"line":156,"column":24},"end":{"line":156,"column":28}}},"loc":{"start":{"line":156,"column":17},"end":{"line":156,"column":29}}},"alternate":null,"loc":{"start":{"line":156,"column":2},"end":{"line":156,"column":29}}},{"type":"ReturnStatement","argument":{"type":"Literal","value":false,"raw":"false","loc":{"start":{"line":157,"column":9},"end":{"line":157,"column":14}}},"loc":{"start":{"line":157,"column":2},"end":{"line":157,"column":15}}}],"loc":{"start":{"line":146,"column":18},"end":{"line":158,"column":2}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":146,"column":1},"end":{"line":158,"column":2}}},{"type":"FunctionDeclaration","id":{"type":"Identifier","name":"ne","loc":{"start":{"line":160,"column":10},"end":{"line":160,"column":12}}},"params":[{"type":"Identifier","name":"a","loc":{"start":{"line":160,"column":13},"end":{"line":160,"column":14}}},{"type":"Identifier","name":"b","loc":{"start":{"line":160,"column":15},"end":{"line":160,"column":16}}}],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"ReturnStatement","argument":{"type":"UnaryExpression","operator":"!","argument":{"type":"CallExpression","callee":{"type":"Identifier","name":"eq","loc":{"start":{"line":160,"column":28},"end":{"line":160,"column":30}}},"arguments":[{"type":"Identifier","name":"a","loc":{"start":{"line":160,"column":31},"end":{"line":160,"column":32}}},{"type":"Identifier","name":"b","loc":{"start":{"line":160,"column":33},"end":{"line":160,"column":34}}}],"loc":{"start":{"line":160,"column":28},"end":{"line":160,"column":35}}},"prefix":true,"loc":{"start":{"line":160,"column":27},"end":{"line":160,"column":35}}},"loc":{"start":{"line":160,"column":20},"end":{"line":160,"column":36}}}],"loc":{"start":{"line":160,"column":18},"end":{"line":160,"column":38}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":160,"column":1},"end":{"line":160,"column":38}}},{"type":"FunctionDeclaration","id":{"type":"Identifier","name":"count","loc":{"start":{"line":162,"column":10},"end":{"line":162,"column":15}}},"params":[{"type":"Identifier","name":"a","loc":{"start":{"line":162,"column":16},"end":{"line":162,"column":17}}}],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"instanceof","left":{"type":"Identifier","name":"a","loc":{"start":{"line":163,"column":7},"end":{"line":163,"column":8}}},"right":{"type":"Identifier","name":"LuaTable","loc":{"start":{"line":163,"column":20},"end":{"line":163,"column":28}}},"loc":{"start":{"line":163,"column":7},"end":{"line":163,"column":28}}},"consequent":{"type":"BlockStatement","body":[{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"cnt","loc":{"start":{"line":164,"column":7},"end":{"line":164,"column":10}}},"init":{"type":"Literal","value":0,"raw":"0","loc":{"start":{"line":164,"column":13},"end":{"line":164,"column":14}}},"loc":{"start":{"line":164,"column":7},"end":{"line":164,"column":14}}}],"kind":"var","loc":{"start":{"line":164,"column":3},"end":{"line":164,"column":15}}},{"type":"WhileStatement","test":{"type":"BinaryExpression","operator":"!==","left":{"type":"MemberExpression","computed":true,"object":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"a","loc":{"start":{"line":165,"column":11},"end":{"line":165,"column":12}}},"property":{"type":"Identifier","name":"numeric","loc":{"start":{"line":165,"column":13},"end":{"line":165,"column":20}}},"loc":{"start":{"line":165,"column":11},"end":{"line":165,"column":20}}},"property":{"type":"Identifier","name":"cnt","loc":{"start":{"line":165,"column":21},"end":{"line":165,"column":24}}},"loc":{"start":{"line":165,"column":11},"end":{"line":165,"column":25}}},"right":{"type":"Identifier","name":"undefined","loc":{"start":{"line":165,"column":30},"end":{"line":165,"column":39}}},"loc":{"start":{"line":165,"column":11},"end":{"line":165,"column":39}}},"body":{"type":"ExpressionStatement","expression":{"type":"UpdateExpression","operator":"++","argument":{"type":"Identifier","name":"cnt","loc":{"start":{"line":165,"column":44},"end":{"line":165,"column":47}}},"prefix":true,"loc":{"start":{"line":165,"column":42},"end":{"line":165,"column":47}}},"loc":{"start":{"line":165,"column":42},"end":{"line":165,"column":48}}},"loc":{"start":{"line":165,"column":3},"end":{"line":165,"column":48}}},{"type":"ReturnStatement","argument":{"type":"Identifier","name":"cnt","loc":{"start":{"line":166,"column":10},"end":{"line":166,"column":13}}},"loc":{"start":{"line":166,"column":3},"end":{"line":166,"column":14}}}],"loc":{"start":{"line":163,"column":31},"end":{"line":167,"column":3}}},"alternate":null,"loc":{"start":{"line":163,"column":2},"end":{"line":167,"column":3}}},{"type":"ReturnStatement","argument":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"a","loc":{"start":{"line":168,"column":9},"end":{"line":168,"column":10}}},"property":{"type":"Identifier","name":"length","loc":{"start":{"line":168,"column":11},"end":{"line":168,"column":17}}},"loc":{"start":{"line":168,"column":9},"end":{"line":168,"column":17}}},"loc":{"start":{"line":168,"column":2},"end":{"line":168,"column":18}}}],"loc":{"start":{"line":162,"column":19},"end":{"line":169,"column":2}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":162,"column":1},"end":{"line":169,"column":2}}},{"type":"FunctionDeclaration","id":{"type":"Identifier","name":"and","loc":{"start":{"line":171,"column":10},"end":{"line":171,"column":13}}},"params":[{"type":"Identifier","name":"a","loc":{"start":{"line":171,"column":14},"end":{"line":171,"column":15}}},{"type":"Identifier","name":"b","loc":{"start":{"line":171,"column":16},"end":{"line":171,"column":17}}}],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"ReturnStatement","argument":{"type":"LogicalExpression","operator":"&&","left":{"type":"Identifier","name":"a","loc":{"start":{"line":171,"column":28},"end":{"line":171,"column":29}}},"right":{"type":"Identifier","name":"b","loc":{"start":{"line":171,"column":33},"end":{"line":171,"column":34}}},"loc":{"start":{"line":171,"column":28},"end":{"line":171,"column":34}}},"loc":{"start":{"line":171,"column":21},"end":{"line":171,"column":35}}}],"loc":{"start":{"line":171,"column":19},"end":{"line":171,"column":37}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":171,"column":1},"end":{"line":171,"column":37}}},{"type":"FunctionDeclaration","id":{"type":"Identifier","name":"or","loc":{"start":{"line":172,"column":10},"end":{"line":172,"column":12}}},"params":[{"type":"Identifier","name":"a","loc":{"start":{"line":172,"column":13},"end":{"line":172,"column":14}}},{"type":"Identifier","name":"b","loc":{"start":{"line":172,"column":15},"end":{"line":172,"column":16}}}],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"ReturnStatement","argument":{"type":"LogicalExpression","operator":"||","left":{"type":"Identifier","name":"a","loc":{"start":{"line":172,"column":27},"end":{"line":172,"column":28}}},"right":{"type":"Identifier","name":"b","loc":{"start":{"line":172,"column":32},"end":{"line":172,"column":33}}},"loc":{"start":{"line":172,"column":27},"end":{"line":172,"column":33}}},"loc":{"start":{"line":172,"column":20},"end":{"line":172,"column":34}}}],"loc":{"start":{"line":172,"column":18},"end":{"line":172,"column":36}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":172,"column":1},"end":{"line":172,"column":36}}},{"type":"FunctionDeclaration","id":{"type":"Identifier","name":"call","loc":{"start":{"line":174,"column":10},"end":{"line":174,"column":14}}},"params":[{"type":"Identifier","name":"flags","loc":{"start":{"line":174,"column":15},"end":{"line":174,"column":20}}},{"type":"Identifier","name":"what","loc":{"start":{"line":174,"column":22},"end":{"line":174,"column":26}}},{"type":"Identifier","name":"that","loc":{"start":{"line":174,"column":28},"end":{"line":174,"column":32}}},{"type":"Identifier","name":"helper","loc":{"start":{"line":174,"column":34},"end":{"line":174,"column":40}}}],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"injectSelf","loc":{"start":{"line":175,"column":6},"end":{"line":175,"column":16}}},"init":{"type":"UnaryExpression","operator":"!","argument":{"type":"UnaryExpression","operator":"!","argument":{"type":"BinaryExpression","operator":"&","left":{"type":"Identifier","name":"flags","loc":{"start":{"line":175,"column":22},"end":{"line":175,"column":27}}},"right":{"type":"Literal","value":1,"raw":"1","loc":{"start":{"line":175,"column":30},"end":{"line":175,"column":31}}},"loc":{"start":{"line":175,"column":22},"end":{"line":175,"column":31}}},"prefix":true,"loc":{"start":{"line":175,"column":20},"end":{"line":175,"column":32}}},"prefix":true,"loc":{"start":{"line":175,"column":19},"end":{"line":175,"column":32}}},"loc":{"start":{"line":175,"column":6},"end":{"line":175,"column":32}}}],"kind":"var","loc":{"start":{"line":175,"column":2},"end":{"line":175,"column":33}}},{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"detectLua","loc":{"start":{"line":176,"column":6},"end":{"line":176,"column":15}}},"init":{"type":"UnaryExpression","operator":"!","argument":{"type":"UnaryExpression","operator":"!","argument":{"type":"BinaryExpression","operator":"&","left":{"type":"Identifier","name":"flags","loc":{"start":{"line":176,"column":21},"end":{"line":176,"column":26}}},"right":{"type":"Literal","value":2,"raw":"2","loc":{"start":{"line":176,"column":29},"end":{"line":176,"column":30}}},"loc":{"start":{"line":176,"column":21},"end":{"line":176,"column":30}}},"prefix":true,"loc":{"start":{"line":176,"column":19},"end":{"line":176,"column":31}}},"prefix":true,"loc":{"start":{"line":176,"column":18},"end":{"line":176,"column":31}}},"loc":{"start":{"line":176,"column":6},"end":{"line":176,"column":31}}}],"kind":"var","loc":{"start":{"line":176,"column":2},"end":{"line":176,"column":32}}},{"type":"IfStatement","test":{"type":"LogicalExpression","operator":"||","left":{"type":"BinaryExpression","operator":"===","left":{"type":"Identifier","name":"what","loc":{"start":{"line":178,"column":7},"end":{"line":178,"column":11}}},"right":{"type":"Literal","value":null,"raw":"null","loc":{"start":{"line":178,"column":16},"end":{"line":178,"column":20}}},"loc":{"start":{"line":178,"column":7},"end":{"line":178,"column":20}}},"right":{"type":"BinaryExpression","operator":"===","left":{"type":"Identifier","name":"what","loc":{"start":{"line":178,"column":24},"end":{"line":178,"column":28}}},"right":{"type":"Identifier","name":"undefined","loc":{"start":{"line":178,"column":33},"end":{"line":178,"column":42}}},"loc":{"start":{"line":178,"column":24},"end":{"line":178,"column":42}}},"loc":{"start":{"line":178,"column":7},"end":{"line":178,"column":42}}},"consequent":{"type":"BlockStatement","body":[{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"===","left":{"type":"Identifier","name":"helper","loc":{"start":{"line":179,"column":8},"end":{"line":179,"column":14}}},"right":{"type":"Identifier","name":"undefined","loc":{"start":{"line":179,"column":19},"end":{"line":179,"column":28}}},"loc":{"start":{"line":179,"column":8},"end":{"line":179,"column":28}}},"consequent":{"type":"ThrowStatement","argument":{"type":"BinaryExpression","operator":"+","left":{"type":"BinaryExpression","operator":"+","left":{"type":"Literal","value":"attempt to call a ","raw":"\"attempt to call a \"","loc":{"start":{"line":179,"column":37},"end":{"line":179,"column":57}}},"right":{"type":"CallExpression","callee":{"type":"Identifier","name":"type","loc":{"start":{"line":179,"column":60},"end":{"line":179,"column":64}}},"arguments":[{"type":"Identifier","name":"what","loc":{"start":{"line":179,"column":65},"end":{"line":179,"column":69}}}],"loc":{"start":{"line":179,"column":60},"end":{"line":179,"column":70}}},"loc":{"start":{"line":179,"column":37},"end":{"line":179,"column":70}}},"right":{"type":"Literal","value":" value","raw":"\" value\"","loc":{"start":{"line":179,"column":73},"end":{"line":179,"column":81}}},"loc":{"start":{"line":179,"column":37},"end":{"line":179,"column":81}}},"loc":{"start":{"line":179,"column":31},"end":{"line":179,"column":82}}},"alternate":{"type":"ThrowStatement","argument":{"type":"BinaryExpression","operator":"+","left":{"type":"BinaryExpression","operator":"+","left":{"type":"BinaryExpression","operator":"+","left":{"type":"BinaryExpression","operator":"+","left":{"type":"Literal","value":"attempt to call '","raw":"\"attempt to call '\"","loc":{"start":{"line":180,"column":14},"end":{"line":180,"column":33}}},"right":{"type":"Identifier","name":"helper","loc":{"start":{"line":180,"column":36},"end":{"line":180,"column":42}}},"loc":{"start":{"line":180,"column":14},"end":{"line":180,"column":42}}},"right":{"type":"Literal","value":"' (a ","raw":"\"' (a \"","loc":{"start":{"line":180,"column":45},"end":{"line":180,"column":52}}},"loc":{"start":{"line":180,"column":14},"end":{"line":180,"column":52}}},"right":{"type":"CallExpression","callee":{"type":"Identifier","name":"type","loc":{"start":{"line":180,"column":55},"end":{"line":180,"column":59}}},"arguments":[{"type":"Identifier","name":"what","loc":{"start":{"line":180,"column":60},"end":{"line":180,"column":64}}}],"loc":{"start":{"line":180,"column":55},"end":{"line":180,"column":65}}},"loc":{"start":{"line":180,"column":14},"end":{"line":180,"column":65}}},"right":{"type":"Literal","value":" value)","raw":"\" value)\"","loc":{"start":{"line":180,"column":68},"end":{"line":180,"column":77}}},"loc":{"start":{"line":180,"column":14},"end":{"line":180,"column":77}}},"loc":{"start":{"line":180,"column":8},"end":{"line":180,"column":78}}},"loc":{"start":{"line":179,"column":3},"end":{"line":180,"column":78}}}],"loc":{"start":{"line":178,"column":45},"end":{"line":181,"column":3}}},"alternate":null,"loc":{"start":{"line":178,"column":2},"end":{"line":181,"column":3}}},{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"args","loc":{"start":{"line":183,"column":6},"end":{"line":183,"column":10}}},"init":{"type":"CallExpression","callee":{"type":"Identifier","name":"expand","loc":{"start":{"line":183,"column":13},"end":{"line":183,"column":19}}},"arguments":[{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"MemberExpression","computed":false,"object":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"Array","loc":{"start":{"line":183,"column":20},"end":{"line":183,"column":25}}},"property":{"type":"Identifier","name":"prototype","loc":{"start":{"line":183,"column":26},"end":{"line":183,"column":35}}},"loc":{"start":{"line":183,"column":20},"end":{"line":183,"column":35}}},"property":{"type":"Identifier","name":"slice","loc":{"start":{"line":183,"column":36},"end":{"line":183,"column":41}}},"loc":{"start":{"line":183,"column":20},"end":{"line":183,"column":41}}},"property":{"type":"Identifier","name":"call","loc":{"start":{"line":183,"column":42},"end":{"line":183,"column":46}}},"loc":{"start":{"line":183,"column":20},"end":{"line":183,"column":46}}},"arguments":[{"type":"Identifier","name":"arguments","loc":{"start":{"line":183,"column":47},"end":{"line":183,"column":56}}},{"type":"Literal","value":4,"raw":"4","loc":{"start":{"line":183,"column":58},"end":{"line":183,"column":59}}}],"loc":{"start":{"line":183,"column":20},"end":{"line":183,"column":60}}},{"type":"Literal","value":true,"raw":"true","loc":{"start":{"line":183,"column":62},"end":{"line":183,"column":66}}}],"loc":{"start":{"line":183,"column":13},"end":{"line":183,"column":67}}},"loc":{"start":{"line":183,"column":6},"end":{"line":183,"column":67}}}],"kind":"var","loc":{"start":{"line":183,"column":2},"end":{"line":183,"column":68}}},{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"doInject","loc":{"start":{"line":185,"column":6},"end":{"line":185,"column":14}}},"init":{"type":"Literal","value":true,"raw":"true","loc":{"start":{"line":185,"column":17},"end":{"line":185,"column":21}}},"loc":{"start":{"line":185,"column":6},"end":{"line":185,"column":21}}}],"kind":"var","loc":{"start":{"line":185,"column":2},"end":{"line":185,"column":22}}},{"type":"IfStatement","test":{"type":"Identifier","name":"detectLua","loc":{"start":{"line":187,"column":7},"end":{"line":187,"column":16}}},"consequent":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"Identifier","name":"doInject","loc":{"start":{"line":188,"column":3},"end":{"line":188,"column":11}}},"right":{"type":"BinaryExpression","operator":"==","left":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"what","loc":{"start":{"line":188,"column":14},"end":{"line":188,"column":18}}},"property":{"type":"Identifier","name":"__luaType","loc":{"start":{"line":188,"column":19},"end":{"line":188,"column":28}}},"loc":{"start":{"line":188,"column":14},"end":{"line":188,"column":28}}},"right":{"type":"Literal","value":"function","raw":"\"function\"","loc":{"start":{"line":188,"column":32},"end":{"line":188,"column":42}}},"loc":{"start":{"line":188,"column":14},"end":{"line":188,"column":42}}},"loc":{"start":{"line":188,"column":3},"end":{"line":188,"column":42}}},"loc":{"start":{"line":188,"column":3},"end":{"line":188,"column":43}}}],"loc":{"start":{"line":187,"column":19},"end":{"line":189,"column":3}}},"alternate":null,"loc":{"start":{"line":187,"column":2},"end":{"line":189,"column":3}}},{"type":"IfStatement","test":{"type":"LogicalExpression","operator":"&&","left":{"type":"Identifier","name":"injectSelf","loc":{"start":{"line":191,"column":7},"end":{"line":191,"column":17}}},"right":{"type":"Identifier","name":"doInject","loc":{"start":{"line":191,"column":21},"end":{"line":191,"column":29}}},"loc":{"start":{"line":191,"column":7},"end":{"line":191,"column":29}}},"consequent":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"args","loc":{"start":{"line":192,"column":3},"end":{"line":192,"column":7}}},"property":{"type":"Identifier","name":"unshift","loc":{"start":{"line":192,"column":8},"end":{"line":192,"column":15}}},"loc":{"start":{"line":192,"column":3},"end":{"line":192,"column":15}}},"arguments":[{"type":"Identifier","name":"that","loc":{"start":{"line":192,"column":16},"end":{"line":192,"column":20}}}],"loc":{"start":{"line":192,"column":3},"end":{"line":192,"column":21}}},"loc":{"start":{"line":192,"column":3},"end":{"line":192,"column":22}}}],"loc":{"start":{"line":191,"column":32},"end":{"line":193,"column":3}}},"alternate":null,"loc":{"start":{"line":191,"column":2},"end":{"line":193,"column":3}}},{"type":"IfStatement","test":{"type":"LogicalExpression","operator":"&&","left":{"type":"Identifier","name":"detectLua","loc":{"start":{"line":195,"column":7},"end":{"line":195,"column":16}}},"right":{"type":"BinaryExpression","operator":"!=","left":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"what","loc":{"start":{"line":195,"column":20},"end":{"line":195,"column":24}}},"property":{"type":"Identifier","name":"__luaType","loc":{"start":{"line":195,"column":25},"end":{"line":195,"column":34}}},"loc":{"start":{"line":195,"column":20},"end":{"line":195,"column":34}}},"right":{"type":"Literal","value":"function","raw":"\"function\"","loc":{"start":{"line":195,"column":38},"end":{"line":195,"column":48}}},"loc":{"start":{"line":195,"column":20},"end":{"line":195,"column":48}}},"loc":{"start":{"line":195,"column":7},"end":{"line":195,"column":48}}},"consequent":{"type":"BlockStatement","body":[{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"args2","loc":{"start":{"line":196,"column":7},"end":{"line":196,"column":12}}},"init":{"type":"ArrayExpression","elements":[],"loc":{"start":{"line":196,"column":15},"end":{"line":196,"column":17}}},"loc":{"start":{"line":196,"column":7},"end":{"line":196,"column":17}}}],"kind":"var","loc":{"start":{"line":196,"column":3},"end":{"line":196,"column":18}}},{"type":"ForStatement","init":{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"i","loc":{"start":{"line":197,"column":13},"end":{"line":197,"column":14}}},"init":{"type":"Literal","value":0,"raw":"0","loc":{"start":{"line":197,"column":17},"end":{"line":197,"column":18}}},"loc":{"start":{"line":197,"column":13},"end":{"line":197,"column":18}}}],"kind":"var","loc":{"start":{"line":197,"column":9},"end":{"line":197,"column":18}}},"test":{"type":"BinaryExpression","operator":"<","left":{"type":"Identifier","name":"i","loc":{"start":{"line":197,"column":20},"end":{"line":197,"column":21}}},"right":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"args","loc":{"start":{"line":197,"column":24},"end":{"line":197,"column":28}}},"property":{"type":"Identifier","name":"length","loc":{"start":{"line":197,"column":29},"end":{"line":197,"column":35}}},"loc":{"start":{"line":197,"column":24},"end":{"line":197,"column":35}}},"loc":{"start":{"line":197,"column":20},"end":{"line":197,"column":35}}},"update":{"type":"UpdateExpression","operator":"++","argument":{"type":"Identifier","name":"i","loc":{"start":{"line":197,"column":39},"end":{"line":197,"column":40}}},"prefix":true,"loc":{"start":{"line":197,"column":37},"end":{"line":197,"column":40}}},"body":{"type":"BlockStatement","body":[{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"a","loc":{"start":{"line":198,"column":8},"end":{"line":198,"column":9}}},"init":{"type":"MemberExpression","computed":true,"object":{"type":"Identifier","name":"args","loc":{"start":{"line":198,"column":12},"end":{"line":198,"column":16}}},"property":{"type":"Identifier","name":"i","loc":{"start":{"line":198,"column":17},"end":{"line":198,"column":18}}},"loc":{"start":{"line":198,"column":12},"end":{"line":198,"column":19}}},"loc":{"start":{"line":198,"column":8},"end":{"line":198,"column":19}}}],"kind":"var","loc":{"start":{"line":198,"column":4},"end":{"line":198,"column":20}}},{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"instanceof","left":{"type":"Identifier","name":"a","loc":{"start":{"line":199,"column":9},"end":{"line":199,"column":10}}},"right":{"type":"Identifier","name":"LuaTable","loc":{"start":{"line":199,"column":22},"end":{"line":199,"column":30}}},"loc":{"start":{"line":199,"column":9},"end":{"line":199,"column":30}}},"consequent":{"type":"BlockStatement","body":[{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"==","left":{"type":"MemberExpression","computed":false,"object":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"a","loc":{"start":{"line":200,"column":10},"end":{"line":200,"column":11}}},"property":{"type":"Identifier","name":"numeric","loc":{"start":{"line":200,"column":12},"end":{"line":200,"column":19}}},"loc":{"start":{"line":200,"column":10},"end":{"line":200,"column":19}}},"property":{"type":"Identifier","name":"length","loc":{"start":{"line":200,"column":20},"end":{"line":200,"column":26}}},"loc":{"start":{"line":200,"column":10},"end":{"line":200,"column":26}}},"right":{"type":"Literal","value":0,"raw":"0","loc":{"start":{"line":200,"column":30},"end":{"line":200,"column":31}}},"loc":{"start":{"line":200,"column":10},"end":{"line":200,"column":31}}},"consequent":{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","computed":true,"object":{"type":"Identifier","name":"args2","loc":{"start":{"line":200,"column":34},"end":{"line":200,"column":39}}},"property":{"type":"Identifier","name":"i","loc":{"start":{"line":200,"column":40},"end":{"line":200,"column":41}}},"loc":{"start":{"line":200,"column":34},"end":{"line":200,"column":42}}},"right":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"a","loc":{"start":{"line":200,"column":45},"end":{"line":200,"column":46}}},"property":{"type":"Identifier","name":"hash","loc":{"start":{"line":200,"column":47},"end":{"line":200,"column":51}}},"loc":{"start":{"line":200,"column":45},"end":{"line":200,"column":51}}},"loc":{"start":{"line":200,"column":34},"end":{"line":200,"column":51}}},"loc":{"start":{"line":200,"column":34},"end":{"line":200,"column":52}}},"alternate":{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"==","left":{"type":"MemberExpression","computed":false,"object":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"Object","loc":{"start":{"line":201,"column":15},"end":{"line":201,"column":21}}},"property":{"type":"Identifier","name":"keys","loc":{"start":{"line":201,"column":22},"end":{"line":201,"column":26}}},"loc":{"start":{"line":201,"column":15},"end":{"line":201,"column":26}}},"arguments":[{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"a","loc":{"start":{"line":201,"column":27},"end":{"line":201,"column":28}}},"property":{"type":"Identifier","name":"hash","loc":{"start":{"line":201,"column":29},"end":{"line":201,"column":33}}},"loc":{"start":{"line":201,"column":27},"end":{"line":201,"column":33}}}],"loc":{"start":{"line":201,"column":15},"end":{"line":201,"column":34}}},"property":{"type":"Identifier","name":"length","loc":{"start":{"line":201,"column":35},"end":{"line":201,"column":41}}},"loc":{"start":{"line":201,"column":15},"end":{"line":201,"column":41}}},"right":{"type":"Literal","value":0,"raw":"0","loc":{"start":{"line":201,"column":45},"end":{"line":201,"column":46}}},"loc":{"start":{"line":201,"column":15},"end":{"line":201,"column":46}}},"consequent":{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","computed":true,"object":{"type":"Identifier","name":"args2","loc":{"start":{"line":201,"column":49},"end":{"line":201,"column":54}}},"property":{"type":"Identifier","name":"i","loc":{"start":{"line":201,"column":55},"end":{"line":201,"column":56}}},"loc":{"start":{"line":201,"column":49},"end":{"line":201,"column":57}}},"right":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"a","loc":{"start":{"line":201,"column":60},"end":{"line":201,"column":61}}},"property":{"type":"Identifier","name":"numeric","loc":{"start":{"line":201,"column":62},"end":{"line":201,"column":69}}},"loc":{"start":{"line":201,"column":60},"end":{"line":201,"column":69}}},"loc":{"start":{"line":201,"column":49},"end":{"line":201,"column":69}}},"loc":{"start":{"line":201,"column":49},"end":{"line":201,"column":70}}},"alternate":{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","computed":true,"object":{"type":"Identifier","name":"args2","loc":{"start":{"line":202,"column":10},"end":{"line":202,"column":15}}},"property":{"type":"Identifier","name":"i","loc":{"start":{"line":202,"column":16},"end":{"line":202,"column":17}}},"loc":{"start":{"line":202,"column":10},"end":{"line":202,"column":18}}},"right":{"type":"Identifier","name":"a","loc":{"start":{"line":202,"column":21},"end":{"line":202,"column":22}}},"loc":{"start":{"line":202,"column":10},"end":{"line":202,"column":22}}},"loc":{"start":{"line":202,"column":10},"end":{"line":202,"column":23}}},"loc":{"start":{"line":201,"column":10},"end":{"line":202,"column":23}}},"loc":{"start":{"line":200,"column":5},"end":{"line":202,"column":23}}}],"loc":{"start":{"line":199,"column":33},"end":{"line":203,"column":5}}},"alternate":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","computed":true,"object":{"type":"Identifier","name":"args2","loc":{"start":{"line":204,"column":5},"end":{"line":204,"column":10}}},"property":{"type":"Identifier","name":"i","loc":{"start":{"line":204,"column":11},"end":{"line":204,"column":12}}},"loc":{"start":{"line":204,"column":5},"end":{"line":204,"column":13}}},"right":{"type":"Identifier","name":"a","loc":{"start":{"line":204,"column":16},"end":{"line":204,"column":17}}},"loc":{"start":{"line":204,"column":5},"end":{"line":204,"column":17}}},"loc":{"start":{"line":204,"column":5},"end":{"line":204,"column":18}}}],"loc":{"start":{"line":203,"column":11},"end":{"line":205,"column":5}}},"loc":{"start":{"line":199,"column":4},"end":{"line":205,"column":5}}}],"loc":{"start":{"line":197,"column":43},"end":{"line":206,"column":4}}},"loc":{"start":{"line":197,"column":3},"end":{"line":206,"column":4}}},{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"Identifier","name":"args","loc":{"start":{"line":207,"column":3},"end":{"line":207,"column":7}}},"right":{"type":"Identifier","name":"args2","loc":{"start":{"line":207,"column":10},"end":{"line":207,"column":15}}},"loc":{"start":{"line":207,"column":3},"end":{"line":207,"column":15}}},"loc":{"start":{"line":207,"column":3},"end":{"line":207,"column":16}}}],"loc":{"start":{"line":195,"column":51},"end":{"line":208,"column":3}}},"alternate":null,"loc":{"start":{"line":195,"column":2},"end":{"line":208,"column":3}}},{"type":"ReturnStatement","argument":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"what","loc":{"start":{"line":210,"column":9},"end":{"line":210,"column":13}}},"property":{"type":"Identifier","name":"apply","loc":{"start":{"line":210,"column":14},"end":{"line":210,"column":19}}},"loc":{"start":{"line":210,"column":9},"end":{"line":210,"column":19}}},"arguments":[{"type":"Identifier","name":"that","loc":{"start":{"line":210,"column":20},"end":{"line":210,"column":24}}},{"type":"Identifier","name":"args","loc":{"start":{"line":210,"column":26},"end":{"line":210,"column":30}}}],"loc":{"start":{"line":210,"column":9},"end":{"line":210,"column":31}}},"loc":{"start":{"line":210,"column":2},"end":{"line":210,"column":32}}}],"loc":{"start":{"line":174,"column":58},"end":{"line":211,"column":2}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":174,"column":1},"end":{"line":211,"column":2}}},{"type":"FunctionDeclaration","id":{"type":"Identifier","name":"rest","loc":{"start":{"line":213,"column":10},"end":{"line":213,"column":14}}},"params":[{"type":"Identifier","name":"args","loc":{"start":{"line":213,"column":15},"end":{"line":213,"column":19}}},{"type":"Identifier","name":"cnt","loc":{"start":{"line":213,"column":21},"end":{"line":213,"column":24}}}],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"out","loc":{"start":{"line":214,"column":6},"end":{"line":214,"column":9}}},"init":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"Object","loc":{"start":{"line":214,"column":12},"end":{"line":214,"column":18}}},"property":{"type":"Identifier","name":"create","loc":{"start":{"line":214,"column":19},"end":{"line":214,"column":25}}},"loc":{"start":{"line":214,"column":12},"end":{"line":214,"column":25}}},"arguments":[{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"LuaReturnValues","loc":{"start":{"line":214,"column":26},"end":{"line":214,"column":41}}},"property":{"type":"Identifier","name":"prototype","loc":{"start":{"line":214,"column":42},"end":{"line":214,"column":51}}},"loc":{"start":{"line":214,"column":26},"end":{"line":214,"column":51}}},{"type":"ObjectExpression","properties":[],"loc":{"start":{"line":214,"column":53},"end":{"line":214,"column":55}}}],"loc":{"start":{"line":214,"column":12},"end":{"line":214,"column":56}}},"loc":{"start":{"line":214,"column":6},"end":{"line":214,"column":56}}}],"kind":"var","loc":{"start":{"line":214,"column":2},"end":{"line":214,"column":57}}},{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"out","loc":{"start":{"line":215,"column":2},"end":{"line":215,"column":5}}},"property":{"type":"Identifier","name":"values","loc":{"start":{"line":215,"column":6},"end":{"line":215,"column":12}}},"loc":{"start":{"line":215,"column":2},"end":{"line":215,"column":12}}},"right":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"MemberExpression","computed":false,"object":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"Array","loc":{"start":{"line":215,"column":15},"end":{"line":215,"column":20}}},"property":{"type":"Identifier","name":"prototype","loc":{"start":{"line":215,"column":21},"end":{"line":215,"column":30}}},"loc":{"start":{"line":215,"column":15},"end":{"line":215,"column":30}}},"property":{"type":"Identifier","name":"slice","loc":{"start":{"line":215,"column":31},"end":{"line":215,"column":36}}},"loc":{"start":{"line":215,"column":15},"end":{"line":215,"column":36}}},"property":{"type":"Identifier","name":"call","loc":{"start":{"line":215,"column":37},"end":{"line":215,"column":41}}},"loc":{"start":{"line":215,"column":15},"end":{"line":215,"column":41}}},"arguments":[{"type":"Identifier","name":"args","loc":{"start":{"line":215,"column":42},"end":{"line":215,"column":46}}},{"type":"Identifier","name":"cnt","loc":{"start":{"line":215,"column":48},"end":{"line":215,"column":51}}}],"loc":{"start":{"line":215,"column":15},"end":{"line":215,"column":52}}},"loc":{"start":{"line":215,"column":2},"end":{"line":215,"column":52}}},"loc":{"start":{"line":215,"column":2},"end":{"line":215,"column":53}}},{"type":"ReturnStatement","argument":{"type":"Identifier","name":"out","loc":{"start":{"line":216,"column":9},"end":{"line":216,"column":12}}},"loc":{"start":{"line":216,"column":2},"end":{"line":216,"column":13}}}],"loc":{"start":{"line":213,"column":26},"end":{"line":217,"column":2}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":213,"column":1},"end":{"line":217,"column":2}}},{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"id","loc":{"start":{"line":219,"column":5},"end":{"line":219,"column":7}}},"init":{"type":"Literal","value":0,"raw":"0","loc":{"start":{"line":219,"column":10},"end":{"line":219,"column":11}}},"loc":{"start":{"line":219,"column":5},"end":{"line":219,"column":11}}}],"kind":"var","loc":{"start":{"line":219,"column":1},"end":{"line":219,"column":12}}},{"type":"FunctionDeclaration","id":{"type":"Identifier","name":"LuaTable","loc":{"start":{"line":220,"column":10},"end":{"line":220,"column":18}}},"params":[],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","computed":false,"object":{"type":"ThisExpression","loc":{"start":{"line":221,"column":2},"end":{"line":221,"column":6}}},"property":{"type":"Identifier","name":"id","loc":{"start":{"line":221,"column":7},"end":{"line":221,"column":9}}},"loc":{"start":{"line":221,"column":2},"end":{"line":221,"column":9}}},"right":{"type":"UpdateExpression","operator":"++","argument":{"type":"Identifier","name":"id","loc":{"start":{"line":221,"column":14},"end":{"line":221,"column":16}}},"prefix":true,"loc":{"start":{"line":221,"column":12},"end":{"line":221,"column":16}}},"loc":{"start":{"line":221,"column":2},"end":{"line":221,"column":16}}},"loc":{"start":{"line":221,"column":2},"end":{"line":221,"column":17}}},{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","computed":false,"object":{"type":"ThisExpression","loc":{"start":{"line":222,"column":2},"end":{"line":222,"column":6}}},"property":{"type":"Identifier","name":"numeric","loc":{"start":{"line":222,"column":7},"end":{"line":222,"column":14}}},"loc":{"start":{"line":222,"column":2},"end":{"line":222,"column":14}}},"right":{"type":"ArrayExpression","elements":[],"loc":{"start":{"line":222,"column":17},"end":{"line":222,"column":19}}},"loc":{"start":{"line":222,"column":2},"end":{"line":222,"column":19}}},"loc":{"start":{"line":222,"column":2},"end":{"line":222,"column":20}}},{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","computed":false,"object":{"type":"ThisExpression","loc":{"start":{"line":223,"column":2},"end":{"line":223,"column":6}}},"property":{"type":"Identifier","name":"hash","loc":{"start":{"line":223,"column":7},"end":{"line":223,"column":11}}},"loc":{"start":{"line":223,"column":2},"end":{"line":223,"column":11}}},"right":{"type":"ObjectExpression","properties":[],"loc":{"start":{"line":223,"column":14},"end":{"line":223,"column":16}}},"loc":{"start":{"line":223,"column":2},"end":{"line":223,"column":16}}},"loc":{"start":{"line":223,"column":2},"end":{"line":223,"column":17}}}],"loc":{"start":{"line":220,"column":21},"end":{"line":224,"column":2}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":220,"column":1},"end":{"line":224,"column":2}}},{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"Object","loc":{"start":{"line":226,"column":1},"end":{"line":226,"column":7}}},"property":{"type":"Identifier","name":"defineProperty","loc":{"start":{"line":226,"column":8},"end":{"line":226,"column":22}}},"loc":{"start":{"line":226,"column":1},"end":{"line":226,"column":22}}},"arguments":[{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"LuaTable","loc":{"start":{"line":226,"column":23},"end":{"line":226,"column":31}}},"property":{"type":"Identifier","name":"prototype","loc":{"start":{"line":226,"column":32},"end":{"line":226,"column":41}}},"loc":{"start":{"line":226,"column":23},"end":{"line":226,"column":41}}},{"type":"Literal","value":"__luaType","raw":"\"__luaType\"","loc":{"start":{"line":226,"column":43},"end":{"line":226,"column":54}}},{"type":"ObjectExpression","properties":[{"type":"Property","key":{"type":"Identifier","name":"value","loc":{"start":{"line":226,"column":58},"end":{"line":226,"column":63}}},"value":{"type":"Literal","value":"table","raw":"\"table\"","loc":{"start":{"line":226,"column":65},"end":{"line":226,"column":72}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":226,"column":58},"end":{"line":226,"column":72}}},{"type":"Property","key":{"type":"Identifier","name":"enumerable","loc":{"start":{"line":226,"column":75},"end":{"line":226,"column":85}}},"value":{"type":"Literal","value":false,"raw":"false","loc":{"start":{"line":226,"column":87},"end":{"line":226,"column":92}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":226,"column":75},"end":{"line":226,"column":92}}}],"loc":{"start":{"line":226,"column":57},"end":{"line":226,"column":93}}}],"loc":{"start":{"line":226,"column":1},"end":{"line":226,"column":94}}},"loc":{"start":{"line":226,"column":1},"end":{"line":226,"column":95}}},{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"Object","loc":{"start":{"line":227,"column":1},"end":{"line":227,"column":7}}},"property":{"type":"Identifier","name":"defineProperty","loc":{"start":{"line":227,"column":8},"end":{"line":227,"column":22}}},"loc":{"start":{"line":227,"column":1},"end":{"line":227,"column":22}}},"arguments":[{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"LuaTable","loc":{"start":{"line":227,"column":23},"end":{"line":227,"column":31}}},"property":{"type":"Identifier","name":"prototype","loc":{"start":{"line":227,"column":32},"end":{"line":227,"column":41}}},"loc":{"start":{"line":227,"column":23},"end":{"line":227,"column":41}}},{"type":"Literal","value":"toString","raw":"\"toString\"","loc":{"start":{"line":227,"column":43},"end":{"line":227,"column":53}}},{"type":"ObjectExpression","properties":[{"type":"Property","key":{"type":"Identifier","name":"value","loc":{"start":{"line":227,"column":57},"end":{"line":227,"column":62}}},"value":{"type":"FunctionExpression","id":null,"params":[],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"ReturnStatement","argument":{"type":"CallExpression","callee":{"type":"Identifier","name":"makeString","loc":{"start":{"line":228,"column":9},"end":{"line":228,"column":19}}},"arguments":[{"type":"ThisExpression","loc":{"start":{"line":228,"column":20},"end":{"line":228,"column":24}}}],"loc":{"start":{"line":228,"column":9},"end":{"line":228,"column":25}}},"loc":{"start":{"line":228,"column":2},"end":{"line":228,"column":26}}}],"loc":{"start":{"line":227,"column":75},"end":{"line":229,"column":2}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":227,"column":64},"end":{"line":229,"column":2}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":227,"column":57},"end":{"line":229,"column":2}}},{"type":"Property","key":{"type":"Identifier","name":"enumerable","loc":{"start":{"line":229,"column":5},"end":{"line":229,"column":15}}},"value":{"type":"Literal","value":false,"raw":"false","loc":{"start":{"line":229,"column":17},"end":{"line":229,"column":22}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":229,"column":5},"end":{"line":229,"column":22}}}],"loc":{"start":{"line":227,"column":56},"end":{"line":229,"column":23}}}],"loc":{"start":{"line":227,"column":1},"end":{"line":229,"column":24}}},"loc":{"start":{"line":227,"column":1},"end":{"line":229,"column":25}}},{"type":"FunctionDeclaration","id":{"type":"Identifier","name":"makeTable","loc":{"start":{"line":231,"column":10},"end":{"line":231,"column":19}}},"params":[{"type":"Identifier","name":"t","loc":{"start":{"line":231,"column":20},"end":{"line":231,"column":21}}},{"type":"Identifier","name":"allowExpand","loc":{"start":{"line":231,"column":23},"end":{"line":231,"column":34}}}],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"out","loc":{"start":{"line":232,"column":6},"end":{"line":232,"column":9}}},"init":{"type":"NewExpression","callee":{"type":"Identifier","name":"LuaTable","loc":{"start":{"line":232,"column":16},"end":{"line":232,"column":24}}},"arguments":[],"loc":{"start":{"line":232,"column":12},"end":{"line":232,"column":26}}},"loc":{"start":{"line":232,"column":6},"end":{"line":232,"column":26}}}],"kind":"var","loc":{"start":{"line":232,"column":2},"end":{"line":232,"column":27}}},{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"out","loc":{"start":{"line":234,"column":2},"end":{"line":234,"column":5}}},"property":{"type":"Identifier","name":"numeric","loc":{"start":{"line":234,"column":6},"end":{"line":234,"column":13}}},"loc":{"start":{"line":234,"column":2},"end":{"line":234,"column":13}}},"right":{"type":"CallExpression","callee":{"type":"Identifier","name":"expand","loc":{"start":{"line":234,"column":16},"end":{"line":234,"column":22}}},"arguments":[{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"MemberExpression","computed":false,"object":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"Array","loc":{"start":{"line":234,"column":23},"end":{"line":234,"column":28}}},"property":{"type":"Identifier","name":"prototype","loc":{"start":{"line":234,"column":29},"end":{"line":234,"column":38}}},"loc":{"start":{"line":234,"column":23},"end":{"line":234,"column":38}}},"property":{"type":"Identifier","name":"slice","loc":{"start":{"line":234,"column":39},"end":{"line":234,"column":44}}},"loc":{"start":{"line":234,"column":23},"end":{"line":234,"column":44}}},"property":{"type":"Identifier","name":"call","loc":{"start":{"line":234,"column":45},"end":{"line":234,"column":49}}},"loc":{"start":{"line":234,"column":23},"end":{"line":234,"column":49}}},"arguments":[{"type":"Identifier","name":"arguments","loc":{"start":{"line":234,"column":50},"end":{"line":234,"column":59}}},{"type":"Literal","value":2,"raw":"2","loc":{"start":{"line":234,"column":61},"end":{"line":234,"column":62}}}],"loc":{"start":{"line":234,"column":23},"end":{"line":234,"column":63}}},{"type":"Identifier","name":"allowExpand","loc":{"start":{"line":234,"column":65},"end":{"line":234,"column":76}}}],"loc":{"start":{"line":234,"column":16},"end":{"line":234,"column":77}}},"loc":{"start":{"line":234,"column":2},"end":{"line":234,"column":77}}},"loc":{"start":{"line":234,"column":2},"end":{"line":234,"column":78}}},{"type":"IfStatement","test":{"type":"UnaryExpression","operator":"!","argument":{"type":"Identifier","name":"t","loc":{"start":{"line":235,"column":8},"end":{"line":235,"column":9}}},"prefix":true,"loc":{"start":{"line":235,"column":7},"end":{"line":235,"column":9}}},"consequent":{"type":"ReturnStatement","argument":{"type":"Identifier","name":"out","loc":{"start":{"line":235,"column":19},"end":{"line":235,"column":22}}},"loc":{"start":{"line":235,"column":12},"end":{"line":235,"column":23}}},"alternate":null,"loc":{"start":{"line":235,"column":2},"end":{"line":235,"column":23}}},{"type":"IfStatement","test":{"type":"CallExpression","callee":{"type":"Identifier","name":"isJSArray","loc":{"start":{"line":237,"column":7},"end":{"line":237,"column":16}}},"arguments":[{"type":"Identifier","name":"t","loc":{"start":{"line":237,"column":17},"end":{"line":237,"column":18}}}],"loc":{"start":{"line":237,"column":7},"end":{"line":237,"column":19}}},"consequent":{"type":"BlockStatement","body":[{"type":"ForStatement","init":{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"i","loc":{"start":{"line":238,"column":13},"end":{"line":238,"column":14}}},"init":{"type":"Literal","value":0,"raw":"0","loc":{"start":{"line":238,"column":17},"end":{"line":238,"column":18}}},"loc":{"start":{"line":238,"column":13},"end":{"line":238,"column":18}}}],"kind":"var","loc":{"start":{"line":238,"column":9},"end":{"line":238,"column":18}}},"test":{"type":"BinaryExpression","operator":"<","left":{"type":"Identifier","name":"i","loc":{"start":{"line":238,"column":20},"end":{"line":238,"column":21}}},"right":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"t","loc":{"start":{"line":238,"column":24},"end":{"line":238,"column":25}}},"property":{"type":"Identifier","name":"length","loc":{"start":{"line":238,"column":26},"end":{"line":238,"column":32}}},"loc":{"start":{"line":238,"column":24},"end":{"line":238,"column":32}}},"loc":{"start":{"line":238,"column":20},"end":{"line":238,"column":32}}},"update":{"type":"UpdateExpression","operator":"++","argument":{"type":"Identifier","name":"i","loc":{"start":{"line":238,"column":36},"end":{"line":238,"column":37}}},"prefix":true,"loc":{"start":{"line":238,"column":34},"end":{"line":238,"column":37}}},"body":{"type":"BlockStatement","body":[{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"pair","loc":{"start":{"line":239,"column":8},"end":{"line":239,"column":12}}},"init":{"type":"MemberExpression","computed":true,"object":{"type":"Identifier","name":"t","loc":{"start":{"line":239,"column":15},"end":{"line":239,"column":16}}},"property":{"type":"Identifier","name":"i","loc":{"start":{"line":239,"column":17},"end":{"line":239,"column":18}}},"loc":{"start":{"line":239,"column":15},"end":{"line":239,"column":19}}},"loc":{"start":{"line":239,"column":8},"end":{"line":239,"column":19}}}],"kind":"var","loc":{"start":{"line":239,"column":4},"end":{"line":239,"column":20}}},{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"key","loc":{"start":{"line":240,"column":8},"end":{"line":240,"column":11}}},"init":{"type":"MemberExpression","computed":true,"object":{"type":"Identifier","name":"pair","loc":{"start":{"line":240,"column":14},"end":{"line":240,"column":18}}},"property":{"type":"Literal","value":0,"raw":"0","loc":{"start":{"line":240,"column":19},"end":{"line":240,"column":20}}},"loc":{"start":{"line":240,"column":14},"end":{"line":240,"column":21}}},"loc":{"start":{"line":240,"column":8},"end":{"line":240,"column":21}}}],"kind":"var","loc":{"start":{"line":240,"column":4},"end":{"line":240,"column":22}}},{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"val","loc":{"start":{"line":241,"column":8},"end":{"line":241,"column":11}}},"init":{"type":"MemberExpression","computed":true,"object":{"type":"Identifier","name":"pair","loc":{"start":{"line":241,"column":14},"end":{"line":241,"column":18}}},"property":{"type":"Literal","value":1,"raw":"1","loc":{"start":{"line":241,"column":19},"end":{"line":241,"column":20}}},"loc":{"start":{"line":241,"column":14},"end":{"line":241,"column":21}}},"loc":{"start":{"line":241,"column":8},"end":{"line":241,"column":21}}}],"kind":"var","loc":{"start":{"line":241,"column":4},"end":{"line":241,"column":22}}},{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"==","left":{"type":"UnaryExpression","operator":"typeof","argument":{"type":"Identifier","name":"key","loc":{"start":{"line":242,"column":16},"end":{"line":242,"column":19}}},"prefix":true,"loc":{"start":{"line":242,"column":9},"end":{"line":242,"column":19}}},"right":{"type":"Literal","value":"number","raw":"\"number\"","loc":{"start":{"line":242,"column":23},"end":{"line":242,"column":31}}},"loc":{"start":{"line":242,"column":9},"end":{"line":242,"column":31}}},"consequent":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","computed":true,"object":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"out","loc":{"start":{"line":243,"column":5},"end":{"line":243,"column":8}}},"property":{"type":"Identifier","name":"numeric","loc":{"start":{"line":243,"column":9},"end":{"line":243,"column":16}}},"loc":{"start":{"line":243,"column":5},"end":{"line":243,"column":16}}},"property":{"type":"BinaryExpression","operator":"-","left":{"type":"Identifier","name":"key","loc":{"start":{"line":243,"column":17},"end":{"line":243,"column":20}}},"right":{"type":"Literal","value":1,"raw":"1","loc":{"start":{"line":243,"column":23},"end":{"line":243,"column":24}}},"loc":{"start":{"line":243,"column":17},"end":{"line":243,"column":24}}},"loc":{"start":{"line":243,"column":5},"end":{"line":243,"column":25}}},"right":{"type":"Identifier","name":"val","loc":{"start":{"line":243,"column":28},"end":{"line":243,"column":31}}},"loc":{"start":{"line":243,"column":5},"end":{"line":243,"column":31}}},"loc":{"start":{"line":243,"column":5},"end":{"line":243,"column":32}}}],"loc":{"start":{"line":242,"column":34},"end":{"line":244,"column":5}}},"alternate":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","computed":true,"object":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"out","loc":{"start":{"line":245,"column":5},"end":{"line":245,"column":8}}},"property":{"type":"Identifier","name":"hash","loc":{"start":{"line":245,"column":9},"end":{"line":245,"column":13}}},"loc":{"start":{"line":245,"column":5},"end":{"line":245,"column":13}}},"property":{"type":"Identifier","name":"key","loc":{"start":{"line":245,"column":14},"end":{"line":245,"column":17}}},"loc":{"start":{"line":245,"column":5},"end":{"line":245,"column":18}}},"right":{"type":"Identifier","name":"val","loc":{"start":{"line":245,"column":21},"end":{"line":245,"column":24}}},"loc":{"start":{"line":245,"column":5},"end":{"line":245,"column":24}}},"loc":{"start":{"line":245,"column":5},"end":{"line":245,"column":25}}}],"loc":{"start":{"line":244,"column":11},"end":{"line":246,"column":5}}},"loc":{"start":{"line":242,"column":4},"end":{"line":246,"column":5}}}],"loc":{"start":{"line":238,"column":40},"end":{"line":247,"column":4}}},"loc":{"start":{"line":238,"column":3},"end":{"line":247,"column":4}}}],"loc":{"start":{"line":237,"column":22},"end":{"line":248,"column":3}}},"alternate":{"type":"BlockStatement","body":[{"type":"ForInStatement","left":{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"k","loc":{"start":{"line":249,"column":13},"end":{"line":249,"column":14}}},"init":null,"loc":{"start":{"line":249,"column":13},"end":{"line":249,"column":14}}}],"kind":"var","loc":{"start":{"line":249,"column":9},"end":{"line":249,"column":14}}},"right":{"type":"Identifier","name":"t","loc":{"start":{"line":249,"column":18},"end":{"line":249,"column":19}}},"body":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","computed":true,"object":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"out","loc":{"start":{"line":250,"column":4},"end":{"line":250,"column":7}}},"property":{"type":"Identifier","name":"hash","loc":{"start":{"line":250,"column":8},"end":{"line":250,"column":12}}},"loc":{"start":{"line":250,"column":4},"end":{"line":250,"column":12}}},"property":{"type":"Identifier","name":"k","loc":{"start":{"line":250,"column":13},"end":{"line":250,"column":14}}},"loc":{"start":{"line":250,"column":4},"end":{"line":250,"column":15}}},"right":{"type":"MemberExpression","computed":true,"object":{"type":"Identifier","name":"t","loc":{"start":{"line":250,"column":18},"end":{"line":250,"column":19}}},"property":{"type":"Identifier","name":"k","loc":{"start":{"line":250,"column":20},"end":{"line":250,"column":21}}},"loc":{"start":{"line":250,"column":18},"end":{"line":250,"column":22}}},"loc":{"start":{"line":250,"column":4},"end":{"line":250,"column":22}}},"loc":{"start":{"line":250,"column":4},"end":{"line":250,"column":23}}}],"loc":{"start":{"line":249,"column":22},"end":{"line":251,"column":4}}},"each":false,"loc":{"start":{"line":249,"column":3},"end":{"line":251,"column":4}}}],"loc":{"start":{"line":248,"column":9},"end":{"line":252,"column":3}}},"loc":{"start":{"line":237,"column":2},"end":{"line":252,"column":3}}},{"type":"ReturnStatement","argument":{"type":"Identifier","name":"out","loc":{"start":{"line":254,"column":9},"end":{"line":254,"column":12}}},"loc":{"start":{"line":254,"column":2},"end":{"line":254,"column":13}}}],"loc":{"start":{"line":231,"column":55},"end":{"line":255,"column":2}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":231,"column":1},"end":{"line":255,"column":2}}},{"type":"FunctionDeclaration","id":{"type":"Identifier","name":"makeFunction","loc":{"start":{"line":257,"column":10},"end":{"line":257,"column":22}}},"params":[{"type":"Identifier","name":"f","loc":{"start":{"line":257,"column":23},"end":{"line":257,"column":24}}}],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"f","loc":{"start":{"line":258,"column":2},"end":{"line":258,"column":3}}},"property":{"type":"Identifier","name":"__luaType","loc":{"start":{"line":258,"column":4},"end":{"line":258,"column":13}}},"loc":{"start":{"line":258,"column":2},"end":{"line":258,"column":13}}},"right":{"type":"Literal","value":"function","raw":"\"function\"","loc":{"start":{"line":258,"column":16},"end":{"line":258,"column":26}}},"loc":{"start":{"line":258,"column":2},"end":{"line":258,"column":26}}},"loc":{"start":{"line":258,"column":2},"end":{"line":258,"column":27}}},{"type":"ReturnStatement","argument":{"type":"Identifier","name":"f","loc":{"start":{"line":259,"column":9},"end":{"line":259,"column":10}}},"loc":{"start":{"line":259,"column":2},"end":{"line":259,"column":11}}}],"loc":{"start":{"line":257,"column":26},"end":{"line":260,"column":2}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":257,"column":1},"end":{"line":260,"column":2}}},{"type":"FunctionDeclaration","id":{"type":"Identifier","name":"LuaReturnValues","loc":{"start":{"line":262,"column":10},"end":{"line":262,"column":25}}},"params":[{"type":"Identifier","name":"v","loc":{"start":{"line":262,"column":26},"end":{"line":262,"column":27}}}],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","computed":false,"object":{"type":"ThisExpression","loc":{"start":{"line":263,"column":2},"end":{"line":263,"column":6}}},"property":{"type":"Identifier","name":"values","loc":{"start":{"line":263,"column":7},"end":{"line":263,"column":13}}},"loc":{"start":{"line":263,"column":2},"end":{"line":263,"column":13}}},"right":{"type":"Identifier","name":"v","loc":{"start":{"line":263,"column":16},"end":{"line":263,"column":17}}},"loc":{"start":{"line":263,"column":2},"end":{"line":263,"column":17}}},"loc":{"start":{"line":263,"column":2},"end":{"line":263,"column":18}}}],"loc":{"start":{"line":262,"column":29},"end":{"line":264,"column":2}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":262,"column":1},"end":{"line":264,"column":2}}},{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"Object","loc":{"start":{"line":266,"column":1},"end":{"line":266,"column":7}}},"property":{"type":"Identifier","name":"defineProperty","loc":{"start":{"line":266,"column":8},"end":{"line":266,"column":22}}},"loc":{"start":{"line":266,"column":1},"end":{"line":266,"column":22}}},"arguments":[{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"LuaReturnValues","loc":{"start":{"line":266,"column":23},"end":{"line":266,"column":38}}},"property":{"type":"Identifier","name":"prototype","loc":{"start":{"line":266,"column":39},"end":{"line":266,"column":48}}},"loc":{"start":{"line":266,"column":23},"end":{"line":266,"column":48}}},{"type":"Literal","value":"__luaType","raw":"\"__luaType\"","loc":{"start":{"line":266,"column":50},"end":{"line":266,"column":61}}},{"type":"ObjectExpression","properties":[{"type":"Property","key":{"type":"Identifier","name":"value","loc":{"start":{"line":266,"column":65},"end":{"line":266,"column":70}}},"value":{"type":"Literal","value":"returnValues","raw":"\"returnValues\"","loc":{"start":{"line":266,"column":72},"end":{"line":266,"column":86}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":266,"column":65},"end":{"line":266,"column":86}}},{"type":"Property","key":{"type":"Identifier","name":"enumerable","loc":{"start":{"line":266,"column":89},"end":{"line":266,"column":99}}},"value":{"type":"Literal","value":false,"raw":"false","loc":{"start":{"line":266,"column":101},"end":{"line":266,"column":106}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":266,"column":89},"end":{"line":266,"column":106}}}],"loc":{"start":{"line":266,"column":64},"end":{"line":266,"column":107}}}],"loc":{"start":{"line":266,"column":1},"end":{"line":266,"column":108}}},"loc":{"start":{"line":266,"column":1},"end":{"line":266,"column":109}}},{"type":"FunctionDeclaration","id":{"type":"Identifier","name":"lookupMetaTable","loc":{"start":{"line":268,"column":10},"end":{"line":268,"column":25}}},"params":[{"type":"Identifier","name":"table","loc":{"start":{"line":268,"column":26},"end":{"line":268,"column":31}}},{"type":"Identifier","name":"entry","loc":{"start":{"line":268,"column":33},"end":{"line":268,"column":38}}}],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"instanceof","left":{"type":"Identifier","name":"table","loc":{"start":{"line":269,"column":7},"end":{"line":269,"column":12}}},"right":{"type":"Identifier","name":"LuaTable","loc":{"start":{"line":269,"column":24},"end":{"line":269,"column":32}}},"loc":{"start":{"line":269,"column":7},"end":{"line":269,"column":32}}},"consequent":{"type":"BlockStatement","body":[{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"===","left":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"table","loc":{"start":{"line":270,"column":8},"end":{"line":270,"column":13}}},"property":{"type":"Identifier","name":"__metatable","loc":{"start":{"line":270,"column":14},"end":{"line":270,"column":25}}},"loc":{"start":{"line":270,"column":8},"end":{"line":270,"column":25}}},"right":{"type":"Identifier","name":"undefined","loc":{"start":{"line":270,"column":30},"end":{"line":270,"column":39}}},"loc":{"start":{"line":270,"column":8},"end":{"line":270,"column":39}}},"consequent":{"type":"ReturnStatement","argument":{"type":"Literal","value":null,"raw":"null","loc":{"start":{"line":270,"column":49},"end":{"line":270,"column":53}}},"loc":{"start":{"line":270,"column":42},"end":{"line":270,"column":54}}},"alternate":null,"loc":{"start":{"line":270,"column":3},"end":{"line":270,"column":54}}},{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"idx","loc":{"start":{"line":272,"column":7},"end":{"line":272,"column":10}}},"init":{"type":"MemberExpression","computed":true,"object":{"type":"MemberExpression","computed":false,"object":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"table","loc":{"start":{"line":272,"column":13},"end":{"line":272,"column":18}}},"property":{"type":"Identifier","name":"__metatable","loc":{"start":{"line":272,"column":19},"end":{"line":272,"column":30}}},"loc":{"start":{"line":272,"column":13},"end":{"line":272,"column":30}}},"property":{"type":"Identifier","name":"hash","loc":{"start":{"line":272,"column":31},"end":{"line":272,"column":35}}},"loc":{"start":{"line":272,"column":13},"end":{"line":272,"column":35}}},"property":{"type":"Identifier","name":"entry","loc":{"start":{"line":272,"column":36},"end":{"line":272,"column":41}}},"loc":{"start":{"line":272,"column":13},"end":{"line":272,"column":42}}},"loc":{"start":{"line":272,"column":7},"end":{"line":272,"column":42}}}],"kind":"var","loc":{"start":{"line":272,"column":3},"end":{"line":272,"column":43}}},{"type":"IfStatement","test":{"type":"LogicalExpression","operator":"||","left":{"type":"BinaryExpression","operator":"===","left":{"type":"Identifier","name":"idx","loc":{"start":{"line":273,"column":8},"end":{"line":273,"column":11}}},"right":{"type":"Literal","value":null,"raw":"null","loc":{"start":{"line":273,"column":16},"end":{"line":273,"column":20}}},"loc":{"start":{"line":273,"column":8},"end":{"line":273,"column":20}}},"right":{"type":"BinaryExpression","operator":"===","left":{"type":"Identifier","name":"idx","loc":{"start":{"line":273,"column":24},"end":{"line":273,"column":27}}},"right":{"type":"Identifier","name":"undefined","loc":{"start":{"line":273,"column":32},"end":{"line":273,"column":41}}},"loc":{"start":{"line":273,"column":24},"end":{"line":273,"column":41}}},"loc":{"start":{"line":273,"column":8},"end":{"line":273,"column":41}}},"consequent":{"type":"ReturnStatement","argument":{"type":"Literal","value":null,"raw":"null","loc":{"start":{"line":273,"column":51},"end":{"line":273,"column":55}}},"loc":{"start":{"line":273,"column":44},"end":{"line":273,"column":56}}},"alternate":null,"loc":{"start":{"line":273,"column":3},"end":{"line":273,"column":56}}},{"type":"ReturnStatement","argument":{"type":"Identifier","name":"idx","loc":{"start":{"line":275,"column":10},"end":{"line":275,"column":13}}},"loc":{"start":{"line":275,"column":3},"end":{"line":275,"column":14}}}],"loc":{"start":{"line":269,"column":35},"end":{"line":276,"column":3}}},"alternate":null,"loc":{"start":{"line":269,"column":2},"end":{"line":276,"column":3}}},{"type":"ReturnStatement","argument":{"type":"Literal","value":null,"raw":"null","loc":{"start":{"line":278,"column":9},"end":{"line":278,"column":13}}},"loc":{"start":{"line":278,"column":2},"end":{"line":278,"column":14}}}],"loc":{"start":{"line":268,"column":40},"end":{"line":279,"column":2}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":268,"column":1},"end":{"line":279,"column":2}}},{"type":"FunctionDeclaration","id":{"type":"Identifier","name":"lookupMetaTableBin","loc":{"start":{"line":281,"column":10},"end":{"line":281,"column":28}}},"params":[{"type":"Identifier","name":"a","loc":{"start":{"line":281,"column":29},"end":{"line":281,"column":30}}},{"type":"Identifier","name":"b","loc":{"start":{"line":281,"column":32},"end":{"line":281,"column":33}}},{"type":"Identifier","name":"entry","loc":{"start":{"line":281,"column":35},"end":{"line":281,"column":40}}}],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"mt","loc":{"start":{"line":282,"column":6},"end":{"line":282,"column":8}}},"init":{"type":"CallExpression","callee":{"type":"Identifier","name":"lookupMetaTable","loc":{"start":{"line":282,"column":11},"end":{"line":282,"column":26}}},"arguments":[{"type":"Identifier","name":"a","loc":{"start":{"line":282,"column":27},"end":{"line":282,"column":28}}},{"type":"Identifier","name":"entry","loc":{"start":{"line":282,"column":30},"end":{"line":282,"column":35}}}],"loc":{"start":{"line":282,"column":11},"end":{"line":282,"column":36}}},"loc":{"start":{"line":282,"column":6},"end":{"line":282,"column":36}}}],"kind":"var","loc":{"start":{"line":282,"column":2},"end":{"line":282,"column":37}}},{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"==","left":{"type":"Identifier","name":"mt","loc":{"start":{"line":283,"column":7},"end":{"line":283,"column":9}}},"right":{"type":"Literal","value":null,"raw":"null","loc":{"start":{"line":283,"column":13},"end":{"line":283,"column":17}}},"loc":{"start":{"line":283,"column":7},"end":{"line":283,"column":17}}},"consequent":{"type":"ReturnStatement","argument":{"type":"CallExpression","callee":{"type":"Identifier","name":"lookupMetaTable","loc":{"start":{"line":283,"column":27},"end":{"line":283,"column":42}}},"arguments":[{"type":"Identifier","name":"b","loc":{"start":{"line":283,"column":43},"end":{"line":283,"column":44}}},{"type":"Identifier","name":"entry","loc":{"start":{"line":283,"column":46},"end":{"line":283,"column":51}}}],"loc":{"start":{"line":283,"column":27},"end":{"line":283,"column":52}}},"loc":{"start":{"line":283,"column":20},"end":{"line":283,"column":53}}},"alternate":null,"loc":{"start":{"line":283,"column":2},"end":{"line":283,"column":53}}},{"type":"ReturnStatement","argument":{"type":"Identifier","name":"mt","loc":{"start":{"line":284,"column":9},"end":{"line":284,"column":11}}},"loc":{"start":{"line":284,"column":2},"end":{"line":284,"column":12}}}],"loc":{"start":{"line":281,"column":42},"end":{"line":285,"column":2}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":281,"column":1},"end":{"line":285,"column":2}}},{"type":"FunctionDeclaration","id":{"type":"Identifier","name":"index","loc":{"start":{"line":287,"column":10},"end":{"line":287,"column":15}}},"params":[{"type":"Identifier","name":"table","loc":{"start":{"line":287,"column":16},"end":{"line":287,"column":21}}},{"type":"Identifier","name":"prop","loc":{"start":{"line":287,"column":23},"end":{"line":287,"column":27}}},{"type":"Identifier","name":"helper","loc":{"start":{"line":287,"column":29},"end":{"line":287,"column":35}}}],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"IfStatement","test":{"type":"LogicalExpression","operator":"||","left":{"type":"LogicalExpression","operator":"||","left":{"type":"BinaryExpression","operator":"===","left":{"type":"Identifier","name":"table","loc":{"start":{"line":288,"column":7},"end":{"line":288,"column":12}}},"right":{"type":"Literal","value":null,"raw":"null","loc":{"start":{"line":288,"column":17},"end":{"line":288,"column":21}}},"loc":{"start":{"line":288,"column":7},"end":{"line":288,"column":21}}},"right":{"type":"BinaryExpression","operator":"===","left":{"type":"Identifier","name":"table","loc":{"start":{"line":288,"column":25},"end":{"line":288,"column":30}}},"right":{"type":"Identifier","name":"undefined","loc":{"start":{"line":288,"column":35},"end":{"line":288,"column":44}}},"loc":{"start":{"line":288,"column":25},"end":{"line":288,"column":44}}},"loc":{"start":{"line":288,"column":7},"end":{"line":288,"column":44}}},"right":{"type":"BinaryExpression","operator":"==","left":{"type":"UnaryExpression","operator":"typeof","argument":{"type":"Identifier","name":"table","loc":{"start":{"line":288,"column":55},"end":{"line":288,"column":60}}},"prefix":true,"loc":{"start":{"line":288,"column":48},"end":{"line":288,"column":60}}},"right":{"type":"Literal","value":"number","raw":"\"number\"","loc":{"start":{"line":288,"column":64},"end":{"line":288,"column":72}}},"loc":{"start":{"line":288,"column":48},"end":{"line":288,"column":72}}},"loc":{"start":{"line":288,"column":7},"end":{"line":288,"column":72}}},"consequent":{"type":"BlockStatement","body":[{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"==","left":{"type":"Identifier","name":"helper","loc":{"start":{"line":289,"column":8},"end":{"line":289,"column":14}}},"right":{"type":"Identifier","name":"undefined","loc":{"start":{"line":289,"column":18},"end":{"line":289,"column":27}}},"loc":{"start":{"line":289,"column":8},"end":{"line":289,"column":27}}},"consequent":{"type":"BlockStatement","body":[{"type":"ThrowStatement","argument":{"type":"BinaryExpression","operator":"+","left":{"type":"BinaryExpression","operator":"+","left":{"type":"Literal","value":"attempt to index a ","raw":"\"attempt to index a \"","loc":{"start":{"line":290,"column":10},"end":{"line":290,"column":31}}},"right":{"type":"CallExpression","callee":{"type":"Identifier","name":"type","loc":{"start":{"line":290,"column":34},"end":{"line":290,"column":38}}},"arguments":[{"type":"Identifier","name":"table","loc":{"start":{"line":290,"column":39},"end":{"line":290,"column":44}}}],"loc":{"start":{"line":290,"column":34},"end":{"line":290,"column":45}}},"loc":{"start":{"line":290,"column":10},"end":{"line":290,"column":45}}},"right":{"type":"Literal","value":" value","raw":"\" value\"","loc":{"start":{"line":290,"column":48},"end":{"line":290,"column":56}}},"loc":{"start":{"line":290,"column":10},"end":{"line":290,"column":56}}},"loc":{"start":{"line":290,"column":4},"end":{"line":290,"column":57}}}],"loc":{"start":{"line":289,"column":30},"end":{"line":291,"column":4}}},"alternate":{"type":"BlockStatement","body":[{"type":"ThrowStatement","argument":{"type":"BinaryExpression","operator":"+","left":{"type":"BinaryExpression","operator":"+","left":{"type":"BinaryExpression","operator":"+","left":{"type":"BinaryExpression","operator":"+","left":{"type":"Literal","value":"attempt to index '","raw":"\"attempt to index '\"","loc":{"start":{"line":292,"column":10},"end":{"line":292,"column":30}}},"right":{"type":"Identifier","name":"helper","loc":{"start":{"line":292,"column":33},"end":{"line":292,"column":39}}},"loc":{"start":{"line":292,"column":10},"end":{"line":292,"column":39}}},"right":{"type":"Literal","value":"' (a ","raw":"\"' (a \"","loc":{"start":{"line":292,"column":42},"end":{"line":292,"column":49}}},"loc":{"start":{"line":292,"column":10},"end":{"line":292,"column":49}}},"right":{"type":"CallExpression","callee":{"type":"Identifier","name":"type","loc":{"start":{"line":292,"column":52},"end":{"line":292,"column":56}}},"arguments":[{"type":"Identifier","name":"table","loc":{"start":{"line":292,"column":57},"end":{"line":292,"column":62}}}],"loc":{"start":{"line":292,"column":52},"end":{"line":292,"column":63}}},"loc":{"start":{"line":292,"column":10},"end":{"line":292,"column":63}}},"right":{"type":"Literal","value":" value)","raw":"\" value)\"","loc":{"start":{"line":292,"column":66},"end":{"line":292,"column":75}}},"loc":{"start":{"line":292,"column":10},"end":{"line":292,"column":75}}},"loc":{"start":{"line":292,"column":4},"end":{"line":292,"column":76}}}],"loc":{"start":{"line":291,"column":10},"end":{"line":293,"column":4}}},"loc":{"start":{"line":289,"column":3},"end":{"line":293,"column":4}}}],"loc":{"start":{"line":288,"column":75},"end":{"line":294,"column":3}}},"alternate":{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"instanceof","left":{"type":"Identifier","name":"table","loc":{"start":{"line":294,"column":14},"end":{"line":294,"column":19}}},"right":{"type":"Identifier","name":"LuaTable","loc":{"start":{"line":294,"column":31},"end":{"line":294,"column":39}}},"loc":{"start":{"line":294,"column":14},"end":{"line":294,"column":39}}},"consequent":{"type":"BlockStatement","body":[{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"val","loc":{"start":{"line":295,"column":7},"end":{"line":295,"column":10}}},"init":null,"loc":{"start":{"line":295,"column":7},"end":{"line":295,"column":10}}}],"kind":"var","loc":{"start":{"line":295,"column":3},"end":{"line":295,"column":11}}},{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"==","left":{"type":"UnaryExpression","operator":"typeof","argument":{"type":"Identifier","name":"prop","loc":{"start":{"line":296,"column":15},"end":{"line":296,"column":19}}},"prefix":true,"loc":{"start":{"line":296,"column":8},"end":{"line":296,"column":19}}},"right":{"type":"Literal","value":"number","raw":"\"number\"","loc":{"start":{"line":296,"column":23},"end":{"line":296,"column":31}}},"loc":{"start":{"line":296,"column":8},"end":{"line":296,"column":31}}},"consequent":{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"Identifier","name":"val","loc":{"start":{"line":296,"column":33},"end":{"line":296,"column":36}}},"right":{"type":"MemberExpression","computed":true,"object":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"table","loc":{"start":{"line":296,"column":39},"end":{"line":296,"column":44}}},"property":{"type":"Identifier","name":"numeric","loc":{"start":{"line":296,"column":45},"end":{"line":296,"column":52}}},"loc":{"start":{"line":296,"column":39},"end":{"line":296,"column":52}}},"property":{"type":"BinaryExpression","operator":"-","left":{"type":"Identifier","name":"prop","loc":{"start":{"line":296,"column":53},"end":{"line":296,"column":57}}},"right":{"type":"Literal","value":1,"raw":"1","loc":{"start":{"line":296,"column":58},"end":{"line":296,"column":59}}},"loc":{"start":{"line":296,"column":53},"end":{"line":296,"column":59}}},"loc":{"start":{"line":296,"column":39},"end":{"line":296,"column":60}}},"loc":{"start":{"line":296,"column":33},"end":{"line":296,"column":60}}},"loc":{"start":{"line":296,"column":33},"end":{"line":296,"column":61}}},"alternate":{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"Identifier","name":"val","loc":{"start":{"line":297,"column":8},"end":{"line":297,"column":11}}},"right":{"type":"MemberExpression","computed":true,"object":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"table","loc":{"start":{"line":297,"column":14},"end":{"line":297,"column":19}}},"property":{"type":"Identifier","name":"hash","loc":{"start":{"line":297,"column":20},"end":{"line":297,"column":24}}},"loc":{"start":{"line":297,"column":14},"end":{"line":297,"column":24}}},"property":{"type":"Identifier","name":"prop","loc":{"start":{"line":297,"column":25},"end":{"line":297,"column":29}}},"loc":{"start":{"line":297,"column":14},"end":{"line":297,"column":30}}},"loc":{"start":{"line":297,"column":8},"end":{"line":297,"column":30}}},"loc":{"start":{"line":297,"column":8},"end":{"line":297,"column":31}}},"loc":{"start":{"line":296,"column":3},"end":{"line":297,"column":31}}},{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"&","left":{"type":"BinaryExpression","operator":"!==","left":{"type":"Identifier","name":"val","loc":{"start":{"line":299,"column":8},"end":{"line":299,"column":11}}},"right":{"type":"Literal","value":null,"raw":"null","loc":{"start":{"line":299,"column":16},"end":{"line":299,"column":20}}},"loc":{"start":{"line":299,"column":8},"end":{"line":299,"column":20}}},"right":{"type":"BinaryExpression","operator":"!==","left":{"type":"Identifier","name":"val","loc":{"start":{"line":299,"column":23},"end":{"line":299,"column":26}}},"right":{"type":"Identifier","name":"undefined","loc":{"start":{"line":299,"column":31},"end":{"line":299,"column":40}}},"loc":{"start":{"line":299,"column":23},"end":{"line":299,"column":40}}},"loc":{"start":{"line":299,"column":8},"end":{"line":299,"column":40}}},"consequent":{"type":"ReturnStatement","argument":{"type":"Identifier","name":"val","loc":{"start":{"line":299,"column":50},"end":{"line":299,"column":53}}},"loc":{"start":{"line":299,"column":43},"end":{"line":299,"column":54}}},"alternate":null,"loc":{"start":{"line":299,"column":3},"end":{"line":299,"column":54}}},{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"idxfx","loc":{"start":{"line":301,"column":7},"end":{"line":301,"column":12}}},"init":{"type":"CallExpression","callee":{"type":"Identifier","name":"lookupMetaTable","loc":{"start":{"line":301,"column":15},"end":{"line":301,"column":30}}},"arguments":[{"type":"Identifier","name":"table","loc":{"start":{"line":301,"column":31},"end":{"line":301,"column":36}}},{"type":"Literal","value":"__index","raw":"\"__index\"","loc":{"start":{"line":301,"column":38},"end":{"line":301,"column":47}}}],"loc":{"start":{"line":301,"column":15},"end":{"line":301,"column":48}}},"loc":{"start":{"line":301,"column":7},"end":{"line":301,"column":48}}}],"kind":"var","loc":{"start":{"line":301,"column":3},"end":{"line":301,"column":49}}},{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"==","left":{"type":"Identifier","name":"idxfx","loc":{"start":{"line":302,"column":8},"end":{"line":302,"column":13}}},"right":{"type":"Literal","value":null,"raw":"null","loc":{"start":{"line":302,"column":17},"end":{"line":302,"column":21}}},"loc":{"start":{"line":302,"column":8},"end":{"line":302,"column":21}}},"consequent":{"type":"ReturnStatement","argument":{"type":"Literal","value":null,"raw":"null","loc":{"start":{"line":302,"column":31},"end":{"line":302,"column":35}}},"loc":{"start":{"line":302,"column":24},"end":{"line":302,"column":36}}},"alternate":null,"loc":{"start":{"line":302,"column":3},"end":{"line":302,"column":36}}},{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"==","left":{"type":"UnaryExpression","operator":"typeof","argument":{"type":"Identifier","name":"idxfx","loc":{"start":{"line":304,"column":15},"end":{"line":304,"column":20}}},"prefix":true,"loc":{"start":{"line":304,"column":8},"end":{"line":304,"column":20}}},"right":{"type":"Literal","value":"function","raw":"\"function\"","loc":{"start":{"line":304,"column":24},"end":{"line":304,"column":34}}},"loc":{"start":{"line":304,"column":8},"end":{"line":304,"column":34}}},"consequent":{"type":"ReturnStatement","argument":{"type":"CallExpression","callee":{"type":"Identifier","name":"oneValue","loc":{"start":{"line":304,"column":44},"end":{"line":304,"column":52}}},"arguments":[{"type":"CallExpression","callee":{"type":"Identifier","name":"idxfx","loc":{"start":{"line":304,"column":53},"end":{"line":304,"column":58}}},"arguments":[{"type":"Identifier","name":"table","loc":{"start":{"line":304,"column":59},"end":{"line":304,"column":64}}},{"type":"Identifier","name":"prop","loc":{"start":{"line":304,"column":66},"end":{"line":304,"column":70}}}],"loc":{"start":{"line":304,"column":53},"end":{"line":304,"column":71}}}],"loc":{"start":{"line":304,"column":44},"end":{"line":304,"column":72}}},"loc":{"start":{"line":304,"column":37},"end":{"line":304,"column":73}}},"alternate":null,"loc":{"start":{"line":304,"column":3},"end":{"line":304,"column":73}}},{"type":"ReturnStatement","argument":{"type":"CallExpression","callee":{"type":"Identifier","name":"index","loc":{"start":{"line":305,"column":10},"end":{"line":305,"column":15}}},"arguments":[{"type":"Identifier","name":"idxfx","loc":{"start":{"line":305,"column":16},"end":{"line":305,"column":21}}},{"type":"Identifier","name":"prop","loc":{"start":{"line":305,"column":23},"end":{"line":305,"column":27}}}],"loc":{"start":{"line":305,"column":10},"end":{"line":305,"column":28}}},"loc":{"start":{"line":305,"column":3},"end":{"line":305,"column":29}}}],"loc":{"start":{"line":294,"column":42},"end":{"line":306,"column":3}}},"alternate":{"type":"IfStatement","test":{"type":"CallExpression","callee":{"type":"Identifier","name":"isJSArray","loc":{"start":{"line":306,"column":14},"end":{"line":306,"column":23}}},"arguments":[{"type":"Identifier","name":"table","loc":{"start":{"line":306,"column":24},"end":{"line":306,"column":29}}}],"loc":{"start":{"line":306,"column":14},"end":{"line":306,"column":30}}},"consequent":{"type":"BlockStatement","body":[{"type":"ReturnStatement","argument":{"type":"MemberExpression","computed":true,"object":{"type":"Identifier","name":"table","loc":{"start":{"line":307,"column":10},"end":{"line":307,"column":15}}},"property":{"type":"BinaryExpression","operator":"-","left":{"type":"Identifier","name":"prop","loc":{"start":{"line":307,"column":16},"end":{"line":307,"column":20}}},"right":{"type":"Literal","value":1,"raw":"1","loc":{"start":{"line":307,"column":23},"end":{"line":307,"column":24}}},"loc":{"start":{"line":307,"column":16},"end":{"line":307,"column":24}}},"loc":{"start":{"line":307,"column":10},"end":{"line":307,"column":25}}},"loc":{"start":{"line":307,"column":3},"end":{"line":307,"column":26}}}],"loc":{"start":{"line":306,"column":33},"end":{"line":308,"column":3}}},"alternate":{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"==","left":{"type":"UnaryExpression","operator":"typeof","argument":{"type":"Identifier","name":"table","loc":{"start":{"line":308,"column":21},"end":{"line":308,"column":26}}},"prefix":true,"loc":{"start":{"line":308,"column":14},"end":{"line":308,"column":26}}},"right":{"type":"Literal","value":"string","raw":"\"string\"","loc":{"start":{"line":308,"column":30},"end":{"line":308,"column":38}}},"loc":{"start":{"line":308,"column":14},"end":{"line":308,"column":38}}},"consequent":{"type":"BlockStatement","body":[{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"sidx","loc":{"start":{"line":309,"column":7},"end":{"line":309,"column":11}}},"init":{"type":"CallExpression","callee":{"type":"Identifier","name":"tonumber","loc":{"start":{"line":309,"column":14},"end":{"line":309,"column":22}}},"arguments":[{"type":"Identifier","name":"prop","loc":{"start":{"line":309,"column":23},"end":{"line":309,"column":27}}}],"loc":{"start":{"line":309,"column":14},"end":{"line":309,"column":28}}},"loc":{"start":{"line":309,"column":7},"end":{"line":309,"column":28}}}],"kind":"var","loc":{"start":{"line":309,"column":3},"end":{"line":309,"column":29}}},{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"<","left":{"type":"Identifier","name":"sidx","loc":{"start":{"line":310,"column":8},"end":{"line":310,"column":12}}},"right":{"type":"Literal","value":0,"raw":"0","loc":{"start":{"line":310,"column":15},"end":{"line":310,"column":16}}},"loc":{"start":{"line":310,"column":8},"end":{"line":310,"column":16}}},"consequent":{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"+=","left":{"type":"Identifier","name":"sidx","loc":{"start":{"line":310,"column":19},"end":{"line":310,"column":23}}},"right":{"type":"BinaryExpression","operator":"+","left":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"table","loc":{"start":{"line":310,"column":28},"end":{"line":310,"column":33}}},"property":{"type":"Identifier","name":"length","loc":{"start":{"line":310,"column":34},"end":{"line":310,"column":40}}},"loc":{"start":{"line":310,"column":28},"end":{"line":310,"column":40}}},"right":{"type":"Literal","value":1,"raw":"1","loc":{"start":{"line":310,"column":43},"end":{"line":310,"column":44}}},"loc":{"start":{"line":310,"column":28},"end":{"line":310,"column":44}}},"loc":{"start":{"line":310,"column":19},"end":{"line":310,"column":45}}},"loc":{"start":{"line":310,"column":19},"end":{"line":310,"column":46}}},"alternate":null,"loc":{"start":{"line":310,"column":3},"end":{"line":310,"column":46}}},{"type":"ReturnStatement","argument":{"type":"MemberExpression","computed":true,"object":{"type":"Identifier","name":"table","loc":{"start":{"line":311,"column":10},"end":{"line":311,"column":15}}},"property":{"type":"BinaryExpression","operator":"-","left":{"type":"Identifier","name":"sidx","loc":{"start":{"line":311,"column":16},"end":{"line":311,"column":20}}},"right":{"type":"Literal","value":1,"raw":"1","loc":{"start":{"line":311,"column":21},"end":{"line":311,"column":22}}},"loc":{"start":{"line":311,"column":16},"end":{"line":311,"column":22}}},"loc":{"start":{"line":311,"column":10},"end":{"line":311,"column":23}}},"loc":{"start":{"line":311,"column":3},"end":{"line":311,"column":24}}}],"loc":{"start":{"line":308,"column":41},"end":{"line":312,"column":3}}},"alternate":{"type":"BlockStatement","body":[{"type":"ReturnStatement","argument":{"type":"MemberExpression","computed":true,"object":{"type":"Identifier","name":"table","loc":{"start":{"line":313,"column":10},"end":{"line":313,"column":15}}},"property":{"type":"Identifier","name":"prop","loc":{"start":{"line":313,"column":16},"end":{"line":313,"column":20}}},"loc":{"start":{"line":313,"column":10},"end":{"line":313,"column":21}}},"loc":{"start":{"line":313,"column":3},"end":{"line":313,"column":22}}}],"loc":{"start":{"line":312,"column":9},"end":{"line":314,"column":3}}},"loc":{"start":{"line":308,"column":9},"end":{"line":314,"column":3}}},"loc":{"start":{"line":306,"column":9},"end":{"line":314,"column":3}}},"loc":{"start":{"line":294,"column":9},"end":{"line":314,"column":3}}},"loc":{"start":{"line":288,"column":2},"end":{"line":314,"column":3}}}],"loc":{"start":{"line":287,"column":37},"end":{"line":315,"column":2}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":287,"column":1},"end":{"line":315,"column":2}}},{"type":"FunctionDeclaration","id":{"type":"Identifier","name":"indexAssign","loc":{"start":{"line":317,"column":10},"end":{"line":317,"column":21}}},"params":[{"type":"Identifier","name":"table","loc":{"start":{"line":317,"column":22},"end":{"line":317,"column":27}}},{"type":"Identifier","name":"prop","loc":{"start":{"line":317,"column":29},"end":{"line":317,"column":33}}},{"type":"Identifier","name":"value","loc":{"start":{"line":317,"column":35},"end":{"line":317,"column":40}}},{"type":"Identifier","name":"helper","loc":{"start":{"line":317,"column":42},"end":{"line":317,"column":48}}}],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"IfStatement","test":{"type":"LogicalExpression","operator":"||","left":{"type":"LogicalExpression","operator":"||","left":{"type":"BinaryExpression","operator":"===","left":{"type":"Identifier","name":"table","loc":{"start":{"line":319,"column":7},"end":{"line":319,"column":12}}},"right":{"type":"Literal","value":null,"raw":"null","loc":{"start":{"line":319,"column":17},"end":{"line":319,"column":21}}},"loc":{"start":{"line":319,"column":7},"end":{"line":319,"column":21}}},"right":{"type":"BinaryExpression","operator":"===","left":{"type":"Identifier","name":"table","loc":{"start":{"line":319,"column":25},"end":{"line":319,"column":30}}},"right":{"type":"Identifier","name":"undefined","loc":{"start":{"line":319,"column":35},"end":{"line":319,"column":44}}},"loc":{"start":{"line":319,"column":25},"end":{"line":319,"column":44}}},"loc":{"start":{"line":319,"column":7},"end":{"line":319,"column":44}}},"right":{"type":"BinaryExpression","operator":"==","left":{"type":"UnaryExpression","operator":"typeof","argument":{"type":"Identifier","name":"table","loc":{"start":{"line":319,"column":55},"end":{"line":319,"column":60}}},"prefix":true,"loc":{"start":{"line":319,"column":48},"end":{"line":319,"column":60}}},"right":{"type":"Literal","value":"number","raw":"\"number\"","loc":{"start":{"line":319,"column":64},"end":{"line":319,"column":72}}},"loc":{"start":{"line":319,"column":48},"end":{"line":319,"column":72}}},"loc":{"start":{"line":319,"column":7},"end":{"line":319,"column":72}}},"consequent":{"type":"BlockStatement","body":[{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"==","left":{"type":"Identifier","name":"helper","loc":{"start":{"line":320,"column":8},"end":{"line":320,"column":14}}},"right":{"type":"Identifier","name":"undefined","loc":{"start":{"line":320,"column":18},"end":{"line":320,"column":27}}},"loc":{"start":{"line":320,"column":8},"end":{"line":320,"column":27}}},"consequent":{"type":"BlockStatement","body":[{"type":"ThrowStatement","argument":{"type":"BinaryExpression","operator":"+","left":{"type":"BinaryExpression","operator":"+","left":{"type":"Literal","value":"attempt to index a ","raw":"\"attempt to index a \"","loc":{"start":{"line":321,"column":10},"end":{"line":321,"column":31}}},"right":{"type":"CallExpression","callee":{"type":"Identifier","name":"type","loc":{"start":{"line":321,"column":34},"end":{"line":321,"column":38}}},"arguments":[{"type":"Identifier","name":"table","loc":{"start":{"line":321,"column":39},"end":{"line":321,"column":44}}}],"loc":{"start":{"line":321,"column":34},"end":{"line":321,"column":45}}},"loc":{"start":{"line":321,"column":10},"end":{"line":321,"column":45}}},"right":{"type":"Literal","value":" value","raw":"\" value\"","loc":{"start":{"line":321,"column":48},"end":{"line":321,"column":56}}},"loc":{"start":{"line":321,"column":10},"end":{"line":321,"column":56}}},"loc":{"start":{"line":321,"column":4},"end":{"line":321,"column":57}}}],"loc":{"start":{"line":320,"column":30},"end":{"line":322,"column":4}}},"alternate":{"type":"BlockStatement","body":[{"type":"ThrowStatement","argument":{"type":"BinaryExpression","operator":"+","left":{"type":"BinaryExpression","operator":"+","left":{"type":"BinaryExpression","operator":"+","left":{"type":"BinaryExpression","operator":"+","left":{"type":"Literal","value":"attempt to index '","raw":"\"attempt to index '\"","loc":{"start":{"line":323,"column":10},"end":{"line":323,"column":30}}},"right":{"type":"Identifier","name":"helper","loc":{"start":{"line":323,"column":33},"end":{"line":323,"column":39}}},"loc":{"start":{"line":323,"column":10},"end":{"line":323,"column":39}}},"right":{"type":"Literal","value":"' (a ","raw":"\"' (a \"","loc":{"start":{"line":323,"column":42},"end":{"line":323,"column":49}}},"loc":{"start":{"line":323,"column":10},"end":{"line":323,"column":49}}},"right":{"type":"CallExpression","callee":{"type":"Identifier","name":"type","loc":{"start":{"line":323,"column":52},"end":{"line":323,"column":56}}},"arguments":[{"type":"Identifier","name":"table","loc":{"start":{"line":323,"column":57},"end":{"line":323,"column":62}}}],"loc":{"start":{"line":323,"column":52},"end":{"line":323,"column":63}}},"loc":{"start":{"line":323,"column":10},"end":{"line":323,"column":63}}},"right":{"type":"Literal","value":" value)","raw":"\" value)\"","loc":{"start":{"line":323,"column":66},"end":{"line":323,"column":75}}},"loc":{"start":{"line":323,"column":10},"end":{"line":323,"column":75}}},"loc":{"start":{"line":323,"column":4},"end":{"line":323,"column":76}}}],"loc":{"start":{"line":322,"column":10},"end":{"line":324,"column":4}}},"loc":{"start":{"line":320,"column":3},"end":{"line":324,"column":4}}}],"loc":{"start":{"line":319,"column":75},"end":{"line":325,"column":3}}},"alternate":null,"loc":{"start":{"line":319,"column":2},"end":{"line":325,"column":3}}},{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"instanceof","left":{"type":"Identifier","name":"table","loc":{"start":{"line":327,"column":7},"end":{"line":327,"column":12}}},"right":{"type":"Identifier","name":"LuaTable","loc":{"start":{"line":327,"column":24},"end":{"line":327,"column":32}}},"loc":{"start":{"line":327,"column":7},"end":{"line":327,"column":32}}},"consequent":{"type":"BlockStatement","body":[{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"val","loc":{"start":{"line":328,"column":7},"end":{"line":328,"column":10}}},"init":null,"loc":{"start":{"line":328,"column":7},"end":{"line":328,"column":10}}}],"kind":"var","loc":{"start":{"line":328,"column":3},"end":{"line":328,"column":11}}},{"type":"IfStatement","test":{"type":"LogicalExpression","operator":"||","left":{"type":"BinaryExpression","operator":"===","left":{"type":"Identifier","name":"prop","loc":{"start":{"line":330,"column":8},"end":{"line":330,"column":12}}},"right":{"type":"Identifier","name":"undefined","loc":{"start":{"line":330,"column":17},"end":{"line":330,"column":26}}},"loc":{"start":{"line":330,"column":8},"end":{"line":330,"column":26}}},"right":{"type":"BinaryExpression","operator":"===","left":{"type":"Identifier","name":"prop","loc":{"start":{"line":330,"column":30},"end":{"line":330,"column":34}}},"right":{"type":"Literal","value":null,"raw":"null","loc":{"start":{"line":330,"column":39},"end":{"line":330,"column":43}}},"loc":{"start":{"line":330,"column":30},"end":{"line":330,"column":43}}},"loc":{"start":{"line":330,"column":8},"end":{"line":330,"column":43}}},"consequent":{"type":"ThrowStatement","argument":{"type":"Literal","value":"table index is nil","raw":"\"table index is nil\"","loc":{"start":{"line":330,"column":52},"end":{"line":330,"column":72}}},"loc":{"start":{"line":330,"column":46},"end":{"line":330,"column":73}}},"alternate":null,"loc":{"start":{"line":330,"column":3},"end":{"line":330,"column":73}}},{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"==","left":{"type":"UnaryExpression","operator":"typeof","argument":{"type":"Identifier","name":"prop","loc":{"start":{"line":332,"column":15},"end":{"line":332,"column":19}}},"prefix":true,"loc":{"start":{"line":332,"column":8},"end":{"line":332,"column":19}}},"right":{"type":"Literal","value":"number","raw":"\"number\"","loc":{"start":{"line":332,"column":23},"end":{"line":332,"column":31}}},"loc":{"start":{"line":332,"column":8},"end":{"line":332,"column":31}}},"consequent":{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"Identifier","name":"val","loc":{"start":{"line":332,"column":34},"end":{"line":332,"column":37}}},"right":{"type":"MemberExpression","computed":true,"object":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"table","loc":{"start":{"line":332,"column":40},"end":{"line":332,"column":45}}},"property":{"type":"Identifier","name":"numeric","loc":{"start":{"line":332,"column":46},"end":{"line":332,"column":53}}},"loc":{"start":{"line":332,"column":40},"end":{"line":332,"column":53}}},"property":{"type":"BinaryExpression","operator":"-","left":{"type":"Identifier","name":"prop","loc":{"start":{"line":332,"column":54},"end":{"line":332,"column":58}}},"right":{"type":"Literal","value":1,"raw":"1","loc":{"start":{"line":332,"column":59},"end":{"line":332,"column":60}}},"loc":{"start":{"line":332,"column":54},"end":{"line":332,"column":60}}},"loc":{"start":{"line":332,"column":40},"end":{"line":332,"column":61}}},"loc":{"start":{"line":332,"column":34},"end":{"line":332,"column":61}}},"loc":{"start":{"line":332,"column":34},"end":{"line":332,"column":62}}},"alternate":{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"Identifier","name":"val","loc":{"start":{"line":333,"column":8},"end":{"line":333,"column":11}}},"right":{"type":"MemberExpression","computed":true,"object":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"table","loc":{"start":{"line":333,"column":14},"end":{"line":333,"column":19}}},"property":{"type":"Identifier","name":"hash","loc":{"start":{"line":333,"column":20},"end":{"line":333,"column":24}}},"loc":{"start":{"line":333,"column":14},"end":{"line":333,"column":24}}},"property":{"type":"Identifier","name":"prop","loc":{"start":{"line":333,"column":25},"end":{"line":333,"column":29}}},"loc":{"start":{"line":333,"column":14},"end":{"line":333,"column":30}}},"loc":{"start":{"line":333,"column":8},"end":{"line":333,"column":30}}},"loc":{"start":{"line":333,"column":8},"end":{"line":333,"column":31}}},"loc":{"start":{"line":332,"column":3},"end":{"line":333,"column":31}}},{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"&","left":{"type":"BinaryExpression","operator":"!==","left":{"type":"Identifier","name":"val","loc":{"start":{"line":335,"column":8},"end":{"line":335,"column":11}}},"right":{"type":"Literal","value":null,"raw":"null","loc":{"start":{"line":335,"column":16},"end":{"line":335,"column":20}}},"loc":{"start":{"line":335,"column":8},"end":{"line":335,"column":20}}},"right":{"type":"BinaryExpression","operator":"!==","left":{"type":"Identifier","name":"val","loc":{"start":{"line":335,"column":23},"end":{"line":335,"column":26}}},"right":{"type":"Identifier","name":"undefined","loc":{"start":{"line":335,"column":31},"end":{"line":335,"column":40}}},"loc":{"start":{"line":335,"column":23},"end":{"line":335,"column":40}}},"loc":{"start":{"line":335,"column":8},"end":{"line":335,"column":40}}},"consequent":{"type":"BlockStatement","body":[{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"==","left":{"type":"UnaryExpression","operator":"typeof","argument":{"type":"Identifier","name":"prop","loc":{"start":{"line":336,"column":16},"end":{"line":336,"column":20}}},"prefix":true,"loc":{"start":{"line":336,"column":9},"end":{"line":336,"column":20}}},"right":{"type":"Literal","value":"number","raw":"\"number\"","loc":{"start":{"line":336,"column":24},"end":{"line":336,"column":32}}},"loc":{"start":{"line":336,"column":9},"end":{"line":336,"column":32}}},"consequent":{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","computed":true,"object":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"table","loc":{"start":{"line":336,"column":34},"end":{"line":336,"column":39}}},"property":{"type":"Identifier","name":"numeric","loc":{"start":{"line":336,"column":40},"end":{"line":336,"column":47}}},"loc":{"start":{"line":336,"column":34},"end":{"line":336,"column":47}}},"property":{"type":"BinaryExpression","operator":"-","left":{"type":"Identifier","name":"prop","loc":{"start":{"line":336,"column":48},"end":{"line":336,"column":52}}},"right":{"type":"Literal","value":1,"raw":"1","loc":{"start":{"line":336,"column":53},"end":{"line":336,"column":54}}},"loc":{"start":{"line":336,"column":48},"end":{"line":336,"column":54}}},"loc":{"start":{"line":336,"column":34},"end":{"line":336,"column":55}}},"right":{"type":"Identifier","name":"value","loc":{"start":{"line":336,"column":58},"end":{"line":336,"column":63}}},"loc":{"start":{"line":336,"column":34},"end":{"line":336,"column":63}}},"loc":{"start":{"line":336,"column":34},"end":{"line":336,"column":64}}},"alternate":{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","computed":true,"object":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"table","loc":{"start":{"line":337,"column":9},"end":{"line":337,"column":14}}},"property":{"type":"Identifier","name":"hash","loc":{"start":{"line":337,"column":15},"end":{"line":337,"column":19}}},"loc":{"start":{"line":337,"column":9},"end":{"line":337,"column":19}}},"property":{"type":"Identifier","name":"prop","loc":{"start":{"line":337,"column":20},"end":{"line":337,"column":24}}},"loc":{"start":{"line":337,"column":9},"end":{"line":337,"column":25}}},"right":{"type":"Identifier","name":"value","loc":{"start":{"line":337,"column":28},"end":{"line":337,"column":33}}},"loc":{"start":{"line":337,"column":9},"end":{"line":337,"column":33}}},"loc":{"start":{"line":337,"column":9},"end":{"line":337,"column":34}}},"loc":{"start":{"line":336,"column":4},"end":{"line":337,"column":34}}},{"type":"ReturnStatement","argument":{"type":"Literal","value":true,"raw":"true","loc":{"start":{"line":338,"column":11},"end":{"line":338,"column":15}}},"loc":{"start":{"line":338,"column":4},"end":{"line":338,"column":16}}}],"loc":{"start":{"line":335,"column":43},"end":{"line":339,"column":4}}},"alternate":null,"loc":{"start":{"line":335,"column":3},"end":{"line":339,"column":4}}},{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"===","left":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"table","loc":{"start":{"line":341,"column":8},"end":{"line":341,"column":13}}},"property":{"type":"Identifier","name":"__metatable","loc":{"start":{"line":341,"column":14},"end":{"line":341,"column":25}}},"loc":{"start":{"line":341,"column":8},"end":{"line":341,"column":25}}},"right":{"type":"Identifier","name":"undefined","loc":{"start":{"line":341,"column":30},"end":{"line":341,"column":39}}},"loc":{"start":{"line":341,"column":8},"end":{"line":341,"column":39}}},"consequent":{"type":"BlockStatement","body":[{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"==","left":{"type":"UnaryExpression","operator":"typeof","argument":{"type":"Identifier","name":"prop","loc":{"start":{"line":342,"column":16},"end":{"line":342,"column":20}}},"prefix":true,"loc":{"start":{"line":342,"column":9},"end":{"line":342,"column":20}}},"right":{"type":"Literal","value":"number","raw":"\"number\"","loc":{"start":{"line":342,"column":24},"end":{"line":342,"column":32}}},"loc":{"start":{"line":342,"column":9},"end":{"line":342,"column":32}}},"consequent":{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","computed":true,"object":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"table","loc":{"start":{"line":342,"column":34},"end":{"line":342,"column":39}}},"property":{"type":"Identifier","name":"numeric","loc":{"start":{"line":342,"column":40},"end":{"line":342,"column":47}}},"loc":{"start":{"line":342,"column":34},"end":{"line":342,"column":47}}},"property":{"type":"BinaryExpression","operator":"-","left":{"type":"Identifier","name":"prop","loc":{"start":{"line":342,"column":48},"end":{"line":342,"column":52}}},"right":{"type":"Literal","value":1,"raw":"1","loc":{"start":{"line":342,"column":53},"end":{"line":342,"column":54}}},"loc":{"start":{"line":342,"column":48},"end":{"line":342,"column":54}}},"loc":{"start":{"line":342,"column":34},"end":{"line":342,"column":55}}},"right":{"type":"Identifier","name":"value","loc":{"start":{"line":342,"column":58},"end":{"line":342,"column":63}}},"loc":{"start":{"line":342,"column":34},"end":{"line":342,"column":63}}},"loc":{"start":{"line":342,"column":34},"end":{"line":342,"column":64}}},"alternate":{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","computed":true,"object":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"table","loc":{"start":{"line":343,"column":9},"end":{"line":343,"column":14}}},"property":{"type":"Identifier","name":"hash","loc":{"start":{"line":343,"column":15},"end":{"line":343,"column":19}}},"loc":{"start":{"line":343,"column":9},"end":{"line":343,"column":19}}},"property":{"type":"Identifier","name":"prop","loc":{"start":{"line":343,"column":20},"end":{"line":343,"column":24}}},"loc":{"start":{"line":343,"column":9},"end":{"line":343,"column":25}}},"right":{"type":"Identifier","name":"value","loc":{"start":{"line":343,"column":28},"end":{"line":343,"column":33}}},"loc":{"start":{"line":343,"column":9},"end":{"line":343,"column":33}}},"loc":{"start":{"line":343,"column":9},"end":{"line":343,"column":34}}},"loc":{"start":{"line":342,"column":4},"end":{"line":343,"column":34}}},{"type":"ReturnStatement","argument":{"type":"Literal","value":true,"raw":"true","loc":{"start":{"line":344,"column":11},"end":{"line":344,"column":15}}},"loc":{"start":{"line":344,"column":4},"end":{"line":344,"column":16}}}],"loc":{"start":{"line":341,"column":42},"end":{"line":345,"column":4}}},"alternate":null,"loc":{"start":{"line":341,"column":3},"end":{"line":345,"column":4}}},{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"idx","loc":{"start":{"line":349,"column":7},"end":{"line":349,"column":10}}},"init":{"type":"MemberExpression","computed":false,"object":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"table","loc":{"start":{"line":349,"column":13},"end":{"line":349,"column":18}}},"property":{"type":"Identifier","name":"__metatable","loc":{"start":{"line":349,"column":19},"end":{"line":349,"column":30}}},"loc":{"start":{"line":349,"column":13},"end":{"line":349,"column":30}}},"property":{"type":"Identifier","name":"__newindex","loc":{"start":{"line":349,"column":31},"end":{"line":349,"column":41}}},"loc":{"start":{"line":349,"column":13},"end":{"line":349,"column":41}}},"loc":{"start":{"line":349,"column":7},"end":{"line":349,"column":41}}}],"kind":"var","loc":{"start":{"line":349,"column":3},"end":{"line":349,"column":42}}},{"type":"IfStatement","test":{"type":"LogicalExpression","operator":"||","left":{"type":"BinaryExpression","operator":"===","left":{"type":"Identifier","name":"idx","loc":{"start":{"line":350,"column":8},"end":{"line":350,"column":11}}},"right":{"type":"Literal","value":null,"raw":"null","loc":{"start":{"line":350,"column":16},"end":{"line":350,"column":20}}},"loc":{"start":{"line":350,"column":8},"end":{"line":350,"column":20}}},"right":{"type":"BinaryExpression","operator":"===","left":{"type":"Identifier","name":"idx","loc":{"start":{"line":350,"column":24},"end":{"line":350,"column":27}}},"right":{"type":"Identifier","name":"undefined","loc":{"start":{"line":350,"column":32},"end":{"line":350,"column":41}}},"loc":{"start":{"line":350,"column":24},"end":{"line":350,"column":41}}},"loc":{"start":{"line":350,"column":8},"end":{"line":350,"column":41}}},"consequent":{"type":"BlockStatement","body":[{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"==","left":{"type":"UnaryExpression","operator":"typeof","argument":{"type":"Identifier","name":"pop","loc":{"start":{"line":351,"column":16},"end":{"line":351,"column":19}}},"prefix":true,"loc":{"start":{"line":351,"column":9},"end":{"line":351,"column":19}}},"right":{"type":"Literal","value":"number","raw":"\"number\"","loc":{"start":{"line":351,"column":23},"end":{"line":351,"column":31}}},"loc":{"start":{"line":351,"column":9},"end":{"line":351,"column":31}}},"consequent":{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","computed":true,"object":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"table","loc":{"start":{"line":351,"column":33},"end":{"line":351,"column":38}}},"property":{"type":"Identifier","name":"numeric","loc":{"start":{"line":351,"column":39},"end":{"line":351,"column":46}}},"loc":{"start":{"line":351,"column":33},"end":{"line":351,"column":46}}},"property":{"type":"Identifier","name":"prop","loc":{"start":{"line":351,"column":47},"end":{"line":351,"column":51}}},"loc":{"start":{"line":351,"column":33},"end":{"line":351,"column":52}}},"right":{"type":"Identifier","name":"value","loc":{"start":{"line":351,"column":55},"end":{"line":351,"column":60}}},"loc":{"start":{"line":351,"column":33},"end":{"line":351,"column":60}}},"loc":{"start":{"line":351,"column":33},"end":{"line":351,"column":61}}},"alternate":{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","computed":true,"object":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"table","loc":{"start":{"line":352,"column":9},"end":{"line":352,"column":14}}},"property":{"type":"Identifier","name":"hash","loc":{"start":{"line":352,"column":15},"end":{"line":352,"column":19}}},"loc":{"start":{"line":352,"column":9},"end":{"line":352,"column":19}}},"property":{"type":"Identifier","name":"prop","loc":{"start":{"line":352,"column":20},"end":{"line":352,"column":24}}},"loc":{"start":{"line":352,"column":9},"end":{"line":352,"column":25}}},"right":{"type":"Identifier","name":"value","loc":{"start":{"line":352,"column":28},"end":{"line":352,"column":33}}},"loc":{"start":{"line":352,"column":9},"end":{"line":352,"column":33}}},"loc":{"start":{"line":352,"column":9},"end":{"line":352,"column":34}}},"loc":{"start":{"line":351,"column":4},"end":{"line":352,"column":34}}},{"type":"ReturnStatement","argument":{"type":"Literal","value":true,"raw":"true","loc":{"start":{"line":353,"column":11},"end":{"line":353,"column":15}}},"loc":{"start":{"line":353,"column":4},"end":{"line":353,"column":16}}}],"loc":{"start":{"line":350,"column":44},"end":{"line":354,"column":4}}},"alternate":null,"loc":{"start":{"line":350,"column":3},"end":{"line":354,"column":4}}},{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"==","left":{"type":"UnaryExpression","operator":"typeof","argument":{"type":"Identifier","name":"idx","loc":{"start":{"line":356,"column":15},"end":{"line":356,"column":18}}},"prefix":true,"loc":{"start":{"line":356,"column":8},"end":{"line":356,"column":18}}},"right":{"type":"Literal","value":"function","raw":"\"function\"","loc":{"start":{"line":356,"column":22},"end":{"line":356,"column":32}}},"loc":{"start":{"line":356,"column":8},"end":{"line":356,"column":32}}},"consequent":{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"Identifier","name":"idx","loc":{"start":{"line":356,"column":35},"end":{"line":356,"column":38}}},"arguments":[{"type":"Identifier","name":"table","loc":{"start":{"line":356,"column":39},"end":{"line":356,"column":44}}},{"type":"Identifier","name":"prop","loc":{"start":{"line":356,"column":46},"end":{"line":356,"column":50}}},{"type":"Identifier","name":"value","loc":{"start":{"line":356,"column":52},"end":{"line":356,"column":57}}}],"loc":{"start":{"line":356,"column":35},"end":{"line":356,"column":58}}},"loc":{"start":{"line":356,"column":35},"end":{"line":356,"column":59}}},"alternate":{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"Identifier","name":"indexAssign","loc":{"start":{"line":357,"column":8},"end":{"line":357,"column":19}}},"arguments":[{"type":"Identifier","name":"idx","loc":{"start":{"line":357,"column":20},"end":{"line":357,"column":23}}},{"type":"Identifier","name":"prop","loc":{"start":{"line":357,"column":25},"end":{"line":357,"column":29}}},{"type":"Identifier","name":"value","loc":{"start":{"line":357,"column":31},"end":{"line":357,"column":36}}}],"loc":{"start":{"line":357,"column":8},"end":{"line":357,"column":37}}},"loc":{"start":{"line":357,"column":8},"end":{"line":357,"column":38}}},"loc":{"start":{"line":356,"column":3},"end":{"line":357,"column":38}}},{"type":"ReturnStatement","argument":{"type":"Literal","value":true,"raw":"true","loc":{"start":{"line":359,"column":10},"end":{"line":359,"column":14}}},"loc":{"start":{"line":359,"column":3},"end":{"line":359,"column":15}}}],"loc":{"start":{"line":327,"column":35},"end":{"line":362,"column":3}}},"alternate":{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"==","left":{"type":"UnaryExpression","operator":"typeof","argument":{"type":"Identifier","name":"table","loc":{"start":{"line":362,"column":21},"end":{"line":362,"column":26}}},"prefix":true,"loc":{"start":{"line":362,"column":14},"end":{"line":362,"column":26}}},"right":{"type":"Literal","value":"string","raw":"\"string\"","loc":{"start":{"line":362,"column":30},"end":{"line":362,"column":38}}},"loc":{"start":{"line":362,"column":14},"end":{"line":362,"column":38}}},"consequent":{"type":"BlockStatement","body":[{"type":"ThrowStatement","argument":{"type":"Literal","value":"attempt to index string value","raw":"\"attempt to index string value\"","loc":{"start":{"line":363,"column":9},"end":{"line":363,"column":40}}},"loc":{"start":{"line":363,"column":3},"end":{"line":363,"column":41}}}],"loc":{"start":{"line":362,"column":41},"end":{"line":364,"column":3}}},"alternate":{"type":"IfStatement","test":{"type":"CallExpression","callee":{"type":"Identifier","name":"isJSArray","loc":{"start":{"line":364,"column":14},"end":{"line":364,"column":23}}},"arguments":[{"type":"Identifier","name":"table","loc":{"start":{"line":364,"column":24},"end":{"line":364,"column":29}}}],"loc":{"start":{"line":364,"column":14},"end":{"line":364,"column":30}}},"consequent":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","computed":true,"object":{"type":"Identifier","name":"table","loc":{"start":{"line":365,"column":3},"end":{"line":365,"column":8}}},"property":{"type":"BinaryExpression","operator":"-","left":{"type":"Identifier","name":"prop","loc":{"start":{"line":365,"column":9},"end":{"line":365,"column":13}}},"right":{"type":"Literal","value":1,"raw":"1","loc":{"start":{"line":365,"column":14},"end":{"line":365,"column":15}}},"loc":{"start":{"line":365,"column":9},"end":{"line":365,"column":15}}},"loc":{"start":{"line":365,"column":3},"end":{"line":365,"column":16}}},"right":{"type":"Identifier","name":"value","loc":{"start":{"line":365,"column":19},"end":{"line":365,"column":24}}},"loc":{"start":{"line":365,"column":3},"end":{"line":365,"column":24}}},"loc":{"start":{"line":365,"column":3},"end":{"line":365,"column":25}}},{"type":"ReturnStatement","argument":{"type":"Literal","value":true,"raw":"true","loc":{"start":{"line":366,"column":10},"end":{"line":366,"column":14}}},"loc":{"start":{"line":366,"column":3},"end":{"line":366,"column":15}}}],"loc":{"start":{"line":364,"column":33},"end":{"line":367,"column":3}}},"alternate":{"type":"BlockStatement","body":[{"type":"ReturnStatement","argument":{"type":"Literal","value":false,"raw":"false","loc":{"start":{"line":368,"column":10},"end":{"line":368,"column":15}}},"loc":{"start":{"line":368,"column":3},"end":{"line":368,"column":16}}}],"loc":{"start":{"line":367,"column":9},"end":{"line":369,"column":3}}},"loc":{"start":{"line":364,"column":9},"end":{"line":369,"column":3}}},"loc":{"start":{"line":362,"column":9},"end":{"line":369,"column":3}}},"loc":{"start":{"line":327,"column":2},"end":{"line":369,"column":3}}}],"loc":{"start":{"line":317,"column":50},"end":{"line":370,"column":2}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":317,"column":1},"end":{"line":370,"column":2}}},{"type":"FunctionDeclaration","id":{"type":"Identifier","name":"oneValue","loc":{"start":{"line":372,"column":10},"end":{"line":372,"column":18}}},"params":[{"type":"Identifier","name":"v","loc":{"start":{"line":372,"column":19},"end":{"line":372,"column":20}}}],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"instanceof","left":{"type":"Identifier","name":"v","loc":{"start":{"line":373,"column":7},"end":{"line":373,"column":8}}},"right":{"type":"Identifier","name":"LuaReturnValues","loc":{"start":{"line":373,"column":20},"end":{"line":373,"column":35}}},"loc":{"start":{"line":373,"column":7},"end":{"line":373,"column":35}}},"consequent":{"type":"ReturnStatement","argument":{"type":"MemberExpression","computed":true,"object":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"v","loc":{"start":{"line":373,"column":45},"end":{"line":373,"column":46}}},"property":{"type":"Identifier","name":"values","loc":{"start":{"line":373,"column":47},"end":{"line":373,"column":53}}},"loc":{"start":{"line":373,"column":45},"end":{"line":373,"column":53}}},"property":{"type":"Literal","value":0,"raw":"0","loc":{"start":{"line":373,"column":54},"end":{"line":373,"column":55}}},"loc":{"start":{"line":373,"column":45},"end":{"line":373,"column":56}}},"loc":{"start":{"line":373,"column":38},"end":{"line":373,"column":57}}},"alternate":null,"loc":{"start":{"line":373,"column":2},"end":{"line":373,"column":57}}},{"type":"ReturnStatement","argument":{"type":"Identifier","name":"v","loc":{"start":{"line":374,"column":9},"end":{"line":374,"column":10}}},"loc":{"start":{"line":374,"column":2},"end":{"line":374,"column":11}}}],"loc":{"start":{"line":372,"column":22},"end":{"line":375,"column":2}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":372,"column":1},"end":{"line":375,"column":2}}},{"type":"FunctionDeclaration","id":{"type":"Identifier","name":"makeMultiReturn","loc":{"start":{"line":377,"column":10},"end":{"line":377,"column":25}}},"params":[],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"ReturnStatement","argument":{"type":"NewExpression","callee":{"type":"Identifier","name":"LuaReturnValues","loc":{"start":{"line":378,"column":13},"end":{"line":378,"column":28}}},"arguments":[{"type":"CallExpression","callee":{"type":"Identifier","name":"expand","loc":{"start":{"line":378,"column":29},"end":{"line":378,"column":35}}},"arguments":[{"type":"Identifier","name":"arguments","loc":{"start":{"line":378,"column":36},"end":{"line":378,"column":45}}},{"type":"Literal","value":true,"raw":"true","loc":{"start":{"line":378,"column":47},"end":{"line":378,"column":51}}}],"loc":{"start":{"line":378,"column":29},"end":{"line":378,"column":52}}}],"loc":{"start":{"line":378,"column":9},"end":{"line":378,"column":53}}},"loc":{"start":{"line":378,"column":2},"end":{"line":378,"column":54}}}],"loc":{"start":{"line":377,"column":28},"end":{"line":379,"column":2}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":377,"column":1},"end":{"line":379,"column":2}}},{"type":"FunctionDeclaration","id":{"type":"Identifier","name":"expand","loc":{"start":{"line":381,"column":10},"end":{"line":381,"column":16}}},"params":[{"type":"Identifier","name":"what","loc":{"start":{"line":381,"column":17},"end":{"line":381,"column":21}}},{"type":"Identifier","name":"allowExpand","loc":{"start":{"line":381,"column":23},"end":{"line":381,"column":34}}}],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"===","left":{"type":"Identifier","name":"allowExpand","loc":{"start":{"line":382,"column":7},"end":{"line":382,"column":18}}},"right":{"type":"Identifier","name":"undefined","loc":{"start":{"line":382,"column":23},"end":{"line":382,"column":32}}},"loc":{"start":{"line":382,"column":7},"end":{"line":382,"column":32}}},"consequent":{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"Identifier","name":"allowExpand","loc":{"start":{"line":382,"column":35},"end":{"line":382,"column":46}}},"right":{"type":"Literal","value":false,"raw":"false","loc":{"start":{"line":382,"column":49},"end":{"line":382,"column":54}}},"loc":{"start":{"line":382,"column":35},"end":{"line":382,"column":54}}},"loc":{"start":{"line":382,"column":35},"end":{"line":382,"column":55}}},"alternate":null,"loc":{"start":{"line":382,"column":2},"end":{"line":382,"column":55}}},{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"out","loc":{"start":{"line":384,"column":6},"end":{"line":384,"column":9}}},"init":{"type":"ArrayExpression","elements":[],"loc":{"start":{"line":384,"column":12},"end":{"line":384,"column":14}}},"loc":{"start":{"line":384,"column":6},"end":{"line":384,"column":14}}}],"kind":"var","loc":{"start":{"line":384,"column":2},"end":{"line":384,"column":15}}},{"type":"ForInStatement","left":{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"idx","loc":{"start":{"line":385,"column":12},"end":{"line":385,"column":15}}},"init":null,"loc":{"start":{"line":385,"column":12},"end":{"line":385,"column":15}}}],"kind":"var","loc":{"start":{"line":385,"column":8},"end":{"line":385,"column":15}}},"right":{"type":"Identifier","name":"what","loc":{"start":{"line":385,"column":19},"end":{"line":385,"column":23}}},"body":{"type":"BlockStatement","body":[{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"v","loc":{"start":{"line":386,"column":7},"end":{"line":386,"column":8}}},"init":{"type":"MemberExpression","computed":true,"object":{"type":"Identifier","name":"what","loc":{"start":{"line":386,"column":11},"end":{"line":386,"column":15}}},"property":{"type":"Identifier","name":"idx","loc":{"start":{"line":386,"column":16},"end":{"line":386,"column":19}}},"loc":{"start":{"line":386,"column":11},"end":{"line":386,"column":20}}},"loc":{"start":{"line":386,"column":7},"end":{"line":386,"column":20}}}],"kind":"var","loc":{"start":{"line":386,"column":3},"end":{"line":386,"column":21}}},{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"instanceof","left":{"type":"Identifier","name":"v","loc":{"start":{"line":387,"column":8},"end":{"line":387,"column":9}}},"right":{"type":"Identifier","name":"LuaReturnValues","loc":{"start":{"line":387,"column":21},"end":{"line":387,"column":36}}},"loc":{"start":{"line":387,"column":8},"end":{"line":387,"column":36}}},"consequent":{"type":"BlockStatement","body":[{"type":"ForInStatement","left":{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"i","loc":{"start":{"line":388,"column":14},"end":{"line":388,"column":15}}},"init":null,"loc":{"start":{"line":388,"column":14},"end":{"line":388,"column":15}}}],"kind":"var","loc":{"start":{"line":388,"column":10},"end":{"line":388,"column":15}}},"right":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"v","loc":{"start":{"line":388,"column":19},"end":{"line":388,"column":20}}},"property":{"type":"Identifier","name":"values","loc":{"start":{"line":388,"column":21},"end":{"line":388,"column":27}}},"loc":{"start":{"line":388,"column":19},"end":{"line":388,"column":27}}},"body":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"out","loc":{"start":{"line":389,"column":5},"end":{"line":389,"column":8}}},"property":{"type":"Identifier","name":"push","loc":{"start":{"line":389,"column":9},"end":{"line":389,"column":13}}},"loc":{"start":{"line":389,"column":5},"end":{"line":389,"column":13}}},"arguments":[{"type":"MemberExpression","computed":true,"object":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"v","loc":{"start":{"line":389,"column":14},"end":{"line":389,"column":15}}},"property":{"type":"Identifier","name":"values","loc":{"start":{"line":389,"column":16},"end":{"line":389,"column":22}}},"loc":{"start":{"line":389,"column":14},"end":{"line":389,"column":22}}},"property":{"type":"Identifier","name":"i","loc":{"start":{"line":389,"column":23},"end":{"line":389,"column":24}}},"loc":{"start":{"line":389,"column":14},"end":{"line":389,"column":25}}}],"loc":{"start":{"line":389,"column":5},"end":{"line":389,"column":26}}},"loc":{"start":{"line":389,"column":5},"end":{"line":389,"column":27}}},{"type":"IfStatement","test":{"type":"LogicalExpression","operator":"||","left":{"type":"BinaryExpression","operator":"<","left":{"type":"Identifier","name":"idx","loc":{"start":{"line":390,"column":10},"end":{"line":390,"column":13}}},"right":{"type":"BinaryExpression","operator":"-","left":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"what","loc":{"start":{"line":390,"column":16},"end":{"line":390,"column":20}}},"property":{"type":"Identifier","name":"length","loc":{"start":{"line":390,"column":21},"end":{"line":390,"column":27}}},"loc":{"start":{"line":390,"column":16},"end":{"line":390,"column":27}}},"right":{"type":"Literal","value":1,"raw":"1","loc":{"start":{"line":390,"column":30},"end":{"line":390,"column":31}}},"loc":{"start":{"line":390,"column":16},"end":{"line":390,"column":31}}},"loc":{"start":{"line":390,"column":10},"end":{"line":390,"column":31}}},"right":{"type":"UnaryExpression","operator":"!","argument":{"type":"Identifier","name":"allowExpand","loc":{"start":{"line":390,"column":36},"end":{"line":390,"column":47}}},"prefix":true,"loc":{"start":{"line":390,"column":35},"end":{"line":390,"column":47}}},"loc":{"start":{"line":390,"column":10},"end":{"line":390,"column":47}}},"consequent":{"type":"BreakStatement","label":null,"loc":{"start":{"line":390,"column":49},"end":{"line":390,"column":55}}},"alternate":null,"loc":{"start":{"line":390,"column":5},"end":{"line":390,"column":55}}}],"loc":{"start":{"line":388,"column":30},"end":{"line":391,"column":5}}},"each":false,"loc":{"start":{"line":388,"column":4},"end":{"line":391,"column":5}}}],"loc":{"start":{"line":387,"column":39},"end":{"line":392,"column":4}}},"alternate":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"out","loc":{"start":{"line":393,"column":4},"end":{"line":393,"column":7}}},"property":{"type":"Identifier","name":"push","loc":{"start":{"line":393,"column":8},"end":{"line":393,"column":12}}},"loc":{"start":{"line":393,"column":4},"end":{"line":393,"column":12}}},"arguments":[{"type":"Identifier","name":"v","loc":{"start":{"line":393,"column":13},"end":{"line":393,"column":14}}}],"loc":{"start":{"line":393,"column":4},"end":{"line":393,"column":15}}},"loc":{"start":{"line":393,"column":4},"end":{"line":393,"column":16}}}],"loc":{"start":{"line":392,"column":10},"end":{"line":394,"column":4}}},"loc":{"start":{"line":387,"column":3},"end":{"line":394,"column":4}}}],"loc":{"start":{"line":385,"column":26},"end":{"line":395,"column":3}}},"each":false,"loc":{"start":{"line":385,"column":2},"end":{"line":395,"column":3}}},{"type":"ReturnStatement","argument":{"type":"Identifier","name":"out","loc":{"start":{"line":396,"column":9},"end":{"line":396,"column":12}}},"loc":{"start":{"line":396,"column":2},"end":{"line":396,"column":13}}}],"loc":{"start":{"line":381,"column":36},"end":{"line":397,"column":2}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":381,"column":1},"end":{"line":397,"column":2}}},{"type":"FunctionDeclaration","id":{"type":"Identifier","name":"expandReturnValues","loc":{"start":{"line":399,"column":10},"end":{"line":399,"column":28}}},"params":[],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"ReturnStatement","argument":{"type":"CallExpression","callee":{"type":"Identifier","name":"expand","loc":{"start":{"line":400,"column":9},"end":{"line":400,"column":15}}},"arguments":[{"type":"Identifier","name":"arguments","loc":{"start":{"line":400,"column":16},"end":{"line":400,"column":25}}},{"type":"Literal","value":true,"raw":"true","loc":{"start":{"line":400,"column":27},"end":{"line":400,"column":31}}}],"loc":{"start":{"line":400,"column":9},"end":{"line":400,"column":32}}},"loc":{"start":{"line":400,"column":2},"end":{"line":400,"column":33}}}],"loc":{"start":{"line":399,"column":31},"end":{"line":401,"column":2}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":399,"column":1},"end":{"line":401,"column":2}}},{"type":"FunctionDeclaration","id":{"type":"Identifier","name":"pcall","loc":{"start":{"line":403,"column":10},"end":{"line":403,"column":15}}},"params":[{"type":"Identifier","name":"what","loc":{"start":{"line":403,"column":16},"end":{"line":403,"column":20}}}],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"TryStatement","block":{"type":"BlockStatement","body":[{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"result","loc":{"start":{"line":405,"column":7},"end":{"line":405,"column":13}}},"init":{"type":"CallExpression","callee":{"type":"Identifier","name":"expand","loc":{"start":{"line":405,"column":16},"end":{"line":405,"column":22}}},"arguments":[{"type":"ArrayExpression","elements":[{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"what","loc":{"start":{"line":405,"column":24},"end":{"line":405,"column":28}}},"property":{"type":"Identifier","name":"apply","loc":{"start":{"line":405,"column":29},"end":{"line":405,"column":34}}},"loc":{"start":{"line":405,"column":24},"end":{"line":405,"column":34}}},"arguments":[{"type":"ThisExpression","loc":{"start":{"line":405,"column":35},"end":{"line":405,"column":39}}},{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"MemberExpression","computed":false,"object":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"Array","loc":{"start":{"line":405,"column":41},"end":{"line":405,"column":46}}},"property":{"type":"Identifier","name":"prototype","loc":{"start":{"line":405,"column":47},"end":{"line":405,"column":56}}},"loc":{"start":{"line":405,"column":41},"end":{"line":405,"column":56}}},"property":{"type":"Identifier","name":"slice","loc":{"start":{"line":405,"column":57},"end":{"line":405,"column":62}}},"loc":{"start":{"line":405,"column":41},"end":{"line":405,"column":62}}},"property":{"type":"Identifier","name":"call","loc":{"start":{"line":405,"column":63},"end":{"line":405,"column":67}}},"loc":{"start":{"line":405,"column":41},"end":{"line":405,"column":67}}},"arguments":[{"type":"Identifier","name":"arguments","loc":{"start":{"line":405,"column":68},"end":{"line":405,"column":77}}},{"type":"Literal","value":1,"raw":"1","loc":{"start":{"line":405,"column":79},"end":{"line":405,"column":80}}}],"loc":{"start":{"line":405,"column":41},"end":{"line":405,"column":81}}}],"loc":{"start":{"line":405,"column":24},"end":{"line":405,"column":82}}}],"loc":{"start":{"line":405,"column":23},"end":{"line":405,"column":83}}},{"type":"Literal","value":true,"raw":"true","loc":{"start":{"line":405,"column":85},"end":{"line":405,"column":89}}}],"loc":{"start":{"line":405,"column":16},"end":{"line":405,"column":90}}},"loc":{"start":{"line":405,"column":7},"end":{"line":405,"column":90}}}],"kind":"var","loc":{"start":{"line":405,"column":3},"end":{"line":405,"column":91}}},{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"result","loc":{"start":{"line":406,"column":3},"end":{"line":406,"column":9}}},"property":{"type":"Identifier","name":"unshift","loc":{"start":{"line":406,"column":10},"end":{"line":406,"column":17}}},"loc":{"start":{"line":406,"column":3},"end":{"line":406,"column":17}}},"arguments":[{"type":"Literal","value":true,"raw":"true","loc":{"start":{"line":406,"column":18},"end":{"line":406,"column":22}}}],"loc":{"start":{"line":406,"column":3},"end":{"line":406,"column":23}}},"loc":{"start":{"line":406,"column":3},"end":{"line":406,"column":24}}},{"type":"ReturnStatement","argument":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"makeMultiReturn","loc":{"start":{"line":407,"column":10},"end":{"line":407,"column":25}}},"property":{"type":"Identifier","name":"apply","loc":{"start":{"line":407,"column":26},"end":{"line":407,"column":31}}},"loc":{"start":{"line":407,"column":10},"end":{"line":407,"column":31}}},"arguments":[{"type":"Identifier","name":"__lua","loc":{"start":{"line":407,"column":32},"end":{"line":407,"column":37}}},{"type":"Identifier","name":"result","loc":{"start":{"line":407,"column":39},"end":{"line":407,"column":45}}}],"loc":{"start":{"line":407,"column":10},"end":{"line":407,"column":46}}},"loc":{"start":{"line":407,"column":3},"end":{"line":407,"column":47}}}],"loc":{"start":{"line":404,"column":6},"end":{"line":408,"column":3}}},"guardedHandlers":[],"handlers":[{"type":"CatchClause","param":{"type":"Identifier","name":"e","loc":{"start":{"line":408,"column":12},"end":{"line":408,"column":13}}},"body":{"type":"BlockStatement","body":[{"type":"ReturnStatement","argument":{"type":"CallExpression","callee":{"type":"Identifier","name":"makeMultiReturn","loc":{"start":{"line":409,"column":10},"end":{"line":409,"column":25}}},"arguments":[{"type":"Literal","value":false,"raw":"false","loc":{"start":{"line":409,"column":26},"end":{"line":409,"column":31}}},{"type":"Identifier","name":"e","loc":{"start":{"line":409,"column":33},"end":{"line":409,"column":34}}}],"loc":{"start":{"line":409,"column":10},"end":{"line":409,"column":35}}},"loc":{"start":{"line":409,"column":3},"end":{"line":409,"column":36}}}],"loc":{"start":{"line":408,"column":16},"end":{"line":410,"column":3}}},"loc":{"start":{"line":408,"column":4},"end":{"line":410,"column":3}}}],"finalizer":null,"loc":{"start":{"line":404,"column":2},"end":{"line":410,"column":3}}}],"loc":{"start":{"line":403,"column":38},"end":{"line":411,"column":2}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":403,"column":1},"end":{"line":411,"column":2}}},{"type":"FunctionDeclaration","id":{"type":"Identifier","name":"isTable","loc":{"start":{"line":413,"column":10},"end":{"line":413,"column":17}}},"params":[{"type":"Identifier","name":"a","loc":{"start":{"line":413,"column":18},"end":{"line":413,"column":19}}}],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"ReturnStatement","argument":{"type":"BinaryExpression","operator":"instanceof","left":{"type":"Identifier","name":"a","loc":{"start":{"line":413,"column":30},"end":{"line":413,"column":31}}},"right":{"type":"Identifier","name":"LuaTable","loc":{"start":{"line":413,"column":43},"end":{"line":413,"column":51}}},"loc":{"start":{"line":413,"column":30},"end":{"line":413,"column":51}}},"loc":{"start":{"line":413,"column":23},"end":{"line":413,"column":52}}}],"loc":{"start":{"line":413,"column":21},"end":{"line":413,"column":54}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":413,"column":1},"end":{"line":413,"column":54}}},{"type":"FunctionDeclaration","id":{"type":"Identifier","name":"mark","loc":{"start":{"line":415,"column":10},"end":{"line":415,"column":14}}},"params":[{"type":"Identifier","name":"o","loc":{"start":{"line":415,"column":15},"end":{"line":415,"column":16}}}],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"seen","loc":{"start":{"line":416,"column":6},"end":{"line":416,"column":10}}},"init":{"type":"ArrayExpression","elements":[],"loc":{"start":{"line":416,"column":13},"end":{"line":416,"column":15}}},"loc":{"start":{"line":416,"column":6},"end":{"line":416,"column":15}}}],"kind":"var","loc":{"start":{"line":416,"column":2},"end":{"line":416,"column":16}}},{"type":"FunctionDeclaration","id":{"type":"Identifier","name":"domark","loc":{"start":{"line":417,"column":11},"end":{"line":417,"column":17}}},"params":[{"type":"Identifier","name":"o","loc":{"start":{"line":417,"column":18},"end":{"line":417,"column":19}}}],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"in","left":{"type":"Identifier","name":"o","loc":{"start":{"line":418,"column":8},"end":{"line":418,"column":9}}},"right":{"type":"Identifier","name":"seen","loc":{"start":{"line":418,"column":13},"end":{"line":418,"column":17}}},"loc":{"start":{"line":418,"column":8},"end":{"line":418,"column":17}}},"consequent":{"type":"ReturnStatement","argument":null,"loc":{"start":{"line":418,"column":20},"end":{"line":418,"column":27}}},"alternate":null,"loc":{"start":{"line":418,"column":3},"end":{"line":418,"column":27}}},{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"seen","loc":{"start":{"line":419,"column":3},"end":{"line":419,"column":7}}},"property":{"type":"Identifier","name":"push","loc":{"start":{"line":419,"column":8},"end":{"line":419,"column":12}}},"loc":{"start":{"line":419,"column":3},"end":{"line":419,"column":12}}},"arguments":[{"type":"Identifier","name":"o","loc":{"start":{"line":419,"column":13},"end":{"line":419,"column":14}}}],"loc":{"start":{"line":419,"column":3},"end":{"line":419,"column":15}}},"loc":{"start":{"line":419,"column":3},"end":{"line":419,"column":16}}},{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"==","left":{"type":"UnaryExpression","operator":"typeof","argument":{"type":"Identifier","name":"o","loc":{"start":{"line":420,"column":15},"end":{"line":420,"column":16}}},"prefix":true,"loc":{"start":{"line":420,"column":8},"end":{"line":420,"column":16}}},"right":{"type":"Literal","value":"object","raw":"\"object\"","loc":{"start":{"line":420,"column":20},"end":{"line":420,"column":28}}},"loc":{"start":{"line":420,"column":8},"end":{"line":420,"column":28}}},"consequent":{"type":"ForInStatement","left":{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"idx","loc":{"start":{"line":420,"column":41},"end":{"line":420,"column":44}}},"init":null,"loc":{"start":{"line":420,"column":41},"end":{"line":420,"column":44}}}],"kind":"var","loc":{"start":{"line":420,"column":37},"end":{"line":420,"column":44}}},"right":{"type":"Identifier","name":"o","loc":{"start":{"line":420,"column":48},"end":{"line":420,"column":49}}},"body":{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"Identifier","name":"domark","loc":{"start":{"line":420,"column":52},"end":{"line":420,"column":58}}},"arguments":[{"type":"MemberExpression","computed":true,"object":{"type":"Identifier","name":"o","loc":{"start":{"line":420,"column":59},"end":{"line":420,"column":60}}},"property":{"type":"Identifier","name":"idx","loc":{"start":{"line":420,"column":61},"end":{"line":420,"column":64}}},"loc":{"start":{"line":420,"column":59},"end":{"line":420,"column":65}}}],"loc":{"start":{"line":420,"column":52},"end":{"line":420,"column":66}}},"loc":{"start":{"line":420,"column":52},"end":{"line":420,"column":67}}},"each":false,"loc":{"start":{"line":420,"column":31},"end":{"line":420,"column":67}}},"alternate":{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"==","left":{"type":"UnaryExpression","operator":"typeof","argument":{"type":"Identifier","name":"o","loc":{"start":{"line":421,"column":20},"end":{"line":421,"column":21}}},"prefix":true,"loc":{"start":{"line":421,"column":13},"end":{"line":421,"column":21}}},"right":{"type":"Literal","value":"function","raw":"\"function\"","loc":{"start":{"line":421,"column":25},"end":{"line":421,"column":35}}},"loc":{"start":{"line":421,"column":13},"end":{"line":421,"column":35}}},"consequent":{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"o","loc":{"start":{"line":421,"column":38},"end":{"line":421,"column":39}}},"property":{"type":"Identifier","name":"__luaType","loc":{"start":{"line":421,"column":40},"end":{"line":421,"column":49}}},"loc":{"start":{"line":421,"column":38},"end":{"line":421,"column":49}}},"right":{"type":"Literal","value":"function","raw":"\"function\"","loc":{"start":{"line":421,"column":52},"end":{"line":421,"column":62}}},"loc":{"start":{"line":421,"column":38},"end":{"line":421,"column":62}}},"loc":{"start":{"line":421,"column":38},"end":{"line":421,"column":63}}},"alternate":null,"loc":{"start":{"line":421,"column":8},"end":{"line":421,"column":63}}},"loc":{"start":{"line":420,"column":3},"end":{"line":421,"column":63}}}],"loc":{"start":{"line":417,"column":21},"end":{"line":423,"column":3}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":417,"column":2},"end":{"line":423,"column":3}}},{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"Identifier","name":"domark","loc":{"start":{"line":424,"column":2},"end":{"line":424,"column":8}}},"arguments":[{"type":"Identifier","name":"o","loc":{"start":{"line":424,"column":9},"end":{"line":424,"column":10}}}],"loc":{"start":{"line":424,"column":2},"end":{"line":424,"column":11}}},"loc":{"start":{"line":424,"column":2},"end":{"line":424,"column":12}}}],"loc":{"start":{"line":415,"column":18},"end":{"line":425,"column":2}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":415,"column":1},"end":{"line":425,"column":2}}},{"type":"ReturnStatement","argument":{"type":"ObjectExpression","properties":[{"type":"Property","key":{"type":"Identifier","name":"add","loc":{"start":{"line":428,"column":2},"end":{"line":428,"column":5}}},"value":{"type":"Identifier","name":"add","loc":{"start":{"line":428,"column":7},"end":{"line":428,"column":10}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":428,"column":2},"end":{"line":428,"column":10}}},{"type":"Property","key":{"type":"Identifier","name":"sub","loc":{"start":{"line":429,"column":2},"end":{"line":429,"column":5}}},"value":{"type":"Identifier","name":"sub","loc":{"start":{"line":429,"column":7},"end":{"line":429,"column":10}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":429,"column":2},"end":{"line":429,"column":10}}},{"type":"Property","key":{"type":"Identifier","name":"mul","loc":{"start":{"line":430,"column":2},"end":{"line":430,"column":5}}},"value":{"type":"Identifier","name":"mul","loc":{"start":{"line":430,"column":7},"end":{"line":430,"column":10}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":430,"column":2},"end":{"line":430,"column":10}}},{"type":"Property","key":{"type":"Identifier","name":"div","loc":{"start":{"line":431,"column":2},"end":{"line":431,"column":5}}},"value":{"type":"Identifier","name":"div","loc":{"start":{"line":431,"column":7},"end":{"line":431,"column":10}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":431,"column":2},"end":{"line":431,"column":10}}},{"type":"Property","key":{"type":"Identifier","name":"intdiv","loc":{"start":{"line":432,"column":2},"end":{"line":432,"column":8}}},"value":{"type":"Identifier","name":"intdiv","loc":{"start":{"line":432,"column":10},"end":{"line":432,"column":16}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":432,"column":2},"end":{"line":432,"column":16}}},{"type":"Property","key":{"type":"Identifier","name":"mod","loc":{"start":{"line":433,"column":2},"end":{"line":433,"column":5}}},"value":{"type":"Identifier","name":"mod","loc":{"start":{"line":433,"column":7},"end":{"line":433,"column":10}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":433,"column":2},"end":{"line":433,"column":10}}},{"type":"Property","key":{"type":"Identifier","name":"call","loc":{"start":{"line":434,"column":2},"end":{"line":434,"column":6}}},"value":{"type":"Identifier","name":"call","loc":{"start":{"line":434,"column":8},"end":{"line":434,"column":12}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":434,"column":2},"end":{"line":434,"column":12}}},{"type":"Property","key":{"type":"Identifier","name":"lte","loc":{"start":{"line":435,"column":2},"end":{"line":435,"column":5}}},"value":{"type":"Identifier","name":"lte","loc":{"start":{"line":435,"column":7},"end":{"line":435,"column":10}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":435,"column":2},"end":{"line":435,"column":10}}},{"type":"Property","key":{"type":"Identifier","name":"lt","loc":{"start":{"line":436,"column":2},"end":{"line":436,"column":4}}},"value":{"type":"Identifier","name":"lt","loc":{"start":{"line":436,"column":6},"end":{"line":436,"column":8}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":436,"column":2},"end":{"line":436,"column":8}}},{"type":"Property","key":{"type":"Identifier","name":"ne","loc":{"start":{"line":437,"column":2},"end":{"line":437,"column":4}}},"value":{"type":"Identifier","name":"ne","loc":{"start":{"line":437,"column":6},"end":{"line":437,"column":8}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":437,"column":2},"end":{"line":437,"column":8}}},{"type":"Property","key":{"type":"Identifier","name":"gt","loc":{"start":{"line":438,"column":2},"end":{"line":438,"column":4}}},"value":{"type":"Identifier","name":"gt","loc":{"start":{"line":438,"column":6},"end":{"line":438,"column":8}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":438,"column":2},"end":{"line":438,"column":8}}},{"type":"Property","key":{"type":"Identifier","name":"gte","loc":{"start":{"line":439,"column":2},"end":{"line":439,"column":5}}},"value":{"type":"Identifier","name":"gte","loc":{"start":{"line":439,"column":7},"end":{"line":439,"column":10}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":439,"column":2},"end":{"line":439,"column":10}}},{"type":"Property","key":{"type":"Identifier","name":"eq","loc":{"start":{"line":440,"column":2},"end":{"line":440,"column":4}}},"value":{"type":"Identifier","name":"eq","loc":{"start":{"line":440,"column":6},"end":{"line":440,"column":8}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":440,"column":2},"end":{"line":440,"column":8}}},{"type":"Property","key":{"type":"Identifier","name":"index","loc":{"start":{"line":441,"column":2},"end":{"line":441,"column":7}}},"value":{"type":"Identifier","name":"index","loc":{"start":{"line":441,"column":9},"end":{"line":441,"column":14}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":441,"column":2},"end":{"line":441,"column":14}}},{"type":"Property","key":{"type":"Identifier","name":"indexAssign","loc":{"start":{"line":442,"column":2},"end":{"line":442,"column":13}}},"value":{"type":"Identifier","name":"indexAssign","loc":{"start":{"line":442,"column":15},"end":{"line":442,"column":26}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":442,"column":2},"end":{"line":442,"column":26}}},{"type":"Property","key":{"type":"Identifier","name":"concat","loc":{"start":{"line":443,"column":2},"end":{"line":443,"column":8}}},"value":{"type":"Identifier","name":"concat","loc":{"start":{"line":443,"column":10},"end":{"line":443,"column":16}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":443,"column":2},"end":{"line":443,"column":16}}},{"type":"Property","key":{"type":"Identifier","name":"makeTable","loc":{"start":{"line":444,"column":2},"end":{"line":444,"column":11}}},"value":{"type":"Identifier","name":"makeTable","loc":{"start":{"line":444,"column":13},"end":{"line":444,"column":22}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":444,"column":2},"end":{"line":444,"column":22}}},{"type":"Property","key":{"type":"Identifier","name":"makeFunction","loc":{"start":{"line":445,"column":2},"end":{"line":445,"column":14}}},"value":{"type":"Identifier","name":"makeFunction","loc":{"start":{"line":445,"column":16},"end":{"line":445,"column":28}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":445,"column":2},"end":{"line":445,"column":28}}},{"type":"Property","key":{"type":"Identifier","name":"expandReturnValues","loc":{"start":{"line":446,"column":2},"end":{"line":446,"column":20}}},"value":{"type":"Identifier","name":"expandReturnValues","loc":{"start":{"line":446,"column":22},"end":{"line":446,"column":40}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":446,"column":2},"end":{"line":446,"column":40}}},{"type":"Property","key":{"type":"Identifier","name":"makeMultiReturn","loc":{"start":{"line":447,"column":2},"end":{"line":447,"column":17}}},"value":{"type":"Identifier","name":"makeMultiReturn","loc":{"start":{"line":447,"column":19},"end":{"line":447,"column":34}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":447,"column":2},"end":{"line":447,"column":34}}},{"type":"Property","key":{"type":"Identifier","name":"count","loc":{"start":{"line":448,"column":2},"end":{"line":448,"column":7}}},"value":{"type":"Identifier","name":"count","loc":{"start":{"line":448,"column":9},"end":{"line":448,"column":14}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":448,"column":2},"end":{"line":448,"column":14}}},{"type":"Property","key":{"type":"Identifier","name":"and","loc":{"start":{"line":449,"column":2},"end":{"line":449,"column":5}}},"value":{"type":"Identifier","name":"and","loc":{"start":{"line":449,"column":7},"end":{"line":449,"column":10}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":449,"column":2},"end":{"line":449,"column":10}}},{"type":"Property","key":{"type":"Identifier","name":"or","loc":{"start":{"line":450,"column":2},"end":{"line":450,"column":4}}},"value":{"type":"Identifier","name":"or","loc":{"start":{"line":450,"column":6},"end":{"line":450,"column":8}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":450,"column":2},"end":{"line":450,"column":8}}},{"type":"Property","key":{"type":"Identifier","name":"expand","loc":{"start":{"line":451,"column":2},"end":{"line":451,"column":8}}},"value":{"type":"Identifier","name":"expand","loc":{"start":{"line":451,"column":10},"end":{"line":451,"column":16}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":451,"column":2},"end":{"line":451,"column":16}}},{"type":"Property","key":{"type":"Identifier","name":"rest","loc":{"start":{"line":452,"column":2},"end":{"line":452,"column":6}}},"value":{"type":"Identifier","name":"rest","loc":{"start":{"line":452,"column":8},"end":{"line":452,"column":12}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":452,"column":2},"end":{"line":452,"column":12}}},{"type":"Property","key":{"type":"Identifier","name":"pcall","loc":{"start":{"line":453,"column":2},"end":{"line":453,"column":7}}},"value":{"type":"Identifier","name":"pcall","loc":{"start":{"line":453,"column":9},"end":{"line":453,"column":14}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":453,"column":2},"end":{"line":453,"column":14}}},{"type":"Property","key":{"type":"Identifier","name":"type","loc":{"start":{"line":454,"column":2},"end":{"line":454,"column":6}}},"value":{"type":"Identifier","name":"type","loc":{"start":{"line":454,"column":8},"end":{"line":454,"column":12}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":454,"column":2},"end":{"line":454,"column":12}}},{"type":"Property","key":{"type":"Identifier","name":"pow","loc":{"start":{"line":455,"column":2},"end":{"line":455,"column":5}}},"value":{"type":"Identifier","name":"pow","loc":{"start":{"line":455,"column":7},"end":{"line":455,"column":10}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":455,"column":2},"end":{"line":455,"column":10}}},{"type":"Property","key":{"type":"Identifier","name":"isTable","loc":{"start":{"line":456,"column":2},"end":{"line":456,"column":9}}},"value":{"type":"Identifier","name":"isTable","loc":{"start":{"line":456,"column":11},"end":{"line":456,"column":18}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":456,"column":2},"end":{"line":456,"column":18}}},{"type":"Property","key":{"type":"Identifier","name":"mark","loc":{"start":{"line":457,"column":2},"end":{"line":457,"column":6}}},"value":{"type":"Identifier","name":"mark","loc":{"start":{"line":457,"column":8},"end":{"line":457,"column":12}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":457,"column":2},"end":{"line":457,"column":12}}},{"type":"Property","key":{"type":"Identifier","name":"forcomp","loc":{"start":{"line":458,"column":2},"end":{"line":458,"column":9}}},"value":{"type":"Identifier","name":"forcomp","loc":{"start":{"line":458,"column":11},"end":{"line":458,"column":18}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":458,"column":2},"end":{"line":458,"column":18}}},{"type":"Property","key":{"type":"Identifier","name":"makeString","loc":{"start":{"line":459,"column":2},"end":{"line":459,"column":12}}},"value":{"type":"Identifier","name":"makeString","loc":{"start":{"line":459,"column":14},"end":{"line":459,"column":24}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":459,"column":2},"end":{"line":459,"column":24}}},{"type":"Property","key":{"type":"Identifier","name":"oneValue","loc":{"start":{"line":460,"column":2},"end":{"line":460,"column":10}}},"value":{"type":"Identifier","name":"oneValue","loc":{"start":{"line":460,"column":12},"end":{"line":460,"column":20}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":460,"column":2},"end":{"line":460,"column":20}}},{"type":"Property","key":{"type":"Identifier","name":"lookupMetaTable","loc":{"start":{"line":461,"column":2},"end":{"line":461,"column":17}}},"value":{"type":"Identifier","name":"lookupMetaTable","loc":{"start":{"line":461,"column":19},"end":{"line":461,"column":34}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":461,"column":2},"end":{"line":461,"column":34}}},{"type":"Property","key":{"type":"Identifier","name":"isJSArray","loc":{"start":{"line":462,"column":2},"end":{"line":462,"column":11}}},"value":{"type":"Identifier","name":"isJSArray","loc":{"start":{"line":462,"column":13},"end":{"line":462,"column":22}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":462,"column":2},"end":{"line":462,"column":22}}}],"loc":{"start":{"line":427,"column":8},"end":{"line":463,"column":2}}},"loc":{"start":{"line":427,"column":1},"end":{"line":463,"column":3}}}],"loc":{"start":{"line":2,"column":24},"end":{"line":465,"column":1}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":2,"column":13},"end":{"line":465,"column":1}}},"arguments":[],"loc":{"start":{"line":2,"column":12},"end":{"line":465,"column":4}}},"loc":{"start":{"line":2,"column":4},"end":{"line":465,"column":4}}}],"kind":"var","loc":{"start":{"line":2,"column":0},"end":{"line":465,"column":5}}},{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","computed":false,"object":{"type":"ThisExpression","loc":{"start":{"line":468,"column":0},"end":{"line":468,"column":4}}},"property":{"type":"Identifier","name":"__lua","loc":{"start":{"line":468,"column":5},"end":{"line":468,"column":10}}},"loc":{"start":{"line":468,"column":0},"end":{"line":468,"column":10}}},"right":{"type":"Identifier","name":"__lua","loc":{"start":{"line":468,"column":13},"end":{"line":468,"column":18}}},"loc":{"start":{"line":468,"column":0},"end":{"line":468,"column":18}}},"loc":{"start":{"line":468,"column":0},"end":{"line":468,"column":19}}},{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"env","loc":{"start":{"line":470,"column":0},"end":{"line":470,"column":3}}},"property":{"type":"Identifier","name":"string","loc":{"start":{"line":470,"column":4},"end":{"line":470,"column":10}}},"loc":{"start":{"line":470,"column":0},"end":{"line":470,"column":10}}},"right":{"type":"ObjectExpression","properties":[{"type":"Property","key":{"type":"Identifier","name":"byte","loc":{"start":{"line":471,"column":1},"end":{"line":471,"column":5}}},"value":{"type":"FunctionExpression","id":{"type":"Identifier","name":"byte","loc":{"start":{"line":471,"column":16},"end":{"line":471,"column":20}}},"params":[{"type":"Identifier","name":"s","loc":{"start":{"line":471,"column":21},"end":{"line":471,"column":22}}},{"type":"Identifier","name":"i","loc":{"start":{"line":471,"column":23},"end":{"line":471,"column":24}}},{"type":"Identifier","name":"j","loc":{"start":{"line":471,"column":25},"end":{"line":471,"column":26}}}],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"chars","loc":{"start":{"line":472,"column":6},"end":{"line":472,"column":11}}},"init":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"env","loc":{"start":{"line":472,"column":14},"end":{"line":472,"column":17}}},"property":{"type":"Identifier","name":"string","loc":{"start":{"line":472,"column":18},"end":{"line":472,"column":24}}},"loc":{"start":{"line":472,"column":14},"end":{"line":472,"column":24}}},"property":{"type":"Identifier","name":"sub","loc":{"start":{"line":472,"column":25},"end":{"line":472,"column":28}}},"loc":{"start":{"line":472,"column":14},"end":{"line":472,"column":28}}},"arguments":[{"type":"Identifier","name":"s","loc":{"start":{"line":472,"column":29},"end":{"line":472,"column":30}}},{"type":"Identifier","name":"i","loc":{"start":{"line":472,"column":31},"end":{"line":472,"column":32}}},{"type":"Identifier","name":"j","loc":{"start":{"line":472,"column":33},"end":{"line":472,"column":34}}}],"loc":{"start":{"line":472,"column":14},"end":{"line":472,"column":35}}},"loc":{"start":{"line":472,"column":6},"end":{"line":472,"column":35}}}],"kind":"var","loc":{"start":{"line":472,"column":2},"end":{"line":472,"column":36}}},{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"out","loc":{"start":{"line":473,"column":6},"end":{"line":473,"column":9}}},"init":{"type":"ArrayExpression","elements":[],"loc":{"start":{"line":473,"column":12},"end":{"line":473,"column":14}}},"loc":{"start":{"line":473,"column":6},"end":{"line":473,"column":14}}}],"kind":"var","loc":{"start":{"line":473,"column":2},"end":{"line":473,"column":15}}},{"type":"ForStatement","init":{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"i","loc":{"start":{"line":474,"column":12},"end":{"line":474,"column":13}}},"init":{"type":"Literal","value":0,"raw":"0","loc":{"start":{"line":474,"column":16},"end":{"line":474,"column":17}}},"loc":{"start":{"line":474,"column":12},"end":{"line":474,"column":17}}}],"kind":"var","loc":{"start":{"line":474,"column":8},"end":{"line":474,"column":17}}},"test":{"type":"BinaryExpression","operator":"<","left":{"type":"Identifier","name":"i","loc":{"start":{"line":474,"column":19},"end":{"line":474,"column":20}}},"right":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"chars","loc":{"start":{"line":474,"column":23},"end":{"line":474,"column":28}}},"property":{"type":"Identifier","name":"length","loc":{"start":{"line":474,"column":29},"end":{"line":474,"column":35}}},"loc":{"start":{"line":474,"column":23},"end":{"line":474,"column":35}}},"loc":{"start":{"line":474,"column":19},"end":{"line":474,"column":35}}},"update":{"type":"UpdateExpression","operator":"++","argument":{"type":"Identifier","name":"i","loc":{"start":{"line":474,"column":39},"end":{"line":474,"column":40}}},"prefix":true,"loc":{"start":{"line":474,"column":37},"end":{"line":474,"column":40}}},"body":{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","computed":true,"object":{"type":"Identifier","name":"out","loc":{"start":{"line":474,"column":43},"end":{"line":474,"column":46}}},"property":{"type":"Identifier","name":"i","loc":{"start":{"line":474,"column":47},"end":{"line":474,"column":48}}},"loc":{"start":{"line":474,"column":43},"end":{"line":474,"column":49}}},"right":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"chars","loc":{"start":{"line":474,"column":52},"end":{"line":474,"column":57}}},"property":{"type":"Identifier","name":"charCodeAt","loc":{"start":{"line":474,"column":58},"end":{"line":474,"column":68}}},"loc":{"start":{"line":474,"column":52},"end":{"line":474,"column":68}}},"arguments":[{"type":"Identifier","name":"i","loc":{"start":{"line":474,"column":69},"end":{"line":474,"column":70}}}],"loc":{"start":{"line":474,"column":52},"end":{"line":474,"column":71}}},"loc":{"start":{"line":474,"column":43},"end":{"line":474,"column":71}}},"loc":{"start":{"line":474,"column":43},"end":{"line":474,"column":72}}},"loc":{"start":{"line":474,"column":2},"end":{"line":474,"column":72}}},{"type":"ReturnStatement","argument":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"__lua","loc":{"start":{"line":475,"column":9},"end":{"line":475,"column":14}}},"property":{"type":"Identifier","name":"makeMultiReturn","loc":{"start":{"line":475,"column":15},"end":{"line":475,"column":30}}},"loc":{"start":{"line":475,"column":9},"end":{"line":475,"column":30}}},"property":{"type":"Identifier","name":"apply","loc":{"start":{"line":475,"column":31},"end":{"line":475,"column":36}}},"loc":{"start":{"line":475,"column":9},"end":{"line":475,"column":36}}},"arguments":[{"type":"Identifier","name":"__lua","loc":{"start":{"line":475,"column":37},"end":{"line":475,"column":42}}},{"type":"Identifier","name":"out","loc":{"start":{"line":475,"column":44},"end":{"line":475,"column":47}}}],"loc":{"start":{"line":475,"column":9},"end":{"line":475,"column":48}}},"loc":{"start":{"line":475,"column":2},"end":{"line":475,"column":49}}}],"loc":{"start":{"line":471,"column":28},"end":{"line":476,"column":2}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":471,"column":7},"end":{"line":476,"column":2}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":471,"column":1},"end":{"line":476,"column":2}}},{"type":"Property","key":{"type":"Identifier","name":"char","loc":{"start":{"line":477,"column":1},"end":{"line":477,"column":5}}},"value":{"type":"FunctionExpression","id":{"type":"Identifier","name":"char","loc":{"start":{"line":477,"column":16},"end":{"line":477,"column":20}}},"params":[],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"out","loc":{"start":{"line":478,"column":6},"end":{"line":478,"column":9}}},"init":{"type":"Literal","value":"","raw":"\"\"","loc":{"start":{"line":478,"column":12},"end":{"line":478,"column":14}}},"loc":{"start":{"line":478,"column":6},"end":{"line":478,"column":14}}}],"kind":"var","loc":{"start":{"line":478,"column":2},"end":{"line":478,"column":15}}},{"type":"ForStatement","init":{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"i","loc":{"start":{"line":479,"column":12},"end":{"line":479,"column":13}}},"init":{"type":"Literal","value":0,"raw":"0","loc":{"start":{"line":479,"column":16},"end":{"line":479,"column":17}}},"loc":{"start":{"line":479,"column":12},"end":{"line":479,"column":17}}}],"kind":"var","loc":{"start":{"line":479,"column":8},"end":{"line":479,"column":17}}},"test":{"type":"BinaryExpression","operator":"<","left":{"type":"Identifier","name":"i","loc":{"start":{"line":479,"column":19},"end":{"line":479,"column":20}}},"right":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"arguments","loc":{"start":{"line":479,"column":23},"end":{"line":479,"column":32}}},"property":{"type":"Identifier","name":"length","loc":{"start":{"line":479,"column":33},"end":{"line":479,"column":39}}},"loc":{"start":{"line":479,"column":23},"end":{"line":479,"column":39}}},"loc":{"start":{"line":479,"column":19},"end":{"line":479,"column":39}}},"update":{"type":"UpdateExpression","operator":"++","argument":{"type":"Identifier","name":"i","loc":{"start":{"line":479,"column":43},"end":{"line":479,"column":44}}},"prefix":true,"loc":{"start":{"line":479,"column":41},"end":{"line":479,"column":44}}},"body":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"+=","left":{"type":"Identifier","name":"out","loc":{"start":{"line":480,"column":3},"end":{"line":480,"column":6}}},"right":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"String","loc":{"start":{"line":480,"column":10},"end":{"line":480,"column":16}}},"property":{"type":"Identifier","name":"fromCharCode","loc":{"start":{"line":480,"column":17},"end":{"line":480,"column":29}}},"loc":{"start":{"line":480,"column":10},"end":{"line":480,"column":29}}},"arguments":[{"type":"BinaryExpression","operator":"|","left":{"type":"MemberExpression","computed":true,"object":{"type":"Identifier","name":"arguments","loc":{"start":{"line":480,"column":30},"end":{"line":480,"column":39}}},"property":{"type":"Identifier","name":"i","loc":{"start":{"line":480,"column":40},"end":{"line":480,"column":41}}},"loc":{"start":{"line":480,"column":30},"end":{"line":480,"column":42}}},"right":{"type":"Literal","value":0,"raw":"0","loc":{"start":{"line":480,"column":43},"end":{"line":480,"column":44}}},"loc":{"start":{"line":480,"column":30},"end":{"line":480,"column":44}}}],"loc":{"start":{"line":480,"column":10},"end":{"line":480,"column":45}}},"loc":{"start":{"line":480,"column":3},"end":{"line":480,"column":45}}},"loc":{"start":{"line":480,"column":3},"end":{"line":480,"column":46}}}],"loc":{"start":{"line":479,"column":47},"end":{"line":481,"column":3}}},"loc":{"start":{"line":479,"column":2},"end":{"line":481,"column":3}}},{"type":"ReturnStatement","argument":{"type":"Identifier","name":"out","loc":{"start":{"line":482,"column":9},"end":{"line":482,"column":12}}},"loc":{"start":{"line":482,"column":2},"end":{"line":482,"column":13}}}],"loc":{"start":{"line":477,"column":38},"end":{"line":484,"column":2}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":477,"column":7},"end":{"line":484,"column":2}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":477,"column":1},"end":{"line":484,"column":2}}},{"type":"Property","key":{"type":"Identifier","name":"dump","loc":{"start":{"line":485,"column":1},"end":{"line":485,"column":5}}},"value":{"type":"Literal","value":null,"raw":"null","loc":{"start":{"line":485,"column":7},"end":{"line":485,"column":11}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":485,"column":1},"end":{"line":485,"column":11}}},{"type":"Property","key":{"type":"Identifier","name":"find","loc":{"start":{"line":486,"column":1},"end":{"line":486,"column":5}}},"value":{"type":"Literal","value":null,"raw":"null","loc":{"start":{"line":486,"column":7},"end":{"line":486,"column":11}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":486,"column":1},"end":{"line":486,"column":11}}},{"type":"Property","key":{"type":"Identifier","name":"gmatch","loc":{"start":{"line":487,"column":1},"end":{"line":487,"column":7}}},"value":{"type":"Literal","value":null,"raw":"null","loc":{"start":{"line":487,"column":9},"end":{"line":487,"column":13}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":487,"column":1},"end":{"line":487,"column":13}}},{"type":"Property","key":{"type":"Identifier","name":"gsub","loc":{"start":{"line":488,"column":1},"end":{"line":488,"column":5}}},"value":{"type":"Literal","value":null,"raw":"null","loc":{"start":{"line":488,"column":7},"end":{"line":488,"column":11}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":488,"column":1},"end":{"line":488,"column":11}}},{"type":"Property","key":{"type":"Identifier","name":"len","loc":{"start":{"line":489,"column":1},"end":{"line":489,"column":4}}},"value":{"type":"FunctionExpression","id":{"type":"Identifier","name":"len","loc":{"start":{"line":489,"column":15},"end":{"line":489,"column":18}}},"params":[{"type":"Identifier","name":"s","loc":{"start":{"line":489,"column":19},"end":{"line":489,"column":20}}}],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"ReturnStatement","argument":{"type":"MemberExpression","computed":false,"object":{"type":"BinaryExpression","operator":"+","left":{"type":"Literal","value":"","raw":"\"\"","loc":{"start":{"line":489,"column":32},"end":{"line":489,"column":34}}},"right":{"type":"Identifier","name":"s","loc":{"start":{"line":489,"column":37},"end":{"line":489,"column":38}}},"loc":{"start":{"line":489,"column":32},"end":{"line":489,"column":38}}},"property":{"type":"Identifier","name":"length","loc":{"start":{"line":489,"column":40},"end":{"line":489,"column":46}}},"loc":{"start":{"line":489,"column":31},"end":{"line":489,"column":46}}},"loc":{"start":{"line":489,"column":24},"end":{"line":489,"column":47}}}],"loc":{"start":{"line":489,"column":22},"end":{"line":489,"column":49}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":489,"column":6},"end":{"line":489,"column":49}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":489,"column":1},"end":{"line":489,"column":49}}},{"type":"Property","key":{"type":"Identifier","name":"lower","loc":{"start":{"line":490,"column":1},"end":{"line":490,"column":6}}},"value":{"type":"FunctionExpression","id":{"type":"Identifier","name":"lower","loc":{"start":{"line":490,"column":17},"end":{"line":490,"column":22}}},"params":[{"type":"Identifier","name":"s","loc":{"start":{"line":490,"column":23},"end":{"line":490,"column":24}}}],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"ReturnStatement","argument":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"BinaryExpression","operator":"+","left":{"type":"Literal","value":"","raw":"\"\"","loc":{"start":{"line":490,"column":36},"end":{"line":490,"column":38}}},"right":{"type":"Identifier","name":"s","loc":{"start":{"line":490,"column":41},"end":{"line":490,"column":42}}},"loc":{"start":{"line":490,"column":36},"end":{"line":490,"column":42}}},"property":{"type":"Identifier","name":"toLowerCase","loc":{"start":{"line":490,"column":44},"end":{"line":490,"column":55}}},"loc":{"start":{"line":490,"column":35},"end":{"line":490,"column":55}}},"arguments":[],"loc":{"start":{"line":490,"column":35},"end":{"line":490,"column":57}}},"loc":{"start":{"line":490,"column":28},"end":{"line":490,"column":58}}}],"loc":{"start":{"line":490,"column":26},"end":{"line":490,"column":60}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":490,"column":8},"end":{"line":490,"column":60}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":490,"column":1},"end":{"line":490,"column":60}}},{"type":"Property","key":{"type":"Identifier","name":"match","loc":{"start":{"line":491,"column":1},"end":{"line":491,"column":6}}},"value":{"type":"Literal","value":null,"raw":"null","loc":{"start":{"line":491,"column":8},"end":{"line":491,"column":12}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":491,"column":1},"end":{"line":491,"column":12}}},{"type":"Property","key":{"type":"Identifier","name":"reverse","loc":{"start":{"line":492,"column":1},"end":{"line":492,"column":8}}},"value":{"type":"FunctionExpression","id":null,"params":[{"type":"Identifier","name":"s","loc":{"start":{"line":492,"column":19},"end":{"line":492,"column":20}}}],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"ReturnStatement","argument":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"BinaryExpression","operator":"+","left":{"type":"Literal","value":"","raw":"\"\"","loc":{"start":{"line":493,"column":10},"end":{"line":493,"column":12}}},"right":{"type":"Identifier","name":"s","loc":{"start":{"line":493,"column":15},"end":{"line":493,"column":16}}},"loc":{"start":{"line":493,"column":10},"end":{"line":493,"column":16}}},"property":{"type":"Identifier","name":"split","loc":{"start":{"line":493,"column":18},"end":{"line":493,"column":23}}},"loc":{"start":{"line":493,"column":9},"end":{"line":493,"column":23}}},"arguments":[{"type":"Literal","value":"","raw":"\"\"","loc":{"start":{"line":493,"column":24},"end":{"line":493,"column":26}}}],"loc":{"start":{"line":493,"column":9},"end":{"line":493,"column":27}}},"property":{"type":"Identifier","name":"reverse","loc":{"start":{"line":493,"column":28},"end":{"line":493,"column":35}}},"loc":{"start":{"line":493,"column":9},"end":{"line":493,"column":35}}},"arguments":[],"loc":{"start":{"line":493,"column":9},"end":{"line":493,"column":37}}},"property":{"type":"Identifier","name":"join","loc":{"start":{"line":493,"column":38},"end":{"line":493,"column":42}}},"loc":{"start":{"line":493,"column":9},"end":{"line":493,"column":42}}},"arguments":[{"type":"Literal","value":"","raw":"\"\"","loc":{"start":{"line":493,"column":43},"end":{"line":493,"column":45}}}],"loc":{"start":{"line":493,"column":9},"end":{"line":493,"column":46}}},"loc":{"start":{"line":493,"column":2},"end":{"line":493,"column":47}}}],"loc":{"start":{"line":492,"column":22},"end":{"line":494,"column":2}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":492,"column":10},"end":{"line":494,"column":2}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":492,"column":1},"end":{"line":494,"column":2}}},{"type":"Property","key":{"type":"Identifier","name":"sub","loc":{"start":{"line":495,"column":1},"end":{"line":495,"column":4}}},"value":{"type":"FunctionExpression","id":null,"params":[{"type":"Identifier","name":"s","loc":{"start":{"line":495,"column":15},"end":{"line":495,"column":16}}},{"type":"Identifier","name":"i","loc":{"start":{"line":495,"column":18},"end":{"line":495,"column":19}}},{"type":"Identifier","name":"j","loc":{"start":{"line":495,"column":21},"end":{"line":495,"column":22}}}],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"IfStatement","test":{"type":"LogicalExpression","operator":"||","left":{"type":"BinaryExpression","operator":"===","left":{"type":"Identifier","name":"i","loc":{"start":{"line":496,"column":7},"end":{"line":496,"column":8}}},"right":{"type":"Identifier","name":"undefined","loc":{"start":{"line":496,"column":13},"end":{"line":496,"column":22}}},"loc":{"start":{"line":496,"column":7},"end":{"line":496,"column":22}}},"right":{"type":"BinaryExpression","operator":"===","left":{"type":"Identifier","name":"i","loc":{"start":{"line":496,"column":26},"end":{"line":496,"column":27}}},"right":{"type":"Literal","value":null,"raw":"null","loc":{"start":{"line":496,"column":32},"end":{"line":496,"column":36}}},"loc":{"start":{"line":496,"column":26},"end":{"line":496,"column":36}}},"loc":{"start":{"line":496,"column":7},"end":{"line":496,"column":36}}},"consequent":{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"Identifier","name":"i","loc":{"start":{"line":496,"column":39},"end":{"line":496,"column":40}}},"right":{"type":"Literal","value":1,"raw":"1","loc":{"start":{"line":496,"column":43},"end":{"line":496,"column":44}}},"loc":{"start":{"line":496,"column":39},"end":{"line":496,"column":44}}},"loc":{"start":{"line":496,"column":39},"end":{"line":496,"column":45}}},"alternate":null,"loc":{"start":{"line":496,"column":2},"end":{"line":496,"column":45}}},{"type":"IfStatement","test":{"type":"LogicalExpression","operator":"||","left":{"type":"BinaryExpression","operator":"===","left":{"type":"Identifier","name":"j","loc":{"start":{"line":497,"column":7},"end":{"line":497,"column":8}}},"right":{"type":"Identifier","name":"undefined","loc":{"start":{"line":497,"column":13},"end":{"line":497,"column":22}}},"loc":{"start":{"line":497,"column":7},"end":{"line":497,"column":22}}},"right":{"type":"BinaryExpression","operator":"===","left":{"type":"Identifier","name":"j","loc":{"start":{"line":497,"column":26},"end":{"line":497,"column":27}}},"right":{"type":"Literal","value":null,"raw":"null","loc":{"start":{"line":497,"column":32},"end":{"line":497,"column":36}}},"loc":{"start":{"line":497,"column":26},"end":{"line":497,"column":36}}},"loc":{"start":{"line":497,"column":7},"end":{"line":497,"column":36}}},"consequent":{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"Identifier","name":"j","loc":{"start":{"line":497,"column":39},"end":{"line":497,"column":40}}},"right":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"s","loc":{"start":{"line":497,"column":43},"end":{"line":497,"column":44}}},"property":{"type":"Identifier","name":"length","loc":{"start":{"line":497,"column":45},"end":{"line":497,"column":51}}},"loc":{"start":{"line":497,"column":43},"end":{"line":497,"column":51}}},"loc":{"start":{"line":497,"column":39},"end":{"line":497,"column":51}}},"loc":{"start":{"line":497,"column":39},"end":{"line":497,"column":52}}},"alternate":null,"loc":{"start":{"line":497,"column":2},"end":{"line":497,"column":52}}},{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"<","left":{"type":"Identifier","name":"i","loc":{"start":{"line":498,"column":7},"end":{"line":498,"column":8}}},"right":{"type":"Literal","value":0,"raw":"0","loc":{"start":{"line":498,"column":11},"end":{"line":498,"column":12}}},"loc":{"start":{"line":498,"column":7},"end":{"line":498,"column":12}}},"consequent":{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"+=","left":{"type":"Identifier","name":"i","loc":{"start":{"line":498,"column":15},"end":{"line":498,"column":16}}},"right":{"type":"BinaryExpression","operator":"+","left":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"s","loc":{"start":{"line":498,"column":21},"end":{"line":498,"column":22}}},"property":{"type":"Identifier","name":"length","loc":{"start":{"line":498,"column":23},"end":{"line":498,"column":29}}},"loc":{"start":{"line":498,"column":21},"end":{"line":498,"column":29}}},"right":{"type":"Literal","value":1,"raw":"1","loc":{"start":{"line":498,"column":30},"end":{"line":498,"column":31}}},"loc":{"start":{"line":498,"column":21},"end":{"line":498,"column":31}}},"loc":{"start":{"line":498,"column":15},"end":{"line":498,"column":32}}},"loc":{"start":{"line":498,"column":15},"end":{"line":498,"column":33}}},"alternate":null,"loc":{"start":{"line":498,"column":2},"end":{"line":498,"column":33}}},{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"<","left":{"type":"Identifier","name":"j","loc":{"start":{"line":499,"column":7},"end":{"line":499,"column":8}}},"right":{"type":"Literal","value":0,"raw":"0","loc":{"start":{"line":499,"column":11},"end":{"line":499,"column":12}}},"loc":{"start":{"line":499,"column":7},"end":{"line":499,"column":12}}},"consequent":{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"+=","left":{"type":"Identifier","name":"j","loc":{"start":{"line":499,"column":15},"end":{"line":499,"column":16}}},"right":{"type":"BinaryExpression","operator":"+","left":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"s","loc":{"start":{"line":499,"column":21},"end":{"line":499,"column":22}}},"property":{"type":"Identifier","name":"length","loc":{"start":{"line":499,"column":23},"end":{"line":499,"column":29}}},"loc":{"start":{"line":499,"column":21},"end":{"line":499,"column":29}}},"right":{"type":"Literal","value":1,"raw":"1","loc":{"start":{"line":499,"column":30},"end":{"line":499,"column":31}}},"loc":{"start":{"line":499,"column":21},"end":{"line":499,"column":31}}},"loc":{"start":{"line":499,"column":15},"end":{"line":499,"column":32}}},"loc":{"start":{"line":499,"column":15},"end":{"line":499,"column":33}}},"alternate":null,"loc":{"start":{"line":499,"column":2},"end":{"line":499,"column":33}}},{"type":"ReturnStatement","argument":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"__lua","loc":{"start":{"line":501,"column":9},"end":{"line":501,"column":14}}},"property":{"type":"Identifier","name":"makeString","loc":{"start":{"line":501,"column":15},"end":{"line":501,"column":25}}},"loc":{"start":{"line":501,"column":9},"end":{"line":501,"column":25}}},"arguments":[{"type":"Identifier","name":"s","loc":{"start":{"line":501,"column":26},"end":{"line":501,"column":27}}}],"loc":{"start":{"line":501,"column":9},"end":{"line":501,"column":28}}},"property":{"type":"Identifier","name":"substring","loc":{"start":{"line":501,"column":29},"end":{"line":501,"column":38}}},"loc":{"start":{"line":501,"column":9},"end":{"line":501,"column":38}}},"arguments":[{"type":"BinaryExpression","operator":"-","left":{"type":"Identifier","name":"i","loc":{"start":{"line":501,"column":39},"end":{"line":501,"column":40}}},"right":{"type":"Literal","value":1,"raw":"1","loc":{"start":{"line":501,"column":41},"end":{"line":501,"column":42}}},"loc":{"start":{"line":501,"column":39},"end":{"line":501,"column":42}}},{"type":"Identifier","name":"j","loc":{"start":{"line":501,"column":43},"end":{"line":501,"column":44}}}],"loc":{"start":{"line":501,"column":9},"end":{"line":501,"column":45}}},"loc":{"start":{"line":501,"column":2},"end":{"line":501,"column":46}}}],"loc":{"start":{"line":495,"column":24},"end":{"line":503,"column":2}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":495,"column":6},"end":{"line":503,"column":2}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":495,"column":1},"end":{"line":503,"column":2}}},{"type":"Property","key":{"type":"Identifier","name":"upper","loc":{"start":{"line":504,"column":1},"end":{"line":504,"column":6}}},"value":{"type":"FunctionExpression","id":{"type":"Identifier","name":"lower","loc":{"start":{"line":504,"column":17},"end":{"line":504,"column":22}}},"params":[{"type":"Identifier","name":"s","loc":{"start":{"line":504,"column":23},"end":{"line":504,"column":24}}}],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"ReturnStatement","argument":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"BinaryExpression","operator":"+","left":{"type":"Literal","value":"","raw":"\"\"","loc":{"start":{"line":504,"column":36},"end":{"line":504,"column":38}}},"right":{"type":"Identifier","name":"s","loc":{"start":{"line":504,"column":41},"end":{"line":504,"column":42}}},"loc":{"start":{"line":504,"column":36},"end":{"line":504,"column":42}}},"property":{"type":"Identifier","name":"toUpperCase","loc":{"start":{"line":504,"column":44},"end":{"line":504,"column":55}}},"loc":{"start":{"line":504,"column":35},"end":{"line":504,"column":55}}},"arguments":[],"loc":{"start":{"line":504,"column":35},"end":{"line":504,"column":57}}},"loc":{"start":{"line":504,"column":28},"end":{"line":504,"column":58}}}],"loc":{"start":{"line":504,"column":26},"end":{"line":504,"column":60}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":504,"column":8},"end":{"line":504,"column":60}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":504,"column":1},"end":{"line":504,"column":60}}},{"type":"Property","key":{"type":"Identifier","name":"format","loc":{"start":{"line":505,"column":1},"end":{"line":505,"column":7}}},"value":{"type":"FunctionExpression","id":{"type":"Identifier","name":"format","loc":{"start":{"line":505,"column":18},"end":{"line":505,"column":24}}},"params":[{"type":"Identifier","name":"format","loc":{"start":{"line":505,"column":25},"end":{"line":505,"column":31}}},{"type":"Identifier","name":"etc","loc":{"start":{"line":505,"column":33},"end":{"line":505,"column":36}}}],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"arg","loc":{"start":{"line":506,"column":6},"end":{"line":506,"column":9}}},"init":{"type":"Identifier","name":"arguments","loc":{"start":{"line":506,"column":12},"end":{"line":506,"column":21}}},"loc":{"start":{"line":506,"column":6},"end":{"line":506,"column":21}}}],"kind":"var","loc":{"start":{"line":506,"column":2},"end":{"line":506,"column":22}}},{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"i","loc":{"start":{"line":507,"column":6},"end":{"line":507,"column":7}}},"init":{"type":"Literal","value":1,"raw":"1","loc":{"start":{"line":507,"column":10},"end":{"line":507,"column":11}}},"loc":{"start":{"line":507,"column":6},"end":{"line":507,"column":11}}}],"kind":"var","loc":{"start":{"line":507,"column":2},"end":{"line":507,"column":12}}},{"type":"ReturnStatement","argument":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"format","loc":{"start":{"line":508,"column":9},"end":{"line":508,"column":15}}},"property":{"type":"Identifier","name":"replace","loc":{"start":{"line":508,"column":16},"end":{"line":508,"column":23}}},"loc":{"start":{"line":508,"column":9},"end":{"line":508,"column":23}}},"arguments":[{"type":"Literal","value":{},"raw":"/%([0-9.]+)?([%sfdgi])/g","regex":{"pattern":"%([0-9.]+)?([%sfdgi])","flags":"g"},"loc":{"start":{"line":508,"column":24},"end":{"line":508,"column":48}}},{"type":"FunctionExpression","id":null,"params":[{"type":"Identifier","name":"m","loc":{"start":{"line":508,"column":60},"end":{"line":508,"column":61}}},{"type":"Identifier","name":"w","loc":{"start":{"line":508,"column":63},"end":{"line":508,"column":64}}},{"type":"Identifier","name":"t","loc":{"start":{"line":508,"column":66},"end":{"line":508,"column":67}}}],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"r","loc":{"start":{"line":509,"column":7},"end":{"line":509,"column":8}}},"init":{"type":"Literal","value":null,"raw":"null","loc":{"start":{"line":509,"column":11},"end":{"line":509,"column":15}}},"loc":{"start":{"line":509,"column":7},"end":{"line":509,"column":15}}}],"kind":"var","loc":{"start":{"line":509,"column":3},"end":{"line":509,"column":16}}},{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"==","left":{"type":"Identifier","name":"t","loc":{"start":{"line":510,"column":8},"end":{"line":510,"column":9}}},"right":{"type":"Literal","value":"%","raw":"\"%\"","loc":{"start":{"line":510,"column":13},"end":{"line":510,"column":16}}},"loc":{"start":{"line":510,"column":8},"end":{"line":510,"column":16}}},"consequent":{"type":"ReturnStatement","argument":{"type":"Literal","value":"%","raw":"\"%\"","loc":{"start":{"line":510,"column":26},"end":{"line":510,"column":29}}},"loc":{"start":{"line":510,"column":19},"end":{"line":510,"column":30}}},"alternate":{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"==","left":{"type":"Identifier","name":"t","loc":{"start":{"line":511,"column":13},"end":{"line":511,"column":14}}},"right":{"type":"Literal","value":"s","raw":"\"s\"","loc":{"start":{"line":511,"column":18},"end":{"line":511,"column":21}}},"loc":{"start":{"line":511,"column":13},"end":{"line":511,"column":21}}},"consequent":{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"Identifier","name":"r","loc":{"start":{"line":511,"column":23},"end":{"line":511,"column":24}}},"right":{"type":"MemberExpression","computed":true,"object":{"type":"Identifier","name":"arg","loc":{"start":{"line":511,"column":27},"end":{"line":511,"column":30}}},"property":{"type":"UpdateExpression","operator":"++","argument":{"type":"Identifier","name":"i","loc":{"start":{"line":511,"column":31},"end":{"line":511,"column":32}}},"prefix":false,"loc":{"start":{"line":511,"column":31},"end":{"line":511,"column":34}}},"loc":{"start":{"line":511,"column":27},"end":{"line":511,"column":35}}},"loc":{"start":{"line":511,"column":23},"end":{"line":511,"column":35}}},"loc":{"start":{"line":511,"column":23},"end":{"line":511,"column":36}}},"alternate":{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"==","left":{"type":"Identifier","name":"t","loc":{"start":{"line":512,"column":13},"end":{"line":512,"column":14}}},"right":{"type":"Literal","value":"d","raw":"\"d\"","loc":{"start":{"line":512,"column":18},"end":{"line":512,"column":21}}},"loc":{"start":{"line":512,"column":13},"end":{"line":512,"column":21}}},"consequent":{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"Identifier","name":"r","loc":{"start":{"line":512,"column":23},"end":{"line":512,"column":24}}},"right":{"type":"CallExpression","callee":{"type":"Identifier","name":"parseInt","loc":{"start":{"line":512,"column":27},"end":{"line":512,"column":35}}},"arguments":[{"type":"MemberExpression","computed":true,"object":{"type":"Identifier","name":"arg","loc":{"start":{"line":512,"column":36},"end":{"line":512,"column":39}}},"property":{"type":"UpdateExpression","operator":"++","argument":{"type":"Identifier","name":"i","loc":{"start":{"line":512,"column":40},"end":{"line":512,"column":41}}},"prefix":false,"loc":{"start":{"line":512,"column":40},"end":{"line":512,"column":43}}},"loc":{"start":{"line":512,"column":36},"end":{"line":512,"column":44}}}],"loc":{"start":{"line":512,"column":27},"end":{"line":512,"column":45}}},"loc":{"start":{"line":512,"column":23},"end":{"line":512,"column":45}}},"loc":{"start":{"line":512,"column":23},"end":{"line":512,"column":46}}},"alternate":{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"==","left":{"type":"Identifier","name":"t","loc":{"start":{"line":513,"column":13},"end":{"line":513,"column":14}}},"right":{"type":"Literal","value":"i","raw":"\"i\"","loc":{"start":{"line":513,"column":18},"end":{"line":513,"column":21}}},"loc":{"start":{"line":513,"column":13},"end":{"line":513,"column":21}}},"consequent":{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"Identifier","name":"r","loc":{"start":{"line":513,"column":23},"end":{"line":513,"column":24}}},"right":{"type":"CallExpression","callee":{"type":"Identifier","name":"parseInt","loc":{"start":{"line":513,"column":27},"end":{"line":513,"column":35}}},"arguments":[{"type":"MemberExpression","computed":true,"object":{"type":"Identifier","name":"arg","loc":{"start":{"line":513,"column":36},"end":{"line":513,"column":39}}},"property":{"type":"UpdateExpression","operator":"++","argument":{"type":"Identifier","name":"i","loc":{"start":{"line":513,"column":40},"end":{"line":513,"column":41}}},"prefix":false,"loc":{"start":{"line":513,"column":40},"end":{"line":513,"column":43}}},"loc":{"start":{"line":513,"column":36},"end":{"line":513,"column":44}}}],"loc":{"start":{"line":513,"column":27},"end":{"line":513,"column":45}}},"loc":{"start":{"line":513,"column":23},"end":{"line":513,"column":45}}},"loc":{"start":{"line":513,"column":23},"end":{"line":513,"column":46}}},"alternate":{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"==","left":{"type":"Identifier","name":"t","loc":{"start":{"line":514,"column":13},"end":{"line":514,"column":14}}},"right":{"type":"Literal","value":"f","raw":"\"f\"","loc":{"start":{"line":514,"column":18},"end":{"line":514,"column":21}}},"loc":{"start":{"line":514,"column":13},"end":{"line":514,"column":21}}},"consequent":{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"Identifier","name":"r","loc":{"start":{"line":514,"column":24},"end":{"line":514,"column":25}}},"right":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"MemberExpression","computed":true,"object":{"type":"Identifier","name":"arg","loc":{"start":{"line":514,"column":28},"end":{"line":514,"column":31}}},"property":{"type":"UpdateExpression","operator":"++","argument":{"type":"Identifier","name":"i","loc":{"start":{"line":514,"column":32},"end":{"line":514,"column":33}}},"prefix":false,"loc":{"start":{"line":514,"column":32},"end":{"line":514,"column":35}}},"loc":{"start":{"line":514,"column":28},"end":{"line":514,"column":36}}},"property":{"type":"Identifier","name":"toFixed","loc":{"start":{"line":514,"column":37},"end":{"line":514,"column":44}}},"loc":{"start":{"line":514,"column":28},"end":{"line":514,"column":44}}},"arguments":[{"type":"LogicalExpression","operator":"||","left":{"type":"CallExpression","callee":{"type":"Identifier","name":"parseFloat","loc":{"start":{"line":514,"column":45},"end":{"line":514,"column":55}}},"arguments":[{"type":"MemberExpression","computed":true,"object":{"type":"Identifier","name":"m","loc":{"start":{"line":514,"column":56},"end":{"line":514,"column":57}}},"property":{"type":"Literal","value":1,"raw":"1","loc":{"start":{"line":514,"column":58},"end":{"line":514,"column":59}}},"loc":{"start":{"line":514,"column":56},"end":{"line":514,"column":60}}}],"loc":{"start":{"line":514,"column":45},"end":{"line":514,"column":61}}},"right":{"type":"Literal","value":6,"raw":"6","loc":{"start":{"line":514,"column":65},"end":{"line":514,"column":66}}},"loc":{"start":{"line":514,"column":45},"end":{"line":514,"column":66}}}],"loc":{"start":{"line":514,"column":28},"end":{"line":514,"column":67}}},"loc":{"start":{"line":514,"column":24},"end":{"line":514,"column":67}}},"loc":{"start":{"line":514,"column":24},"end":{"line":514,"column":68}}},"alternate":{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"Identifier","name":"r","loc":{"start":{"line":515,"column":8},"end":{"line":515,"column":9}}},"right":{"type":"MemberExpression","computed":true,"object":{"type":"Identifier","name":"arg","loc":{"start":{"line":515,"column":12},"end":{"line":515,"column":15}}},"property":{"type":"UpdateExpression","operator":"++","argument":{"type":"Identifier","name":"i","loc":{"start":{"line":515,"column":16},"end":{"line":515,"column":17}}},"prefix":false,"loc":{"start":{"line":515,"column":16},"end":{"line":515,"column":19}}},"loc":{"start":{"line":515,"column":12},"end":{"line":515,"column":20}}},"loc":{"start":{"line":515,"column":8},"end":{"line":515,"column":20}}},"loc":{"start":{"line":515,"column":8},"end":{"line":515,"column":21}}},"loc":{"start":{"line":514,"column":8},"end":{"line":515,"column":21}}},"loc":{"start":{"line":513,"column":8},"end":{"line":515,"column":21}}},"loc":{"start":{"line":512,"column":8},"end":{"line":515,"column":21}}},"loc":{"start":{"line":511,"column":8},"end":{"line":515,"column":21}}},"loc":{"start":{"line":510,"column":3},"end":{"line":515,"column":21}}},{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"Identifier","name":"r","loc":{"start":{"line":516,"column":3},"end":{"line":516,"column":4}}},"right":{"type":"BinaryExpression","operator":"+","left":{"type":"Literal","value":"","raw":"\"\"","loc":{"start":{"line":516,"column":7},"end":{"line":516,"column":9}}},"right":{"type":"Identifier","name":"r","loc":{"start":{"line":516,"column":12},"end":{"line":516,"column":13}}},"loc":{"start":{"line":516,"column":7},"end":{"line":516,"column":13}}},"loc":{"start":{"line":516,"column":3},"end":{"line":516,"column":13}}},"loc":{"start":{"line":516,"column":3},"end":{"line":516,"column":14}}},{"type":"IfStatement","test":{"type":"CallExpression","callee":{"type":"Identifier","name":"parseInt","loc":{"start":{"line":517,"column":8},"end":{"line":517,"column":16}}},"arguments":[{"type":"Identifier","name":"w","loc":{"start":{"line":517,"column":17},"end":{"line":517,"column":18}}}],"loc":{"start":{"line":517,"column":8},"end":{"line":517,"column":19}}},"consequent":{"type":"BlockStatement","body":[{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"extra","loc":{"start":{"line":518,"column":8},"end":{"line":518,"column":13}}},"init":{"type":"BinaryExpression","operator":"-","left":{"type":"CallExpression","callee":{"type":"Identifier","name":"parseInt","loc":{"start":{"line":518,"column":16},"end":{"line":518,"column":24}}},"arguments":[{"type":"Identifier","name":"w","loc":{"start":{"line":518,"column":25},"end":{"line":518,"column":26}}}],"loc":{"start":{"line":518,"column":16},"end":{"line":518,"column":27}}},"right":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"r","loc":{"start":{"line":518,"column":30},"end":{"line":518,"column":31}}},"property":{"type":"Identifier","name":"length","loc":{"start":{"line":518,"column":32},"end":{"line":518,"column":38}}},"loc":{"start":{"line":518,"column":30},"end":{"line":518,"column":38}}},"loc":{"start":{"line":518,"column":16},"end":{"line":518,"column":38}}},"loc":{"start":{"line":518,"column":8},"end":{"line":518,"column":38}}}],"kind":"var","loc":{"start":{"line":518,"column":4},"end":{"line":518,"column":39}}},{"type":"IfStatement","test":{"type":"BinaryExpression","operator":">","left":{"type":"Identifier","name":"extra","loc":{"start":{"line":519,"column":9},"end":{"line":519,"column":14}}},"right":{"type":"Literal","value":0,"raw":"0","loc":{"start":{"line":519,"column":17},"end":{"line":519,"column":18}}},"loc":{"start":{"line":519,"column":9},"end":{"line":519,"column":18}}},"consequent":{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"Identifier","name":"r","loc":{"start":{"line":519,"column":21},"end":{"line":519,"column":22}}},"right":{"type":"BinaryExpression","operator":"+","left":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"NewExpression","callee":{"type":"Identifier","name":"Array","loc":{"start":{"line":519,"column":29},"end":{"line":519,"column":34}}},"arguments":[{"type":"Identifier","name":"extra","loc":{"start":{"line":519,"column":35},"end":{"line":519,"column":40}}}],"loc":{"start":{"line":519,"column":25},"end":{"line":519,"column":41}}},"property":{"type":"Identifier","name":"join","loc":{"start":{"line":519,"column":42},"end":{"line":519,"column":46}}},"loc":{"start":{"line":519,"column":25},"end":{"line":519,"column":46}}},"arguments":[{"type":"Literal","value":" ","raw":"\" \"","loc":{"start":{"line":519,"column":47},"end":{"line":519,"column":50}}}],"loc":{"start":{"line":519,"column":25},"end":{"line":519,"column":51}}},"right":{"type":"Identifier","name":"r","loc":{"start":{"line":519,"column":54},"end":{"line":519,"column":55}}},"loc":{"start":{"line":519,"column":25},"end":{"line":519,"column":55}}},"loc":{"start":{"line":519,"column":21},"end":{"line":519,"column":55}}},"loc":{"start":{"line":519,"column":21},"end":{"line":519,"column":56}}},"alternate":null,"loc":{"start":{"line":519,"column":4},"end":{"line":519,"column":56}}}],"loc":{"start":{"line":517,"column":22},"end":{"line":520,"column":4}}},"alternate":null,"loc":{"start":{"line":517,"column":3},"end":{"line":520,"column":4}}},{"type":"ReturnStatement","argument":{"type":"Identifier","name":"r","loc":{"start":{"line":521,"column":10},"end":{"line":521,"column":11}}},"loc":{"start":{"line":521,"column":3},"end":{"line":521,"column":12}}}],"loc":{"start":{"line":508,"column":69},"end":{"line":522,"column":3}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":508,"column":50},"end":{"line":522,"column":3}}}],"loc":{"start":{"line":508,"column":9},"end":{"line":522,"column":4}}},"loc":{"start":{"line":508,"column":2},"end":{"line":522,"column":5}}}],"loc":{"start":{"line":505,"column":38},"end":{"line":523,"column":2}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":505,"column":9},"end":{"line":523,"column":2}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":505,"column":1},"end":{"line":523,"column":2}}}],"loc":{"start":{"line":470,"column":13},"end":{"line":525,"column":1}}},"loc":{"start":{"line":470,"column":0},"end":{"line":525,"column":1}}},"loc":{"start":{"line":470,"column":0},"end":{"line":525,"column":2}}},{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"env","loc":{"start":{"line":527,"column":0},"end":{"line":527,"column":3}}},"property":{"type":"Identifier","name":"table","loc":{"start":{"line":527,"column":4},"end":{"line":527,"column":9}}},"loc":{"start":{"line":527,"column":0},"end":{"line":527,"column":9}}},"right":{"type":"ObjectExpression","properties":[{"type":"Property","key":{"type":"Identifier","name":"concat","loc":{"start":{"line":528,"column":1},"end":{"line":528,"column":7}}},"value":{"type":"Literal","value":null,"raw":"null","loc":{"start":{"line":528,"column":9},"end":{"line":528,"column":13}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":528,"column":1},"end":{"line":528,"column":13}}},{"type":"Property","key":{"type":"Identifier","name":"insert","loc":{"start":{"line":529,"column":1},"end":{"line":529,"column":7}}},"value":{"type":"Literal","value":null,"raw":"null","loc":{"start":{"line":529,"column":9},"end":{"line":529,"column":13}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":529,"column":1},"end":{"line":529,"column":13}}},{"type":"Property","key":{"type":"Identifier","name":"pack","loc":{"start":{"line":530,"column":1},"end":{"line":530,"column":5}}},"value":{"type":"FunctionExpression","id":null,"params":[],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"obj","loc":{"start":{"line":531,"column":6},"end":{"line":531,"column":9}}},"init":{"type":"ObjectExpression","properties":[],"loc":{"start":{"line":531,"column":12},"end":{"line":531,"column":14}}},"loc":{"start":{"line":531,"column":6},"end":{"line":531,"column":14}}}],"kind":"var","loc":{"start":{"line":531,"column":2},"end":{"line":531,"column":14}}},{"type":"ForStatement","init":{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"i","loc":{"start":{"line":532,"column":12},"end":{"line":532,"column":13}}},"init":{"type":"Literal","value":0,"raw":"0","loc":{"start":{"line":532,"column":16},"end":{"line":532,"column":17}}},"loc":{"start":{"line":532,"column":12},"end":{"line":532,"column":17}}}],"kind":"var","loc":{"start":{"line":532,"column":8},"end":{"line":532,"column":17}}},"test":{"type":"BinaryExpression","operator":"<","left":{"type":"Identifier","name":"i","loc":{"start":{"line":532,"column":19},"end":{"line":532,"column":20}}},"right":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"arguments","loc":{"start":{"line":532,"column":23},"end":{"line":532,"column":32}}},"property":{"type":"Identifier","name":"length","loc":{"start":{"line":532,"column":33},"end":{"line":532,"column":39}}},"loc":{"start":{"line":532,"column":23},"end":{"line":532,"column":39}}},"loc":{"start":{"line":532,"column":19},"end":{"line":532,"column":39}}},"update":{"type":"UpdateExpression","operator":"++","argument":{"type":"Identifier","name":"i","loc":{"start":{"line":532,"column":43},"end":{"line":532,"column":44}}},"prefix":true,"loc":{"start":{"line":532,"column":41},"end":{"line":532,"column":44}}},"body":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","computed":true,"object":{"type":"Identifier","name":"obj","loc":{"start":{"line":533,"column":3},"end":{"line":533,"column":6}}},"property":{"type":"BinaryExpression","operator":"+","left":{"type":"Literal","value":"","raw":"\"\"","loc":{"start":{"line":533,"column":8},"end":{"line":533,"column":10}}},"right":{"type":"BinaryExpression","operator":"+","left":{"type":"Identifier","name":"i","loc":{"start":{"line":533,"column":14},"end":{"line":533,"column":15}}},"right":{"type":"Literal","value":1,"raw":"1","loc":{"start":{"line":533,"column":18},"end":{"line":533,"column":19}}},"loc":{"start":{"line":533,"column":14},"end":{"line":533,"column":19}}},"loc":{"start":{"line":533,"column":8},"end":{"line":533,"column":20}}},"loc":{"start":{"line":533,"column":3},"end":{"line":533,"column":22}}},"right":{"type":"MemberExpression","computed":true,"object":{"type":"Identifier","name":"arguments","loc":{"start":{"line":533,"column":25},"end":{"line":533,"column":34}}},"property":{"type":"Identifier","name":"i","loc":{"start":{"line":533,"column":35},"end":{"line":533,"column":36}}},"loc":{"start":{"line":533,"column":25},"end":{"line":533,"column":37}}},"loc":{"start":{"line":533,"column":3},"end":{"line":533,"column":37}}},"loc":{"start":{"line":533,"column":3},"end":{"line":533,"column":38}}}],"loc":{"start":{"line":532,"column":46},"end":{"line":534,"column":3}}},"loc":{"start":{"line":532,"column":2},"end":{"line":534,"column":3}}},{"type":"ReturnStatement","argument":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"__lua","loc":{"start":{"line":535,"column":9},"end":{"line":535,"column":14}}},"property":{"type":"Identifier","name":"makeTable","loc":{"start":{"line":535,"column":15},"end":{"line":535,"column":24}}},"loc":{"start":{"line":535,"column":9},"end":{"line":535,"column":24}}},"arguments":[{"type":"Identifier","name":"obj","loc":{"start":{"line":535,"column":25},"end":{"line":535,"column":28}}}],"loc":{"start":{"line":535,"column":9},"end":{"line":535,"column":29}}},"loc":{"start":{"line":535,"column":2},"end":{"line":535,"column":30}}}],"loc":{"start":{"line":530,"column":33},"end":{"line":536,"column":2}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":530,"column":7},"end":{"line":536,"column":2}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":530,"column":1},"end":{"line":536,"column":2}}},{"type":"Property","key":{"type":"Identifier","name":"remove","loc":{"start":{"line":537,"column":1},"end":{"line":537,"column":7}}},"value":{"type":"Literal","value":null,"raw":"null","loc":{"start":{"line":537,"column":9},"end":{"line":537,"column":13}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":537,"column":1},"end":{"line":537,"column":13}}},{"type":"Property","key":{"type":"Identifier","name":"sort","loc":{"start":{"line":538,"column":1},"end":{"line":538,"column":5}}},"value":{"type":"FunctionExpression","id":{"type":"Identifier","name":"sort","loc":{"start":{"line":538,"column":16},"end":{"line":538,"column":20}}},"params":[{"type":"Identifier","name":"table","loc":{"start":{"line":538,"column":21},"end":{"line":538,"column":26}}}],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"ReturnStatement","argument":{"type":"Identifier","name":"table","loc":{"start":{"line":538,"column":37},"end":{"line":538,"column":42}}},"loc":{"start":{"line":538,"column":30},"end":{"line":538,"column":43}}}],"loc":{"start":{"line":538,"column":28},"end":{"line":538,"column":45}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":538,"column":7},"end":{"line":538,"column":45}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":538,"column":1},"end":{"line":538,"column":45}}},{"type":"Property","key":{"type":"Identifier","name":"unpack","loc":{"start":{"line":539,"column":1},"end":{"line":539,"column":7}}},"value":{"type":"FunctionExpression","id":null,"params":[{"type":"Identifier","name":"table","loc":{"start":{"line":539,"column":18},"end":{"line":539,"column":23}}},{"type":"Identifier","name":"i","loc":{"start":{"line":539,"column":24},"end":{"line":539,"column":25}}},{"type":"Identifier","name":"j","loc":{"start":{"line":539,"column":26},"end":{"line":539,"column":27}}}],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"IfStatement","test":{"type":"LogicalExpression","operator":"||","left":{"type":"BinaryExpression","operator":"===","left":{"type":"Identifier","name":"i","loc":{"start":{"line":540,"column":7},"end":{"line":540,"column":8}}},"right":{"type":"Identifier","name":"undefined","loc":{"start":{"line":540,"column":13},"end":{"line":540,"column":22}}},"loc":{"start":{"line":540,"column":7},"end":{"line":540,"column":22}}},"right":{"type":"BinaryExpression","operator":"===","left":{"type":"Identifier","name":"i","loc":{"start":{"line":540,"column":26},"end":{"line":540,"column":27}}},"right":{"type":"Literal","value":null,"raw":"null","loc":{"start":{"line":540,"column":32},"end":{"line":540,"column":36}}},"loc":{"start":{"line":540,"column":26},"end":{"line":540,"column":36}}},"loc":{"start":{"line":540,"column":7},"end":{"line":540,"column":36}}},"consequent":{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"Identifier","name":"i","loc":{"start":{"line":540,"column":39},"end":{"line":540,"column":40}}},"right":{"type":"Literal","value":1,"raw":"1","loc":{"start":{"line":540,"column":43},"end":{"line":540,"column":44}}},"loc":{"start":{"line":540,"column":39},"end":{"line":540,"column":44}}},"loc":{"start":{"line":540,"column":39},"end":{"line":540,"column":45}}},"alternate":null,"loc":{"start":{"line":540,"column":2},"end":{"line":540,"column":45}}},{"type":"IfStatement","test":{"type":"LogicalExpression","operator":"||","left":{"type":"BinaryExpression","operator":"===","left":{"type":"Identifier","name":"j","loc":{"start":{"line":541,"column":7},"end":{"line":541,"column":8}}},"right":{"type":"Identifier","name":"undefined","loc":{"start":{"line":541,"column":13},"end":{"line":541,"column":22}}},"loc":{"start":{"line":541,"column":7},"end":{"line":541,"column":22}}},"right":{"type":"BinaryExpression","operator":"===","left":{"type":"Identifier","name":"j","loc":{"start":{"line":541,"column":26},"end":{"line":541,"column":27}}},"right":{"type":"Literal","value":null,"raw":"null","loc":{"start":{"line":541,"column":32},"end":{"line":541,"column":36}}},"loc":{"start":{"line":541,"column":26},"end":{"line":541,"column":36}}},"loc":{"start":{"line":541,"column":7},"end":{"line":541,"column":36}}},"consequent":{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"Identifier","name":"j","loc":{"start":{"line":541,"column":39},"end":{"line":541,"column":40}}},"right":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"__lua","loc":{"start":{"line":541,"column":43},"end":{"line":541,"column":48}}},"property":{"type":"Identifier","name":"count","loc":{"start":{"line":541,"column":49},"end":{"line":541,"column":54}}},"loc":{"start":{"line":541,"column":43},"end":{"line":541,"column":54}}},"arguments":[{"type":"Identifier","name":"table","loc":{"start":{"line":541,"column":55},"end":{"line":541,"column":60}}}],"loc":{"start":{"line":541,"column":43},"end":{"line":541,"column":61}}},"loc":{"start":{"line":541,"column":39},"end":{"line":541,"column":61}}},"loc":{"start":{"line":541,"column":39},"end":{"line":541,"column":62}}},"alternate":null,"loc":{"start":{"line":541,"column":2},"end":{"line":541,"column":62}}},{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"arr","loc":{"start":{"line":543,"column":6},"end":{"line":543,"column":9}}},"init":{"type":"ArrayExpression","elements":[],"loc":{"start":{"line":543,"column":12},"end":{"line":543,"column":14}}},"loc":{"start":{"line":543,"column":6},"end":{"line":543,"column":14}}}],"kind":"var","loc":{"start":{"line":543,"column":2},"end":{"line":543,"column":15}}},{"type":"IfStatement","test":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"__lua","loc":{"start":{"line":544,"column":7},"end":{"line":544,"column":12}}},"property":{"type":"Identifier","name":"isTable","loc":{"start":{"line":544,"column":13},"end":{"line":544,"column":20}}},"loc":{"start":{"line":544,"column":7},"end":{"line":544,"column":20}}},"arguments":[{"type":"Identifier","name":"table","loc":{"start":{"line":544,"column":21},"end":{"line":544,"column":26}}}],"loc":{"start":{"line":544,"column":7},"end":{"line":544,"column":27}}},"consequent":{"type":"BlockStatement","body":[{"type":"ForStatement","init":{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"a","loc":{"start":{"line":545,"column":13},"end":{"line":545,"column":14}}},"init":{"type":"Identifier","name":"i","loc":{"start":{"line":545,"column":17},"end":{"line":545,"column":18}}},"loc":{"start":{"line":545,"column":13},"end":{"line":545,"column":18}}}],"kind":"var","loc":{"start":{"line":545,"column":9},"end":{"line":545,"column":18}}},"test":{"type":"BinaryExpression","operator":"<=","left":{"type":"Identifier","name":"a","loc":{"start":{"line":545,"column":20},"end":{"line":545,"column":21}}},"right":{"type":"Identifier","name":"j","loc":{"start":{"line":545,"column":25},"end":{"line":545,"column":26}}},"loc":{"start":{"line":545,"column":20},"end":{"line":545,"column":26}}},"update":{"type":"UpdateExpression","operator":"++","argument":{"type":"Identifier","name":"a","loc":{"start":{"line":545,"column":30},"end":{"line":545,"column":31}}},"prefix":true,"loc":{"start":{"line":545,"column":28},"end":{"line":545,"column":31}}},"body":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"arr","loc":{"start":{"line":546,"column":4},"end":{"line":546,"column":7}}},"property":{"type":"Identifier","name":"push","loc":{"start":{"line":546,"column":8},"end":{"line":546,"column":12}}},"loc":{"start":{"line":546,"column":4},"end":{"line":546,"column":12}}},"arguments":[{"type":"MemberExpression","computed":true,"object":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"table","loc":{"start":{"line":546,"column":13},"end":{"line":546,"column":18}}},"property":{"type":"Identifier","name":"numeric","loc":{"start":{"line":546,"column":19},"end":{"line":546,"column":26}}},"loc":{"start":{"line":546,"column":13},"end":{"line":546,"column":26}}},"property":{"type":"Identifier","name":"a","loc":{"start":{"line":546,"column":27},"end":{"line":546,"column":28}}},"loc":{"start":{"line":546,"column":13},"end":{"line":546,"column":29}}}],"loc":{"start":{"line":546,"column":4},"end":{"line":546,"column":30}}},"loc":{"start":{"line":546,"column":4},"end":{"line":546,"column":31}}}],"loc":{"start":{"line":545,"column":34},"end":{"line":547,"column":4}}},"loc":{"start":{"line":545,"column":3},"end":{"line":547,"column":4}}}],"loc":{"start":{"line":544,"column":30},"end":{"line":548,"column":3}}},"alternate":{"type":"BlockStatement","body":[{"type":"ForStatement","init":{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"a","loc":{"start":{"line":549,"column":13},"end":{"line":549,"column":14}}},"init":{"type":"Identifier","name":"i","loc":{"start":{"line":549,"column":17},"end":{"line":549,"column":18}}},"loc":{"start":{"line":549,"column":13},"end":{"line":549,"column":18}}}],"kind":"var","loc":{"start":{"line":549,"column":9},"end":{"line":549,"column":18}}},"test":{"type":"BinaryExpression","operator":"<=","left":{"type":"Identifier","name":"a","loc":{"start":{"line":549,"column":20},"end":{"line":549,"column":21}}},"right":{"type":"Identifier","name":"j","loc":{"start":{"line":549,"column":25},"end":{"line":549,"column":26}}},"loc":{"start":{"line":549,"column":20},"end":{"line":549,"column":26}}},"update":{"type":"UpdateExpression","operator":"++","argument":{"type":"Identifier","name":"a","loc":{"start":{"line":549,"column":30},"end":{"line":549,"column":31}}},"prefix":true,"loc":{"start":{"line":549,"column":28},"end":{"line":549,"column":31}}},"body":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"arr","loc":{"start":{"line":550,"column":4},"end":{"line":550,"column":7}}},"property":{"type":"Identifier","name":"push","loc":{"start":{"line":550,"column":8},"end":{"line":550,"column":12}}},"loc":{"start":{"line":550,"column":4},"end":{"line":550,"column":12}}},"arguments":[{"type":"MemberExpression","computed":true,"object":{"type":"Identifier","name":"table","loc":{"start":{"line":550,"column":13},"end":{"line":550,"column":18}}},"property":{"type":"Identifier","name":"a","loc":{"start":{"line":550,"column":19},"end":{"line":550,"column":20}}},"loc":{"start":{"line":550,"column":13},"end":{"line":550,"column":21}}}],"loc":{"start":{"line":550,"column":4},"end":{"line":550,"column":22}}},"loc":{"start":{"line":550,"column":4},"end":{"line":550,"column":23}}}],"loc":{"start":{"line":549,"column":34},"end":{"line":551,"column":4}}},"loc":{"start":{"line":549,"column":3},"end":{"line":551,"column":4}}}],"loc":{"start":{"line":548,"column":9},"end":{"line":552,"column":3}}},"loc":{"start":{"line":544,"column":2},"end":{"line":552,"column":3}}},{"type":"ReturnStatement","argument":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"__lua","loc":{"start":{"line":554,"column":9},"end":{"line":554,"column":14}}},"property":{"type":"Identifier","name":"makeMultiReturn","loc":{"start":{"line":554,"column":15},"end":{"line":554,"column":30}}},"loc":{"start":{"line":554,"column":9},"end":{"line":554,"column":30}}},"property":{"type":"Identifier","name":"apply","loc":{"start":{"line":554,"column":31},"end":{"line":554,"column":36}}},"loc":{"start":{"line":554,"column":9},"end":{"line":554,"column":36}}},"arguments":[{"type":"Identifier","name":"__lua","loc":{"start":{"line":554,"column":37},"end":{"line":554,"column":42}}},{"type":"Identifier","name":"arr","loc":{"start":{"line":554,"column":44},"end":{"line":554,"column":47}}}],"loc":{"start":{"line":554,"column":9},"end":{"line":554,"column":48}}},"loc":{"start":{"line":554,"column":2},"end":{"line":554,"column":49}}}],"loc":{"start":{"line":539,"column":29},"end":{"line":557,"column":2}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":539,"column":9},"end":{"line":557,"column":2}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":539,"column":1},"end":{"line":557,"column":2}}}],"loc":{"start":{"line":527,"column":12},"end":{"line":559,"column":1}}},"loc":{"start":{"line":527,"column":0},"end":{"line":559,"column":1}}},"loc":{"start":{"line":527,"column":0},"end":{"line":559,"column":2}}},{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"env","loc":{"start":{"line":561,"column":0},"end":{"line":561,"column":3}}},"property":{"type":"Identifier","name":"unpack","loc":{"start":{"line":561,"column":4},"end":{"line":561,"column":10}}},"loc":{"start":{"line":561,"column":0},"end":{"line":561,"column":10}}},"right":{"type":"MemberExpression","computed":false,"object":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"env","loc":{"start":{"line":561,"column":13},"end":{"line":561,"column":16}}},"property":{"type":"Identifier","name":"table","loc":{"start":{"line":561,"column":17},"end":{"line":561,"column":22}}},"loc":{"start":{"line":561,"column":13},"end":{"line":561,"column":22}}},"property":{"type":"Identifier","name":"unpack","loc":{"start":{"line":561,"column":23},"end":{"line":561,"column":29}}},"loc":{"start":{"line":561,"column":13},"end":{"line":561,"column":29}}},"loc":{"start":{"line":561,"column":0},"end":{"line":561,"column":29}}},"loc":{"start":{"line":561,"column":0},"end":{"line":561,"column":30}}},{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"env","loc":{"start":{"line":563,"column":0},"end":{"line":563,"column":3}}},"property":{"type":"Identifier","name":"tonumber","loc":{"start":{"line":563,"column":4},"end":{"line":563,"column":12}}},"loc":{"start":{"line":563,"column":0},"end":{"line":563,"column":12}}},"right":{"type":"FunctionExpression","id":null,"params":[{"type":"Identifier","name":"n","loc":{"start":{"line":563,"column":24},"end":{"line":563,"column":25}}}],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"ReturnStatement","argument":{"type":"CallExpression","callee":{"type":"Identifier","name":"parseInt","loc":{"start":{"line":564,"column":8},"end":{"line":564,"column":16}}},"arguments":[{"type":"Identifier","name":"n","loc":{"start":{"line":564,"column":17},"end":{"line":564,"column":18}}}],"loc":{"start":{"line":564,"column":8},"end":{"line":564,"column":19}}},"loc":{"start":{"line":564,"column":1},"end":{"line":564,"column":20}}}],"loc":{"start":{"line":563,"column":27},"end":{"line":565,"column":1}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":563,"column":15},"end":{"line":565,"column":1}}},"loc":{"start":{"line":563,"column":0},"end":{"line":565,"column":1}}},"loc":{"start":{"line":563,"column":0},"end":{"line":565,"column":2}}},{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"env","loc":{"start":{"line":567,"column":0},"end":{"line":567,"column":3}}},"property":{"type":"Identifier","name":"tostring","loc":{"start":{"line":567,"column":4},"end":{"line":567,"column":12}}},"loc":{"start":{"line":567,"column":0},"end":{"line":567,"column":12}}},"right":{"type":"FunctionExpression","id":null,"params":[{"type":"Identifier","name":"n","loc":{"start":{"line":567,"column":24},"end":{"line":567,"column":25}}}],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"ReturnStatement","argument":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"__lua","loc":{"start":{"line":568,"column":8},"end":{"line":568,"column":13}}},"property":{"type":"Identifier","name":"makeString","loc":{"start":{"line":568,"column":14},"end":{"line":568,"column":24}}},"loc":{"start":{"line":568,"column":8},"end":{"line":568,"column":24}}},"arguments":[{"type":"Identifier","name":"n","loc":{"start":{"line":568,"column":25},"end":{"line":568,"column":26}}}],"loc":{"start":{"line":568,"column":8},"end":{"line":568,"column":27}}},"loc":{"start":{"line":568,"column":1},"end":{"line":568,"column":28}}}],"loc":{"start":{"line":567,"column":27},"end":{"line":569,"column":1}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":567,"column":15},"end":{"line":569,"column":1}}},"loc":{"start":{"line":567,"column":0},"end":{"line":569,"column":1}}},"loc":{"start":{"line":567,"column":0},"end":{"line":569,"column":2}}},{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"env","loc":{"start":{"line":571,"column":0},"end":{"line":571,"column":3}}},"property":{"type":"Identifier","name":"os","loc":{"start":{"line":571,"column":4},"end":{"line":571,"column":6}}},"loc":{"start":{"line":571,"column":0},"end":{"line":571,"column":6}}},"right":{"type":"ObjectExpression","properties":[{"type":"Property","key":{"type":"Identifier","name":"clock","loc":{"start":{"line":572,"column":1},"end":{"line":572,"column":6}}},"value":{"type":"Literal","value":null,"raw":"null","loc":{"start":{"line":572,"column":8},"end":{"line":572,"column":12}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":572,"column":1},"end":{"line":572,"column":12}}},{"type":"Property","key":{"type":"Identifier","name":"date","loc":{"start":{"line":573,"column":1},"end":{"line":573,"column":5}}},"value":{"type":"Literal","value":null,"raw":"null","loc":{"start":{"line":573,"column":7},"end":{"line":573,"column":11}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":573,"column":1},"end":{"line":573,"column":11}}},{"type":"Property","key":{"type":"Identifier","name":"difftime","loc":{"start":{"line":574,"column":1},"end":{"line":574,"column":9}}},"value":{"type":"FunctionExpression","id":{"type":"Identifier","name":"difftime","loc":{"start":{"line":574,"column":20},"end":{"line":574,"column":28}}},"params":[{"type":"Identifier","name":"t1","loc":{"start":{"line":574,"column":29},"end":{"line":574,"column":31}}},{"type":"Identifier","name":"t2","loc":{"start":{"line":574,"column":32},"end":{"line":574,"column":34}}}],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"ReturnStatement","argument":{"type":"BinaryExpression","operator":"-","left":{"type":"Identifier","name":"t2","loc":{"start":{"line":574,"column":45},"end":{"line":574,"column":47}}},"right":{"type":"Identifier","name":"t1","loc":{"start":{"line":574,"column":50},"end":{"line":574,"column":52}}},"loc":{"start":{"line":574,"column":45},"end":{"line":574,"column":52}}},"loc":{"start":{"line":574,"column":38},"end":{"line":574,"column":53}}}],"loc":{"start":{"line":574,"column":36},"end":{"line":574,"column":55}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":574,"column":11},"end":{"line":574,"column":55}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":574,"column":1},"end":{"line":574,"column":55}}},{"type":"Property","key":{"type":"Identifier","name":"execute","loc":{"start":{"line":575,"column":1},"end":{"line":575,"column":8}}},"value":{"type":"Literal","value":null,"raw":"null","loc":{"start":{"line":575,"column":10},"end":{"line":575,"column":14}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":575,"column":1},"end":{"line":575,"column":14}}},{"type":"Property","key":{"type":"Identifier","name":"exit","loc":{"start":{"line":576,"column":1},"end":{"line":576,"column":5}}},"value":{"type":"Literal","value":null,"raw":"null","loc":{"start":{"line":576,"column":7},"end":{"line":576,"column":11}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":576,"column":1},"end":{"line":576,"column":11}}},{"type":"Property","key":{"type":"Identifier","name":"time","loc":{"start":{"line":577,"column":1},"end":{"line":577,"column":5}}},"value":{"type":"FunctionExpression","id":{"type":"Identifier","name":"time","loc":{"start":{"line":577,"column":16},"end":{"line":577,"column":20}}},"params":[{"type":"Identifier","name":"table","loc":{"start":{"line":577,"column":21},"end":{"line":577,"column":26}}}],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"==","left":{"type":"Identifier","name":"table","loc":{"start":{"line":578,"column":7},"end":{"line":578,"column":12}}},"right":{"type":"Literal","value":null,"raw":"null","loc":{"start":{"line":578,"column":16},"end":{"line":578,"column":20}}},"loc":{"start":{"line":578,"column":7},"end":{"line":578,"column":20}}},"consequent":{"type":"ReturnStatement","argument":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"NewExpression","callee":{"type":"Identifier","name":"Date","loc":{"start":{"line":578,"column":34},"end":{"line":578,"column":38}}},"arguments":[],"loc":{"start":{"line":578,"column":30},"end":{"line":578,"column":40}}},"property":{"type":"Identifier","name":"getTime","loc":{"start":{"line":578,"column":41},"end":{"line":578,"column":48}}},"loc":{"start":{"line":578,"column":30},"end":{"line":578,"column":48}}},"arguments":[],"loc":{"start":{"line":578,"column":30},"end":{"line":578,"column":50}}},"loc":{"start":{"line":578,"column":23},"end":{"line":578,"column":51}}},"alternate":null,"loc":{"start":{"line":578,"column":2},"end":{"line":578,"column":51}}},{"type":"ThrowStatement","argument":{"type":"Literal","value":"Time given a table not implemented yet.","raw":"\"Time given a table not implemented yet.\"","loc":{"start":{"line":579,"column":8},"end":{"line":579,"column":49}}},"loc":{"start":{"line":579,"column":2},"end":{"line":579,"column":50}}}],"loc":{"start":{"line":577,"column":28},"end":{"line":580,"column":2}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":577,"column":7},"end":{"line":580,"column":2}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":577,"column":1},"end":{"line":580,"column":2}}}],"loc":{"start":{"line":571,"column":9},"end":{"line":581,"column":1}}},"loc":{"start":{"line":571,"column":0},"end":{"line":581,"column":1}}},"loc":{"start":{"line":571,"column":0},"end":{"line":581,"column":2}}},{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"env","loc":{"start":{"line":583,"column":0},"end":{"line":583,"column":3}}},"property":{"type":"Identifier","name":"io","loc":{"start":{"line":583,"column":4},"end":{"line":583,"column":6}}},"loc":{"start":{"line":583,"column":0},"end":{"line":583,"column":6}}},"right":{"type":"ObjectExpression","properties":[{"type":"Property","key":{"type":"Identifier","name":"write","loc":{"start":{"line":584,"column":1},"end":{"line":584,"column":6}}},"value":{"type":"FunctionExpression","id":null,"params":[],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"env","loc":{"start":{"line":584,"column":21},"end":{"line":584,"column":24}}},"property":{"type":"Identifier","name":"print","loc":{"start":{"line":584,"column":25},"end":{"line":584,"column":30}}},"loc":{"start":{"line":584,"column":21},"end":{"line":584,"column":30}}},"arguments":[{"type":"Identifier","name":"arguments","loc":{"start":{"line":584,"column":31},"end":{"line":584,"column":40}}}],"loc":{"start":{"line":584,"column":21},"end":{"line":584,"column":41}}},"loc":{"start":{"line":584,"column":21},"end":{"line":584,"column":42}}}],"loc":{"start":{"line":584,"column":19},"end":{"line":584,"column":44}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":584,"column":8},"end":{"line":584,"column":44}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":584,"column":1},"end":{"line":584,"column":44}}}],"loc":{"start":{"line":583,"column":9},"end":{"line":585,"column":1}}},"loc":{"start":{"line":583,"column":0},"end":{"line":585,"column":1}}},"loc":{"start":{"line":583,"column":0},"end":{"line":585,"column":2}}},{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"env","loc":{"start":{"line":587,"column":0},"end":{"line":587,"column":3}}},"property":{"type":"Identifier","name":"error","loc":{"start":{"line":587,"column":4},"end":{"line":587,"column":9}}},"loc":{"start":{"line":587,"column":0},"end":{"line":587,"column":9}}},"right":{"type":"FunctionExpression","id":{"type":"Identifier","name":"error","loc":{"start":{"line":587,"column":21},"end":{"line":587,"column":26}}},"params":[{"type":"Identifier","name":"s","loc":{"start":{"line":587,"column":27},"end":{"line":587,"column":28}}}],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"ThrowStatement","argument":{"type":"Identifier","name":"s","loc":{"start":{"line":587,"column":38},"end":{"line":587,"column":39}}},"loc":{"start":{"line":587,"column":32},"end":{"line":587,"column":40}}}],"loc":{"start":{"line":587,"column":30},"end":{"line":587,"column":42}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":587,"column":12},"end":{"line":587,"column":42}}},"loc":{"start":{"line":587,"column":0},"end":{"line":587,"column":42}}},"loc":{"start":{"line":587,"column":0},"end":{"line":587,"column":43}}},{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"env","loc":{"start":{"line":589,"column":0},"end":{"line":589,"column":3}}},"property":{"type":"Identifier","name":"assert","loc":{"start":{"line":589,"column":4},"end":{"line":589,"column":10}}},"loc":{"start":{"line":589,"column":0},"end":{"line":589,"column":10}}},"right":{"type":"FunctionExpression","id":{"type":"Identifier","name":"assert","loc":{"start":{"line":589,"column":22},"end":{"line":589,"column":28}}},"params":[{"type":"Identifier","name":"what","loc":{"start":{"line":589,"column":29},"end":{"line":589,"column":33}}},{"type":"Identifier","name":"msg","loc":{"start":{"line":589,"column":35},"end":{"line":589,"column":38}}},{"type":"Identifier","name":"code","loc":{"start":{"line":589,"column":40},"end":{"line":589,"column":44}}}],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"===","left":{"type":"Identifier","name":"code","loc":{"start":{"line":590,"column":6},"end":{"line":590,"column":10}}},"right":{"type":"Identifier","name":"undefined","loc":{"start":{"line":590,"column":15},"end":{"line":590,"column":24}}},"loc":{"start":{"line":590,"column":6},"end":{"line":590,"column":24}}},"consequent":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"Identifier","name":"code","loc":{"start":{"line":591,"column":2},"end":{"line":591,"column":6}}},"right":{"type":"Identifier","name":"msg","loc":{"start":{"line":591,"column":9},"end":{"line":591,"column":12}}},"loc":{"start":{"line":591,"column":2},"end":{"line":591,"column":12}}},"loc":{"start":{"line":591,"column":2},"end":{"line":591,"column":13}}},{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"Identifier","name":"msg","loc":{"start":{"line":592,"column":2},"end":{"line":592,"column":5}}},"right":{"type":"Identifier","name":"undefined","loc":{"start":{"line":592,"column":8},"end":{"line":592,"column":17}}},"loc":{"start":{"line":592,"column":2},"end":{"line":592,"column":17}}},"loc":{"start":{"line":592,"column":2},"end":{"line":592,"column":18}}}],"loc":{"start":{"line":590,"column":27},"end":{"line":593,"column":2}}},"alternate":null,"loc":{"start":{"line":590,"column":1},"end":{"line":593,"column":2}}},{"type":"IfStatement","test":{"type":"UnaryExpression","operator":"!","argument":{"type":"UnaryExpression","operator":"!","argument":{"type":"Identifier","name":"what","loc":{"start":{"line":595,"column":8},"end":{"line":595,"column":12}}},"prefix":true,"loc":{"start":{"line":595,"column":7},"end":{"line":595,"column":12}}},"prefix":true,"loc":{"start":{"line":595,"column":6},"end":{"line":595,"column":12}}},"consequent":{"type":"ReturnStatement","argument":{"type":"Identifier","name":"what","loc":{"start":{"line":595,"column":22},"end":{"line":595,"column":26}}},"loc":{"start":{"line":595,"column":15},"end":{"line":595,"column":27}}},"alternate":null,"loc":{"start":{"line":595,"column":1},"end":{"line":595,"column":27}}},{"type":"ThrowStatement","argument":{"type":"BinaryExpression","operator":"+","left":{"type":"Literal","value":"Assert Failed!! ","raw":"\"Assert Failed!! \"","loc":{"start":{"line":597,"column":7},"end":{"line":597,"column":25}}},"right":{"type":"Identifier","name":"code","loc":{"start":{"line":597,"column":28},"end":{"line":597,"column":32}}},"loc":{"start":{"line":597,"column":7},"end":{"line":597,"column":32}}},"loc":{"start":{"line":597,"column":1},"end":{"line":597,"column":34}}}],"loc":{"start":{"line":589,"column":46},"end":{"line":598,"column":1}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":589,"column":13},"end":{"line":598,"column":1}}},"loc":{"start":{"line":589,"column":0},"end":{"line":598,"column":1}}},"loc":{"start":{"line":589,"column":0},"end":{"line":598,"column":2}}},{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"env","loc":{"start":{"line":600,"column":0},"end":{"line":600,"column":3}}},"property":{"type":"Identifier","name":"type","loc":{"start":{"line":600,"column":4},"end":{"line":600,"column":8}}},"loc":{"start":{"line":600,"column":0},"end":{"line":600,"column":8}}},"right":{"type":"FunctionExpression","id":{"type":"Identifier","name":"type","loc":{"start":{"line":600,"column":20},"end":{"line":600,"column":24}}},"params":[{"type":"Identifier","name":"what","loc":{"start":{"line":600,"column":25},"end":{"line":600,"column":29}}}],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"ReturnStatement","argument":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"__lua","loc":{"start":{"line":601,"column":8},"end":{"line":601,"column":13}}},"property":{"type":"Identifier","name":"type","loc":{"start":{"line":601,"column":14},"end":{"line":601,"column":18}}},"loc":{"start":{"line":601,"column":8},"end":{"line":601,"column":18}}},"arguments":[{"type":"Identifier","name":"what","loc":{"start":{"line":601,"column":19},"end":{"line":601,"column":23}}}],"loc":{"start":{"line":601,"column":8},"end":{"line":601,"column":24}}},"loc":{"start":{"line":601,"column":1},"end":{"line":601,"column":25}}}],"loc":{"start":{"line":600,"column":31},"end":{"line":602,"column":1}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":600,"column":11},"end":{"line":602,"column":1}}},"loc":{"start":{"line":600,"column":0},"end":{"line":602,"column":1}}},"loc":{"start":{"line":600,"column":0},"end":{"line":602,"column":2}}},{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"env","loc":{"start":{"line":605,"column":0},"end":{"line":605,"column":3}}},"property":{"type":"Identifier","name":"pairs","loc":{"start":{"line":605,"column":4},"end":{"line":605,"column":9}}},"loc":{"start":{"line":605,"column":0},"end":{"line":605,"column":9}}},"right":{"type":"FunctionExpression","id":{"type":"Identifier","name":"pairs","loc":{"start":{"line":605,"column":21},"end":{"line":605,"column":26}}},"params":[{"type":"Identifier","name":"table","loc":{"start":{"line":605,"column":27},"end":{"line":605,"column":32}}}],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"mtf","loc":{"start":{"line":607,"column":5},"end":{"line":607,"column":8}}},"init":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"__lua","loc":{"start":{"line":607,"column":11},"end":{"line":607,"column":16}}},"property":{"type":"Identifier","name":"lookupMetaTable","loc":{"start":{"line":607,"column":17},"end":{"line":607,"column":32}}},"loc":{"start":{"line":607,"column":11},"end":{"line":607,"column":32}}},"arguments":[{"type":"Identifier","name":"table","loc":{"start":{"line":607,"column":33},"end":{"line":607,"column":38}}},{"type":"Literal","value":"__pairs","raw":"\"__pairs\"","loc":{"start":{"line":607,"column":40},"end":{"line":607,"column":49}}}],"loc":{"start":{"line":607,"column":11},"end":{"line":607,"column":50}}},"loc":{"start":{"line":607,"column":5},"end":{"line":607,"column":50}}}],"kind":"var","loc":{"start":{"line":607,"column":1},"end":{"line":607,"column":51}}},{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"!==","left":{"type":"Identifier","name":"mtf","loc":{"start":{"line":608,"column":6},"end":{"line":608,"column":9}}},"right":{"type":"Literal","value":null,"raw":"null","loc":{"start":{"line":608,"column":14},"end":{"line":608,"column":18}}},"loc":{"start":{"line":608,"column":6},"end":{"line":608,"column":18}}},"consequent":{"type":"ReturnStatement","argument":{"type":"CallExpression","callee":{"type":"Identifier","name":"mtf","loc":{"start":{"line":608,"column":28},"end":{"line":608,"column":31}}},"arguments":[{"type":"Identifier","name":"table","loc":{"start":{"line":608,"column":32},"end":{"line":608,"column":37}}}],"loc":{"start":{"line":608,"column":28},"end":{"line":608,"column":38}}},"loc":{"start":{"line":608,"column":21},"end":{"line":608,"column":39}}},"alternate":null,"loc":{"start":{"line":608,"column":1},"end":{"line":608,"column":39}}},{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"list","loc":{"start":{"line":610,"column":5},"end":{"line":610,"column":9}}},"init":{"type":"ArrayExpression","elements":[],"loc":{"start":{"line":610,"column":12},"end":{"line":610,"column":14}}},"loc":{"start":{"line":610,"column":5},"end":{"line":610,"column":14}}}],"kind":"var","loc":{"start":{"line":610,"column":1},"end":{"line":610,"column":15}}},{"type":"IfStatement","test":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"__lua","loc":{"start":{"line":611,"column":6},"end":{"line":611,"column":11}}},"property":{"type":"Identifier","name":"isTable","loc":{"start":{"line":611,"column":12},"end":{"line":611,"column":19}}},"loc":{"start":{"line":611,"column":6},"end":{"line":611,"column":19}}},"arguments":[{"type":"Identifier","name":"table","loc":{"start":{"line":611,"column":20},"end":{"line":611,"column":25}}}],"loc":{"start":{"line":611,"column":6},"end":{"line":611,"column":26}}},"consequent":{"type":"BlockStatement","body":[{"type":"ForStatement","init":{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"i","loc":{"start":{"line":612,"column":12},"end":{"line":612,"column":13}}},"init":{"type":"Literal","value":0,"raw":"0","loc":{"start":{"line":612,"column":16},"end":{"line":612,"column":17}}},"loc":{"start":{"line":612,"column":12},"end":{"line":612,"column":17}}}],"kind":"var","loc":{"start":{"line":612,"column":8},"end":{"line":612,"column":17}}},"test":{"type":"BinaryExpression","operator":"<","left":{"type":"Identifier","name":"i","loc":{"start":{"line":612,"column":19},"end":{"line":612,"column":20}}},"right":{"type":"MemberExpression","computed":false,"object":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"table","loc":{"start":{"line":612,"column":23},"end":{"line":612,"column":28}}},"property":{"type":"Identifier","name":"numeric","loc":{"start":{"line":612,"column":29},"end":{"line":612,"column":36}}},"loc":{"start":{"line":612,"column":23},"end":{"line":612,"column":36}}},"property":{"type":"Identifier","name":"length","loc":{"start":{"line":612,"column":37},"end":{"line":612,"column":43}}},"loc":{"start":{"line":612,"column":23},"end":{"line":612,"column":43}}},"loc":{"start":{"line":612,"column":19},"end":{"line":612,"column":43}}},"update":{"type":"UpdateExpression","operator":"++","argument":{"type":"Identifier","name":"i","loc":{"start":{"line":612,"column":47},"end":{"line":612,"column":48}}},"prefix":true,"loc":{"start":{"line":612,"column":45},"end":{"line":612,"column":48}}},"body":{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"list","loc":{"start":{"line":612,"column":51},"end":{"line":612,"column":55}}},"property":{"type":"Identifier","name":"push","loc":{"start":{"line":612,"column":56},"end":{"line":612,"column":60}}},"loc":{"start":{"line":612,"column":51},"end":{"line":612,"column":60}}},"arguments":[{"type":"ArrayExpression","elements":[{"type":"BinaryExpression","operator":"+","left":{"type":"Identifier","name":"i","loc":{"start":{"line":612,"column":62},"end":{"line":612,"column":63}}},"right":{"type":"Literal","value":1,"raw":"1","loc":{"start":{"line":612,"column":66},"end":{"line":612,"column":67}}},"loc":{"start":{"line":612,"column":62},"end":{"line":612,"column":67}}},{"type":"Identifier","name":"i","loc":{"start":{"line":612,"column":69},"end":{"line":612,"column":70}}},{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"table","loc":{"start":{"line":612,"column":72},"end":{"line":612,"column":77}}},"property":{"type":"Identifier","name":"numeric","loc":{"start":{"line":612,"column":78},"end":{"line":612,"column":85}}},"loc":{"start":{"line":612,"column":72},"end":{"line":612,"column":85}}}],"loc":{"start":{"line":612,"column":61},"end":{"line":612,"column":86}}}],"loc":{"start":{"line":612,"column":51},"end":{"line":612,"column":87}}},"loc":{"start":{"line":612,"column":51},"end":{"line":612,"column":88}}},"loc":{"start":{"line":612,"column":2},"end":{"line":612,"column":88}}},{"type":"ForInStatement","left":{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"idx","loc":{"start":{"line":613,"column":12},"end":{"line":613,"column":15}}},"init":null,"loc":{"start":{"line":613,"column":12},"end":{"line":613,"column":15}}}],"kind":"var","loc":{"start":{"line":613,"column":8},"end":{"line":613,"column":15}}},"right":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"table","loc":{"start":{"line":613,"column":19},"end":{"line":613,"column":24}}},"property":{"type":"Identifier","name":"hash","loc":{"start":{"line":613,"column":25},"end":{"line":613,"column":29}}},"loc":{"start":{"line":613,"column":19},"end":{"line":613,"column":29}}},"body":{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"list","loc":{"start":{"line":613,"column":32},"end":{"line":613,"column":36}}},"property":{"type":"Identifier","name":"push","loc":{"start":{"line":613,"column":37},"end":{"line":613,"column":41}}},"loc":{"start":{"line":613,"column":32},"end":{"line":613,"column":41}}},"arguments":[{"type":"ArrayExpression","elements":[{"type":"Identifier","name":"idx","loc":{"start":{"line":613,"column":43},"end":{"line":613,"column":46}}},{"type":"Identifier","name":"idx","loc":{"start":{"line":613,"column":48},"end":{"line":613,"column":51}}},{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"table","loc":{"start":{"line":613,"column":53},"end":{"line":613,"column":58}}},"property":{"type":"Identifier","name":"hash","loc":{"start":{"line":613,"column":59},"end":{"line":613,"column":63}}},"loc":{"start":{"line":613,"column":53},"end":{"line":613,"column":63}}}],"loc":{"start":{"line":613,"column":42},"end":{"line":613,"column":64}}}],"loc":{"start":{"line":613,"column":32},"end":{"line":613,"column":65}}},"loc":{"start":{"line":613,"column":32},"end":{"line":613,"column":66}}},"each":false,"loc":{"start":{"line":613,"column":2},"end":{"line":613,"column":66}}}],"loc":{"start":{"line":611,"column":29},"end":{"line":614,"column":2}}},"alternate":{"type":"IfStatement","test":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"__lua","loc":{"start":{"line":614,"column":13},"end":{"line":614,"column":18}}},"property":{"type":"Identifier","name":"isJSArray","loc":{"start":{"line":614,"column":19},"end":{"line":614,"column":28}}},"loc":{"start":{"line":614,"column":13},"end":{"line":614,"column":28}}},"arguments":[{"type":"Identifier","name":"table","loc":{"start":{"line":614,"column":29},"end":{"line":614,"column":34}}}],"loc":{"start":{"line":614,"column":13},"end":{"line":614,"column":35}}},"consequent":{"type":"BlockStatement","body":[{"type":"ForStatement","init":{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"i","loc":{"start":{"line":615,"column":12},"end":{"line":615,"column":13}}},"init":{"type":"Literal","value":0,"raw":"0","loc":{"start":{"line":615,"column":16},"end":{"line":615,"column":17}}},"loc":{"start":{"line":615,"column":12},"end":{"line":615,"column":17}}}],"kind":"var","loc":{"start":{"line":615,"column":8},"end":{"line":615,"column":17}}},"test":{"type":"BinaryExpression","operator":"<","left":{"type":"Identifier","name":"i","loc":{"start":{"line":615,"column":19},"end":{"line":615,"column":20}}},"right":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"table","loc":{"start":{"line":615,"column":23},"end":{"line":615,"column":28}}},"property":{"type":"Identifier","name":"length","loc":{"start":{"line":615,"column":29},"end":{"line":615,"column":35}}},"loc":{"start":{"line":615,"column":23},"end":{"line":615,"column":35}}},"loc":{"start":{"line":615,"column":19},"end":{"line":615,"column":35}}},"update":{"type":"UpdateExpression","operator":"++","argument":{"type":"Identifier","name":"i","loc":{"start":{"line":615,"column":39},"end":{"line":615,"column":40}}},"prefix":true,"loc":{"start":{"line":615,"column":37},"end":{"line":615,"column":40}}},"body":{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"list","loc":{"start":{"line":615,"column":43},"end":{"line":615,"column":47}}},"property":{"type":"Identifier","name":"push","loc":{"start":{"line":615,"column":48},"end":{"line":615,"column":52}}},"loc":{"start":{"line":615,"column":43},"end":{"line":615,"column":52}}},"arguments":[{"type":"ArrayExpression","elements":[{"type":"BinaryExpression","operator":"+","left":{"type":"Identifier","name":"i","loc":{"start":{"line":615,"column":54},"end":{"line":615,"column":55}}},"right":{"type":"Literal","value":1,"raw":"1","loc":{"start":{"line":615,"column":58},"end":{"line":615,"column":59}}},"loc":{"start":{"line":615,"column":54},"end":{"line":615,"column":59}}},{"type":"Identifier","name":"i","loc":{"start":{"line":615,"column":61},"end":{"line":615,"column":62}}},{"type":"Identifier","name":"table","loc":{"start":{"line":615,"column":64},"end":{"line":615,"column":69}}}],"loc":{"start":{"line":615,"column":53},"end":{"line":615,"column":70}}}],"loc":{"start":{"line":615,"column":43},"end":{"line":615,"column":71}}},"loc":{"start":{"line":615,"column":43},"end":{"line":615,"column":72}}},"loc":{"start":{"line":615,"column":2},"end":{"line":615,"column":72}}}],"loc":{"start":{"line":614,"column":38},"end":{"line":616,"column":2}}},"alternate":{"type":"BlockStatement","body":[{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"keys","loc":{"start":{"line":617,"column":6},"end":{"line":617,"column":10}}},"init":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"Object","loc":{"start":{"line":617,"column":13},"end":{"line":617,"column":19}}},"property":{"type":"Identifier","name":"keys","loc":{"start":{"line":617,"column":20},"end":{"line":617,"column":24}}},"loc":{"start":{"line":617,"column":13},"end":{"line":617,"column":24}}},"arguments":[{"type":"Identifier","name":"table","loc":{"start":{"line":617,"column":25},"end":{"line":617,"column":30}}}],"loc":{"start":{"line":617,"column":13},"end":{"line":617,"column":31}}},"loc":{"start":{"line":617,"column":6},"end":{"line":617,"column":31}}}],"kind":"var","loc":{"start":{"line":617,"column":2},"end":{"line":617,"column":32}}},{"type":"ForInStatement","left":{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"idx","loc":{"start":{"line":618,"column":12},"end":{"line":618,"column":15}}},"init":null,"loc":{"start":{"line":618,"column":12},"end":{"line":618,"column":15}}}],"kind":"var","loc":{"start":{"line":618,"column":8},"end":{"line":618,"column":15}}},"right":{"type":"Identifier","name":"keys","loc":{"start":{"line":618,"column":19},"end":{"line":618,"column":23}}},"body":{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"list","loc":{"start":{"line":618,"column":26},"end":{"line":618,"column":30}}},"property":{"type":"Identifier","name":"push","loc":{"start":{"line":618,"column":31},"end":{"line":618,"column":35}}},"loc":{"start":{"line":618,"column":26},"end":{"line":618,"column":35}}},"arguments":[{"type":"ArrayExpression","elements":[{"type":"MemberExpression","computed":true,"object":{"type":"Identifier","name":"keys","loc":{"start":{"line":618,"column":37},"end":{"line":618,"column":41}}},"property":{"type":"Identifier","name":"idx","loc":{"start":{"line":618,"column":42},"end":{"line":618,"column":45}}},"loc":{"start":{"line":618,"column":37},"end":{"line":618,"column":46}}},{"type":"MemberExpression","computed":true,"object":{"type":"Identifier","name":"keys","loc":{"start":{"line":618,"column":48},"end":{"line":618,"column":52}}},"property":{"type":"Identifier","name":"idx","loc":{"start":{"line":618,"column":53},"end":{"line":618,"column":56}}},"loc":{"start":{"line":618,"column":48},"end":{"line":618,"column":57}}},{"type":"Identifier","name":"table","loc":{"start":{"line":618,"column":59},"end":{"line":618,"column":64}}}],"loc":{"start":{"line":618,"column":36},"end":{"line":618,"column":65}}}],"loc":{"start":{"line":618,"column":26},"end":{"line":618,"column":66}}},"loc":{"start":{"line":618,"column":26},"end":{"line":618,"column":67}}},"each":false,"loc":{"start":{"line":618,"column":2},"end":{"line":618,"column":67}}}],"loc":{"start":{"line":616,"column":8},"end":{"line":619,"column":2}}},"loc":{"start":{"line":614,"column":8},"end":{"line":619,"column":2}}},"loc":{"start":{"line":611,"column":1},"end":{"line":619,"column":2}}},{"type":"ReturnStatement","argument":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"__lua","loc":{"start":{"line":621,"column":8},"end":{"line":621,"column":13}}},"property":{"type":"Identifier","name":"makeMultiReturn","loc":{"start":{"line":621,"column":14},"end":{"line":621,"column":29}}},"loc":{"start":{"line":621,"column":8},"end":{"line":621,"column":29}}},"arguments":[{"type":"FunctionExpression","id":null,"params":[{"type":"Identifier","name":"handle","loc":{"start":{"line":621,"column":39},"end":{"line":621,"column":45}}},{"type":"Identifier","name":"cur","loc":{"start":{"line":621,"column":47},"end":{"line":621,"column":50}}}],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"<","left":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"handle","loc":{"start":{"line":622,"column":7},"end":{"line":622,"column":13}}},"property":{"type":"Identifier","name":"length","loc":{"start":{"line":622,"column":14},"end":{"line":622,"column":20}}},"loc":{"start":{"line":622,"column":7},"end":{"line":622,"column":20}}},"right":{"type":"Literal","value":1,"raw":"1","loc":{"start":{"line":622,"column":23},"end":{"line":622,"column":24}}},"loc":{"start":{"line":622,"column":7},"end":{"line":622,"column":24}}},"consequent":{"type":"ReturnStatement","argument":{"type":"Literal","value":null,"raw":"null","loc":{"start":{"line":622,"column":34},"end":{"line":622,"column":38}}},"loc":{"start":{"line":622,"column":27},"end":{"line":622,"column":39}}},"alternate":null,"loc":{"start":{"line":622,"column":2},"end":{"line":622,"column":39}}},{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"nfo","loc":{"start":{"line":623,"column":6},"end":{"line":623,"column":9}}},"init":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"handle","loc":{"start":{"line":623,"column":12},"end":{"line":623,"column":18}}},"property":{"type":"Identifier","name":"shift","loc":{"start":{"line":623,"column":19},"end":{"line":623,"column":24}}},"loc":{"start":{"line":623,"column":12},"end":{"line":623,"column":24}}},"arguments":[],"loc":{"start":{"line":623,"column":12},"end":{"line":623,"column":26}}},"loc":{"start":{"line":623,"column":6},"end":{"line":623,"column":26}}}],"kind":"var","loc":{"start":{"line":623,"column":2},"end":{"line":623,"column":27}}},{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"k","loc":{"start":{"line":624,"column":6},"end":{"line":624,"column":7}}},"init":{"type":"MemberExpression","computed":true,"object":{"type":"Identifier","name":"nfo","loc":{"start":{"line":624,"column":10},"end":{"line":624,"column":13}}},"property":{"type":"Literal","value":0,"raw":"0","loc":{"start":{"line":624,"column":14},"end":{"line":624,"column":15}}},"loc":{"start":{"line":624,"column":10},"end":{"line":624,"column":16}}},"loc":{"start":{"line":624,"column":6},"end":{"line":624,"column":16}}}],"kind":"var","loc":{"start":{"line":624,"column":2},"end":{"line":624,"column":17}}},{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"v","loc":{"start":{"line":625,"column":6},"end":{"line":625,"column":7}}},"init":{"type":"MemberExpression","computed":true,"object":{"type":"MemberExpression","computed":true,"object":{"type":"Identifier","name":"nfo","loc":{"start":{"line":625,"column":10},"end":{"line":625,"column":13}}},"property":{"type":"Literal","value":2,"raw":"2","loc":{"start":{"line":625,"column":14},"end":{"line":625,"column":15}}},"loc":{"start":{"line":625,"column":10},"end":{"line":625,"column":16}}},"property":{"type":"MemberExpression","computed":true,"object":{"type":"Identifier","name":"nfo","loc":{"start":{"line":625,"column":17},"end":{"line":625,"column":20}}},"property":{"type":"Literal","value":1,"raw":"1","loc":{"start":{"line":625,"column":21},"end":{"line":625,"column":22}}},"loc":{"start":{"line":625,"column":17},"end":{"line":625,"column":23}}},"loc":{"start":{"line":625,"column":10},"end":{"line":625,"column":24}}},"loc":{"start":{"line":625,"column":6},"end":{"line":625,"column":24}}}],"kind":"var","loc":{"start":{"line":625,"column":2},"end":{"line":625,"column":25}}},{"type":"ReturnStatement","argument":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"__lua","loc":{"start":{"line":626,"column":9},"end":{"line":626,"column":14}}},"property":{"type":"Identifier","name":"makeMultiReturn","loc":{"start":{"line":626,"column":15},"end":{"line":626,"column":30}}},"loc":{"start":{"line":626,"column":9},"end":{"line":626,"column":30}}},"arguments":[{"type":"Identifier","name":"k","loc":{"start":{"line":626,"column":31},"end":{"line":626,"column":32}}},{"type":"Identifier","name":"v","loc":{"start":{"line":626,"column":33},"end":{"line":626,"column":34}}}],"loc":{"start":{"line":626,"column":9},"end":{"line":626,"column":35}}},"loc":{"start":{"line":626,"column":2},"end":{"line":626,"column":36}}}],"loc":{"start":{"line":621,"column":52},"end":{"line":627,"column":2}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":621,"column":30},"end":{"line":627,"column":2}}},{"type":"Identifier","name":"list","loc":{"start":{"line":627,"column":4},"end":{"line":627,"column":8}}},{"type":"Literal","value":null,"raw":"null","loc":{"start":{"line":627,"column":10},"end":{"line":627,"column":14}}}],"loc":{"start":{"line":621,"column":8},"end":{"line":627,"column":15}}},"loc":{"start":{"line":621,"column":1},"end":{"line":627,"column":16}}}],"loc":{"start":{"line":605,"column":34},"end":{"line":628,"column":1}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":605,"column":12},"end":{"line":628,"column":1}}},"loc":{"start":{"line":605,"column":0},"end":{"line":628,"column":1}}},"loc":{"start":{"line":605,"column":0},"end":{"line":628,"column":2}}},{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"env","loc":{"start":{"line":630,"column":0},"end":{"line":630,"column":3}}},"property":{"type":"Identifier","name":"ipairs","loc":{"start":{"line":630,"column":4},"end":{"line":630,"column":10}}},"loc":{"start":{"line":630,"column":0},"end":{"line":630,"column":10}}},"right":{"type":"FunctionExpression","id":{"type":"Identifier","name":"ipairs","loc":{"start":{"line":630,"column":22},"end":{"line":630,"column":28}}},"params":[{"type":"Identifier","name":"table","loc":{"start":{"line":630,"column":29},"end":{"line":630,"column":34}}}],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"mtf","loc":{"start":{"line":632,"column":5},"end":{"line":632,"column":8}}},"init":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"__lua","loc":{"start":{"line":632,"column":11},"end":{"line":632,"column":16}}},"property":{"type":"Identifier","name":"lookupMetaTable","loc":{"start":{"line":632,"column":17},"end":{"line":632,"column":32}}},"loc":{"start":{"line":632,"column":11},"end":{"line":632,"column":32}}},"arguments":[{"type":"Identifier","name":"table","loc":{"start":{"line":632,"column":33},"end":{"line":632,"column":38}}},{"type":"Literal","value":"__ipairs","raw":"\"__ipairs\"","loc":{"start":{"line":632,"column":40},"end":{"line":632,"column":50}}}],"loc":{"start":{"line":632,"column":11},"end":{"line":632,"column":51}}},"loc":{"start":{"line":632,"column":5},"end":{"line":632,"column":51}}}],"kind":"var","loc":{"start":{"line":632,"column":1},"end":{"line":632,"column":52}}},{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"!==","left":{"type":"Identifier","name":"mtf","loc":{"start":{"line":633,"column":6},"end":{"line":633,"column":9}}},"right":{"type":"Literal","value":null,"raw":"null","loc":{"start":{"line":633,"column":14},"end":{"line":633,"column":18}}},"loc":{"start":{"line":633,"column":6},"end":{"line":633,"column":18}}},"consequent":{"type":"ReturnStatement","argument":{"type":"CallExpression","callee":{"type":"Identifier","name":"mtf","loc":{"start":{"line":633,"column":28},"end":{"line":633,"column":31}}},"arguments":[{"type":"Identifier","name":"table","loc":{"start":{"line":633,"column":32},"end":{"line":633,"column":37}}}],"loc":{"start":{"line":633,"column":28},"end":{"line":633,"column":38}}},"loc":{"start":{"line":633,"column":21},"end":{"line":633,"column":39}}},"alternate":null,"loc":{"start":{"line":633,"column":1},"end":{"line":633,"column":39}}},{"type":"ReturnStatement","argument":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"__lua","loc":{"start":{"line":635,"column":8},"end":{"line":635,"column":13}}},"property":{"type":"Identifier","name":"makeMultiReturn","loc":{"start":{"line":635,"column":14},"end":{"line":635,"column":29}}},"loc":{"start":{"line":635,"column":8},"end":{"line":635,"column":29}}},"arguments":[{"type":"FunctionExpression","id":{"type":"Identifier","name":"ipairsitr","loc":{"start":{"line":635,"column":39},"end":{"line":635,"column":48}}},"params":[{"type":"Identifier","name":"table","loc":{"start":{"line":635,"column":49},"end":{"line":635,"column":54}}},{"type":"Identifier","name":"cur","loc":{"start":{"line":635,"column":56},"end":{"line":635,"column":59}}}],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"Identifier","name":"cur","loc":{"start":{"line":636,"column":2},"end":{"line":636,"column":5}}},"right":{"type":"BinaryExpression","operator":"+","left":{"type":"Identifier","name":"cur","loc":{"start":{"line":636,"column":8},"end":{"line":636,"column":11}}},"right":{"type":"Literal","value":1,"raw":"1","loc":{"start":{"line":636,"column":14},"end":{"line":636,"column":15}}},"loc":{"start":{"line":636,"column":8},"end":{"line":636,"column":15}}},"loc":{"start":{"line":636,"column":2},"end":{"line":636,"column":15}}},"loc":{"start":{"line":636,"column":2},"end":{"line":636,"column":16}}},{"type":"IfStatement","test":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"__lua","loc":{"start":{"line":637,"column":7},"end":{"line":637,"column":12}}},"property":{"type":"Identifier","name":"isJSArray","loc":{"start":{"line":637,"column":13},"end":{"line":637,"column":22}}},"loc":{"start":{"line":637,"column":7},"end":{"line":637,"column":22}}},"arguments":[{"type":"Identifier","name":"table","loc":{"start":{"line":637,"column":23},"end":{"line":637,"column":28}}}],"loc":{"start":{"line":637,"column":7},"end":{"line":637,"column":29}}},"consequent":{"type":"BlockStatement","body":[{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"<","left":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"table","loc":{"start":{"line":638,"column":8},"end":{"line":638,"column":13}}},"property":{"type":"Identifier","name":"length","loc":{"start":{"line":638,"column":14},"end":{"line":638,"column":20}}},"loc":{"start":{"line":638,"column":8},"end":{"line":638,"column":20}}},"right":{"type":"Identifier","name":"cur","loc":{"start":{"line":638,"column":23},"end":{"line":638,"column":26}}},"loc":{"start":{"line":638,"column":8},"end":{"line":638,"column":26}}},"consequent":{"type":"ReturnStatement","argument":{"type":"Literal","value":null,"raw":"null","loc":{"start":{"line":638,"column":36},"end":{"line":638,"column":40}}},"loc":{"start":{"line":638,"column":29},"end":{"line":638,"column":41}}},"alternate":null,"loc":{"start":{"line":638,"column":3},"end":{"line":638,"column":41}}},{"type":"ReturnStatement","argument":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"__lua","loc":{"start":{"line":639,"column":10},"end":{"line":639,"column":15}}},"property":{"type":"Identifier","name":"makeMultiReturn","loc":{"start":{"line":639,"column":16},"end":{"line":639,"column":31}}},"loc":{"start":{"line":639,"column":10},"end":{"line":639,"column":31}}},"arguments":[{"type":"Identifier","name":"cur","loc":{"start":{"line":639,"column":32},"end":{"line":639,"column":35}}},{"type":"MemberExpression","computed":true,"object":{"type":"Identifier","name":"table","loc":{"start":{"line":639,"column":37},"end":{"line":639,"column":42}}},"property":{"type":"BinaryExpression","operator":"-","left":{"type":"Identifier","name":"cur","loc":{"start":{"line":639,"column":43},"end":{"line":639,"column":46}}},"right":{"type":"Literal","value":1,"raw":"1","loc":{"start":{"line":639,"column":47},"end":{"line":639,"column":48}}},"loc":{"start":{"line":639,"column":43},"end":{"line":639,"column":48}}},"loc":{"start":{"line":639,"column":37},"end":{"line":639,"column":49}}}],"loc":{"start":{"line":639,"column":10},"end":{"line":639,"column":50}}},"loc":{"start":{"line":639,"column":3},"end":{"line":639,"column":51}}}],"loc":{"start":{"line":637,"column":32},"end":{"line":640,"column":3}}},"alternate":{"type":"IfStatement","test":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"__lua","loc":{"start":{"line":640,"column":14},"end":{"line":640,"column":19}}},"property":{"type":"Identifier","name":"isTable","loc":{"start":{"line":640,"column":20},"end":{"line":640,"column":27}}},"loc":{"start":{"line":640,"column":14},"end":{"line":640,"column":27}}},"arguments":[{"type":"Identifier","name":"table","loc":{"start":{"line":640,"column":28},"end":{"line":640,"column":33}}}],"loc":{"start":{"line":640,"column":14},"end":{"line":640,"column":34}}},"consequent":{"type":"BlockStatement","body":[{"type":"IfStatement","test":{"type":"LogicalExpression","operator":"||","left":{"type":"BinaryExpression","operator":"===","left":{"type":"MemberExpression","computed":true,"object":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"table","loc":{"start":{"line":641,"column":8},"end":{"line":641,"column":13}}},"property":{"type":"Identifier","name":"numeric","loc":{"start":{"line":641,"column":14},"end":{"line":641,"column":21}}},"loc":{"start":{"line":641,"column":8},"end":{"line":641,"column":21}}},"property":{"type":"BinaryExpression","operator":"-","left":{"type":"Identifier","name":"cur","loc":{"start":{"line":641,"column":22},"end":{"line":641,"column":25}}},"right":{"type":"Literal","value":1,"raw":"1","loc":{"start":{"line":641,"column":26},"end":{"line":641,"column":27}}},"loc":{"start":{"line":641,"column":22},"end":{"line":641,"column":27}}},"loc":{"start":{"line":641,"column":8},"end":{"line":641,"column":28}}},"right":{"type":"Literal","value":null,"raw":"null","loc":{"start":{"line":641,"column":33},"end":{"line":641,"column":37}}},"loc":{"start":{"line":641,"column":8},"end":{"line":641,"column":37}}},"right":{"type":"BinaryExpression","operator":"===","left":{"type":"MemberExpression","computed":true,"object":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"table","loc":{"start":{"line":641,"column":41},"end":{"line":641,"column":46}}},"property":{"type":"Identifier","name":"numeric","loc":{"start":{"line":641,"column":47},"end":{"line":641,"column":54}}},"loc":{"start":{"line":641,"column":41},"end":{"line":641,"column":54}}},"property":{"type":"BinaryExpression","operator":"-","left":{"type":"Identifier","name":"cur","loc":{"start":{"line":641,"column":55},"end":{"line":641,"column":58}}},"right":{"type":"Literal","value":1,"raw":"1","loc":{"start":{"line":641,"column":59},"end":{"line":641,"column":60}}},"loc":{"start":{"line":641,"column":55},"end":{"line":641,"column":60}}},"loc":{"start":{"line":641,"column":41},"end":{"line":641,"column":61}}},"right":{"type":"Identifier","name":"undefined","loc":{"start":{"line":641,"column":66},"end":{"line":641,"column":75}}},"loc":{"start":{"line":641,"column":41},"end":{"line":641,"column":75}}},"loc":{"start":{"line":641,"column":8},"end":{"line":641,"column":75}}},"consequent":{"type":"ReturnStatement","argument":{"type":"Literal","value":null,"raw":"null","loc":{"start":{"line":641,"column":85},"end":{"line":641,"column":89}}},"loc":{"start":{"line":641,"column":78},"end":{"line":641,"column":90}}},"alternate":null,"loc":{"start":{"line":641,"column":3},"end":{"line":641,"column":90}}},{"type":"ReturnStatement","argument":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"__lua","loc":{"start":{"line":642,"column":10},"end":{"line":642,"column":15}}},"property":{"type":"Identifier","name":"makeMultiReturn","loc":{"start":{"line":642,"column":16},"end":{"line":642,"column":31}}},"loc":{"start":{"line":642,"column":10},"end":{"line":642,"column":31}}},"arguments":[{"type":"Identifier","name":"cur","loc":{"start":{"line":642,"column":32},"end":{"line":642,"column":35}}},{"type":"MemberExpression","computed":true,"object":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"table","loc":{"start":{"line":642,"column":37},"end":{"line":642,"column":42}}},"property":{"type":"Identifier","name":"numeric","loc":{"start":{"line":642,"column":43},"end":{"line":642,"column":50}}},"loc":{"start":{"line":642,"column":37},"end":{"line":642,"column":50}}},"property":{"type":"BinaryExpression","operator":"-","left":{"type":"Identifier","name":"cur","loc":{"start":{"line":642,"column":51},"end":{"line":642,"column":54}}},"right":{"type":"Literal","value":1,"raw":"1","loc":{"start":{"line":642,"column":55},"end":{"line":642,"column":56}}},"loc":{"start":{"line":642,"column":51},"end":{"line":642,"column":56}}},"loc":{"start":{"line":642,"column":37},"end":{"line":642,"column":57}}}],"loc":{"start":{"line":642,"column":10},"end":{"line":642,"column":58}}},"loc":{"start":{"line":642,"column":3},"end":{"line":642,"column":59}}}],"loc":{"start":{"line":640,"column":37},"end":{"line":643,"column":3}}},"alternate":{"type":"BlockStatement","body":[{"type":"ReturnStatement","argument":{"type":"MemberExpression","computed":true,"object":{"type":"Identifier","name":"table","loc":{"start":{"line":644,"column":10},"end":{"line":644,"column":15}}},"property":{"type":"BinaryExpression","operator":"-","left":{"type":"Identifier","name":"cur","loc":{"start":{"line":644,"column":16},"end":{"line":644,"column":19}}},"right":{"type":"Literal","value":1,"raw":"1","loc":{"start":{"line":644,"column":20},"end":{"line":644,"column":21}}},"loc":{"start":{"line":644,"column":16},"end":{"line":644,"column":21}}},"loc":{"start":{"line":644,"column":10},"end":{"line":644,"column":22}}},"loc":{"start":{"line":644,"column":3},"end":{"line":644,"column":23}}}],"loc":{"start":{"line":643,"column":9},"end":{"line":645,"column":3}}},"loc":{"start":{"line":640,"column":9},"end":{"line":645,"column":3}}},"loc":{"start":{"line":637,"column":2},"end":{"line":645,"column":3}}}],"loc":{"start":{"line":635,"column":61},"end":{"line":646,"column":2}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":635,"column":30},"end":{"line":646,"column":2}}},{"type":"Identifier","name":"table","loc":{"start":{"line":646,"column":4},"end":{"line":646,"column":9}}},{"type":"Literal","value":0,"raw":"0","loc":{"start":{"line":646,"column":11},"end":{"line":646,"column":12}}}],"loc":{"start":{"line":635,"column":8},"end":{"line":646,"column":13}}},"loc":{"start":{"line":635,"column":1},"end":{"line":646,"column":14}}}],"loc":{"start":{"line":630,"column":36},"end":{"line":647,"column":1}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":630,"column":13},"end":{"line":647,"column":1}}},"loc":{"start":{"line":630,"column":0},"end":{"line":647,"column":1}}},"loc":{"start":{"line":630,"column":0},"end":{"line":647,"column":2}}},{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"env","loc":{"start":{"line":649,"column":0},"end":{"line":649,"column":3}}},"property":{"type":"Identifier","name":"next","loc":{"start":{"line":649,"column":4},"end":{"line":649,"column":8}}},"loc":{"start":{"line":649,"column":0},"end":{"line":649,"column":8}}},"right":{"type":"FunctionExpression","id":{"type":"Identifier","name":"next","loc":{"start":{"line":649,"column":20},"end":{"line":649,"column":24}}},"params":[{"type":"Identifier","name":"table","loc":{"start":{"line":649,"column":25},"end":{"line":649,"column":30}}},{"type":"Identifier","name":"cur","loc":{"start":{"line":649,"column":32},"end":{"line":649,"column":35}}}],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"IfStatement","test":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"__lua","loc":{"start":{"line":650,"column":6},"end":{"line":650,"column":11}}},"property":{"type":"Identifier","name":"isTable","loc":{"start":{"line":650,"column":12},"end":{"line":650,"column":19}}},"loc":{"start":{"line":650,"column":6},"end":{"line":650,"column":19}}},"arguments":[{"type":"Identifier","name":"table","loc":{"start":{"line":650,"column":20},"end":{"line":650,"column":25}}}],"loc":{"start":{"line":650,"column":6},"end":{"line":650,"column":26}}},"consequent":{"type":"BlockStatement","body":[{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"list","loc":{"start":{"line":651,"column":6},"end":{"line":651,"column":10}}},"init":{"type":"ArrayExpression","elements":[],"loc":{"start":{"line":651,"column":13},"end":{"line":651,"column":15}}},"loc":{"start":{"line":651,"column":6},"end":{"line":651,"column":15}}}],"kind":"var","loc":{"start":{"line":651,"column":2},"end":{"line":651,"column":16}}},{"type":"ForStatement","init":{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"i","loc":{"start":{"line":652,"column":12},"end":{"line":652,"column":13}}},"init":{"type":"Literal","value":0,"raw":"0","loc":{"start":{"line":652,"column":16},"end":{"line":652,"column":17}}},"loc":{"start":{"line":652,"column":12},"end":{"line":652,"column":17}}}],"kind":"var","loc":{"start":{"line":652,"column":8},"end":{"line":652,"column":17}}},"test":{"type":"BinaryExpression","operator":"<","left":{"type":"Identifier","name":"i","loc":{"start":{"line":652,"column":19},"end":{"line":652,"column":20}}},"right":{"type":"MemberExpression","computed":false,"object":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"table","loc":{"start":{"line":652,"column":23},"end":{"line":652,"column":28}}},"property":{"type":"Identifier","name":"numeric","loc":{"start":{"line":652,"column":29},"end":{"line":652,"column":36}}},"loc":{"start":{"line":652,"column":23},"end":{"line":652,"column":36}}},"property":{"type":"Identifier","name":"length","loc":{"start":{"line":652,"column":37},"end":{"line":652,"column":43}}},"loc":{"start":{"line":652,"column":23},"end":{"line":652,"column":43}}},"loc":{"start":{"line":652,"column":19},"end":{"line":652,"column":43}}},"update":{"type":"UpdateExpression","operator":"++","argument":{"type":"Identifier","name":"i","loc":{"start":{"line":652,"column":47},"end":{"line":652,"column":48}}},"prefix":true,"loc":{"start":{"line":652,"column":45},"end":{"line":652,"column":48}}},"body":{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"list","loc":{"start":{"line":652,"column":51},"end":{"line":652,"column":55}}},"property":{"type":"Identifier","name":"push","loc":{"start":{"line":652,"column":56},"end":{"line":652,"column":60}}},"loc":{"start":{"line":652,"column":51},"end":{"line":652,"column":60}}},"arguments":[{"type":"ArrayExpression","elements":[{"type":"BinaryExpression","operator":"+","left":{"type":"Identifier","name":"i","loc":{"start":{"line":652,"column":62},"end":{"line":652,"column":63}}},"right":{"type":"Literal","value":1,"raw":"1","loc":{"start":{"line":652,"column":66},"end":{"line":652,"column":67}}},"loc":{"start":{"line":652,"column":62},"end":{"line":652,"column":67}}},{"type":"MemberExpression","computed":true,"object":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"table","loc":{"start":{"line":652,"column":69},"end":{"line":652,"column":74}}},"property":{"type":"Identifier","name":"numeric","loc":{"start":{"line":652,"column":75},"end":{"line":652,"column":82}}},"loc":{"start":{"line":652,"column":69},"end":{"line":652,"column":82}}},"property":{"type":"Identifier","name":"i","loc":{"start":{"line":652,"column":83},"end":{"line":652,"column":84}}},"loc":{"start":{"line":652,"column":69},"end":{"line":652,"column":85}}}],"loc":{"start":{"line":652,"column":61},"end":{"line":652,"column":86}}}],"loc":{"start":{"line":652,"column":51},"end":{"line":652,"column":87}}},"loc":{"start":{"line":652,"column":51},"end":{"line":652,"column":88}}},"loc":{"start":{"line":652,"column":2},"end":{"line":652,"column":88}}},{"type":"ForInStatement","left":{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"tidx","loc":{"start":{"line":653,"column":12},"end":{"line":653,"column":16}}},"init":null,"loc":{"start":{"line":653,"column":12},"end":{"line":653,"column":16}}}],"kind":"var","loc":{"start":{"line":653,"column":8},"end":{"line":653,"column":16}}},"right":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"table","loc":{"start":{"line":653,"column":20},"end":{"line":653,"column":25}}},"property":{"type":"Identifier","name":"hash","loc":{"start":{"line":653,"column":26},"end":{"line":653,"column":30}}},"loc":{"start":{"line":653,"column":20},"end":{"line":653,"column":30}}},"body":{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"list","loc":{"start":{"line":653,"column":33},"end":{"line":653,"column":37}}},"property":{"type":"Identifier","name":"push","loc":{"start":{"line":653,"column":38},"end":{"line":653,"column":42}}},"loc":{"start":{"line":653,"column":33},"end":{"line":653,"column":42}}},"arguments":[{"type":"ArrayExpression","elements":[{"type":"Identifier","name":"tidx","loc":{"start":{"line":653,"column":44},"end":{"line":653,"column":48}}},{"type":"MemberExpression","computed":true,"object":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"table","loc":{"start":{"line":653,"column":50},"end":{"line":653,"column":55}}},"property":{"type":"Identifier","name":"hash","loc":{"start":{"line":653,"column":56},"end":{"line":653,"column":60}}},"loc":{"start":{"line":653,"column":50},"end":{"line":653,"column":60}}},"property":{"type":"Identifier","name":"tidx","loc":{"start":{"line":653,"column":61},"end":{"line":653,"column":65}}},"loc":{"start":{"line":653,"column":50},"end":{"line":653,"column":66}}}],"loc":{"start":{"line":653,"column":43},"end":{"line":653,"column":67}}}],"loc":{"start":{"line":653,"column":33},"end":{"line":653,"column":68}}},"loc":{"start":{"line":653,"column":33},"end":{"line":653,"column":69}}},"each":false,"loc":{"start":{"line":653,"column":2},"end":{"line":653,"column":69}}},{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"trigger","loc":{"start":{"line":654,"column":6},"end":{"line":654,"column":13}}},"init":{"type":"Literal","value":false,"raw":"false","loc":{"start":{"line":654,"column":16},"end":{"line":654,"column":21}}},"loc":{"start":{"line":654,"column":6},"end":{"line":654,"column":21}}}],"kind":"var","loc":{"start":{"line":654,"column":2},"end":{"line":654,"column":22}}},{"type":"ForStatement","init":{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"i","loc":{"start":{"line":655,"column":12},"end":{"line":655,"column":13}}},"init":{"type":"Literal","value":0,"raw":"0","loc":{"start":{"line":655,"column":16},"end":{"line":655,"column":17}}},"loc":{"start":{"line":655,"column":12},"end":{"line":655,"column":17}}}],"kind":"var","loc":{"start":{"line":655,"column":8},"end":{"line":655,"column":17}}},"test":{"type":"BinaryExpression","operator":"<","left":{"type":"Identifier","name":"i","loc":{"start":{"line":655,"column":19},"end":{"line":655,"column":20}}},"right":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"list","loc":{"start":{"line":655,"column":23},"end":{"line":655,"column":27}}},"property":{"type":"Identifier","name":"length","loc":{"start":{"line":655,"column":28},"end":{"line":655,"column":34}}},"loc":{"start":{"line":655,"column":23},"end":{"line":655,"column":34}}},"loc":{"start":{"line":655,"column":19},"end":{"line":655,"column":34}}},"update":{"type":"UpdateExpression","operator":"++","argument":{"type":"Identifier","name":"i","loc":{"start":{"line":655,"column":38},"end":{"line":655,"column":39}}},"prefix":true,"loc":{"start":{"line":655,"column":36},"end":{"line":655,"column":39}}},"body":{"type":"BlockStatement","body":[{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"itm","loc":{"start":{"line":656,"column":7},"end":{"line":656,"column":10}}},"init":{"type":"MemberExpression","computed":true,"object":{"type":"Identifier","name":"list","loc":{"start":{"line":656,"column":13},"end":{"line":656,"column":17}}},"property":{"type":"Identifier","name":"i","loc":{"start":{"line":656,"column":18},"end":{"line":656,"column":19}}},"loc":{"start":{"line":656,"column":13},"end":{"line":656,"column":20}}},"loc":{"start":{"line":656,"column":7},"end":{"line":656,"column":20}}}],"kind":"var","loc":{"start":{"line":656,"column":3},"end":{"line":656,"column":21}}},{"type":"IfStatement","test":{"type":"LogicalExpression","operator":"||","left":{"type":"LogicalExpression","operator":"||","left":{"type":"BinaryExpression","operator":"===","left":{"type":"Identifier","name":"cur","loc":{"start":{"line":657,"column":8},"end":{"line":657,"column":11}}},"right":{"type":"Literal","value":null,"raw":"null","loc":{"start":{"line":657,"column":16},"end":{"line":657,"column":20}}},"loc":{"start":{"line":657,"column":8},"end":{"line":657,"column":20}}},"right":{"type":"BinaryExpression","operator":"===","left":{"type":"Identifier","name":"cur","loc":{"start":{"line":657,"column":24},"end":{"line":657,"column":27}}},"right":{"type":"Identifier","name":"undefined","loc":{"start":{"line":657,"column":32},"end":{"line":657,"column":41}}},"loc":{"start":{"line":657,"column":24},"end":{"line":657,"column":41}}},"loc":{"start":{"line":657,"column":8},"end":{"line":657,"column":41}}},"right":{"type":"Identifier","name":"trigger","loc":{"start":{"line":657,"column":45},"end":{"line":657,"column":52}}},"loc":{"start":{"line":657,"column":8},"end":{"line":657,"column":52}}},"consequent":{"type":"BlockStatement","body":[{"type":"IfStatement","test":{"type":"LogicalExpression","operator":"&&","left":{"type":"BinaryExpression","operator":"!==","left":{"type":"MemberExpression","computed":true,"object":{"type":"Identifier","name":"itm","loc":{"start":{"line":658,"column":9},"end":{"line":658,"column":12}}},"property":{"type":"Literal","value":1,"raw":"1","loc":{"start":{"line":658,"column":13},"end":{"line":658,"column":14}}},"loc":{"start":{"line":658,"column":9},"end":{"line":658,"column":15}}},"right":{"type":"Identifier","name":"undefined","loc":{"start":{"line":658,"column":20},"end":{"line":658,"column":29}}},"loc":{"start":{"line":658,"column":9},"end":{"line":658,"column":29}}},"right":{"type":"BinaryExpression","operator":"!==","left":{"type":"MemberExpression","computed":true,"object":{"type":"Identifier","name":"itm","loc":{"start":{"line":658,"column":33},"end":{"line":658,"column":36}}},"property":{"type":"Literal","value":1,"raw":"1","loc":{"start":{"line":658,"column":37},"end":{"line":658,"column":38}}},"loc":{"start":{"line":658,"column":33},"end":{"line":658,"column":39}}},"right":{"type":"Literal","value":null,"raw":"null","loc":{"start":{"line":658,"column":44},"end":{"line":658,"column":48}}},"loc":{"start":{"line":658,"column":33},"end":{"line":658,"column":48}}},"loc":{"start":{"line":658,"column":9},"end":{"line":658,"column":48}}},"consequent":{"type":"ReturnStatement","argument":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"__lua","loc":{"start":{"line":659,"column":12},"end":{"line":659,"column":17}}},"property":{"type":"Identifier","name":"makeMultiReturn","loc":{"start":{"line":659,"column":18},"end":{"line":659,"column":33}}},"loc":{"start":{"line":659,"column":12},"end":{"line":659,"column":33}}},"arguments":[{"type":"MemberExpression","computed":true,"object":{"type":"Identifier","name":"itm","loc":{"start":{"line":659,"column":34},"end":{"line":659,"column":37}}},"property":{"type":"Literal","value":0,"raw":"0","loc":{"start":{"line":659,"column":38},"end":{"line":659,"column":39}}},"loc":{"start":{"line":659,"column":34},"end":{"line":659,"column":40}}},{"type":"MemberExpression","computed":true,"object":{"type":"Identifier","name":"itm","loc":{"start":{"line":659,"column":42},"end":{"line":659,"column":45}}},"property":{"type":"Literal","value":1,"raw":"1","loc":{"start":{"line":659,"column":46},"end":{"line":659,"column":47}}},"loc":{"start":{"line":659,"column":42},"end":{"line":659,"column":48}}}],"loc":{"start":{"line":659,"column":12},"end":{"line":659,"column":49}}},"loc":{"start":{"line":659,"column":5},"end":{"line":659,"column":50}}},"alternate":null,"loc":{"start":{"line":658,"column":4},"end":{"line":659,"column":50}}}],"loc":{"start":{"line":657,"column":55},"end":{"line":660,"column":4}}},"alternate":null,"loc":{"start":{"line":657,"column":3},"end":{"line":660,"column":4}}},{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"===","left":{"type":"Identifier","name":"cur","loc":{"start":{"line":661,"column":8},"end":{"line":661,"column":11}}},"right":{"type":"MemberExpression","computed":true,"object":{"type":"Identifier","name":"itm","loc":{"start":{"line":661,"column":16},"end":{"line":661,"column":19}}},"property":{"type":"Literal","value":0,"raw":"0","loc":{"start":{"line":661,"column":20},"end":{"line":661,"column":21}}},"loc":{"start":{"line":661,"column":16},"end":{"line":661,"column":22}}},"loc":{"start":{"line":661,"column":8},"end":{"line":661,"column":22}}},"consequent":{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"Identifier","name":"trigger","loc":{"start":{"line":661,"column":25},"end":{"line":661,"column":32}}},"right":{"type":"Literal","value":true,"raw":"true","loc":{"start":{"line":661,"column":35},"end":{"line":661,"column":39}}},"loc":{"start":{"line":661,"column":25},"end":{"line":661,"column":39}}},"loc":{"start":{"line":661,"column":25},"end":{"line":661,"column":40}}},"alternate":null,"loc":{"start":{"line":661,"column":3},"end":{"line":661,"column":40}}}],"loc":{"start":{"line":655,"column":42},"end":{"line":662,"column":3}}},"loc":{"start":{"line":655,"column":2},"end":{"line":662,"column":3}}},{"type":"ReturnStatement","argument":{"type":"Literal","value":null,"raw":"null","loc":{"start":{"line":664,"column":9},"end":{"line":664,"column":13}}},"loc":{"start":{"line":664,"column":2},"end":{"line":664,"column":14}}}],"loc":{"start":{"line":650,"column":29},"end":{"line":665,"column":2}}},"alternate":{"type":"BlockStatement","body":[{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"listk","loc":{"start":{"line":666,"column":6},"end":{"line":666,"column":11}}},"init":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"Object","loc":{"start":{"line":666,"column":14},"end":{"line":666,"column":20}}},"property":{"type":"Identifier","name":"keys","loc":{"start":{"line":666,"column":21},"end":{"line":666,"column":25}}},"loc":{"start":{"line":666,"column":14},"end":{"line":666,"column":25}}},"arguments":[{"type":"Identifier","name":"table","loc":{"start":{"line":666,"column":26},"end":{"line":666,"column":31}}}],"loc":{"start":{"line":666,"column":14},"end":{"line":666,"column":32}}},"loc":{"start":{"line":666,"column":6},"end":{"line":666,"column":32}}}],"kind":"var","loc":{"start":{"line":666,"column":2},"end":{"line":666,"column":33}}},{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"trigger","loc":{"start":{"line":667,"column":6},"end":{"line":667,"column":13}}},"init":{"type":"Literal","value":false,"raw":"false","loc":{"start":{"line":667,"column":16},"end":{"line":667,"column":21}}},"loc":{"start":{"line":667,"column":6},"end":{"line":667,"column":21}}}],"kind":"var","loc":{"start":{"line":667,"column":2},"end":{"line":667,"column":22}}},{"type":"ForStatement","init":{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"i","loc":{"start":{"line":668,"column":12},"end":{"line":668,"column":13}}},"init":{"type":"Literal","value":0,"raw":"0","loc":{"start":{"line":668,"column":16},"end":{"line":668,"column":17}}},"loc":{"start":{"line":668,"column":12},"end":{"line":668,"column":17}}}],"kind":"var","loc":{"start":{"line":668,"column":8},"end":{"line":668,"column":17}}},"test":{"type":"BinaryExpression","operator":"<","left":{"type":"Identifier","name":"i","loc":{"start":{"line":668,"column":19},"end":{"line":668,"column":20}}},"right":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"listk","loc":{"start":{"line":668,"column":23},"end":{"line":668,"column":28}}},"property":{"type":"Identifier","name":"length","loc":{"start":{"line":668,"column":29},"end":{"line":668,"column":35}}},"loc":{"start":{"line":668,"column":23},"end":{"line":668,"column":35}}},"loc":{"start":{"line":668,"column":19},"end":{"line":668,"column":35}}},"update":{"type":"UpdateExpression","operator":"++","argument":{"type":"Identifier","name":"i","loc":{"start":{"line":668,"column":39},"end":{"line":668,"column":40}}},"prefix":true,"loc":{"start":{"line":668,"column":37},"end":{"line":668,"column":40}}},"body":{"type":"BlockStatement","body":[{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"idx","loc":{"start":{"line":669,"column":7},"end":{"line":669,"column":10}}},"init":{"type":"MemberExpression","computed":true,"object":{"type":"Identifier","name":"listk","loc":{"start":{"line":669,"column":13},"end":{"line":669,"column":18}}},"property":{"type":"Identifier","name":"i","loc":{"start":{"line":669,"column":19},"end":{"line":669,"column":20}}},"loc":{"start":{"line":669,"column":13},"end":{"line":669,"column":21}}},"loc":{"start":{"line":669,"column":7},"end":{"line":669,"column":21}}}],"kind":"var","loc":{"start":{"line":669,"column":3},"end":{"line":669,"column":22}}},{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"sidx","loc":{"start":{"line":670,"column":7},"end":{"line":670,"column":11}}},"init":{"type":"Identifier","name":"idx","loc":{"start":{"line":670,"column":14},"end":{"line":670,"column":17}}},"loc":{"start":{"line":670,"column":7},"end":{"line":670,"column":17}}}],"kind":"var","loc":{"start":{"line":670,"column":3},"end":{"line":670,"column":18}}},{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"==","left":{"type":"UnaryExpression","operator":"typeof","argument":{"type":"Identifier","name":"sidx","loc":{"start":{"line":671,"column":15},"end":{"line":671,"column":19}}},"prefix":true,"loc":{"start":{"line":671,"column":8},"end":{"line":671,"column":19}}},"right":{"type":"Literal","value":"number","raw":"\"number\"","loc":{"start":{"line":671,"column":23},"end":{"line":671,"column":31}}},"loc":{"start":{"line":671,"column":8},"end":{"line":671,"column":31}}},"consequent":{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"Identifier","name":"sidx","loc":{"start":{"line":671,"column":34},"end":{"line":671,"column":38}}},"right":{"type":"AssignmentExpression","operator":"=","left":{"type":"Identifier","name":"sidx","loc":{"start":{"line":671,"column":41},"end":{"line":671,"column":45}}},"right":{"type":"Literal","value":1,"raw":"1","loc":{"start":{"line":671,"column":48},"end":{"line":671,"column":49}}},"loc":{"start":{"line":671,"column":41},"end":{"line":671,"column":49}}},"loc":{"start":{"line":671,"column":34},"end":{"line":671,"column":49}}},"loc":{"start":{"line":671,"column":34},"end":{"line":671,"column":50}}},"alternate":null,"loc":{"start":{"line":671,"column":3},"end":{"line":671,"column":50}}},{"type":"IfStatement","test":{"type":"LogicalExpression","operator":"||","left":{"type":"LogicalExpression","operator":"||","left":{"type":"BinaryExpression","operator":"===","left":{"type":"Identifier","name":"cur","loc":{"start":{"line":672,"column":8},"end":{"line":672,"column":11}}},"right":{"type":"Literal","value":null,"raw":"null","loc":{"start":{"line":672,"column":16},"end":{"line":672,"column":20}}},"loc":{"start":{"line":672,"column":8},"end":{"line":672,"column":20}}},"right":{"type":"BinaryExpression","operator":"===","left":{"type":"Identifier","name":"cur","loc":{"start":{"line":672,"column":24},"end":{"line":672,"column":27}}},"right":{"type":"Identifier","name":"undefined","loc":{"start":{"line":672,"column":32},"end":{"line":672,"column":41}}},"loc":{"start":{"line":672,"column":24},"end":{"line":672,"column":41}}},"loc":{"start":{"line":672,"column":8},"end":{"line":672,"column":41}}},"right":{"type":"Identifier","name":"trigger","loc":{"start":{"line":672,"column":45},"end":{"line":672,"column":52}}},"loc":{"start":{"line":672,"column":8},"end":{"line":672,"column":52}}},"consequent":{"type":"ReturnStatement","argument":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"__lua","loc":{"start":{"line":672,"column":62},"end":{"line":672,"column":67}}},"property":{"type":"Identifier","name":"makeMultiReturn","loc":{"start":{"line":672,"column":68},"end":{"line":672,"column":83}}},"loc":{"start":{"line":672,"column":62},"end":{"line":672,"column":83}}},"arguments":[{"type":"Identifier","name":"idx","loc":{"start":{"line":672,"column":84},"end":{"line":672,"column":87}}},{"type":"MemberExpression","computed":true,"object":{"type":"Identifier","name":"table","loc":{"start":{"line":672,"column":89},"end":{"line":672,"column":94}}},"property":{"type":"Identifier","name":"sidx","loc":{"start":{"line":672,"column":95},"end":{"line":672,"column":99}}},"loc":{"start":{"line":672,"column":89},"end":{"line":672,"column":100}}}],"loc":{"start":{"line":672,"column":62},"end":{"line":672,"column":101}}},"loc":{"start":{"line":672,"column":55},"end":{"line":672,"column":102}}},"alternate":null,"loc":{"start":{"line":672,"column":3},"end":{"line":672,"column":102}}},{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"===","left":{"type":"Identifier","name":"cur","loc":{"start":{"line":673,"column":8},"end":{"line":673,"column":11}}},"right":{"type":"Identifier","name":"idx","loc":{"start":{"line":673,"column":16},"end":{"line":673,"column":19}}},"loc":{"start":{"line":673,"column":8},"end":{"line":673,"column":19}}},"consequent":{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"Identifier","name":"trigger","loc":{"start":{"line":673,"column":22},"end":{"line":673,"column":29}}},"right":{"type":"Literal","value":true,"raw":"true","loc":{"start":{"line":673,"column":32},"end":{"line":673,"column":36}}},"loc":{"start":{"line":673,"column":22},"end":{"line":673,"column":36}}},"loc":{"start":{"line":673,"column":22},"end":{"line":673,"column":37}}},"alternate":null,"loc":{"start":{"line":673,"column":3},"end":{"line":673,"column":37}}}],"loc":{"start":{"line":668,"column":43},"end":{"line":674,"column":3}}},"loc":{"start":{"line":668,"column":2},"end":{"line":674,"column":3}}},{"type":"ReturnStatement","argument":{"type":"Literal","value":null,"raw":"null","loc":{"start":{"line":675,"column":9},"end":{"line":675,"column":13}}},"loc":{"start":{"line":675,"column":2},"end":{"line":675,"column":14}}}],"loc":{"start":{"line":665,"column":8},"end":{"line":676,"column":2}}},"loc":{"start":{"line":650,"column":1},"end":{"line":676,"column":2}}}],"loc":{"start":{"line":649,"column":37},"end":{"line":677,"column":1}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":649,"column":11},"end":{"line":677,"column":1}}},"loc":{"start":{"line":649,"column":0},"end":{"line":677,"column":1}}},"loc":{"start":{"line":649,"column":0},"end":{"line":677,"column":2}}},{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"env","loc":{"start":{"line":679,"column":0},"end":{"line":679,"column":3}}},"property":{"type":"Identifier","name":"print","loc":{"start":{"line":679,"column":4},"end":{"line":679,"column":9}}},"loc":{"start":{"line":679,"column":0},"end":{"line":679,"column":9}}},"right":{"type":"FunctionExpression","id":{"type":"Identifier","name":"print","loc":{"start":{"line":679,"column":21},"end":{"line":679,"column":26}}},"params":[],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"console","loc":{"start":{"line":679,"column":31},"end":{"line":679,"column":38}}},"property":{"type":"Identifier","name":"log","loc":{"start":{"line":679,"column":39},"end":{"line":679,"column":42}}},"loc":{"start":{"line":679,"column":31},"end":{"line":679,"column":42}}},"property":{"type":"Identifier","name":"apply","loc":{"start":{"line":679,"column":43},"end":{"line":679,"column":48}}},"loc":{"start":{"line":679,"column":31},"end":{"line":679,"column":48}}},"arguments":[{"type":"Identifier","name":"console","loc":{"start":{"line":679,"column":49},"end":{"line":679,"column":56}}},{"type":"Identifier","name":"arguments","loc":{"start":{"line":679,"column":58},"end":{"line":679,"column":67}}}],"loc":{"start":{"line":679,"column":31},"end":{"line":679,"column":68}}},"loc":{"start":{"line":679,"column":31},"end":{"line":679,"column":69}}}],"loc":{"start":{"line":679,"column":29},"end":{"line":679,"column":71}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":679,"column":12},"end":{"line":679,"column":71}}},"loc":{"start":{"line":679,"column":0},"end":{"line":679,"column":71}}},"loc":{"start":{"line":679,"column":0},"end":{"line":679,"column":72}}},{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"env","loc":{"start":{"line":680,"column":0},"end":{"line":680,"column":3}}},"property":{"type":"Identifier","name":"pcall","loc":{"start":{"line":680,"column":4},"end":{"line":680,"column":9}}},"loc":{"start":{"line":680,"column":0},"end":{"line":680,"column":9}}},"right":{"type":"MemberExpression","computed":false,"object":{"type":"MemberExpression","computed":false,"object":{"type":"ThisExpression","loc":{"start":{"line":680,"column":12},"end":{"line":680,"column":16}}},"property":{"type":"Identifier","name":"__lua","loc":{"start":{"line":680,"column":17},"end":{"line":680,"column":22}}},"loc":{"start":{"line":680,"column":12},"end":{"line":680,"column":22}}},"property":{"type":"Identifier","name":"pcall","loc":{"start":{"line":680,"column":23},"end":{"line":680,"column":28}}},"loc":{"start":{"line":680,"column":12},"end":{"line":680,"column":28}}},"loc":{"start":{"line":680,"column":0},"end":{"line":680,"column":28}}},"loc":{"start":{"line":680,"column":0},"end":{"line":680,"column":29}}},{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"env","loc":{"start":{"line":682,"column":0},"end":{"line":682,"column":3}}},"property":{"type":"Identifier","name":"rawequals","loc":{"start":{"line":682,"column":4},"end":{"line":682,"column":13}}},"loc":{"start":{"line":682,"column":0},"end":{"line":682,"column":13}}},"right":{"type":"FunctionExpression","id":{"type":"Identifier","name":"rawequals","loc":{"start":{"line":682,"column":25},"end":{"line":682,"column":34}}},"params":[{"type":"Identifier","name":"a","loc":{"start":{"line":682,"column":35},"end":{"line":682,"column":36}}},{"type":"Identifier","name":"b","loc":{"start":{"line":682,"column":37},"end":{"line":682,"column":38}}}],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"ReturnStatement","argument":{"type":"BinaryExpression","operator":"==","left":{"type":"Identifier","name":"a","loc":{"start":{"line":682,"column":49},"end":{"line":682,"column":50}}},"right":{"type":"Identifier","name":"b","loc":{"start":{"line":682,"column":54},"end":{"line":682,"column":55}}},"loc":{"start":{"line":682,"column":49},"end":{"line":682,"column":55}}},"loc":{"start":{"line":682,"column":42},"end":{"line":682,"column":56}}}],"loc":{"start":{"line":682,"column":40},"end":{"line":682,"column":58}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":682,"column":16},"end":{"line":682,"column":58}}},"loc":{"start":{"line":682,"column":0},"end":{"line":682,"column":58}}},"loc":{"start":{"line":682,"column":0},"end":{"line":682,"column":59}}},{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"env","loc":{"start":{"line":683,"column":0},"end":{"line":683,"column":3}}},"property":{"type":"Identifier","name":"rawget","loc":{"start":{"line":683,"column":4},"end":{"line":683,"column":10}}},"loc":{"start":{"line":683,"column":0},"end":{"line":683,"column":10}}},"right":{"type":"FunctionExpression","id":{"type":"Identifier","name":"rawget","loc":{"start":{"line":683,"column":22},"end":{"line":683,"column":28}}},"params":[{"type":"Identifier","name":"table","loc":{"start":{"line":683,"column":29},"end":{"line":683,"column":34}}},{"type":"Identifier","name":"prop","loc":{"start":{"line":683,"column":36},"end":{"line":683,"column":40}}}],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"instanceof","left":{"type":"Identifier","name":"table","loc":{"start":{"line":684,"column":6},"end":{"line":684,"column":11}}},"right":{"type":"Identifier","name":"LuaTable","loc":{"start":{"line":684,"column":23},"end":{"line":684,"column":31}}},"loc":{"start":{"line":684,"column":6},"end":{"line":684,"column":31}}},"consequent":{"type":"BlockStatement","body":[{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"==","left":{"type":"UnaryExpression","operator":"typeof","argument":{"type":"Identifier","name":"prop","loc":{"start":{"line":685,"column":14},"end":{"line":685,"column":18}}},"prefix":true,"loc":{"start":{"line":685,"column":7},"end":{"line":685,"column":18}}},"right":{"type":"Literal","value":"number","raw":"\"number\"","loc":{"start":{"line":685,"column":22},"end":{"line":685,"column":30}}},"loc":{"start":{"line":685,"column":7},"end":{"line":685,"column":30}}},"consequent":{"type":"ReturnStatement","argument":{"type":"MemberExpression","computed":true,"object":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"table","loc":{"start":{"line":685,"column":40},"end":{"line":685,"column":45}}},"property":{"type":"Identifier","name":"numeric","loc":{"start":{"line":685,"column":46},"end":{"line":685,"column":53}}},"loc":{"start":{"line":685,"column":40},"end":{"line":685,"column":53}}},"property":{"type":"BinaryExpression","operator":"-","left":{"type":"Identifier","name":"prop","loc":{"start":{"line":685,"column":54},"end":{"line":685,"column":58}}},"right":{"type":"Literal","value":1,"raw":"1","loc":{"start":{"line":685,"column":61},"end":{"line":685,"column":62}}},"loc":{"start":{"line":685,"column":54},"end":{"line":685,"column":62}}},"loc":{"start":{"line":685,"column":40},"end":{"line":685,"column":63}}},"loc":{"start":{"line":685,"column":33},"end":{"line":685,"column":64}}},"alternate":{"type":"ReturnStatement","argument":{"type":"MemberExpression","computed":true,"object":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"table","loc":{"start":{"line":686,"column":14},"end":{"line":686,"column":19}}},"property":{"type":"Identifier","name":"hash","loc":{"start":{"line":686,"column":20},"end":{"line":686,"column":24}}},"loc":{"start":{"line":686,"column":14},"end":{"line":686,"column":24}}},"property":{"type":"Identifier","name":"prop","loc":{"start":{"line":686,"column":25},"end":{"line":686,"column":29}}},"loc":{"start":{"line":686,"column":14},"end":{"line":686,"column":30}}},"loc":{"start":{"line":686,"column":7},"end":{"line":686,"column":31}}},"loc":{"start":{"line":685,"column":2},"end":{"line":686,"column":31}}}],"loc":{"start":{"line":684,"column":34},"end":{"line":687,"column":2}}},"alternate":null,"loc":{"start":{"line":684,"column":1},"end":{"line":687,"column":2}}},{"type":"ReturnStatement","argument":{"type":"MemberExpression","computed":true,"object":{"type":"Identifier","name":"table","loc":{"start":{"line":688,"column":8},"end":{"line":688,"column":13}}},"property":{"type":"Identifier","name":"prop","loc":{"start":{"line":688,"column":14},"end":{"line":688,"column":18}}},"loc":{"start":{"line":688,"column":8},"end":{"line":688,"column":19}}},"loc":{"start":{"line":688,"column":1},"end":{"line":688,"column":20}}}],"loc":{"start":{"line":683,"column":42},"end":{"line":689,"column":1}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":683,"column":13},"end":{"line":689,"column":1}}},"loc":{"start":{"line":683,"column":0},"end":{"line":689,"column":1}}},"loc":{"start":{"line":683,"column":0},"end":{"line":689,"column":2}}},{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"env","loc":{"start":{"line":690,"column":0},"end":{"line":690,"column":3}}},"property":{"type":"Identifier","name":"rawset","loc":{"start":{"line":690,"column":4},"end":{"line":690,"column":10}}},"loc":{"start":{"line":690,"column":0},"end":{"line":690,"column":10}}},"right":{"type":"FunctionExpression","id":{"type":"Identifier","name":"rawset","loc":{"start":{"line":690,"column":22},"end":{"line":690,"column":28}}},"params":[{"type":"Identifier","name":"table","loc":{"start":{"line":690,"column":29},"end":{"line":690,"column":34}}},{"type":"Identifier","name":"prop","loc":{"start":{"line":690,"column":36},"end":{"line":690,"column":40}}},{"type":"Identifier","name":"val","loc":{"start":{"line":690,"column":42},"end":{"line":690,"column":45}}}],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"instanceof","left":{"type":"Identifier","name":"table","loc":{"start":{"line":691,"column":6},"end":{"line":691,"column":11}}},"right":{"type":"Identifier","name":"LuaTable","loc":{"start":{"line":691,"column":23},"end":{"line":691,"column":31}}},"loc":{"start":{"line":691,"column":6},"end":{"line":691,"column":31}}},"consequent":{"type":"BlockStatement","body":[{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"==","left":{"type":"UnaryExpression","operator":"typeof","argument":{"type":"Identifier","name":"prop","loc":{"start":{"line":692,"column":14},"end":{"line":692,"column":18}}},"prefix":true,"loc":{"start":{"line":692,"column":7},"end":{"line":692,"column":18}}},"right":{"type":"Literal","value":"number","raw":"\"number\"","loc":{"start":{"line":692,"column":22},"end":{"line":692,"column":30}}},"loc":{"start":{"line":692,"column":7},"end":{"line":692,"column":30}}},"consequent":{"type":"ReturnStatement","argument":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","computed":true,"object":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"table","loc":{"start":{"line":692,"column":40},"end":{"line":692,"column":45}}},"property":{"type":"Identifier","name":"numeric","loc":{"start":{"line":692,"column":46},"end":{"line":692,"column":53}}},"loc":{"start":{"line":692,"column":40},"end":{"line":692,"column":53}}},"property":{"type":"BinaryExpression","operator":"-","left":{"type":"Identifier","name":"prop","loc":{"start":{"line":692,"column":54},"end":{"line":692,"column":58}}},"right":{"type":"Literal","value":1,"raw":"1","loc":{"start":{"line":692,"column":61},"end":{"line":692,"column":62}}},"loc":{"start":{"line":692,"column":54},"end":{"line":692,"column":62}}},"loc":{"start":{"line":692,"column":40},"end":{"line":692,"column":63}}},"right":{"type":"Identifier","name":"val","loc":{"start":{"line":692,"column":66},"end":{"line":692,"column":69}}},"loc":{"start":{"line":692,"column":40},"end":{"line":692,"column":69}}},"loc":{"start":{"line":692,"column":33},"end":{"line":692,"column":70}}},"alternate":{"type":"ReturnStatement","argument":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","computed":true,"object":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"table","loc":{"start":{"line":693,"column":14},"end":{"line":693,"column":19}}},"property":{"type":"Identifier","name":"hash","loc":{"start":{"line":693,"column":20},"end":{"line":693,"column":24}}},"loc":{"start":{"line":693,"column":14},"end":{"line":693,"column":24}}},"property":{"type":"Identifier","name":"prop","loc":{"start":{"line":693,"column":25},"end":{"line":693,"column":29}}},"loc":{"start":{"line":693,"column":14},"end":{"line":693,"column":30}}},"right":{"type":"Identifier","name":"val","loc":{"start":{"line":693,"column":33},"end":{"line":693,"column":36}}},"loc":{"start":{"line":693,"column":14},"end":{"line":693,"column":36}}},"loc":{"start":{"line":693,"column":7},"end":{"line":693,"column":37}}},"loc":{"start":{"line":692,"column":2},"end":{"line":693,"column":37}}}],"loc":{"start":{"line":691,"column":34},"end":{"line":694,"column":2}}},"alternate":null,"loc":{"start":{"line":691,"column":1},"end":{"line":694,"column":2}}},{"type":"ReturnStatement","argument":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","computed":true,"object":{"type":"Identifier","name":"table","loc":{"start":{"line":695,"column":8},"end":{"line":695,"column":13}}},"property":{"type":"Identifier","name":"prop","loc":{"start":{"line":695,"column":14},"end":{"line":695,"column":18}}},"loc":{"start":{"line":695,"column":8},"end":{"line":695,"column":19}}},"right":{"type":"Identifier","name":"val","loc":{"start":{"line":695,"column":22},"end":{"line":695,"column":25}}},"loc":{"start":{"line":695,"column":8},"end":{"line":695,"column":25}}},"loc":{"start":{"line":695,"column":1},"end":{"line":695,"column":26}}}],"loc":{"start":{"line":690,"column":47},"end":{"line":696,"column":1}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":690,"column":13},"end":{"line":696,"column":1}}},"loc":{"start":{"line":690,"column":0},"end":{"line":696,"column":1}}},"loc":{"start":{"line":690,"column":0},"end":{"line":696,"column":2}}},{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"env","loc":{"start":{"line":698,"column":0},"end":{"line":698,"column":3}}},"property":{"type":"Identifier","name":"something","loc":{"start":{"line":698,"column":4},"end":{"line":698,"column":13}}},"loc":{"start":{"line":698,"column":0},"end":{"line":698,"column":13}}},"right":{"type":"FunctionExpression","id":{"type":"Identifier","name":"something","loc":{"start":{"line":698,"column":25},"end":{"line":698,"column":34}}},"params":[{"type":"Identifier","name":"table","loc":{"start":{"line":698,"column":35},"end":{"line":698,"column":40}}}],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"array","loc":{"start":{"line":699,"column":5},"end":{"line":699,"column":10}}},"init":{"type":"ArrayExpression","elements":[],"loc":{"start":{"line":699,"column":13},"end":{"line":699,"column":15}}},"loc":{"start":{"line":699,"column":5},"end":{"line":699,"column":15}}}],"kind":"var","loc":{"start":{"line":699,"column":1},"end":{"line":699,"column":16}}},{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"idx","loc":{"start":{"line":700,"column":5},"end":{"line":700,"column":8}}},"init":{"type":"Literal","value":1,"raw":"1","loc":{"start":{"line":700,"column":11},"end":{"line":700,"column":12}}},"loc":{"start":{"line":700,"column":5},"end":{"line":700,"column":12}}}],"kind":"var","loc":{"start":{"line":700,"column":1},"end":{"line":700,"column":13}}},{"type":"WhileStatement","test":{"type":"BinaryExpression","operator":"!==","left":{"type":"MemberExpression","computed":true,"object":{"type":"Identifier","name":"table","loc":{"start":{"line":701,"column":9},"end":{"line":701,"column":14}}},"property":{"type":"Identifier","name":"idx","loc":{"start":{"line":701,"column":15},"end":{"line":701,"column":18}}},"loc":{"start":{"line":701,"column":9},"end":{"line":701,"column":19}}},"right":{"type":"Identifier","name":"undefined","loc":{"start":{"line":701,"column":24},"end":{"line":701,"column":33}}},"loc":{"start":{"line":701,"column":9},"end":{"line":701,"column":33}}},"body":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"array","loc":{"start":{"line":702,"column":2},"end":{"line":702,"column":7}}},"property":{"type":"Identifier","name":"push","loc":{"start":{"line":702,"column":8},"end":{"line":702,"column":12}}},"loc":{"start":{"line":702,"column":2},"end":{"line":702,"column":12}}},"arguments":[{"type":"MemberExpression","computed":true,"object":{"type":"Identifier","name":"table","loc":{"start":{"line":702,"column":13},"end":{"line":702,"column":18}}},"property":{"type":"Identifier","name":"idx","loc":{"start":{"line":702,"column":19},"end":{"line":702,"column":22}}},"loc":{"start":{"line":702,"column":13},"end":{"line":702,"column":23}}}],"loc":{"start":{"line":702,"column":2},"end":{"line":702,"column":24}}},"loc":{"start":{"line":702,"column":2},"end":{"line":702,"column":25}}},{"type":"ExpressionStatement","expression":{"type":"UpdateExpression","operator":"++","argument":{"type":"Identifier","name":"idx","loc":{"start":{"line":703,"column":4},"end":{"line":703,"column":7}}},"prefix":true,"loc":{"start":{"line":703,"column":2},"end":{"line":703,"column":7}}},"loc":{"start":{"line":703,"column":2},"end":{"line":703,"column":8}}}],"loc":{"start":{"line":701,"column":36},"end":{"line":704,"column":2}}},"loc":{"start":{"line":701,"column":1},"end":{"line":704,"column":2}}},{"type":"ReturnStatement","argument":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"__lua","loc":{"start":{"line":705,"column":8},"end":{"line":705,"column":13}}},"property":{"type":"Identifier","name":"makeMultiReturn","loc":{"start":{"line":705,"column":14},"end":{"line":705,"column":29}}},"loc":{"start":{"line":705,"column":8},"end":{"line":705,"column":29}}},"property":{"type":"Identifier","name":"apply","loc":{"start":{"line":705,"column":30},"end":{"line":705,"column":35}}},"loc":{"start":{"line":705,"column":8},"end":{"line":705,"column":35}}},"arguments":[{"type":"Identifier","name":"__lua","loc":{"start":{"line":705,"column":36},"end":{"line":705,"column":41}}},{"type":"Identifier","name":"array","loc":{"start":{"line":705,"column":43},"end":{"line":705,"column":48}}}],"loc":{"start":{"line":705,"column":8},"end":{"line":705,"column":49}}},"loc":{"start":{"line":705,"column":1},"end":{"line":705,"column":50}}}],"loc":{"start":{"line":698,"column":42},"end":{"line":706,"column":1}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":698,"column":16},"end":{"line":706,"column":1}}},"loc":{"start":{"line":698,"column":0},"end":{"line":706,"column":1}}},"loc":{"start":{"line":698,"column":0},"end":{"line":706,"column":2}}},{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"env","loc":{"start":{"line":707,"column":0},"end":{"line":707,"column":3}}},"property":{"type":"Identifier","name":"math","loc":{"start":{"line":707,"column":4},"end":{"line":707,"column":8}}},"loc":{"start":{"line":707,"column":0},"end":{"line":707,"column":8}}},"right":{"type":"Identifier","name":"Math","loc":{"start":{"line":707,"column":11},"end":{"line":707,"column":15}}},"loc":{"start":{"line":707,"column":0},"end":{"line":707,"column":15}}},"loc":{"start":{"line":707,"column":0},"end":{"line":707,"column":16}}},{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"env","loc":{"start":{"line":709,"column":0},"end":{"line":709,"column":3}}},"property":{"type":"Identifier","name":"setmetatable","loc":{"start":{"line":709,"column":4},"end":{"line":709,"column":16}}},"loc":{"start":{"line":709,"column":0},"end":{"line":709,"column":16}}},"right":{"type":"FunctionExpression","id":{"type":"Identifier","name":"setmetatable","loc":{"start":{"line":709,"column":28},"end":{"line":709,"column":40}}},"params":[{"type":"Identifier","name":"target","loc":{"start":{"line":709,"column":41},"end":{"line":709,"column":47}}},{"type":"Identifier","name":"meta","loc":{"start":{"line":709,"column":49},"end":{"line":709,"column":53}}}],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"Object","loc":{"start":{"line":711,"column":1},"end":{"line":711,"column":7}}},"property":{"type":"Identifier","name":"defineProperty","loc":{"start":{"line":711,"column":8},"end":{"line":711,"column":22}}},"loc":{"start":{"line":711,"column":1},"end":{"line":711,"column":22}}},"arguments":[{"type":"Identifier","name":"target","loc":{"start":{"line":711,"column":23},"end":{"line":711,"column":29}}},{"type":"Literal","value":"__metatable","raw":"\"__metatable\"","loc":{"start":{"line":711,"column":31},"end":{"line":711,"column":44}}},{"type":"ObjectExpression","properties":[{"type":"Property","key":{"type":"Identifier","name":"value","loc":{"start":{"line":711,"column":47},"end":{"line":711,"column":52}}},"value":{"type":"Identifier","name":"meta","loc":{"start":{"line":711,"column":54},"end":{"line":711,"column":58}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":711,"column":47},"end":{"line":711,"column":58}}},{"type":"Property","key":{"type":"Identifier","name":"enumerable","loc":{"start":{"line":711,"column":60},"end":{"line":711,"column":70}}},"value":{"type":"Literal","value":false,"raw":"false","loc":{"start":{"line":711,"column":72},"end":{"line":711,"column":77}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":711,"column":60},"end":{"line":711,"column":77}}},{"type":"Property","key":{"type":"Identifier","name":"configurable","loc":{"start":{"line":711,"column":79},"end":{"line":711,"column":91}}},"value":{"type":"Literal","value":true,"raw":"true","loc":{"start":{"line":711,"column":93},"end":{"line":711,"column":97}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":711,"column":79},"end":{"line":711,"column":97}}}],"loc":{"start":{"line":711,"column":46},"end":{"line":711,"column":99}}}],"loc":{"start":{"line":711,"column":1},"end":{"line":711,"column":100}}},"loc":{"start":{"line":711,"column":1},"end":{"line":711,"column":101}}},{"type":"ReturnStatement","argument":{"type":"Identifier","name":"target","loc":{"start":{"line":712,"column":8},"end":{"line":712,"column":14}}},"loc":{"start":{"line":712,"column":1},"end":{"line":712,"column":15}}}],"loc":{"start":{"line":709,"column":55},"end":{"line":713,"column":1}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":709,"column":19},"end":{"line":713,"column":1}}},"loc":{"start":{"line":709,"column":0},"end":{"line":713,"column":1}}},"loc":{"start":{"line":709,"column":0},"end":{"line":713,"column":2}}},{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"env","loc":{"start":{"line":715,"column":0},"end":{"line":715,"column":3}}},"property":{"type":"Identifier","name":"getmetatable","loc":{"start":{"line":715,"column":4},"end":{"line":715,"column":16}}},"loc":{"start":{"line":715,"column":0},"end":{"line":715,"column":16}}},"right":{"type":"FunctionExpression","id":{"type":"Identifier","name":"getmetatable","loc":{"start":{"line":715,"column":28},"end":{"line":715,"column":40}}},"params":[{"type":"Identifier","name":"taget","loc":{"start":{"line":715,"column":41},"end":{"line":715,"column":46}}},{"type":"Identifier","name":"meta","loc":{"start":{"line":715,"column":48},"end":{"line":715,"column":52}}}],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"ReturnStatement","argument":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"taget","loc":{"start":{"line":716,"column":8},"end":{"line":716,"column":13}}},"property":{"type":"Identifier","name":"__metatable","loc":{"start":{"line":716,"column":14},"end":{"line":716,"column":25}}},"loc":{"start":{"line":716,"column":8},"end":{"line":716,"column":25}}},"loc":{"start":{"line":716,"column":1},"end":{"line":716,"column":26}}}],"loc":{"start":{"line":715,"column":54},"end":{"line":717,"column":1}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":715,"column":19},"end":{"line":717,"column":1}}},"loc":{"start":{"line":715,"column":0},"end":{"line":717,"column":1}}},"loc":{"start":{"line":715,"column":0},"end":{"line":717,"column":2}}},{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"reduce","loc":{"start":{"line":719,"column":4},"end":{"line":719,"column":10}}},"init":{"type":"FunctionExpression","id":{"type":"Identifier","name":"reduce","loc":{"start":{"line":719,"column":22},"end":{"line":719,"column":28}}},"params":[{"type":"Identifier","name":"arr","loc":{"start":{"line":719,"column":29},"end":{"line":719,"column":32}}},{"type":"Identifier","name":"op","loc":{"start":{"line":719,"column":34},"end":{"line":719,"column":36}}}],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"<","left":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"arr","loc":{"start":{"line":720,"column":6},"end":{"line":720,"column":9}}},"property":{"type":"Identifier","name":"length","loc":{"start":{"line":720,"column":10},"end":{"line":720,"column":16}}},"loc":{"start":{"line":720,"column":6},"end":{"line":720,"column":16}}},"right":{"type":"Literal","value":1,"raw":"1","loc":{"start":{"line":720,"column":19},"end":{"line":720,"column":20}}},"loc":{"start":{"line":720,"column":6},"end":{"line":720,"column":20}}},"consequent":{"type":"ReturnStatement","argument":{"type":"Identifier","name":"undefined","loc":{"start":{"line":720,"column":30},"end":{"line":720,"column":39}}},"loc":{"start":{"line":720,"column":23},"end":{"line":720,"column":40}}},"alternate":null,"loc":{"start":{"line":720,"column":1},"end":{"line":720,"column":40}}},{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"val","loc":{"start":{"line":721,"column":5},"end":{"line":721,"column":8}}},"init":{"type":"MemberExpression","computed":true,"object":{"type":"Identifier","name":"arr","loc":{"start":{"line":721,"column":11},"end":{"line":721,"column":14}}},"property":{"type":"Literal","value":0,"raw":"0","loc":{"start":{"line":721,"column":15},"end":{"line":721,"column":16}}},"loc":{"start":{"line":721,"column":11},"end":{"line":721,"column":17}}},"loc":{"start":{"line":721,"column":5},"end":{"line":721,"column":17}}}],"kind":"var","loc":{"start":{"line":721,"column":1},"end":{"line":721,"column":18}}},{"type":"ForStatement","init":{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"i","loc":{"start":{"line":722,"column":11},"end":{"line":722,"column":12}}},"init":{"type":"Literal","value":1,"raw":"1","loc":{"start":{"line":722,"column":15},"end":{"line":722,"column":16}}},"loc":{"start":{"line":722,"column":11},"end":{"line":722,"column":16}}}],"kind":"var","loc":{"start":{"line":722,"column":7},"end":{"line":722,"column":16}}},"test":{"type":"BinaryExpression","operator":"<","left":{"type":"Identifier","name":"i","loc":{"start":{"line":722,"column":18},"end":{"line":722,"column":19}}},"right":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"arr","loc":{"start":{"line":722,"column":22},"end":{"line":722,"column":25}}},"property":{"type":"Identifier","name":"length","loc":{"start":{"line":722,"column":26},"end":{"line":722,"column":32}}},"loc":{"start":{"line":722,"column":22},"end":{"line":722,"column":32}}},"loc":{"start":{"line":722,"column":18},"end":{"line":722,"column":32}}},"update":{"type":"UpdateExpression","operator":"++","argument":{"type":"Identifier","name":"i","loc":{"start":{"line":722,"column":36},"end":{"line":722,"column":37}}},"prefix":true,"loc":{"start":{"line":722,"column":34},"end":{"line":722,"column":37}}},"body":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"Identifier","name":"val","loc":{"start":{"line":723,"column":2},"end":{"line":723,"column":5}}},"right":{"type":"CallExpression","callee":{"type":"Identifier","name":"op","loc":{"start":{"line":723,"column":8},"end":{"line":723,"column":10}}},"arguments":[{"type":"Identifier","name":"val","loc":{"start":{"line":723,"column":11},"end":{"line":723,"column":14}}},{"type":"MemberExpression","computed":true,"object":{"type":"Identifier","name":"arr","loc":{"start":{"line":723,"column":16},"end":{"line":723,"column":19}}},"property":{"type":"Identifier","name":"i","loc":{"start":{"line":723,"column":20},"end":{"line":723,"column":21}}},"loc":{"start":{"line":723,"column":16},"end":{"line":723,"column":22}}}],"loc":{"start":{"line":723,"column":8},"end":{"line":723,"column":23}}},"loc":{"start":{"line":723,"column":2},"end":{"line":723,"column":23}}},"loc":{"start":{"line":723,"column":2},"end":{"line":723,"column":24}}}],"loc":{"start":{"line":722,"column":40},"end":{"line":724,"column":2}}},"loc":{"start":{"line":722,"column":1},"end":{"line":724,"column":2}}},{"type":"ReturnStatement","argument":{"type":"Identifier","name":"val","loc":{"start":{"line":725,"column":8},"end":{"line":725,"column":11}}},"loc":{"start":{"line":725,"column":1},"end":{"line":725,"column":12}}}],"loc":{"start":{"line":719,"column":38},"end":{"line":726,"column":1}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":719,"column":13},"end":{"line":726,"column":1}}},"loc":{"start":{"line":719,"column":4},"end":{"line":726,"column":1}}}],"kind":"var","loc":{"start":{"line":719,"column":0},"end":{"line":726,"column":2}}},{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"env","loc":{"start":{"line":728,"column":0},"end":{"line":728,"column":3}}},"property":{"type":"Identifier","name":"bit32","loc":{"start":{"line":728,"column":4},"end":{"line":728,"column":9}}},"loc":{"start":{"line":728,"column":0},"end":{"line":728,"column":9}}},"right":{"type":"ObjectExpression","properties":[{"type":"Property","key":{"type":"Identifier","name":"band","loc":{"start":{"line":729,"column":1},"end":{"line":729,"column":5}}},"value":{"type":"FunctionExpression","id":{"type":"Identifier","name":"band","loc":{"start":{"line":729,"column":16},"end":{"line":729,"column":20}}},"params":[],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"ReturnStatement","argument":{"type":"CallExpression","callee":{"type":"Identifier","name":"reduce","loc":{"start":{"line":729,"column":32},"end":{"line":729,"column":38}}},"arguments":[{"type":"Identifier","name":"arguments","loc":{"start":{"line":729,"column":39},"end":{"line":729,"column":48}}},{"type":"FunctionExpression","id":null,"params":[{"type":"Identifier","name":"a","loc":{"start":{"line":729,"column":59},"end":{"line":729,"column":60}}},{"type":"Identifier","name":"b","loc":{"start":{"line":729,"column":61},"end":{"line":729,"column":62}}}],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"ReturnStatement","argument":{"type":"BinaryExpression","operator":"&","left":{"type":"Identifier","name":"a","loc":{"start":{"line":729,"column":73},"end":{"line":729,"column":74}}},"right":{"type":"Identifier","name":"b","loc":{"start":{"line":729,"column":77},"end":{"line":729,"column":78}}},"loc":{"start":{"line":729,"column":73},"end":{"line":729,"column":78}}},"loc":{"start":{"line":729,"column":66},"end":{"line":729,"column":79}}}],"loc":{"start":{"line":729,"column":64},"end":{"line":729,"column":81}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":729,"column":50},"end":{"line":729,"column":81}}}],"loc":{"start":{"line":729,"column":32},"end":{"line":729,"column":82}}},"loc":{"start":{"line":729,"column":25},"end":{"line":729,"column":83}}}],"loc":{"start":{"line":729,"column":23},"end":{"line":729,"column":85}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":729,"column":7},"end":{"line":729,"column":85}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":729,"column":1},"end":{"line":729,"column":85}}},{"type":"Property","key":{"type":"Identifier","name":"bor","loc":{"start":{"line":730,"column":1},"end":{"line":730,"column":4}}},"value":{"type":"FunctionExpression","id":{"type":"Identifier","name":"bor","loc":{"start":{"line":730,"column":15},"end":{"line":730,"column":18}}},"params":[],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"ReturnStatement","argument":{"type":"CallExpression","callee":{"type":"Identifier","name":"reduce","loc":{"start":{"line":730,"column":30},"end":{"line":730,"column":36}}},"arguments":[{"type":"Identifier","name":"arguments","loc":{"start":{"line":730,"column":37},"end":{"line":730,"column":46}}},{"type":"FunctionExpression","id":null,"params":[{"type":"Identifier","name":"a","loc":{"start":{"line":730,"column":57},"end":{"line":730,"column":58}}},{"type":"Identifier","name":"b","loc":{"start":{"line":730,"column":59},"end":{"line":730,"column":60}}}],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"ReturnStatement","argument":{"type":"BinaryExpression","operator":"|","left":{"type":"Identifier","name":"a","loc":{"start":{"line":730,"column":71},"end":{"line":730,"column":72}}},"right":{"type":"Identifier","name":"b","loc":{"start":{"line":730,"column":75},"end":{"line":730,"column":76}}},"loc":{"start":{"line":730,"column":71},"end":{"line":730,"column":76}}},"loc":{"start":{"line":730,"column":64},"end":{"line":730,"column":77}}}],"loc":{"start":{"line":730,"column":62},"end":{"line":730,"column":79}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":730,"column":48},"end":{"line":730,"column":79}}}],"loc":{"start":{"line":730,"column":30},"end":{"line":730,"column":80}}},"loc":{"start":{"line":730,"column":23},"end":{"line":730,"column":81}}}],"loc":{"start":{"line":730,"column":21},"end":{"line":730,"column":83}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":730,"column":6},"end":{"line":730,"column":83}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":730,"column":1},"end":{"line":730,"column":83}}},{"type":"Property","key":{"type":"Identifier","name":"bxor","loc":{"start":{"line":731,"column":1},"end":{"line":731,"column":5}}},"value":{"type":"FunctionExpression","id":{"type":"Identifier","name":"bxor","loc":{"start":{"line":731,"column":16},"end":{"line":731,"column":20}}},"params":[],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"ReturnStatement","argument":{"type":"CallExpression","callee":{"type":"Identifier","name":"reduce","loc":{"start":{"line":731,"column":32},"end":{"line":731,"column":38}}},"arguments":[{"type":"Identifier","name":"arguments","loc":{"start":{"line":731,"column":39},"end":{"line":731,"column":48}}},{"type":"FunctionExpression","id":null,"params":[{"type":"Identifier","name":"a","loc":{"start":{"line":731,"column":59},"end":{"line":731,"column":60}}},{"type":"Identifier","name":"b","loc":{"start":{"line":731,"column":61},"end":{"line":731,"column":62}}}],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"ReturnStatement","argument":{"type":"BinaryExpression","operator":"|","left":{"type":"Identifier","name":"a","loc":{"start":{"line":731,"column":73},"end":{"line":731,"column":74}}},"right":{"type":"Identifier","name":"b","loc":{"start":{"line":731,"column":77},"end":{"line":731,"column":78}}},"loc":{"start":{"line":731,"column":73},"end":{"line":731,"column":78}}},"loc":{"start":{"line":731,"column":66},"end":{"line":731,"column":79}}}],"loc":{"start":{"line":731,"column":64},"end":{"line":731,"column":81}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":731,"column":50},"end":{"line":731,"column":81}}}],"loc":{"start":{"line":731,"column":32},"end":{"line":731,"column":82}}},"loc":{"start":{"line":731,"column":25},"end":{"line":731,"column":83}}}],"loc":{"start":{"line":731,"column":23},"end":{"line":731,"column":85}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":731,"column":7},"end":{"line":731,"column":85}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":731,"column":1},"end":{"line":731,"column":85}}},{"type":"Property","key":{"type":"Identifier","name":"rshift","loc":{"start":{"line":733,"column":1},"end":{"line":733,"column":7}}},"value":{"type":"FunctionExpression","id":{"type":"Identifier","name":"rshift","loc":{"start":{"line":733,"column":18},"end":{"line":733,"column":24}}},"params":[{"type":"Identifier","name":"b","loc":{"start":{"line":733,"column":25},"end":{"line":733,"column":26}}},{"type":"Identifier","name":"disp","loc":{"start":{"line":733,"column":28},"end":{"line":733,"column":32}}}],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"ReturnStatement","argument":{"type":"BinaryExpression","operator":">>","left":{"type":"Identifier","name":"b","loc":{"start":{"line":733,"column":43},"end":{"line":733,"column":44}}},"right":{"type":"Identifier","name":"disp","loc":{"start":{"line":733,"column":48},"end":{"line":733,"column":52}}},"loc":{"start":{"line":733,"column":43},"end":{"line":733,"column":52}}},"loc":{"start":{"line":733,"column":36},"end":{"line":733,"column":53}}}],"loc":{"start":{"line":733,"column":34},"end":{"line":733,"column":55}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":733,"column":9},"end":{"line":733,"column":55}}},"kind":"init","method":false,"shorthand":false,"computed":false,"loc":{"start":{"line":733,"column":1},"end":{"line":733,"column":55}}}],"loc":{"start":{"line":728,"column":12},"end":{"line":734,"column":1}}},"loc":{"start":{"line":728,"column":0},"end":{"line":734,"column":1}}},"loc":{"start":{"line":728,"column":0},"end":{"line":734,"column":2}}},{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"env","loc":{"start":{"line":736,"column":0},"end":{"line":736,"column":3}}},"property":{"type":"Identifier","name":"require","loc":{"start":{"line":736,"column":4},"end":{"line":736,"column":11}}},"loc":{"start":{"line":736,"column":0},"end":{"line":736,"column":11}}},"right":{"type":"FunctionExpression","id":{"type":"Identifier","name":"require","loc":{"start":{"line":736,"column":23},"end":{"line":736,"column":30}}},"params":[{"type":"Identifier","name":"what","loc":{"start":{"line":736,"column":31},"end":{"line":736,"column":35}}}],"defaults":[],"body":{"type":"BlockStatement","body":[{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"==","left":{"type":"Identifier","name":"what","loc":{"start":{"line":737,"column":6},"end":{"line":737,"column":10}}},"right":{"type":"Literal","value":"bit","raw":"\"bit\"","loc":{"start":{"line":737,"column":14},"end":{"line":737,"column":19}}},"loc":{"start":{"line":737,"column":6},"end":{"line":737,"column":19}}},"consequent":{"type":"ReturnStatement","argument":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"env","loc":{"start":{"line":737,"column":29},"end":{"line":737,"column":32}}},"property":{"type":"Identifier","name":"bit32","loc":{"start":{"line":737,"column":33},"end":{"line":737,"column":38}}},"loc":{"start":{"line":737,"column":29},"end":{"line":737,"column":38}}},"loc":{"start":{"line":737,"column":22},"end":{"line":737,"column":39}}},"alternate":null,"loc":{"start":{"line":737,"column":1},"end":{"line":737,"column":39}}},{"type":"IfStatement","test":{"type":"BinaryExpression","operator":"==","left":{"type":"Identifier","name":"what","loc":{"start":{"line":738,"column":6},"end":{"line":738,"column":10}}},"right":{"type":"Literal","value":"bit32","raw":"\"bit32\"","loc":{"start":{"line":738,"column":14},"end":{"line":738,"column":21}}},"loc":{"start":{"line":738,"column":6},"end":{"line":738,"column":21}}},"consequent":{"type":"ReturnStatement","argument":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"env","loc":{"start":{"line":738,"column":31},"end":{"line":738,"column":34}}},"property":{"type":"Identifier","name":"bit32","loc":{"start":{"line":738,"column":35},"end":{"line":738,"column":40}}},"loc":{"start":{"line":738,"column":31},"end":{"line":738,"column":40}}},"loc":{"start":{"line":738,"column":24},"end":{"line":738,"column":41}}},"alternate":null,"loc":{"start":{"line":738,"column":1},"end":{"line":738,"column":41}}},{"type":"ThrowStatement","argument":{"type":"BinaryExpression","operator":"+","left":{"type":"BinaryExpression","operator":"+","left":{"type":"Literal","value":"Module ","raw":"\"Module \"","loc":{"start":{"line":739,"column":7},"end":{"line":739,"column":16}}},"right":{"type":"Identifier","name":"waht","loc":{"start":{"line":739,"column":19},"end":{"line":739,"column":23}}},"loc":{"start":{"line":739,"column":7},"end":{"line":739,"column":23}}},"right":{"type":"Literal","value":" not found","raw":"\" not found\"","loc":{"start":{"line":739,"column":26},"end":{"line":739,"column":38}}},"loc":{"start":{"line":739,"column":7},"end":{"line":739,"column":38}}},"loc":{"start":{"line":739,"column":1},"end":{"line":739,"column":39}}}],"loc":{"start":{"line":736,"column":37},"end":{"line":740,"column":1}}},"rest":null,"generator":false,"expression":false,"loc":{"start":{"line":736,"column":14},"end":{"line":740,"column":1}}},"loc":{"start":{"line":736,"column":0},"end":{"line":740,"column":1}}},"loc":{"start":{"line":736,"column":0},"end":{"line":740,"column":2}}},{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"__lua","loc":{"start":{"line":742,"column":0},"end":{"line":742,"column":5}}},"property":{"type":"Identifier","name":"mark","loc":{"start":{"line":742,"column":6},"end":{"line":742,"column":10}}},"loc":{"start":{"line":742,"column":0},"end":{"line":742,"column":10}}},"arguments":[{"type":"Identifier","name":"env","loc":{"start":{"line":742,"column":11},"end":{"line":742,"column":14}}}],"loc":{"start":{"line":742,"column":0},"end":{"line":742,"column":15}}},"loc":{"start":{"line":742,"column":0},"end":{"line":742,"column":16}}},{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"__lua","loc":{"start":{"line":743,"column":0},"end":{"line":743,"column":5}}},"property":{"type":"Identifier","name":"env","loc":{"start":{"line":743,"column":6},"end":{"line":743,"column":9}}},"loc":{"start":{"line":743,"column":0},"end":{"line":743,"column":9}}},"right":{"type":"Identifier","name":"env","loc":{"start":{"line":743,"column":12},"end":{"line":743,"column":15}}},"loc":{"start":{"line":743,"column":0},"end":{"line":743,"column":15}}},"loc":{"start":{"line":743,"column":0},"end":{"line":743,"column":16}}},{"type":"ForInStatement","left":{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"idx","loc":{"start":{"line":744,"column":10},"end":{"line":744,"column":13}}},"init":null,"loc":{"start":{"line":744,"column":10},"end":{"line":744,"column":13}}}],"kind":"var","loc":{"start":{"line":744,"column":6},"end":{"line":744,"column":13}}},"right":{"type":"Identifier","name":"env","loc":{"start":{"line":744,"column":17},"end":{"line":744,"column":20}}},"body":{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","computed":true,"object":{"type":"ThisExpression","loc":{"start":{"line":744,"column":23},"end":{"line":744,"column":27}}},"property":{"type":"Identifier","name":"idx","loc":{"start":{"line":744,"column":28},"end":{"line":744,"column":31}}},"loc":{"start":{"line":744,"column":23},"end":{"line":744,"column":32}}},"right":{"type":"MemberExpression","computed":true,"object":{"type":"Identifier","name":"env","loc":{"start":{"line":744,"column":35},"end":{"line":744,"column":38}}},"property":{"type":"Identifier","name":"idx","loc":{"start":{"line":744,"column":39},"end":{"line":744,"column":42}}},"loc":{"start":{"line":744,"column":35},"end":{"line":744,"column":43}}},"loc":{"start":{"line":744,"column":23},"end":{"line":744,"column":43}}},"loc":{"start":{"line":744,"column":23},"end":{"line":744,"column":44}}},"each":false,"loc":{"start":{"line":744,"column":0},"end":{"line":744,"column":44}}}],"loc":{"start":{"line":1,"column":0},"end":{"line":744,"column":44}}}

},{}],22:[function(require,module,exports){
module.exports={"range":[0,22849],"loc":{"start":{"line":1,"column":0},"end":{"line":662,"column":4}},"type":"Program","body":[{"range":[0,22849],"loc":{"start":{"line":1,"column":0},"end":{"line":662,"column":4}},"type":"ExpressionStatement","expression":{"range":[1,22847],"loc":{"start":{"line":1,"column":1},"end":{"line":662,"column":2}},"type":"CallExpression","callee":{"range":[1,351],"loc":{"start":{"line":1,"column":1},"end":{"line":11,"column":1}},"type":"FunctionExpression","id":null,"params":[{"range":[11,15],"loc":{"start":{"line":1,"column":11},"end":{"line":1,"column":15}},"type":"Identifier","name":"root"},{"range":[17,24],"loc":{"start":{"line":1,"column":17},"end":{"line":1,"column":24}},"type":"Identifier","name":"factory"}],"defaults":[],"body":{"range":[26,351],"loc":{"start":{"line":1,"column":26},"end":{"line":11,"column":1}},"type":"BlockStatement","body":[{"range":[30,43],"loc":{"start":{"line":2,"column":2},"end":{"line":2,"column":15}},"type":"ExpressionStatement","expression":{"range":[30,42],"loc":{"start":{"line":2,"column":2},"end":{"line":2,"column":14}},"type":"Literal","value":"use strict","raw":"'use strict'"}},{"range":[46,349],"loc":{"start":{"line":3,"column":2},"end":{"line":10,"column":40}},"type":"IfStatement","test":{"range":[49,106],"loc":{"start":{"line":3,"column":5},"end":{"line":3,"column":62}},"type":"LogicalExpression","operator":"&&","left":{"range":[49,76],"loc":{"start":{"line":3,"column":5},"end":{"line":3,"column":32}},"type":"BinaryExpression","operator":"===","left":{"range":[49,63],"loc":{"start":{"line":3,"column":5},"end":{"line":3,"column":19}},"type":"UnaryExpression","operator":"typeof","argument":{"range":[56,63],"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":19}},"type":"Identifier","name":"exports"},"prefix":true},"right":{"range":[68,76],"loc":{"start":{"line":3,"column":24},"end":{"line":3,"column":32}},"type":"Literal","value":"object","raw":"'object'"}},"right":{"range":[80,106],"loc":{"start":{"line":3,"column":36},"end":{"line":3,"column":62}},"type":"BinaryExpression","operator":"===","left":{"range":[80,93],"loc":{"start":{"line":3,"column":36},"end":{"line":3,"column":49}},"type":"UnaryExpression","operator":"typeof","argument":{"range":[87,93],"loc":{"start":{"line":3,"column":43},"end":{"line":3,"column":49}},"type":"Identifier","name":"module"},"prefix":true},"right":{"range":[98,106],"loc":{"start":{"line":3,"column":54},"end":{"line":3,"column":62}},"type":"Literal","value":"object","raw":"'object'"}}},"consequent":{"range":[112,139],"loc":{"start":{"line":4,"column":4},"end":{"line":4,"column":31}},"type":"ExpressionStatement","expression":{"range":[112,138],"loc":{"start":{"line":4,"column":4},"end":{"line":4,"column":30}},"type":"AssignmentExpression","operator":"=","left":{"range":[112,126],"loc":{"start":{"line":4,"column":4},"end":{"line":4,"column":18}},"type":"MemberExpression","computed":false,"object":{"range":[112,118],"loc":{"start":{"line":4,"column":4},"end":{"line":4,"column":10}},"type":"Identifier","name":"module"},"property":{"range":[119,126],"loc":{"start":{"line":4,"column":11},"end":{"line":4,"column":18}},"type":"Identifier","name":"exports"}},"right":{"range":[129,138],"loc":{"start":{"line":4,"column":21},"end":{"line":4,"column":30}},"type":"CallExpression","callee":{"range":[129,136],"loc":{"start":{"line":4,"column":21},"end":{"line":4,"column":28}},"type":"Identifier","name":"factory"},"arguments":[]}}},"alternate":{"range":[147,349],"loc":{"start":{"line":5,"column":7},"end":{"line":10,"column":40}},"type":"IfStatement","test":{"range":[150,192],"loc":{"start":{"line":5,"column":10},"end":{"line":5,"column":52}},"type":"LogicalExpression","operator":"&&","left":{"range":[150,178],"loc":{"start":{"line":5,"column":10},"end":{"line":5,"column":38}},"type":"BinaryExpression","operator":"===","left":{"range":[150,163],"loc":{"start":{"line":5,"column":10},"end":{"line":5,"column":23}},"type":"UnaryExpression","operator":"typeof","argument":{"range":[157,163],"loc":{"start":{"line":5,"column":17},"end":{"line":5,"column":23}},"type":"Identifier","name":"define"},"prefix":true},"right":{"range":[168,178],"loc":{"start":{"line":5,"column":28},"end":{"line":5,"column":38}},"type":"Literal","value":"function","raw":"'function'"}},"right":{"range":[182,192],"loc":{"start":{"line":5,"column":42},"end":{"line":5,"column":52}},"type":"MemberExpression","computed":false,"object":{"range":[182,188],"loc":{"start":{"line":5,"column":42},"end":{"line":5,"column":48}},"type":"Identifier","name":"define"},"property":{"range":[189,192],"loc":{"start":{"line":5,"column":49},"end":{"line":5,"column":52}},"type":"Identifier","name":"amd"}}},"consequent":{"range":[198,218],"loc":{"start":{"line":6,"column":4},"end":{"line":6,"column":24}},"type":"ExpressionStatement","expression":{"range":[198,217],"loc":{"start":{"line":6,"column":4},"end":{"line":6,"column":23}},"type":"CallExpression","callee":{"range":[198,204],"loc":{"start":{"line":6,"column":4},"end":{"line":6,"column":10}},"type":"Identifier","name":"define"},"arguments":[{"range":[205,207],"loc":{"start":{"line":6,"column":11},"end":{"line":6,"column":13}},"type":"ArrayExpression","elements":[]},{"range":[209,216],"loc":{"start":{"line":6,"column":15},"end":{"line":6,"column":22}},"type":"Identifier","name":"factory"}]}},"alternate":{"range":[226,349],"loc":{"start":{"line":7,"column":7},"end":{"line":10,"column":40}},"type":"IfStatement","test":{"range":[229,256],"loc":{"start":{"line":7,"column":10},"end":{"line":7,"column":37}},"type":"BinaryExpression","operator":"===","left":{"range":[229,243],"loc":{"start":{"line":7,"column":10},"end":{"line":7,"column":24}},"type":"UnaryExpression","operator":"typeof","argument":{"range":[236,243],"loc":{"start":{"line":7,"column":17},"end":{"line":7,"column":24}},"type":"Identifier","name":"exports"},"prefix":true},"right":{"range":[248,256],"loc":{"start":{"line":7,"column":29},"end":{"line":7,"column":37}},"type":"Literal","value":"object","raw":"'object'"}},"consequent":{"range":[262,301],"loc":{"start":{"line":8,"column":4},"end":{"line":8,"column":43}},"type":"ExpressionStatement","expression":{"range":[262,300],"loc":{"start":{"line":8,"column":4},"end":{"line":8,"column":42}},"type":"AssignmentExpression","operator":"=","left":{"range":[262,288],"loc":{"start":{"line":8,"column":4},"end":{"line":8,"column":30}},"type":"MemberExpression","computed":true,"object":{"range":[262,269],"loc":{"start":{"line":8,"column":4},"end":{"line":8,"column":11}},"type":"Identifier","name":"exports"},"property":{"range":[270,287],"loc":{"start":{"line":8,"column":12},"end":{"line":8,"column":29}},"type":"Literal","value":"__pythonRuntime","raw":"\"__pythonRuntime\""}},"right":{"range":[291,300],"loc":{"start":{"line":8,"column":33},"end":{"line":8,"column":42}},"type":"CallExpression","callee":{"range":[291,298],"loc":{"start":{"line":8,"column":33},"end":{"line":8,"column":40}},"type":"Identifier","name":"factory"},"arguments":[]}}},"alternate":{"range":[313,349],"loc":{"start":{"line":10,"column":4},"end":{"line":10,"column":40}},"type":"ExpressionStatement","expression":{"range":[313,348],"loc":{"start":{"line":10,"column":4},"end":{"line":10,"column":39}},"type":"AssignmentExpression","operator":"=","left":{"range":[313,336],"loc":{"start":{"line":10,"column":4},"end":{"line":10,"column":27}},"type":"MemberExpression","computed":true,"object":{"range":[313,317],"loc":{"start":{"line":10,"column":4},"end":{"line":10,"column":8}},"type":"Identifier","name":"root"},"property":{"range":[318,335],"loc":{"start":{"line":10,"column":9},"end":{"line":10,"column":26}},"type":"Literal","value":"__pythonRuntime","raw":"\"__pythonRuntime\""}},"right":{"range":[339,348],"loc":{"start":{"line":10,"column":30},"end":{"line":10,"column":39}},"type":"CallExpression","callee":{"range":[339,346],"loc":{"start":{"line":10,"column":30},"end":{"line":10,"column":37}},"type":"Identifier","name":"factory"},"arguments":[]}}}}}}]},"generator":false,"expression":false},"arguments":[{"range":[352,356],"loc":{"start":{"line":11,"column":2},"end":{"line":11,"column":6}},"type":"ThisExpression"},{"range":[358,22846],"loc":{"start":{"line":11,"column":8},"end":{"line":662,"column":1}},"type":"FunctionExpression","id":null,"params":[],"defaults":[],"body":{"range":[369,22846],"loc":{"start":{"line":11,"column":19},"end":{"line":662,"column":1}},"type":"BlockStatement","body":[{"range":[373,386],"loc":{"start":{"line":12,"column":2},"end":{"line":12,"column":15}},"type":"ExpressionStatement","expression":{"range":[373,385],"loc":{"start":{"line":12,"column":2},"end":{"line":12,"column":14}},"type":"Literal","value":"use strict","raw":"'use strict'"}},{"range":[389,22694],"loc":{"start":{"line":13,"column":2},"end":{"line":654,"column":4}},"type":"VariableDeclaration","declarations":[{"range":[393,22693],"loc":{"start":{"line":13,"column":6},"end":{"line":654,"column":3}},"type":"VariableDeclarator","id":{"range":[393,406],"loc":{"start":{"line":13,"column":6},"end":{"line":13,"column":19}},"type":"Identifier","name":"pythonRuntime"},"init":{"range":[409,22693],"loc":{"start":{"line":13,"column":22},"end":{"line":654,"column":3}},"type":"ObjectExpression","properties":[{"range":[415,1777],"loc":{"start":{"line":14,"column":4},"end":{"line":47,"column":5}},"type":"Property","key":{"range":[415,423],"loc":{"start":{"line":14,"column":4},"end":{"line":14,"column":12}},"type":"Identifier","name":"internal"},"computed":false,"value":{"range":[425,1777],"loc":{"start":{"line":14,"column":14},"end":{"line":47,"column":5}},"type":"ObjectExpression","properties":[{"range":[467,547],"loc":{"start":{"line":16,"column":6},"end":{"line":16,"column":86}},"type":"Property","key":{"range":[467,472],"loc":{"start":{"line":16,"column":6},"end":{"line":16,"column":11}},"type":"Identifier","name":"isSeq"},"computed":false,"value":{"range":[474,547],"loc":{"start":{"line":16,"column":13},"end":{"line":16,"column":86}},"type":"FunctionExpression","id":null,"params":[{"range":[484,485],"loc":{"start":{"line":16,"column":23},"end":{"line":16,"column":24}},"type":"Identifier","name":"a"}],"defaults":[],"body":{"range":[487,547],"loc":{"start":{"line":16,"column":26},"end":{"line":16,"column":86}},"type":"BlockStatement","body":[{"range":[489,545],"loc":{"start":{"line":16,"column":28},"end":{"line":16,"column":84}},"type":"ReturnStatement","argument":{"range":[496,544],"loc":{"start":{"line":16,"column":35},"end":{"line":16,"column":83}},"type":"LogicalExpression","operator":"&&","left":{"range":[496,497],"loc":{"start":{"line":16,"column":35},"end":{"line":16,"column":36}},"type":"Identifier","name":"a"},"right":{"range":[502,543],"loc":{"start":{"line":16,"column":41},"end":{"line":16,"column":82}},"type":"LogicalExpression","operator":"||","left":{"range":[502,520],"loc":{"start":{"line":16,"column":41},"end":{"line":16,"column":59}},"type":"BinaryExpression","operator":"===","left":{"range":[502,509],"loc":{"start":{"line":16,"column":41},"end":{"line":16,"column":48}},"type":"MemberExpression","computed":false,"object":{"range":[502,503],"loc":{"start":{"line":16,"column":41},"end":{"line":16,"column":42}},"type":"Identifier","name":"a"},"property":{"range":[504,509],"loc":{"start":{"line":16,"column":43},"end":{"line":16,"column":48}},"type":"Identifier","name":"_type"}},"right":{"range":[514,520],"loc":{"start":{"line":16,"column":53},"end":{"line":16,"column":59}},"type":"Literal","value":"list","raw":"\"list\""}},"right":{"range":[524,543],"loc":{"start":{"line":16,"column":63},"end":{"line":16,"column":82}},"type":"BinaryExpression","operator":"===","left":{"range":[524,531],"loc":{"start":{"line":16,"column":63},"end":{"line":16,"column":70}},"type":"MemberExpression","computed":false,"object":{"range":[524,525],"loc":{"start":{"line":16,"column":63},"end":{"line":16,"column":64}},"type":"Identifier","name":"a"},"property":{"range":[526,531],"loc":{"start":{"line":16,"column":65},"end":{"line":16,"column":70}},"type":"Identifier","name":"_type"}},"right":{"range":[536,543],"loc":{"start":{"line":16,"column":75},"end":{"line":16,"column":82}},"type":"Literal","value":"tuple","raw":"\"tuple\""}}}}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[555,1656],"loc":{"start":{"line":17,"column":6},"end":{"line":43,"column":7}},"type":"Property","key":{"range":[555,560],"loc":{"start":{"line":17,"column":6},"end":{"line":17,"column":11}},"type":"Identifier","name":"slice"},"computed":false,"value":{"range":[562,1656],"loc":{"start":{"line":17,"column":13},"end":{"line":43,"column":7}},"type":"FunctionExpression","id":null,"params":[{"range":[572,575],"loc":{"start":{"line":17,"column":23},"end":{"line":17,"column":26}},"type":"Identifier","name":"obj"},{"range":[577,582],"loc":{"start":{"line":17,"column":28},"end":{"line":17,"column":33}},"type":"Identifier","name":"start"},{"range":[584,587],"loc":{"start":{"line":17,"column":35},"end":{"line":17,"column":38}},"type":"Identifier","name":"end"},{"range":[589,593],"loc":{"start":{"line":17,"column":40},"end":{"line":17,"column":44}},"type":"Identifier","name":"step"}],"defaults":[],"body":{"range":[595,1656],"loc":{"start":{"line":17,"column":46},"end":{"line":43,"column":7}},"type":"BlockStatement","body":[{"range":[605,615],"loc":{"start":{"line":18,"column":8},"end":{"line":18,"column":18}},"type":"VariableDeclaration","declarations":[{"range":[609,614],"loc":{"start":{"line":18,"column":12},"end":{"line":18,"column":17}},"type":"VariableDeclarator","id":{"range":[609,614],"loc":{"start":{"line":18,"column":12},"end":{"line":18,"column":17}},"type":"Identifier","name":"slice"},"init":null}],"kind":"var"},{"range":[624,749],"loc":{"start":{"line":19,"column":8},"end":{"line":20,"column":41}},"type":"IfStatement","test":{"range":[629,652],"loc":{"start":{"line":19,"column":13},"end":{"line":19,"column":36}},"type":"BinaryExpression","operator":"===","left":{"range":[629,639],"loc":{"start":{"line":19,"column":13},"end":{"line":19,"column":23}},"type":"UnaryExpression","operator":"typeof","argument":{"range":[636,639],"loc":{"start":{"line":19,"column":20},"end":{"line":19,"column":23}},"type":"Identifier","name":"obj"},"prefix":true},"right":{"range":[644,652],"loc":{"start":{"line":19,"column":28},"end":{"line":19,"column":36}},"type":"Literal","value":"string","raw":"'string'"}},"consequent":{"range":[655,707],"loc":{"start":{"line":19,"column":39},"end":{"line":19,"column":91}},"type":"ExpressionStatement","expression":{"range":[655,707],"loc":{"start":{"line":19,"column":39},"end":{"line":19,"column":91}},"type":"AssignmentExpression","operator":"=","left":{"range":[655,660],"loc":{"start":{"line":19,"column":39},"end":{"line":19,"column":44}},"type":"Identifier","name":"slice"},"right":{"range":[663,707],"loc":{"start":{"line":19,"column":47},"end":{"line":19,"column":91}},"type":"FunctionExpression","id":null,"params":[{"range":[672,673],"loc":{"start":{"line":19,"column":56},"end":{"line":19,"column":57}},"type":"Identifier","name":"x"},{"range":[674,675],"loc":{"start":{"line":19,"column":58},"end":{"line":19,"column":59}},"type":"Identifier","name":"y"}],"defaults":[],"body":{"range":[677,707],"loc":{"start":{"line":19,"column":61},"end":{"line":19,"column":91}},"type":"BlockStatement","body":[{"range":[679,705],"loc":{"start":{"line":19,"column":63},"end":{"line":19,"column":89}},"type":"ReturnStatement","argument":{"range":[686,704],"loc":{"start":{"line":19,"column":70},"end":{"line":19,"column":88}},"type":"CallExpression","callee":{"range":[686,699],"loc":{"start":{"line":19,"column":70},"end":{"line":19,"column":83}},"type":"MemberExpression","computed":false,"object":{"range":[686,689],"loc":{"start":{"line":19,"column":70},"end":{"line":19,"column":73}},"type":"Identifier","name":"obj"},"property":{"range":[690,699],"loc":{"start":{"line":19,"column":74},"end":{"line":19,"column":83}},"type":"Identifier","name":"substring"}},"arguments":[{"range":[700,701],"loc":{"start":{"line":19,"column":84},"end":{"line":19,"column":85}},"type":"Identifier","name":"x"},{"range":[702,703],"loc":{"start":{"line":19,"column":86},"end":{"line":19,"column":87}},"type":"Identifier","name":"y"}]}}]},"generator":false,"expression":false}}},"alternate":{"range":[721,749],"loc":{"start":{"line":20,"column":13},"end":{"line":20,"column":41}},"type":"ExpressionStatement","expression":{"range":[721,748],"loc":{"start":{"line":20,"column":13},"end":{"line":20,"column":40}},"type":"AssignmentExpression","operator":"=","left":{"range":[721,726],"loc":{"start":{"line":20,"column":13},"end":{"line":20,"column":18}},"type":"Identifier","name":"slice"},"right":{"range":[729,748],"loc":{"start":{"line":20,"column":21},"end":{"line":20,"column":40}},"type":"CallExpression","callee":{"range":[729,743],"loc":{"start":{"line":20,"column":21},"end":{"line":20,"column":35}},"type":"MemberExpression","computed":false,"object":{"range":[729,738],"loc":{"start":{"line":20,"column":21},"end":{"line":20,"column":30}},"type":"MemberExpression","computed":false,"object":{"range":[729,732],"loc":{"start":{"line":20,"column":21},"end":{"line":20,"column":24}},"type":"Identifier","name":"obj"},"property":{"range":[733,738],"loc":{"start":{"line":20,"column":25},"end":{"line":20,"column":30}},"type":"Identifier","name":"slice"}},"property":{"range":[739,743],"loc":{"start":{"line":20,"column":31},"end":{"line":20,"column":35}},"type":"Identifier","name":"bind"}},"arguments":[{"range":[744,747],"loc":{"start":{"line":20,"column":36},"end":{"line":20,"column":39}},"type":"Identifier","name":"obj"}]}}}},{"range":[759,800],"loc":{"start":{"line":22,"column":8},"end":{"line":22,"column":49}},"type":"IfStatement","test":{"range":[763,789],"loc":{"start":{"line":22,"column":12},"end":{"line":22,"column":38}},"type":"LogicalExpression","operator":"||","left":{"range":[763,775],"loc":{"start":{"line":22,"column":12},"end":{"line":22,"column":24}},"type":"BinaryExpression","operator":"==","left":{"range":[763,767],"loc":{"start":{"line":22,"column":12},"end":{"line":22,"column":16}},"type":"Identifier","name":"step"},"right":{"range":[771,775],"loc":{"start":{"line":22,"column":20},"end":{"line":22,"column":24}},"type":"Literal","value":null,"raw":"null"}},"right":{"range":[779,789],"loc":{"start":{"line":22,"column":28},"end":{"line":22,"column":38}},"type":"BinaryExpression","operator":"===","left":{"range":[779,783],"loc":{"start":{"line":22,"column":28},"end":{"line":22,"column":32}},"type":"Identifier","name":"step"},"right":{"range":[788,789],"loc":{"start":{"line":22,"column":37},"end":{"line":22,"column":38}},"type":"Literal","value":0,"raw":"0"}}},"consequent":{"range":[791,800],"loc":{"start":{"line":22,"column":40},"end":{"line":22,"column":49}},"type":"ExpressionStatement","expression":{"range":[791,799],"loc":{"start":{"line":22,"column":40},"end":{"line":22,"column":48}},"type":"AssignmentExpression","operator":"=","left":{"range":[791,795],"loc":{"start":{"line":22,"column":40},"end":{"line":22,"column":44}},"type":"Identifier","name":"step"},"right":{"range":[798,799],"loc":{"start":{"line":22,"column":47},"end":{"line":22,"column":48}},"type":"Literal","value":1,"raw":"1"}}},"alternate":null},{"range":[848,993],"loc":{"start":{"line":23,"column":8},"end":{"line":26,"column":50}},"type":"IfStatement","test":{"range":[852,865],"loc":{"start":{"line":23,"column":12},"end":{"line":23,"column":25}},"type":"BinaryExpression","operator":"==","left":{"range":[852,857],"loc":{"start":{"line":23,"column":12},"end":{"line":23,"column":17}},"type":"Identifier","name":"start"},"right":{"range":[861,865],"loc":{"start":{"line":23,"column":21},"end":{"line":23,"column":25}},"type":"Literal","value":null,"raw":"null"}},"consequent":{"range":[867,952],"loc":{"start":{"line":23,"column":27},"end":{"line":26,"column":9}},"type":"BlockStatement","body":[{"range":[879,942],"loc":{"start":{"line":24,"column":10},"end":{"line":25,"column":25}},"type":"IfStatement","test":{"range":[883,891],"loc":{"start":{"line":24,"column":14},"end":{"line":24,"column":22}},"type":"BinaryExpression","operator":"<","left":{"range":[883,887],"loc":{"start":{"line":24,"column":14},"end":{"line":24,"column":18}},"type":"Identifier","name":"step"},"right":{"range":[890,891],"loc":{"start":{"line":24,"column":21},"end":{"line":24,"column":22}},"type":"Literal","value":0,"raw":"0"}},"consequent":{"range":[893,916],"loc":{"start":{"line":24,"column":24},"end":{"line":24,"column":47}},"type":"ExpressionStatement","expression":{"range":[893,915],"loc":{"start":{"line":24,"column":24},"end":{"line":24,"column":46}},"type":"AssignmentExpression","operator":"=","left":{"range":[893,898],"loc":{"start":{"line":24,"column":24},"end":{"line":24,"column":29}},"type":"Identifier","name":"start"},"right":{"range":[901,915],"loc":{"start":{"line":24,"column":32},"end":{"line":24,"column":46}},"type":"BinaryExpression","operator":"-","left":{"range":[901,911],"loc":{"start":{"line":24,"column":32},"end":{"line":24,"column":42}},"type":"MemberExpression","computed":false,"object":{"range":[901,904],"loc":{"start":{"line":24,"column":32},"end":{"line":24,"column":35}},"type":"Identifier","name":"obj"},"property":{"range":[905,911],"loc":{"start":{"line":24,"column":36},"end":{"line":24,"column":42}},"type":"Identifier","name":"length"}},"right":{"range":[914,915],"loc":{"start":{"line":24,"column":45},"end":{"line":24,"column":46}},"type":"Literal","value":1,"raw":"1"}}}},"alternate":{"range":[932,942],"loc":{"start":{"line":25,"column":15},"end":{"line":25,"column":25}},"type":"ExpressionStatement","expression":{"range":[932,941],"loc":{"start":{"line":25,"column":15},"end":{"line":25,"column":24}},"type":"AssignmentExpression","operator":"=","left":{"range":[932,937],"loc":{"start":{"line":25,"column":15},"end":{"line":25,"column":20}},"type":"Identifier","name":"start"},"right":{"range":[940,941],"loc":{"start":{"line":25,"column":23},"end":{"line":25,"column":24}},"type":"Literal","value":0,"raw":"0"}}}}]},"alternate":{"range":[958,993],"loc":{"start":{"line":26,"column":15},"end":{"line":26,"column":50}},"type":"IfStatement","test":{"range":[962,971],"loc":{"start":{"line":26,"column":19},"end":{"line":26,"column":28}},"type":"BinaryExpression","operator":"<","left":{"range":[962,967],"loc":{"start":{"line":26,"column":19},"end":{"line":26,"column":24}},"type":"Identifier","name":"start"},"right":{"range":[970,971],"loc":{"start":{"line":26,"column":27},"end":{"line":26,"column":28}},"type":"Literal","value":0,"raw":"0"}},"consequent":{"range":[973,993],"loc":{"start":{"line":26,"column":30},"end":{"line":26,"column":50}},"type":"ExpressionStatement","expression":{"range":[973,992],"loc":{"start":{"line":26,"column":30},"end":{"line":26,"column":49}},"type":"AssignmentExpression","operator":"+=","left":{"range":[973,978],"loc":{"start":{"line":26,"column":30},"end":{"line":26,"column":35}},"type":"Identifier","name":"start"},"right":{"range":[982,992],"loc":{"start":{"line":26,"column":39},"end":{"line":26,"column":49}},"type":"MemberExpression","computed":false,"object":{"range":[982,985],"loc":{"start":{"line":26,"column":39},"end":{"line":26,"column":42}},"type":"Identifier","name":"obj"},"property":{"range":[986,992],"loc":{"start":{"line":26,"column":43},"end":{"line":26,"column":49}},"type":"Identifier","name":"length"}}}},"alternate":null}},{"range":[1002,1134],"loc":{"start":{"line":27,"column":8},"end":{"line":30,"column":46}},"type":"IfStatement","test":{"range":[1006,1017],"loc":{"start":{"line":27,"column":12},"end":{"line":27,"column":23}},"type":"BinaryExpression","operator":"==","left":{"range":[1006,1009],"loc":{"start":{"line":27,"column":12},"end":{"line":27,"column":15}},"type":"Identifier","name":"end"},"right":{"range":[1013,1017],"loc":{"start":{"line":27,"column":19},"end":{"line":27,"column":23}},"type":"Literal","value":null,"raw":"null"}},"consequent":{"range":[1019,1097],"loc":{"start":{"line":27,"column":25},"end":{"line":30,"column":9}},"type":"BlockStatement","body":[{"range":[1031,1087],"loc":{"start":{"line":28,"column":10},"end":{"line":29,"column":32}},"type":"IfStatement","test":{"range":[1035,1043],"loc":{"start":{"line":28,"column":14},"end":{"line":28,"column":22}},"type":"BinaryExpression","operator":"<","left":{"range":[1035,1039],"loc":{"start":{"line":28,"column":14},"end":{"line":28,"column":18}},"type":"Identifier","name":"step"},"right":{"range":[1042,1043],"loc":{"start":{"line":28,"column":21},"end":{"line":28,"column":22}},"type":"Literal","value":0,"raw":"0"}},"consequent":{"range":[1045,1054],"loc":{"start":{"line":28,"column":24},"end":{"line":28,"column":33}},"type":"ExpressionStatement","expression":{"range":[1045,1053],"loc":{"start":{"line":28,"column":24},"end":{"line":28,"column":32}},"type":"AssignmentExpression","operator":"=","left":{"range":[1045,1048],"loc":{"start":{"line":28,"column":24},"end":{"line":28,"column":27}},"type":"Identifier","name":"end"},"right":{"range":[1051,1053],"loc":{"start":{"line":28,"column":30},"end":{"line":28,"column":32}},"type":"UnaryExpression","operator":"-","argument":{"range":[1052,1053],"loc":{"start":{"line":28,"column":31},"end":{"line":28,"column":32}},"type":"Literal","value":1,"raw":"1"},"prefix":true}}},"alternate":{"range":[1070,1087],"loc":{"start":{"line":29,"column":15},"end":{"line":29,"column":32}},"type":"ExpressionStatement","expression":{"range":[1070,1086],"loc":{"start":{"line":29,"column":15},"end":{"line":29,"column":31}},"type":"AssignmentExpression","operator":"=","left":{"range":[1070,1073],"loc":{"start":{"line":29,"column":15},"end":{"line":29,"column":18}},"type":"Identifier","name":"end"},"right":{"range":[1076,1086],"loc":{"start":{"line":29,"column":21},"end":{"line":29,"column":31}},"type":"MemberExpression","computed":false,"object":{"range":[1076,1079],"loc":{"start":{"line":29,"column":21},"end":{"line":29,"column":24}},"type":"Identifier","name":"obj"},"property":{"range":[1080,1086],"loc":{"start":{"line":29,"column":25},"end":{"line":29,"column":31}},"type":"Identifier","name":"length"}}}}}]},"alternate":{"range":[1103,1134],"loc":{"start":{"line":30,"column":15},"end":{"line":30,"column":46}},"type":"IfStatement","test":{"range":[1107,1114],"loc":{"start":{"line":30,"column":19},"end":{"line":30,"column":26}},"type":"BinaryExpression","operator":"<","left":{"range":[1107,1110],"loc":{"start":{"line":30,"column":19},"end":{"line":30,"column":22}},"type":"Identifier","name":"end"},"right":{"range":[1113,1114],"loc":{"start":{"line":30,"column":25},"end":{"line":30,"column":26}},"type":"Literal","value":0,"raw":"0"}},"consequent":{"range":[1116,1134],"loc":{"start":{"line":30,"column":28},"end":{"line":30,"column":46}},"type":"ExpressionStatement","expression":{"range":[1116,1133],"loc":{"start":{"line":30,"column":28},"end":{"line":30,"column":45}},"type":"AssignmentExpression","operator":"+=","left":{"range":[1116,1119],"loc":{"start":{"line":30,"column":28},"end":{"line":30,"column":31}},"type":"Identifier","name":"end"},"right":{"range":[1123,1133],"loc":{"start":{"line":30,"column":35},"end":{"line":30,"column":45}},"type":"MemberExpression","computed":false,"object":{"range":[1123,1126],"loc":{"start":{"line":30,"column":35},"end":{"line":30,"column":38}},"type":"Identifier","name":"obj"},"property":{"range":[1127,1133],"loc":{"start":{"line":30,"column":39},"end":{"line":30,"column":45}},"type":"Identifier","name":"length"}}}},"alternate":null}},{"range":[1144,1195],"loc":{"start":{"line":32,"column":8},"end":{"line":32,"column":59}},"type":"VariableDeclaration","declarations":[{"range":[1148,1186],"loc":{"start":{"line":32,"column":12},"end":{"line":32,"column":50}},"type":"VariableDeclarator","id":{"range":[1148,1151],"loc":{"start":{"line":32,"column":12},"end":{"line":32,"column":15}},"type":"Identifier","name":"ret"},"init":{"range":[1154,1186],"loc":{"start":{"line":32,"column":18},"end":{"line":32,"column":50}},"type":"NewExpression","callee":{"range":[1158,1184],"loc":{"start":{"line":32,"column":22},"end":{"line":32,"column":48}},"type":"MemberExpression","computed":false,"object":{"range":[1158,1179],"loc":{"start":{"line":32,"column":22},"end":{"line":32,"column":43}},"type":"MemberExpression","computed":false,"object":{"range":[1158,1171],"loc":{"start":{"line":32,"column":22},"end":{"line":32,"column":35}},"type":"Identifier","name":"pythonRuntime"},"property":{"range":[1172,1179],"loc":{"start":{"line":32,"column":36},"end":{"line":32,"column":43}},"type":"Identifier","name":"objects"}},"property":{"range":[1180,1184],"loc":{"start":{"line":32,"column":44},"end":{"line":32,"column":48}},"type":"Identifier","name":"list"}},"arguments":[]}},{"range":[1188,1191],"loc":{"start":{"line":32,"column":52},"end":{"line":32,"column":55}},"type":"VariableDeclarator","id":{"range":[1188,1191],"loc":{"start":{"line":32,"column":52},"end":{"line":32,"column":55}},"type":"Identifier","name":"tmp"},"init":null},{"range":[1193,1194],"loc":{"start":{"line":32,"column":57},"end":{"line":32,"column":58}},"type":"VariableDeclarator","id":{"range":[1193,1194],"loc":{"start":{"line":32,"column":57},"end":{"line":32,"column":58}},"type":"Identifier","name":"i"},"init":null}],"kind":"var"},{"range":[1204,1568],"loc":{"start":{"line":33,"column":8},"end":{"line":40,"column":9}},"type":"IfStatement","test":{"range":[1208,1216],"loc":{"start":{"line":33,"column":12},"end":{"line":33,"column":20}},"type":"BinaryExpression","operator":"<","left":{"range":[1208,1212],"loc":{"start":{"line":33,"column":12},"end":{"line":33,"column":16}},"type":"Identifier","name":"step"},"right":{"range":[1215,1216],"loc":{"start":{"line":33,"column":19},"end":{"line":33,"column":20}},"type":"Literal","value":0,"raw":"0"}},"consequent":{"range":[1218,1346],"loc":{"start":{"line":33,"column":22},"end":{"line":36,"column":9}},"type":"BlockStatement","body":[{"range":[1230,1262],"loc":{"start":{"line":34,"column":10},"end":{"line":34,"column":42}},"type":"ExpressionStatement","expression":{"range":[1230,1261],"loc":{"start":{"line":34,"column":10},"end":{"line":34,"column":41}},"type":"AssignmentExpression","operator":"=","left":{"range":[1230,1233],"loc":{"start":{"line":34,"column":10},"end":{"line":34,"column":13}},"type":"Identifier","name":"tmp"},"right":{"range":[1236,1261],"loc":{"start":{"line":34,"column":16},"end":{"line":34,"column":41}},"type":"CallExpression","callee":{"range":[1236,1241],"loc":{"start":{"line":34,"column":16},"end":{"line":34,"column":21}},"type":"Identifier","name":"slice"},"arguments":[{"range":[1242,1249],"loc":{"start":{"line":34,"column":22},"end":{"line":34,"column":29}},"type":"BinaryExpression","operator":"+","left":{"range":[1242,1245],"loc":{"start":{"line":34,"column":22},"end":{"line":34,"column":25}},"type":"Identifier","name":"end"},"right":{"range":[1248,1249],"loc":{"start":{"line":34,"column":28},"end":{"line":34,"column":29}},"type":"Literal","value":1,"raw":"1"}},{"range":[1251,1260],"loc":{"start":{"line":34,"column":31},"end":{"line":34,"column":40}},"type":"BinaryExpression","operator":"+","left":{"range":[1251,1256],"loc":{"start":{"line":34,"column":31},"end":{"line":34,"column":36}},"type":"Identifier","name":"start"},"right":{"range":[1259,1260],"loc":{"start":{"line":34,"column":39},"end":{"line":34,"column":40}},"type":"Literal","value":1,"raw":"1"}}]}}},{"range":[1273,1336],"loc":{"start":{"line":35,"column":10},"end":{"line":35,"column":73}},"type":"ForStatement","init":{"range":[1278,1296],"loc":{"start":{"line":35,"column":15},"end":{"line":35,"column":33}},"type":"AssignmentExpression","operator":"=","left":{"range":[1278,1279],"loc":{"start":{"line":35,"column":15},"end":{"line":35,"column":16}},"type":"Identifier","name":"i"},"right":{"range":[1282,1296],"loc":{"start":{"line":35,"column":19},"end":{"line":35,"column":33}},"type":"BinaryExpression","operator":"-","left":{"range":[1282,1292],"loc":{"start":{"line":35,"column":19},"end":{"line":35,"column":29}},"type":"MemberExpression","computed":false,"object":{"range":[1282,1285],"loc":{"start":{"line":35,"column":19},"end":{"line":35,"column":22}},"type":"Identifier","name":"tmp"},"property":{"range":[1286,1292],"loc":{"start":{"line":35,"column":23},"end":{"line":35,"column":29}},"type":"Identifier","name":"length"}},"right":{"range":[1295,1296],"loc":{"start":{"line":35,"column":32},"end":{"line":35,"column":33}},"type":"Literal","value":1,"raw":"1"}}},"test":{"range":[1298,1304],"loc":{"start":{"line":35,"column":35},"end":{"line":35,"column":41}},"type":"BinaryExpression","operator":">=","left":{"range":[1298,1299],"loc":{"start":{"line":35,"column":35},"end":{"line":35,"column":36}},"type":"Identifier","name":"i"},"right":{"range":[1303,1304],"loc":{"start":{"line":35,"column":40},"end":{"line":35,"column":41}},"type":"Literal","value":0,"raw":"0"}},"update":{"range":[1306,1315],"loc":{"start":{"line":35,"column":43},"end":{"line":35,"column":52}},"type":"AssignmentExpression","operator":"+=","left":{"range":[1306,1307],"loc":{"start":{"line":35,"column":43},"end":{"line":35,"column":44}},"type":"Identifier","name":"i"},"right":{"range":[1311,1315],"loc":{"start":{"line":35,"column":48},"end":{"line":35,"column":52}},"type":"Identifier","name":"step"}},"body":{"range":[1317,1336],"loc":{"start":{"line":35,"column":54},"end":{"line":35,"column":73}},"type":"ExpressionStatement","expression":{"range":[1317,1335],"loc":{"start":{"line":35,"column":54},"end":{"line":35,"column":72}},"type":"CallExpression","callee":{"range":[1317,1327],"loc":{"start":{"line":35,"column":54},"end":{"line":35,"column":64}},"type":"MemberExpression","computed":false,"object":{"range":[1317,1320],"loc":{"start":{"line":35,"column":54},"end":{"line":35,"column":57}},"type":"Identifier","name":"ret"},"property":{"range":[1321,1327],"loc":{"start":{"line":35,"column":58},"end":{"line":35,"column":64}},"type":"Identifier","name":"append"}},"arguments":[{"range":[1328,1334],"loc":{"start":{"line":35,"column":65},"end":{"line":35,"column":71}},"type":"MemberExpression","computed":true,"object":{"range":[1328,1331],"loc":{"start":{"line":35,"column":65},"end":{"line":35,"column":68}},"type":"Identifier","name":"tmp"},"property":{"range":[1332,1333],"loc":{"start":{"line":35,"column":69},"end":{"line":35,"column":70}},"type":"Identifier","name":"i"}}]}}}]},"alternate":{"range":[1352,1568],"loc":{"start":{"line":36,"column":15},"end":{"line":40,"column":9}},"type":"BlockStatement","body":[{"range":[1364,1388],"loc":{"start":{"line":37,"column":10},"end":{"line":37,"column":34}},"type":"ExpressionStatement","expression":{"range":[1364,1387],"loc":{"start":{"line":37,"column":10},"end":{"line":37,"column":33}},"type":"AssignmentExpression","operator":"=","left":{"range":[1364,1367],"loc":{"start":{"line":37,"column":10},"end":{"line":37,"column":13}},"type":"Identifier","name":"tmp"},"right":{"range":[1370,1387],"loc":{"start":{"line":37,"column":16},"end":{"line":37,"column":33}},"type":"CallExpression","callee":{"range":[1370,1375],"loc":{"start":{"line":37,"column":16},"end":{"line":37,"column":21}},"type":"Identifier","name":"slice"},"arguments":[{"range":[1376,1381],"loc":{"start":{"line":37,"column":22},"end":{"line":37,"column":27}},"type":"Identifier","name":"start"},{"range":[1383,1386],"loc":{"start":{"line":37,"column":29},"end":{"line":37,"column":32}},"type":"Identifier","name":"end"}]}}},{"range":[1399,1558],"loc":{"start":{"line":38,"column":10},"end":{"line":39,"column":73}},"type":"IfStatement","test":{"range":[1403,1440],"loc":{"start":{"line":38,"column":14},"end":{"line":38,"column":51}},"type":"LogicalExpression","operator":"&&","left":{"range":[1403,1413],"loc":{"start":{"line":38,"column":14},"end":{"line":38,"column":24}},"type":"BinaryExpression","operator":"===","left":{"range":[1403,1407],"loc":{"start":{"line":38,"column":14},"end":{"line":38,"column":18}},"type":"Identifier","name":"step"},"right":{"range":[1412,1413],"loc":{"start":{"line":38,"column":23},"end":{"line":38,"column":24}},"type":"Literal","value":1,"raw":"1"}},"right":{"range":[1417,1440],"loc":{"start":{"line":38,"column":28},"end":{"line":38,"column":51}},"type":"BinaryExpression","operator":"!==","left":{"range":[1417,1427],"loc":{"start":{"line":38,"column":28},"end":{"line":38,"column":38}},"type":"UnaryExpression","operator":"typeof","argument":{"range":[1424,1427],"loc":{"start":{"line":38,"column":35},"end":{"line":38,"column":38}},"type":"Identifier","name":"tmp"},"prefix":true},"right":{"range":[1432,1440],"loc":{"start":{"line":38,"column":43},"end":{"line":38,"column":51}},"type":"Literal","value":"string","raw":"'string'"}}},"consequent":{"range":[1442,1484],"loc":{"start":{"line":38,"column":53},"end":{"line":38,"column":95}},"type":"ExpressionStatement","expression":{"range":[1442,1483],"loc":{"start":{"line":38,"column":53},"end":{"line":38,"column":94}},"type":"AssignmentExpression","operator":"=","left":{"range":[1442,1445],"loc":{"start":{"line":38,"column":53},"end":{"line":38,"column":56}},"type":"Identifier","name":"ret"},"right":{"range":[1448,1483],"loc":{"start":{"line":38,"column":59},"end":{"line":38,"column":94}},"type":"CallExpression","callee":{"range":[1448,1478],"loc":{"start":{"line":38,"column":59},"end":{"line":38,"column":89}},"type":"MemberExpression","computed":false,"object":{"range":[1448,1467],"loc":{"start":{"line":38,"column":59},"end":{"line":38,"column":78}},"type":"MemberExpression","computed":false,"object":{"range":[1448,1461],"loc":{"start":{"line":38,"column":59},"end":{"line":38,"column":72}},"type":"Identifier","name":"pythonRuntime"},"property":{"range":[1462,1467],"loc":{"start":{"line":38,"column":73},"end":{"line":38,"column":78}},"type":"Identifier","name":"utils"}},"property":{"range":[1468,1478],"loc":{"start":{"line":38,"column":79},"end":{"line":38,"column":89}},"type":"Identifier","name":"createList"}},"arguments":[{"range":[1479,1482],"loc":{"start":{"line":38,"column":90},"end":{"line":38,"column":93}},"type":"Identifier","name":"tmp"}]}}},"alternate":{"range":[1500,1558],"loc":{"start":{"line":39,"column":15},"end":{"line":39,"column":73}},"type":"ForStatement","init":{"range":[1505,1510],"loc":{"start":{"line":39,"column":20},"end":{"line":39,"column":25}},"type":"AssignmentExpression","operator":"=","left":{"range":[1505,1506],"loc":{"start":{"line":39,"column":20},"end":{"line":39,"column":21}},"type":"Identifier","name":"i"},"right":{"range":[1509,1510],"loc":{"start":{"line":39,"column":24},"end":{"line":39,"column":25}},"type":"Literal","value":0,"raw":"0"}},"test":{"range":[1512,1526],"loc":{"start":{"line":39,"column":27},"end":{"line":39,"column":41}},"type":"BinaryExpression","operator":"<","left":{"range":[1512,1513],"loc":{"start":{"line":39,"column":27},"end":{"line":39,"column":28}},"type":"Identifier","name":"i"},"right":{"range":[1516,1526],"loc":{"start":{"line":39,"column":31},"end":{"line":39,"column":41}},"type":"MemberExpression","computed":false,"object":{"range":[1516,1519],"loc":{"start":{"line":39,"column":31},"end":{"line":39,"column":34}},"type":"Identifier","name":"tmp"},"property":{"range":[1520,1526],"loc":{"start":{"line":39,"column":35},"end":{"line":39,"column":41}},"type":"Identifier","name":"length"}}},"update":{"range":[1528,1537],"loc":{"start":{"line":39,"column":43},"end":{"line":39,"column":52}},"type":"AssignmentExpression","operator":"+=","left":{"range":[1528,1529],"loc":{"start":{"line":39,"column":43},"end":{"line":39,"column":44}},"type":"Identifier","name":"i"},"right":{"range":[1533,1537],"loc":{"start":{"line":39,"column":48},"end":{"line":39,"column":52}},"type":"Identifier","name":"step"}},"body":{"range":[1539,1558],"loc":{"start":{"line":39,"column":54},"end":{"line":39,"column":73}},"type":"ExpressionStatement","expression":{"range":[1539,1557],"loc":{"start":{"line":39,"column":54},"end":{"line":39,"column":72}},"type":"CallExpression","callee":{"range":[1539,1549],"loc":{"start":{"line":39,"column":54},"end":{"line":39,"column":64}},"type":"MemberExpression","computed":false,"object":{"range":[1539,1542],"loc":{"start":{"line":39,"column":54},"end":{"line":39,"column":57}},"type":"Identifier","name":"ret"},"property":{"range":[1543,1549],"loc":{"start":{"line":39,"column":58},"end":{"line":39,"column":64}},"type":"Identifier","name":"append"}},"arguments":[{"range":[1550,1556],"loc":{"start":{"line":39,"column":65},"end":{"line":39,"column":71}},"type":"MemberExpression","computed":true,"object":{"range":[1550,1553],"loc":{"start":{"line":39,"column":65},"end":{"line":39,"column":68}},"type":"Identifier","name":"tmp"},"property":{"range":[1554,1555],"loc":{"start":{"line":39,"column":69},"end":{"line":39,"column":70}},"type":"Identifier","name":"i"}}]}}}}]}},{"range":[1577,1628],"loc":{"start":{"line":41,"column":8},"end":{"line":41,"column":59}},"type":"IfStatement","test":{"range":[1582,1605],"loc":{"start":{"line":41,"column":13},"end":{"line":41,"column":36}},"type":"BinaryExpression","operator":"===","left":{"range":[1582,1592],"loc":{"start":{"line":41,"column":13},"end":{"line":41,"column":23}},"type":"UnaryExpression","operator":"typeof","argument":{"range":[1589,1592],"loc":{"start":{"line":41,"column":20},"end":{"line":41,"column":23}},"type":"Identifier","name":"obj"},"prefix":true},"right":{"range":[1597,1605],"loc":{"start":{"line":41,"column":28},"end":{"line":41,"column":36}},"type":"Literal","value":"string","raw":"'string'"}},"consequent":{"range":[1608,1628],"loc":{"start":{"line":41,"column":39},"end":{"line":41,"column":59}},"type":"ReturnStatement","argument":{"range":[1615,1627],"loc":{"start":{"line":41,"column":46},"end":{"line":41,"column":58}},"type":"CallExpression","callee":{"range":[1615,1623],"loc":{"start":{"line":41,"column":46},"end":{"line":41,"column":54}},"type":"MemberExpression","computed":false,"object":{"range":[1615,1618],"loc":{"start":{"line":41,"column":46},"end":{"line":41,"column":49}},"type":"Identifier","name":"ret"},"property":{"range":[1619,1623],"loc":{"start":{"line":41,"column":50},"end":{"line":41,"column":54}},"type":"Identifier","name":"join"}},"arguments":[{"range":[1624,1626],"loc":{"start":{"line":41,"column":55},"end":{"line":41,"column":57}},"type":"Literal","value":"","raw":"''"}]}},"alternate":null},{"range":[1637,1648],"loc":{"start":{"line":42,"column":8},"end":{"line":42,"column":19}},"type":"ReturnStatement","argument":{"range":[1644,1647],"loc":{"start":{"line":42,"column":15},"end":{"line":42,"column":18}},"type":"Identifier","name":"ret"}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[1664,1771],"loc":{"start":{"line":44,"column":6},"end":{"line":46,"column":7}},"type":"Property","key":{"range":[1664,1673],"loc":{"start":{"line":44,"column":6},"end":{"line":44,"column":15}},"type":"Identifier","name":"isJSArray"},"computed":false,"value":{"range":[1675,1771],"loc":{"start":{"line":44,"column":17},"end":{"line":46,"column":7}},"type":"LogicalExpression","operator":"||","left":{"range":[1675,1688],"loc":{"start":{"line":44,"column":17},"end":{"line":44,"column":30}},"type":"MemberExpression","computed":false,"object":{"range":[1675,1680],"loc":{"start":{"line":44,"column":17},"end":{"line":44,"column":22}},"type":"Identifier","name":"Array"},"property":{"range":[1681,1688],"loc":{"start":{"line":44,"column":23},"end":{"line":44,"column":30}},"type":"Identifier","name":"isArray"}},"right":{"range":[1692,1771],"loc":{"start":{"line":44,"column":34},"end":{"line":46,"column":7}},"type":"FunctionExpression","id":null,"params":[{"range":[1701,1704],"loc":{"start":{"line":44,"column":43},"end":{"line":44,"column":46}},"type":"Identifier","name":"obj"}],"defaults":[],"body":{"range":[1706,1771],"loc":{"start":{"line":44,"column":48},"end":{"line":46,"column":7}},"type":"BlockStatement","body":[{"range":[1716,1763],"loc":{"start":{"line":45,"column":8},"end":{"line":45,"column":55}},"type":"ReturnStatement","argument":{"range":[1723,1762],"loc":{"start":{"line":45,"column":15},"end":{"line":45,"column":54}},"type":"BinaryExpression","operator":"===","left":{"range":[1723,1741],"loc":{"start":{"line":45,"column":15},"end":{"line":45,"column":33}},"type":"CallExpression","callee":{"range":[1723,1736],"loc":{"start":{"line":45,"column":15},"end":{"line":45,"column":28}},"type":"MemberExpression","computed":false,"object":{"range":[1723,1731],"loc":{"start":{"line":45,"column":15},"end":{"line":45,"column":23}},"type":"Identifier","name":"toString"},"property":{"range":[1732,1736],"loc":{"start":{"line":45,"column":24},"end":{"line":45,"column":28}},"type":"Identifier","name":"call"}},"arguments":[{"range":[1737,1740],"loc":{"start":{"line":45,"column":29},"end":{"line":45,"column":32}},"type":"Identifier","name":"obj"}]},"right":{"range":[1746,1762],"loc":{"start":{"line":45,"column":38},"end":{"line":45,"column":54}},"type":"Literal","value":"[object Array]","raw":"'[object Array]'"}}}]},"generator":false,"expression":false}},"kind":"init","method":false,"shorthand":false}]},"kind":"init","method":false,"shorthand":false},{"range":[1784,9897],"loc":{"start":{"line":49,"column":4},"end":{"line":303,"column":5}},"type":"Property","key":{"range":[1784,1789],"loc":{"start":{"line":49,"column":4},"end":{"line":49,"column":9}},"type":"Identifier","name":"utils"},"computed":false,"value":{"range":[1791,9897],"loc":{"start":{"line":49,"column":11},"end":{"line":303,"column":5}},"type":"ObjectExpression","properties":[{"range":[1799,2127],"loc":{"start":{"line":50,"column":6},"end":{"line":57,"column":7}},"type":"Property","key":{"range":[1799,1809],"loc":{"start":{"line":50,"column":6},"end":{"line":50,"column":16}},"type":"Identifier","name":"createDict"},"computed":false,"value":{"range":[1811,2127],"loc":{"start":{"line":50,"column":18},"end":{"line":57,"column":7}},"type":"FunctionExpression","id":null,"params":[],"defaults":[],"body":{"range":[1823,2127],"loc":{"start":{"line":50,"column":30},"end":{"line":57,"column":7}},"type":"BlockStatement","body":[{"range":[1833,1876],"loc":{"start":{"line":51,"column":8},"end":{"line":51,"column":51}},"type":"VariableDeclaration","declarations":[{"range":[1837,1875],"loc":{"start":{"line":51,"column":12},"end":{"line":51,"column":50}},"type":"VariableDeclarator","id":{"range":[1837,1840],"loc":{"start":{"line":51,"column":12},"end":{"line":51,"column":15}},"type":"Identifier","name":"ret"},"init":{"range":[1843,1875],"loc":{"start":{"line":51,"column":18},"end":{"line":51,"column":50}},"type":"NewExpression","callee":{"range":[1847,1873],"loc":{"start":{"line":51,"column":22},"end":{"line":51,"column":48}},"type":"MemberExpression","computed":false,"object":{"range":[1847,1868],"loc":{"start":{"line":51,"column":22},"end":{"line":51,"column":43}},"type":"MemberExpression","computed":false,"object":{"range":[1847,1860],"loc":{"start":{"line":51,"column":22},"end":{"line":51,"column":35}},"type":"Identifier","name":"pythonRuntime"},"property":{"range":[1861,1868],"loc":{"start":{"line":51,"column":36},"end":{"line":51,"column":43}},"type":"Identifier","name":"objects"}},"property":{"range":[1869,1873],"loc":{"start":{"line":51,"column":44},"end":{"line":51,"column":48}},"type":"Identifier","name":"dict"}},"arguments":[]}}],"kind":"var"},{"range":[1885,2099],"loc":{"start":{"line":52,"column":8},"end":{"line":55,"column":75}},"type":"IfStatement","test":{"range":[1889,1945],"loc":{"start":{"line":52,"column":12},"end":{"line":52,"column":68}},"type":"LogicalExpression","operator":"&&","left":{"range":[1889,1911],"loc":{"start":{"line":52,"column":12},"end":{"line":52,"column":34}},"type":"BinaryExpression","operator":"===","left":{"range":[1889,1905],"loc":{"start":{"line":52,"column":12},"end":{"line":52,"column":28}},"type":"MemberExpression","computed":false,"object":{"range":[1889,1898],"loc":{"start":{"line":52,"column":12},"end":{"line":52,"column":21}},"type":"Identifier","name":"arguments"},"property":{"range":[1899,1905],"loc":{"start":{"line":52,"column":22},"end":{"line":52,"column":28}},"type":"Identifier","name":"length"}},"right":{"range":[1910,1911],"loc":{"start":{"line":52,"column":33},"end":{"line":52,"column":34}},"type":"Literal","value":1,"raw":"1"}},"right":{"range":[1915,1945],"loc":{"start":{"line":52,"column":38},"end":{"line":52,"column":68}},"type":"BinaryExpression","operator":"instanceof","left":{"range":[1915,1927],"loc":{"start":{"line":52,"column":38},"end":{"line":52,"column":50}},"type":"MemberExpression","computed":true,"object":{"range":[1915,1924],"loc":{"start":{"line":52,"column":38},"end":{"line":52,"column":47}},"type":"Identifier","name":"arguments"},"property":{"range":[1925,1926],"loc":{"start":{"line":52,"column":48},"end":{"line":52,"column":49}},"type":"Literal","value":0,"raw":"0"}},"right":{"range":[1939,1945],"loc":{"start":{"line":52,"column":62},"end":{"line":52,"column":68}},"type":"Identifier","name":"Object"}}},"consequent":{"range":[1957,2010],"loc":{"start":{"line":53,"column":10},"end":{"line":53,"column":63}},"type":"ForInStatement","left":{"range":[1962,1967],"loc":{"start":{"line":53,"column":15},"end":{"line":53,"column":20}},"type":"VariableDeclaration","declarations":[{"range":[1966,1967],"loc":{"start":{"line":53,"column":19},"end":{"line":53,"column":20}},"type":"VariableDeclarator","id":{"range":[1966,1967],"loc":{"start":{"line":53,"column":19},"end":{"line":53,"column":20}},"type":"Identifier","name":"k"},"init":null}],"kind":"var"},"right":{"range":[1971,1983],"loc":{"start":{"line":53,"column":24},"end":{"line":53,"column":36}},"type":"MemberExpression","computed":true,"object":{"range":[1971,1980],"loc":{"start":{"line":53,"column":24},"end":{"line":53,"column":33}},"type":"Identifier","name":"arguments"},"property":{"range":[1981,1982],"loc":{"start":{"line":53,"column":34},"end":{"line":53,"column":35}},"type":"Literal","value":0,"raw":"0"}},"body":{"range":[1985,2010],"loc":{"start":{"line":53,"column":38},"end":{"line":53,"column":63}},"type":"ExpressionStatement","expression":{"range":[1985,2009],"loc":{"start":{"line":53,"column":38},"end":{"line":53,"column":62}},"type":"AssignmentExpression","operator":"=","left":{"range":[1985,1991],"loc":{"start":{"line":53,"column":38},"end":{"line":53,"column":44}},"type":"MemberExpression","computed":true,"object":{"range":[1985,1988],"loc":{"start":{"line":53,"column":38},"end":{"line":53,"column":41}},"type":"Identifier","name":"ret"},"property":{"range":[1989,1990],"loc":{"start":{"line":53,"column":42},"end":{"line":53,"column":43}},"type":"Identifier","name":"k"}},"right":{"range":[1994,2009],"loc":{"start":{"line":53,"column":47},"end":{"line":53,"column":62}},"type":"MemberExpression","computed":true,"object":{"range":[1994,2006],"loc":{"start":{"line":53,"column":47},"end":{"line":53,"column":59}},"type":"MemberExpression","computed":true,"object":{"range":[1994,2003],"loc":{"start":{"line":53,"column":47},"end":{"line":53,"column":56}},"type":"Identifier","name":"arguments"},"property":{"range":[2004,2005],"loc":{"start":{"line":53,"column":57},"end":{"line":53,"column":58}},"type":"Literal","value":0,"raw":"0"}},"property":{"range":[2007,2008],"loc":{"start":{"line":53,"column":60},"end":{"line":53,"column":61}},"type":"Identifier","name":"k"}}}},"each":false},"alternate":{"range":[2034,2099],"loc":{"start":{"line":55,"column":10},"end":{"line":55,"column":75}},"type":"ThrowStatement","argument":{"range":[2040,2098],"loc":{"start":{"line":55,"column":16},"end":{"line":55,"column":74}},"type":"CallExpression","callee":{"range":[2040,2049],"loc":{"start":{"line":55,"column":16},"end":{"line":55,"column":25}},"type":"Identifier","name":"TypeError"},"arguments":[{"range":[2050,2097],"loc":{"start":{"line":55,"column":26},"end":{"line":55,"column":73}},"type":"Literal","value":"createDict expects a single JavaScript object","raw":"\"createDict expects a single JavaScript object\""}]}}},{"range":[2108,2119],"loc":{"start":{"line":56,"column":8},"end":{"line":56,"column":19}},"type":"ReturnStatement","argument":{"range":[2115,2118],"loc":{"start":{"line":56,"column":15},"end":{"line":56,"column":18}},"type":"Identifier","name":"ret"}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[2135,2749],"loc":{"start":{"line":58,"column":6},"end":{"line":70,"column":7}},"type":"Property","key":{"range":[2135,2150],"loc":{"start":{"line":58,"column":6},"end":{"line":58,"column":21}},"type":"Identifier","name":"createParamsObj"},"computed":false,"value":{"range":[2152,2749],"loc":{"start":{"line":58,"column":23},"end":{"line":70,"column":7}},"type":"FunctionExpression","id":null,"params":[],"defaults":[],"body":{"range":[2164,2749],"loc":{"start":{"line":58,"column":35},"end":{"line":70,"column":7}},"type":"BlockStatement","body":[{"range":[2334,2421],"loc":{"start":{"line":61,"column":8},"end":{"line":61,"column":95}},"type":"VariableDeclaration","declarations":[{"range":[2338,2420],"loc":{"start":{"line":61,"column":12},"end":{"line":61,"column":94}},"type":"VariableDeclarator","id":{"range":[2338,2344],"loc":{"start":{"line":61,"column":12},"end":{"line":61,"column":18}},"type":"Identifier","name":"params"},"init":{"range":[2347,2420],"loc":{"start":{"line":61,"column":21},"end":{"line":61,"column":94}},"type":"ObjectExpression","properties":[{"range":[2349,2390],"loc":{"start":{"line":61,"column":23},"end":{"line":61,"column":64}},"type":"Property","key":{"range":[2349,2356],"loc":{"start":{"line":61,"column":23},"end":{"line":61,"column":30}},"type":"Identifier","name":"formals"},"computed":false,"value":{"range":[2358,2390],"loc":{"start":{"line":61,"column":32},"end":{"line":61,"column":64}},"type":"NewExpression","callee":{"range":[2362,2388],"loc":{"start":{"line":61,"column":36},"end":{"line":61,"column":62}},"type":"MemberExpression","computed":false,"object":{"range":[2362,2383],"loc":{"start":{"line":61,"column":36},"end":{"line":61,"column":57}},"type":"MemberExpression","computed":false,"object":{"range":[2362,2375],"loc":{"start":{"line":61,"column":36},"end":{"line":61,"column":49}},"type":"Identifier","name":"pythonRuntime"},"property":{"range":[2376,2383],"loc":{"start":{"line":61,"column":50},"end":{"line":61,"column":57}},"type":"Identifier","name":"objects"}},"property":{"range":[2384,2388],"loc":{"start":{"line":61,"column":58},"end":{"line":61,"column":62}},"type":"Identifier","name":"list"}},"arguments":[]},"kind":"init","method":false,"shorthand":false},{"range":[2392,2418],"loc":{"start":{"line":61,"column":66},"end":{"line":61,"column":92}},"type":"Property","key":{"range":[2392,2400],"loc":{"start":{"line":61,"column":66},"end":{"line":61,"column":74}},"type":"Identifier","name":"keywords"},"computed":false,"value":{"range":[2402,2418],"loc":{"start":{"line":61,"column":76},"end":{"line":61,"column":92}},"type":"NewExpression","callee":{"range":[2406,2416],"loc":{"start":{"line":61,"column":80},"end":{"line":61,"column":90}},"type":"Identifier","name":"PythonDict"},"arguments":[]},"kind":"init","method":false,"shorthand":false}]}}],"kind":"var"},{"range":[2430,2718],"loc":{"start":{"line":62,"column":8},"end":{"line":68,"column":9}},"type":"ForStatement","init":{"range":[2435,2444],"loc":{"start":{"line":62,"column":13},"end":{"line":62,"column":22}},"type":"VariableDeclaration","declarations":[{"range":[2439,2444],"loc":{"start":{"line":62,"column":17},"end":{"line":62,"column":22}},"type":"VariableDeclarator","id":{"range":[2439,2440],"loc":{"start":{"line":62,"column":17},"end":{"line":62,"column":18}},"type":"Identifier","name":"i"},"init":{"range":[2443,2444],"loc":{"start":{"line":62,"column":21},"end":{"line":62,"column":22}},"type":"Literal","value":0,"raw":"0"}}],"kind":"var"},"test":{"range":[2446,2466],"loc":{"start":{"line":62,"column":24},"end":{"line":62,"column":44}},"type":"BinaryExpression","operator":"<","left":{"range":[2446,2447],"loc":{"start":{"line":62,"column":24},"end":{"line":62,"column":25}},"type":"Identifier","name":"i"},"right":{"range":[2450,2466],"loc":{"start":{"line":62,"column":28},"end":{"line":62,"column":44}},"type":"MemberExpression","computed":false,"object":{"range":[2450,2459],"loc":{"start":{"line":62,"column":28},"end":{"line":62,"column":37}},"type":"Identifier","name":"arguments"},"property":{"range":[2460,2466],"loc":{"start":{"line":62,"column":38},"end":{"line":62,"column":44}},"type":"Identifier","name":"length"}}},"update":{"range":[2468,2471],"loc":{"start":{"line":62,"column":46},"end":{"line":62,"column":49}},"type":"UpdateExpression","operator":"++","argument":{"range":[2468,2469],"loc":{"start":{"line":62,"column":46},"end":{"line":62,"column":47}},"type":"Identifier","name":"i"},"prefix":false},"body":{"range":[2473,2718],"loc":{"start":{"line":62,"column":51},"end":{"line":68,"column":9}},"type":"BlockStatement","body":[{"range":[2485,2708],"loc":{"start":{"line":63,"column":10},"end":{"line":67,"column":49}},"type":"IfStatement","test":{"range":[2489,2532],"loc":{"start":{"line":63,"column":14},"end":{"line":63,"column":57}},"type":"LogicalExpression","operator":"&&","left":{"range":[2489,2501],"loc":{"start":{"line":63,"column":14},"end":{"line":63,"column":26}},"type":"MemberExpression","computed":true,"object":{"range":[2489,2498],"loc":{"start":{"line":63,"column":14},"end":{"line":63,"column":23}},"type":"Identifier","name":"arguments"},"property":{"range":[2499,2500],"loc":{"start":{"line":63,"column":24},"end":{"line":63,"column":25}},"type":"Identifier","name":"i"}},"right":{"range":[2505,2532],"loc":{"start":{"line":63,"column":30},"end":{"line":63,"column":57}},"type":"BinaryExpression","operator":"===","left":{"range":[2505,2523],"loc":{"start":{"line":63,"column":30},"end":{"line":63,"column":48}},"type":"MemberExpression","computed":false,"object":{"range":[2505,2517],"loc":{"start":{"line":63,"column":30},"end":{"line":63,"column":42}},"type":"MemberExpression","computed":true,"object":{"range":[2505,2514],"loc":{"start":{"line":63,"column":30},"end":{"line":63,"column":39}},"type":"Identifier","name":"arguments"},"property":{"range":[2515,2516],"loc":{"start":{"line":63,"column":40},"end":{"line":63,"column":41}},"type":"Identifier","name":"i"}},"property":{"range":[2518,2523],"loc":{"start":{"line":63,"column":43},"end":{"line":63,"column":48}},"type":"Identifier","name":"__kwp"}},"right":{"range":[2528,2532],"loc":{"start":{"line":63,"column":53},"end":{"line":63,"column":57}},"type":"Literal","value":true,"raw":"true"}}},"consequent":{"range":[2534,2658],"loc":{"start":{"line":63,"column":59},"end":{"line":66,"column":11}},"type":"BlockStatement","body":[{"range":[2548,2646],"loc":{"start":{"line":64,"column":12},"end":{"line":65,"column":70}},"type":"ForInStatement","left":{"range":[2553,2558],"loc":{"start":{"line":64,"column":17},"end":{"line":64,"column":22}},"type":"VariableDeclaration","declarations":[{"range":[2557,2558],"loc":{"start":{"line":64,"column":21},"end":{"line":64,"column":22}},"type":"VariableDeclarator","id":{"range":[2557,2558],"loc":{"start":{"line":64,"column":21},"end":{"line":64,"column":22}},"type":"Identifier","name":"k"},"init":null}],"kind":"var"},"right":{"range":[2562,2574],"loc":{"start":{"line":64,"column":26},"end":{"line":64,"column":38}},"type":"MemberExpression","computed":true,"object":{"range":[2562,2571],"loc":{"start":{"line":64,"column":26},"end":{"line":64,"column":35}},"type":"Identifier","name":"arguments"},"property":{"range":[2572,2573],"loc":{"start":{"line":64,"column":36},"end":{"line":64,"column":37}},"type":"Identifier","name":"i"}},"body":{"range":[2590,2646],"loc":{"start":{"line":65,"column":14},"end":{"line":65,"column":70}},"type":"IfStatement","test":{"range":[2594,2607],"loc":{"start":{"line":65,"column":18},"end":{"line":65,"column":31}},"type":"BinaryExpression","operator":"!==","left":{"range":[2594,2595],"loc":{"start":{"line":65,"column":18},"end":{"line":65,"column":19}},"type":"Identifier","name":"k"},"right":{"range":[2600,2607],"loc":{"start":{"line":65,"column":24},"end":{"line":65,"column":31}},"type":"Literal","value":"__kwp","raw":"'__kwp'"}},"consequent":{"range":[2609,2646],"loc":{"start":{"line":65,"column":33},"end":{"line":65,"column":70}},"type":"ExpressionStatement","expression":{"range":[2609,2645],"loc":{"start":{"line":65,"column":33},"end":{"line":65,"column":69}},"type":"AssignmentExpression","operator":"=","left":{"range":[2609,2627],"loc":{"start":{"line":65,"column":33},"end":{"line":65,"column":51}},"type":"MemberExpression","computed":true,"object":{"range":[2609,2624],"loc":{"start":{"line":65,"column":33},"end":{"line":65,"column":48}},"type":"MemberExpression","computed":false,"object":{"range":[2609,2615],"loc":{"start":{"line":65,"column":33},"end":{"line":65,"column":39}},"type":"Identifier","name":"params"},"property":{"range":[2616,2624],"loc":{"start":{"line":65,"column":40},"end":{"line":65,"column":48}},"type":"Identifier","name":"keywords"}},"property":{"range":[2625,2626],"loc":{"start":{"line":65,"column":49},"end":{"line":65,"column":50}},"type":"Identifier","name":"k"}},"right":{"range":[2630,2645],"loc":{"start":{"line":65,"column":54},"end":{"line":65,"column":69}},"type":"MemberExpression","computed":true,"object":{"range":[2630,2642],"loc":{"start":{"line":65,"column":54},"end":{"line":65,"column":66}},"type":"MemberExpression","computed":true,"object":{"range":[2630,2639],"loc":{"start":{"line":65,"column":54},"end":{"line":65,"column":63}},"type":"Identifier","name":"arguments"},"property":{"range":[2640,2641],"loc":{"start":{"line":65,"column":64},"end":{"line":65,"column":65}},"type":"Identifier","name":"i"}},"property":{"range":[2643,2644],"loc":{"start":{"line":65,"column":67},"end":{"line":65,"column":68}},"type":"Identifier","name":"k"}}}},"alternate":null},"each":false}]},"alternate":{"range":[2674,2708],"loc":{"start":{"line":67,"column":15},"end":{"line":67,"column":49}},"type":"ExpressionStatement","expression":{"range":[2674,2707],"loc":{"start":{"line":67,"column":15},"end":{"line":67,"column":48}},"type":"CallExpression","callee":{"range":[2674,2693],"loc":{"start":{"line":67,"column":15},"end":{"line":67,"column":34}},"type":"MemberExpression","computed":false,"object":{"range":[2674,2688],"loc":{"start":{"line":67,"column":15},"end":{"line":67,"column":29}},"type":"MemberExpression","computed":false,"object":{"range":[2674,2680],"loc":{"start":{"line":67,"column":15},"end":{"line":67,"column":21}},"type":"Identifier","name":"params"},"property":{"range":[2681,2688],"loc":{"start":{"line":67,"column":22},"end":{"line":67,"column":29}},"type":"Identifier","name":"formals"}},"property":{"range":[2689,2693],"loc":{"start":{"line":67,"column":30},"end":{"line":67,"column":34}},"type":"Identifier","name":"push"}},"arguments":[{"range":[2694,2706],"loc":{"start":{"line":67,"column":35},"end":{"line":67,"column":47}},"type":"MemberExpression","computed":true,"object":{"range":[2694,2703],"loc":{"start":{"line":67,"column":35},"end":{"line":67,"column":44}},"type":"Identifier","name":"arguments"},"property":{"range":[2704,2705],"loc":{"start":{"line":67,"column":45},"end":{"line":67,"column":46}},"type":"Identifier","name":"i"}}]}}}]}},{"range":[2727,2741],"loc":{"start":{"line":69,"column":8},"end":{"line":69,"column":22}},"type":"ReturnStatement","argument":{"range":[2734,2740],"loc":{"start":{"line":69,"column":15},"end":{"line":69,"column":21}},"type":"Identifier","name":"params"}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[2757,2901],"loc":{"start":{"line":71,"column":6},"end":{"line":74,"column":7}},"type":"Property","key":{"range":[2757,2770],"loc":{"start":{"line":71,"column":6},"end":{"line":71,"column":19}},"type":"Identifier","name":"convertToList"},"computed":false,"value":{"range":[2772,2901],"loc":{"start":{"line":71,"column":21},"end":{"line":74,"column":7}},"type":"FunctionExpression","id":null,"params":[{"range":[2782,2786],"loc":{"start":{"line":71,"column":31},"end":{"line":71,"column":35}},"type":"Identifier","name":"list"}],"defaults":[],"body":{"range":[2788,2901],"loc":{"start":{"line":71,"column":37},"end":{"line":74,"column":7}},"type":"BlockStatement","body":[{"range":[2798,2872],"loc":{"start":{"line":72,"column":8},"end":{"line":72,"column":82}},"type":"ExpressionStatement","expression":{"range":[2798,2871],"loc":{"start":{"line":72,"column":8},"end":{"line":72,"column":81}},"type":"CallExpression","callee":{"range":[2798,2821],"loc":{"start":{"line":72,"column":8},"end":{"line":72,"column":31}},"type":"MemberExpression","computed":false,"object":{"range":[2798,2804],"loc":{"start":{"line":72,"column":8},"end":{"line":72,"column":14}},"type":"Identifier","name":"Object"},"property":{"range":[2805,2821],"loc":{"start":{"line":72,"column":15},"end":{"line":72,"column":31}},"type":"Identifier","name":"defineProperties"}},"arguments":[{"range":[2822,2826],"loc":{"start":{"line":72,"column":32},"end":{"line":72,"column":36}},"type":"Identifier","name":"list"},{"range":[2828,2870],"loc":{"start":{"line":72,"column":38},"end":{"line":72,"column":80}},"type":"MemberExpression","computed":false,"object":{"range":[2828,2847],"loc":{"start":{"line":72,"column":38},"end":{"line":72,"column":57}},"type":"MemberExpression","computed":false,"object":{"range":[2828,2841],"loc":{"start":{"line":72,"column":38},"end":{"line":72,"column":51}},"type":"Identifier","name":"pythonRuntime"},"property":{"range":[2842,2847],"loc":{"start":{"line":72,"column":52},"end":{"line":72,"column":57}},"type":"Identifier","name":"utils"}},"property":{"range":[2848,2870],"loc":{"start":{"line":72,"column":58},"end":{"line":72,"column":80}},"type":"Identifier","name":"listPropertyDescriptor"}}]}},{"range":[2881,2893],"loc":{"start":{"line":73,"column":8},"end":{"line":73,"column":20}},"type":"ReturnStatement","argument":{"range":[2888,2892],"loc":{"start":{"line":73,"column":15},"end":{"line":73,"column":19}},"type":"Identifier","name":"list"}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[2909,3053],"loc":{"start":{"line":75,"column":6},"end":{"line":78,"column":7}},"type":"Property","key":{"range":[2909,2922],"loc":{"start":{"line":75,"column":6},"end":{"line":75,"column":19}},"type":"Identifier","name":"convertToDict"},"computed":false,"value":{"range":[2924,3053],"loc":{"start":{"line":75,"column":21},"end":{"line":78,"column":7}},"type":"FunctionExpression","id":null,"params":[{"range":[2934,2938],"loc":{"start":{"line":75,"column":31},"end":{"line":75,"column":35}},"type":"Identifier","name":"dict"}],"defaults":[],"body":{"range":[2940,3053],"loc":{"start":{"line":75,"column":37},"end":{"line":78,"column":7}},"type":"BlockStatement","body":[{"range":[2950,3024],"loc":{"start":{"line":76,"column":8},"end":{"line":76,"column":82}},"type":"ExpressionStatement","expression":{"range":[2950,3023],"loc":{"start":{"line":76,"column":8},"end":{"line":76,"column":81}},"type":"CallExpression","callee":{"range":[2950,2973],"loc":{"start":{"line":76,"column":8},"end":{"line":76,"column":31}},"type":"MemberExpression","computed":false,"object":{"range":[2950,2956],"loc":{"start":{"line":76,"column":8},"end":{"line":76,"column":14}},"type":"Identifier","name":"Object"},"property":{"range":[2957,2973],"loc":{"start":{"line":76,"column":15},"end":{"line":76,"column":31}},"type":"Identifier","name":"defineProperties"}},"arguments":[{"range":[2974,2978],"loc":{"start":{"line":76,"column":32},"end":{"line":76,"column":36}},"type":"Identifier","name":"dict"},{"range":[2980,3022],"loc":{"start":{"line":76,"column":38},"end":{"line":76,"column":80}},"type":"MemberExpression","computed":false,"object":{"range":[2980,2999],"loc":{"start":{"line":76,"column":38},"end":{"line":76,"column":57}},"type":"MemberExpression","computed":false,"object":{"range":[2980,2993],"loc":{"start":{"line":76,"column":38},"end":{"line":76,"column":51}},"type":"Identifier","name":"pythonRuntime"},"property":{"range":[2994,2999],"loc":{"start":{"line":76,"column":52},"end":{"line":76,"column":57}},"type":"Identifier","name":"utils"}},"property":{"range":[3000,3022],"loc":{"start":{"line":76,"column":58},"end":{"line":76,"column":80}},"type":"Identifier","name":"dictPropertyDescriptor"}}]}},{"range":[3033,3045],"loc":{"start":{"line":77,"column":8},"end":{"line":77,"column":20}},"type":"ReturnStatement","argument":{"range":[3040,3044],"loc":{"start":{"line":77,"column":15},"end":{"line":77,"column":19}},"type":"Identifier","name":"dict"}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[3062,7781],"loc":{"start":{"line":79,"column":6},"end":{"line":231,"column":7}},"type":"Property","key":{"range":[3062,3084],"loc":{"start":{"line":79,"column":6},"end":{"line":79,"column":28}},"type":"Identifier","name":"listPropertyDescriptor"},"computed":false,"value":{"range":[3086,7781],"loc":{"start":{"line":79,"column":30},"end":{"line":231,"column":7}},"type":"ObjectExpression","properties":[{"range":[3098,3199],"loc":{"start":{"line":80,"column":10},"end":{"line":83,"column":11}},"type":"Property","key":{"range":[3098,3105],"loc":{"start":{"line":80,"column":10},"end":{"line":80,"column":17}},"type":"Literal","value":"_type","raw":"\"_type\""},"computed":false,"value":{"range":[3107,3199],"loc":{"start":{"line":80,"column":19},"end":{"line":83,"column":11}},"type":"ObjectExpression","properties":[{"range":[3121,3156],"loc":{"start":{"line":81,"column":12},"end":{"line":81,"column":47}},"type":"Property","key":{"range":[3121,3124],"loc":{"start":{"line":81,"column":12},"end":{"line":81,"column":15}},"type":"Identifier","name":"get"},"computed":false,"value":{"range":[3126,3156],"loc":{"start":{"line":81,"column":17},"end":{"line":81,"column":47}},"type":"FunctionExpression","id":null,"params":[],"defaults":[],"body":{"range":[3138,3156],"loc":{"start":{"line":81,"column":29},"end":{"line":81,"column":47}},"type":"BlockStatement","body":[{"range":[3140,3154],"loc":{"start":{"line":81,"column":31},"end":{"line":81,"column":45}},"type":"ReturnStatement","argument":{"range":[3147,3153],"loc":{"start":{"line":81,"column":38},"end":{"line":81,"column":44}},"type":"Literal","value":"list","raw":"'list'"}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[3170,3187],"loc":{"start":{"line":82,"column":12},"end":{"line":82,"column":29}},"type":"Property","key":{"range":[3170,3180],"loc":{"start":{"line":82,"column":12},"end":{"line":82,"column":22}},"type":"Identifier","name":"enumerable"},"computed":false,"value":{"range":[3182,3187],"loc":{"start":{"line":82,"column":24},"end":{"line":82,"column":29}},"type":"Literal","value":false,"raw":"false"},"kind":"init","method":false,"shorthand":false}]},"kind":"init","method":false,"shorthand":false},{"range":[3211,3314],"loc":{"start":{"line":84,"column":10},"end":{"line":87,"column":11}},"type":"Property","key":{"range":[3211,3222],"loc":{"start":{"line":84,"column":10},"end":{"line":84,"column":21}},"type":"Literal","value":"_isPython","raw":"\"_isPython\""},"computed":false,"value":{"range":[3224,3314],"loc":{"start":{"line":84,"column":23},"end":{"line":87,"column":11}},"type":"ObjectExpression","properties":[{"range":[3238,3271],"loc":{"start":{"line":85,"column":12},"end":{"line":85,"column":45}},"type":"Property","key":{"range":[3238,3241],"loc":{"start":{"line":85,"column":12},"end":{"line":85,"column":15}},"type":"Identifier","name":"get"},"computed":false,"value":{"range":[3243,3271],"loc":{"start":{"line":85,"column":17},"end":{"line":85,"column":45}},"type":"FunctionExpression","id":null,"params":[],"defaults":[],"body":{"range":[3255,3271],"loc":{"start":{"line":85,"column":29},"end":{"line":85,"column":45}},"type":"BlockStatement","body":[{"range":[3257,3269],"loc":{"start":{"line":85,"column":31},"end":{"line":85,"column":43}},"type":"ReturnStatement","argument":{"range":[3264,3268],"loc":{"start":{"line":85,"column":38},"end":{"line":85,"column":42}},"type":"Literal","value":true,"raw":"true"}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[3285,3302],"loc":{"start":{"line":86,"column":12},"end":{"line":86,"column":29}},"type":"Property","key":{"range":[3285,3295],"loc":{"start":{"line":86,"column":12},"end":{"line":86,"column":22}},"type":"Identifier","name":"enumerable"},"computed":false,"value":{"range":[3297,3302],"loc":{"start":{"line":86,"column":24},"end":{"line":86,"column":29}},"type":"Literal","value":false,"raw":"false"},"kind":"init","method":false,"shorthand":false}]},"kind":"init","method":false,"shorthand":false},{"range":[3326,3456],"loc":{"start":{"line":88,"column":10},"end":{"line":93,"column":11}},"type":"Property","key":{"range":[3326,3334],"loc":{"start":{"line":88,"column":10},"end":{"line":88,"column":18}},"type":"Literal","value":"append","raw":"\"append\""},"computed":false,"value":{"range":[3336,3456],"loc":{"start":{"line":88,"column":20},"end":{"line":93,"column":11}},"type":"ObjectExpression","properties":[{"range":[3350,3413],"loc":{"start":{"line":89,"column":12},"end":{"line":91,"column":13}},"type":"Property","key":{"range":[3350,3355],"loc":{"start":{"line":89,"column":12},"end":{"line":89,"column":17}},"type":"Identifier","name":"value"},"computed":false,"value":{"range":[3357,3413],"loc":{"start":{"line":89,"column":19},"end":{"line":91,"column":13}},"type":"FunctionExpression","id":null,"params":[{"range":[3367,3368],"loc":{"start":{"line":89,"column":29},"end":{"line":89,"column":30}},"type":"Identifier","name":"x"}],"defaults":[],"body":{"range":[3370,3413],"loc":{"start":{"line":89,"column":32},"end":{"line":91,"column":13}},"type":"BlockStatement","body":[{"range":[3386,3399],"loc":{"start":{"line":90,"column":14},"end":{"line":90,"column":27}},"type":"ExpressionStatement","expression":{"range":[3386,3398],"loc":{"start":{"line":90,"column":14},"end":{"line":90,"column":26}},"type":"CallExpression","callee":{"range":[3386,3395],"loc":{"start":{"line":90,"column":14},"end":{"line":90,"column":23}},"type":"MemberExpression","computed":false,"object":{"range":[3386,3390],"loc":{"start":{"line":90,"column":14},"end":{"line":90,"column":18}},"type":"ThisExpression"},"property":{"range":[3391,3395],"loc":{"start":{"line":90,"column":19},"end":{"line":90,"column":23}},"type":"Identifier","name":"push"}},"arguments":[{"range":[3396,3397],"loc":{"start":{"line":90,"column":24},"end":{"line":90,"column":25}},"type":"Identifier","name":"x"}]}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[3427,3444],"loc":{"start":{"line":92,"column":12},"end":{"line":92,"column":29}},"type":"Property","key":{"range":[3427,3437],"loc":{"start":{"line":92,"column":12},"end":{"line":92,"column":22}},"type":"Identifier","name":"enumerable"},"computed":false,"value":{"range":[3439,3444],"loc":{"start":{"line":92,"column":24},"end":{"line":92,"column":29}},"type":"Literal","value":false,"raw":"false"},"kind":"init","method":false,"shorthand":false}]},"kind":"init","method":false,"shorthand":false},{"range":[3468,3611],"loc":{"start":{"line":94,"column":10},"end":{"line":99,"column":11}},"type":"Property","key":{"range":[3468,3475],"loc":{"start":{"line":94,"column":10},"end":{"line":94,"column":17}},"type":"Literal","value":"clear","raw":"\"clear\""},"computed":false,"value":{"range":[3477,3611],"loc":{"start":{"line":94,"column":19},"end":{"line":99,"column":11}},"type":"ObjectExpression","properties":[{"range":[3491,3568],"loc":{"start":{"line":95,"column":12},"end":{"line":97,"column":13}},"type":"Property","key":{"range":[3491,3496],"loc":{"start":{"line":95,"column":12},"end":{"line":95,"column":17}},"type":"Identifier","name":"value"},"computed":false,"value":{"range":[3498,3568],"loc":{"start":{"line":95,"column":19},"end":{"line":97,"column":13}},"type":"FunctionExpression","id":null,"params":[],"defaults":[],"body":{"range":[3510,3568],"loc":{"start":{"line":95,"column":31},"end":{"line":97,"column":13}},"type":"BlockStatement","body":[{"range":[3526,3554],"loc":{"start":{"line":96,"column":14},"end":{"line":96,"column":42}},"type":"ExpressionStatement","expression":{"range":[3526,3553],"loc":{"start":{"line":96,"column":14},"end":{"line":96,"column":41}},"type":"CallExpression","callee":{"range":[3526,3537],"loc":{"start":{"line":96,"column":14},"end":{"line":96,"column":25}},"type":"MemberExpression","computed":false,"object":{"range":[3526,3530],"loc":{"start":{"line":96,"column":14},"end":{"line":96,"column":18}},"type":"ThisExpression"},"property":{"range":[3531,3537],"loc":{"start":{"line":96,"column":19},"end":{"line":96,"column":25}},"type":"Identifier","name":"splice"}},"arguments":[{"range":[3538,3539],"loc":{"start":{"line":96,"column":26},"end":{"line":96,"column":27}},"type":"Literal","value":0,"raw":"0"},{"range":[3541,3552],"loc":{"start":{"line":96,"column":29},"end":{"line":96,"column":40}},"type":"MemberExpression","computed":false,"object":{"range":[3541,3545],"loc":{"start":{"line":96,"column":29},"end":{"line":96,"column":33}},"type":"ThisExpression"},"property":{"range":[3546,3552],"loc":{"start":{"line":96,"column":34},"end":{"line":96,"column":40}},"type":"Identifier","name":"length"}}]}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[3582,3599],"loc":{"start":{"line":98,"column":12},"end":{"line":98,"column":29}},"type":"Property","key":{"range":[3582,3592],"loc":{"start":{"line":98,"column":12},"end":{"line":98,"column":22}},"type":"Identifier","name":"enumerable"},"computed":false,"value":{"range":[3594,3599],"loc":{"start":{"line":98,"column":24},"end":{"line":98,"column":29}},"type":"Literal","value":false,"raw":"false"},"kind":"init","method":false,"shorthand":false}]},"kind":"init","method":false,"shorthand":false},{"range":[3623,3758],"loc":{"start":{"line":100,"column":10},"end":{"line":105,"column":11}},"type":"Property","key":{"range":[3623,3629],"loc":{"start":{"line":100,"column":10},"end":{"line":100,"column":16}},"type":"Literal","value":"copy","raw":"\"copy\""},"computed":false,"value":{"range":[3631,3758],"loc":{"start":{"line":100,"column":18},"end":{"line":105,"column":11}},"type":"ObjectExpression","properties":[{"range":[3645,3715],"loc":{"start":{"line":101,"column":12},"end":{"line":103,"column":13}},"type":"Property","key":{"range":[3645,3650],"loc":{"start":{"line":101,"column":12},"end":{"line":101,"column":17}},"type":"Identifier","name":"value"},"computed":false,"value":{"range":[3652,3715],"loc":{"start":{"line":101,"column":19},"end":{"line":103,"column":13}},"type":"FunctionExpression","id":null,"params":[],"defaults":[],"body":{"range":[3664,3715],"loc":{"start":{"line":101,"column":31},"end":{"line":103,"column":13}},"type":"BlockStatement","body":[{"range":[3680,3701],"loc":{"start":{"line":102,"column":14},"end":{"line":102,"column":35}},"type":"ReturnStatement","argument":{"range":[3687,3700],"loc":{"start":{"line":102,"column":21},"end":{"line":102,"column":34}},"type":"CallExpression","callee":{"range":[3687,3697],"loc":{"start":{"line":102,"column":21},"end":{"line":102,"column":31}},"type":"MemberExpression","computed":false,"object":{"range":[3687,3691],"loc":{"start":{"line":102,"column":21},"end":{"line":102,"column":25}},"type":"ThisExpression"},"property":{"range":[3692,3697],"loc":{"start":{"line":102,"column":26},"end":{"line":102,"column":31}},"type":"Identifier","name":"slice"}},"arguments":[{"range":[3698,3699],"loc":{"start":{"line":102,"column":32},"end":{"line":102,"column":33}},"type":"Literal","value":0,"raw":"0"}]}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[3729,3746],"loc":{"start":{"line":104,"column":12},"end":{"line":104,"column":29}},"type":"Property","key":{"range":[3729,3739],"loc":{"start":{"line":104,"column":12},"end":{"line":104,"column":22}},"type":"Identifier","name":"enumerable"},"computed":false,"value":{"range":[3741,3746],"loc":{"start":{"line":104,"column":24},"end":{"line":104,"column":29}},"type":"Literal","value":false,"raw":"false"},"kind":"init","method":false,"shorthand":false}]},"kind":"init","method":false,"shorthand":false},{"range":[3770,4012],"loc":{"start":{"line":106,"column":10},"end":{"line":114,"column":11}},"type":"Property","key":{"range":[3770,3777],"loc":{"start":{"line":106,"column":10},"end":{"line":106,"column":17}},"type":"Literal","value":"count","raw":"\"count\""},"computed":false,"value":{"range":[3779,4012],"loc":{"start":{"line":106,"column":19},"end":{"line":114,"column":11}},"type":"ObjectExpression","properties":[{"range":[3793,3969],"loc":{"start":{"line":107,"column":12},"end":{"line":112,"column":13}},"type":"Property","key":{"range":[3793,3798],"loc":{"start":{"line":107,"column":12},"end":{"line":107,"column":17}},"type":"Identifier","name":"value"},"computed":false,"value":{"range":[3800,3969],"loc":{"start":{"line":107,"column":19},"end":{"line":112,"column":13}},"type":"FunctionExpression","id":null,"params":[{"range":[3810,3811],"loc":{"start":{"line":107,"column":29},"end":{"line":107,"column":30}},"type":"Identifier","name":"x"}],"defaults":[],"body":{"range":[3813,3969],"loc":{"start":{"line":107,"column":32},"end":{"line":112,"column":13}},"type":"BlockStatement","body":[{"range":[3829,3839],"loc":{"start":{"line":108,"column":14},"end":{"line":108,"column":24}},"type":"VariableDeclaration","declarations":[{"range":[3833,3838],"loc":{"start":{"line":108,"column":18},"end":{"line":108,"column":23}},"type":"VariableDeclarator","id":{"range":[3833,3834],"loc":{"start":{"line":108,"column":18},"end":{"line":108,"column":19}},"type":"Identifier","name":"c"},"init":{"range":[3837,3838],"loc":{"start":{"line":108,"column":22},"end":{"line":108,"column":23}},"type":"Literal","value":0,"raw":"0"}}],"kind":"var"},{"range":[3854,3931],"loc":{"start":{"line":109,"column":14},"end":{"line":110,"column":39}},"type":"ForStatement","init":{"range":[3859,3868],"loc":{"start":{"line":109,"column":19},"end":{"line":109,"column":28}},"type":"VariableDeclaration","declarations":[{"range":[3863,3868],"loc":{"start":{"line":109,"column":23},"end":{"line":109,"column":28}},"type":"VariableDeclarator","id":{"range":[3863,3864],"loc":{"start":{"line":109,"column":23},"end":{"line":109,"column":24}},"type":"Identifier","name":"i"},"init":{"range":[3867,3868],"loc":{"start":{"line":109,"column":27},"end":{"line":109,"column":28}},"type":"Literal","value":0,"raw":"0"}}],"kind":"var"},"test":{"range":[3870,3885],"loc":{"start":{"line":109,"column":30},"end":{"line":109,"column":45}},"type":"BinaryExpression","operator":"<","left":{"range":[3870,3871],"loc":{"start":{"line":109,"column":30},"end":{"line":109,"column":31}},"type":"Identifier","name":"i"},"right":{"range":[3874,3885],"loc":{"start":{"line":109,"column":34},"end":{"line":109,"column":45}},"type":"MemberExpression","computed":false,"object":{"range":[3874,3878],"loc":{"start":{"line":109,"column":34},"end":{"line":109,"column":38}},"type":"ThisExpression"},"property":{"range":[3879,3885],"loc":{"start":{"line":109,"column":39},"end":{"line":109,"column":45}},"type":"Identifier","name":"length"}}},"update":{"range":[3887,3890],"loc":{"start":{"line":109,"column":47},"end":{"line":109,"column":50}},"type":"UpdateExpression","operator":"++","argument":{"range":[3887,3888],"loc":{"start":{"line":109,"column":47},"end":{"line":109,"column":48}},"type":"Identifier","name":"i"},"prefix":false},"body":{"range":[3908,3931],"loc":{"start":{"line":110,"column":16},"end":{"line":110,"column":39}},"type":"IfStatement","test":{"range":[3912,3925],"loc":{"start":{"line":110,"column":20},"end":{"line":110,"column":33}},"type":"BinaryExpression","operator":"===","left":{"range":[3912,3919],"loc":{"start":{"line":110,"column":20},"end":{"line":110,"column":27}},"type":"MemberExpression","computed":true,"object":{"range":[3912,3916],"loc":{"start":{"line":110,"column":20},"end":{"line":110,"column":24}},"type":"ThisExpression"},"property":{"range":[3917,3918],"loc":{"start":{"line":110,"column":25},"end":{"line":110,"column":26}},"type":"Identifier","name":"i"}},"right":{"range":[3924,3925],"loc":{"start":{"line":110,"column":32},"end":{"line":110,"column":33}},"type":"Identifier","name":"x"}},"consequent":{"range":[3927,3931],"loc":{"start":{"line":110,"column":35},"end":{"line":110,"column":39}},"type":"ExpressionStatement","expression":{"range":[3927,3930],"loc":{"start":{"line":110,"column":35},"end":{"line":110,"column":38}},"type":"UpdateExpression","operator":"++","argument":{"range":[3927,3928],"loc":{"start":{"line":110,"column":35},"end":{"line":110,"column":36}},"type":"Identifier","name":"c"},"prefix":false}},"alternate":null}},{"range":[3946,3955],"loc":{"start":{"line":111,"column":14},"end":{"line":111,"column":23}},"type":"ReturnStatement","argument":{"range":[3953,3954],"loc":{"start":{"line":111,"column":21},"end":{"line":111,"column":22}},"type":"Identifier","name":"c"}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[3983,4000],"loc":{"start":{"line":113,"column":12},"end":{"line":113,"column":29}},"type":"Property","key":{"range":[3983,3993],"loc":{"start":{"line":113,"column":12},"end":{"line":113,"column":22}},"type":"Identifier","name":"enumerable"},"computed":false,"value":{"range":[3995,4000],"loc":{"start":{"line":113,"column":24},"end":{"line":113,"column":29}},"type":"Literal","value":false,"raw":"false"},"kind":"init","method":false,"shorthand":false}]},"kind":"init","method":false,"shorthand":false},{"range":[4024,4561],"loc":{"start":{"line":115,"column":10},"end":{"line":130,"column":11}},"type":"Property","key":{"range":[4024,4032],"loc":{"start":{"line":115,"column":10},"end":{"line":115,"column":18}},"type":"Literal","value":"equals","raw":"\"equals\""},"computed":false,"value":{"range":[4034,4561],"loc":{"start":{"line":115,"column":20},"end":{"line":130,"column":11}},"type":"ObjectExpression","properties":[{"range":[4048,4518],"loc":{"start":{"line":116,"column":12},"end":{"line":128,"column":13}},"type":"Property","key":{"range":[4048,4053],"loc":{"start":{"line":116,"column":12},"end":{"line":116,"column":17}},"type":"Identifier","name":"value"},"computed":false,"value":{"range":[4055,4518],"loc":{"start":{"line":116,"column":19},"end":{"line":128,"column":13}},"type":"FunctionExpression","id":null,"params":[{"range":[4065,4066],"loc":{"start":{"line":116,"column":29},"end":{"line":116,"column":30}},"type":"Identifier","name":"x"}],"defaults":[],"body":{"range":[4068,4518],"loc":{"start":{"line":116,"column":32},"end":{"line":128,"column":13}},"type":"BlockStatement","body":[{"range":[4084,4476],"loc":{"start":{"line":117,"column":14},"end":{"line":126,"column":27}},"type":"TryStatement","block":{"range":[4088,4448],"loc":{"start":{"line":117,"column":18},"end":{"line":125,"column":15}},"type":"BlockStatement","body":[{"range":[4106,4149],"loc":{"start":{"line":118,"column":16},"end":{"line":118,"column":59}},"type":"IfStatement","test":{"range":[4110,4134],"loc":{"start":{"line":118,"column":20},"end":{"line":118,"column":44}},"type":"BinaryExpression","operator":"!==","left":{"range":[4110,4121],"loc":{"start":{"line":118,"column":20},"end":{"line":118,"column":31}},"type":"MemberExpression","computed":false,"object":{"range":[4110,4114],"loc":{"start":{"line":118,"column":20},"end":{"line":118,"column":24}},"type":"ThisExpression"},"property":{"range":[4115,4121],"loc":{"start":{"line":118,"column":25},"end":{"line":118,"column":31}},"type":"Identifier","name":"length"}},"right":{"range":[4126,4134],"loc":{"start":{"line":118,"column":36},"end":{"line":118,"column":44}},"type":"MemberExpression","computed":false,"object":{"range":[4126,4127],"loc":{"start":{"line":118,"column":36},"end":{"line":118,"column":37}},"type":"Identifier","name":"x"},"property":{"range":[4128,4134],"loc":{"start":{"line":118,"column":38},"end":{"line":118,"column":44}},"type":"Identifier","name":"length"}}},"consequent":{"range":[4136,4149],"loc":{"start":{"line":118,"column":46},"end":{"line":118,"column":59}},"type":"ReturnStatement","argument":{"range":[4143,4148],"loc":{"start":{"line":118,"column":53},"end":{"line":118,"column":58}},"type":"Literal","value":false,"raw":"false"}},"alternate":null},{"range":[4166,4403],"loc":{"start":{"line":119,"column":16},"end":{"line":123,"column":17}},"type":"ForStatement","init":{"range":[4171,4180],"loc":{"start":{"line":119,"column":21},"end":{"line":119,"column":30}},"type":"VariableDeclaration","declarations":[{"range":[4175,4180],"loc":{"start":{"line":119,"column":25},"end":{"line":119,"column":30}},"type":"VariableDeclarator","id":{"range":[4175,4176],"loc":{"start":{"line":119,"column":25},"end":{"line":119,"column":26}},"type":"Identifier","name":"i"},"init":{"range":[4179,4180],"loc":{"start":{"line":119,"column":29},"end":{"line":119,"column":30}},"type":"Literal","value":0,"raw":"0"}}],"kind":"var"},"test":{"range":[4182,4197],"loc":{"start":{"line":119,"column":32},"end":{"line":119,"column":47}},"type":"BinaryExpression","operator":"<","left":{"range":[4182,4183],"loc":{"start":{"line":119,"column":32},"end":{"line":119,"column":33}},"type":"Identifier","name":"i"},"right":{"range":[4186,4197],"loc":{"start":{"line":119,"column":36},"end":{"line":119,"column":47}},"type":"MemberExpression","computed":false,"object":{"range":[4186,4190],"loc":{"start":{"line":119,"column":36},"end":{"line":119,"column":40}},"type":"ThisExpression"},"property":{"range":[4191,4197],"loc":{"start":{"line":119,"column":41},"end":{"line":119,"column":47}},"type":"Identifier","name":"length"}}},"update":{"range":[4199,4202],"loc":{"start":{"line":119,"column":49},"end":{"line":119,"column":52}},"type":"UpdateExpression","operator":"++","argument":{"range":[4199,4200],"loc":{"start":{"line":119,"column":49},"end":{"line":119,"column":50}},"type":"Identifier","name":"i"},"prefix":false},"body":{"range":[4204,4403],"loc":{"start":{"line":119,"column":54},"end":{"line":123,"column":17}},"type":"BlockStatement","body":[{"range":[4224,4385],"loc":{"start":{"line":120,"column":18},"end":{"line":122,"column":60}},"type":"IfStatement","test":{"range":[4228,4260],"loc":{"start":{"line":120,"column":22},"end":{"line":120,"column":54}},"type":"CallExpression","callee":{"range":[4228,4250],"loc":{"start":{"line":120,"column":22},"end":{"line":120,"column":44}},"type":"MemberExpression","computed":false,"object":{"range":[4228,4235],"loc":{"start":{"line":120,"column":22},"end":{"line":120,"column":29}},"type":"MemberExpression","computed":true,"object":{"range":[4228,4232],"loc":{"start":{"line":120,"column":22},"end":{"line":120,"column":26}},"type":"ThisExpression"},"property":{"range":[4233,4234],"loc":{"start":{"line":120,"column":27},"end":{"line":120,"column":28}},"type":"Identifier","name":"i"}},"property":{"range":[4236,4250],"loc":{"start":{"line":120,"column":30},"end":{"line":120,"column":44}},"type":"Identifier","name":"hasOwnProperty"}},"arguments":[{"range":[4251,4259],"loc":{"start":{"line":120,"column":45},"end":{"line":120,"column":53}},"type":"Literal","value":"equals","raw":"\"equals\""}]},"consequent":{"range":[4262,4344],"loc":{"start":{"line":120,"column":56},"end":{"line":122,"column":19}},"type":"BlockStatement","body":[{"range":[4284,4324],"loc":{"start":{"line":121,"column":20},"end":{"line":121,"column":60}},"type":"IfStatement","test":{"range":[4288,4309],"loc":{"start":{"line":121,"column":24},"end":{"line":121,"column":45}},"type":"UnaryExpression","operator":"!","argument":{"range":[4289,4309],"loc":{"start":{"line":121,"column":25},"end":{"line":121,"column":45}},"type":"CallExpression","callee":{"range":[4289,4303],"loc":{"start":{"line":121,"column":25},"end":{"line":121,"column":39}},"type":"MemberExpression","computed":false,"object":{"range":[4289,4296],"loc":{"start":{"line":121,"column":25},"end":{"line":121,"column":32}},"type":"MemberExpression","computed":true,"object":{"range":[4289,4293],"loc":{"start":{"line":121,"column":25},"end":{"line":121,"column":29}},"type":"ThisExpression"},"property":{"range":[4294,4295],"loc":{"start":{"line":121,"column":30},"end":{"line":121,"column":31}},"type":"Identifier","name":"i"}},"property":{"range":[4297,4303],"loc":{"start":{"line":121,"column":33},"end":{"line":121,"column":39}},"type":"Identifier","name":"equals"}},"arguments":[{"range":[4304,4308],"loc":{"start":{"line":121,"column":40},"end":{"line":121,"column":44}},"type":"MemberExpression","computed":true,"object":{"range":[4304,4305],"loc":{"start":{"line":121,"column":40},"end":{"line":121,"column":41}},"type":"Identifier","name":"x"},"property":{"range":[4306,4307],"loc":{"start":{"line":121,"column":42},"end":{"line":121,"column":43}},"type":"Identifier","name":"i"}}]},"prefix":true},"consequent":{"range":[4311,4324],"loc":{"start":{"line":121,"column":47},"end":{"line":121,"column":60}},"type":"ReturnStatement","argument":{"range":[4318,4323],"loc":{"start":{"line":121,"column":54},"end":{"line":121,"column":59}},"type":"Literal","value":false,"raw":"false"}},"alternate":null}]},"alternate":{"range":[4350,4385],"loc":{"start":{"line":122,"column":25},"end":{"line":122,"column":60}},"type":"IfStatement","test":{"range":[4354,4370],"loc":{"start":{"line":122,"column":29},"end":{"line":122,"column":45}},"type":"BinaryExpression","operator":"!==","left":{"range":[4354,4361],"loc":{"start":{"line":122,"column":29},"end":{"line":122,"column":36}},"type":"MemberExpression","computed":true,"object":{"range":[4354,4358],"loc":{"start":{"line":122,"column":29},"end":{"line":122,"column":33}},"type":"ThisExpression"},"property":{"range":[4359,4360],"loc":{"start":{"line":122,"column":34},"end":{"line":122,"column":35}},"type":"Identifier","name":"i"}},"right":{"range":[4366,4370],"loc":{"start":{"line":122,"column":41},"end":{"line":122,"column":45}},"type":"MemberExpression","computed":true,"object":{"range":[4366,4367],"loc":{"start":{"line":122,"column":41},"end":{"line":122,"column":42}},"type":"Identifier","name":"x"},"property":{"range":[4368,4369],"loc":{"start":{"line":122,"column":43},"end":{"line":122,"column":44}},"type":"Identifier","name":"i"}}},"consequent":{"range":[4372,4385],"loc":{"start":{"line":122,"column":47},"end":{"line":122,"column":60}},"type":"ReturnStatement","argument":{"range":[4379,4384],"loc":{"start":{"line":122,"column":54},"end":{"line":122,"column":59}},"type":"Literal","value":false,"raw":"false"}},"alternate":null}}]}},{"range":[4420,4432],"loc":{"start":{"line":124,"column":16},"end":{"line":124,"column":28}},"type":"ReturnStatement","argument":{"range":[4427,4431],"loc":{"start":{"line":124,"column":23},"end":{"line":124,"column":27}},"type":"Literal","value":true,"raw":"true"}}]},"guardedHandlers":[],"handlers":[{"range":[4463,4476],"loc":{"start":{"line":126,"column":14},"end":{"line":126,"column":27}},"type":"CatchClause","param":{"range":[4470,4471],"loc":{"start":{"line":126,"column":21},"end":{"line":126,"column":22}},"type":"Identifier","name":"e"},"body":{"range":[4473,4476],"loc":{"start":{"line":126,"column":24},"end":{"line":126,"column":27}},"type":"BlockStatement","body":[]}}],"handler":{"range":[4463,4476],"loc":{"start":{"line":126,"column":14},"end":{"line":126,"column":27}},"type":"CatchClause","param":{"range":[4470,4471],"loc":{"start":{"line":126,"column":21},"end":{"line":126,"column":22}},"type":"Identifier","name":"e"},"body":{"range":[4473,4476],"loc":{"start":{"line":126,"column":24},"end":{"line":126,"column":27}},"type":"BlockStatement","body":[]}},"finalizer":null},{"range":[4491,4504],"loc":{"start":{"line":127,"column":14},"end":{"line":127,"column":27}},"type":"ReturnStatement","argument":{"range":[4498,4503],"loc":{"start":{"line":127,"column":21},"end":{"line":127,"column":26}},"type":"Literal","value":false,"raw":"false"}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[4532,4549],"loc":{"start":{"line":129,"column":12},"end":{"line":129,"column":29}},"type":"Property","key":{"range":[4532,4542],"loc":{"start":{"line":129,"column":12},"end":{"line":129,"column":22}},"type":"Identifier","name":"enumerable"},"computed":false,"value":{"range":[4544,4549],"loc":{"start":{"line":129,"column":24},"end":{"line":129,"column":29}},"type":"Literal","value":false,"raw":"false"},"kind":"init","method":false,"shorthand":false}]},"kind":"init","method":false,"shorthand":false},{"range":[4573,4741],"loc":{"start":{"line":131,"column":10},"end":{"line":136,"column":11}},"type":"Property","key":{"range":[4573,4581],"loc":{"start":{"line":131,"column":10},"end":{"line":131,"column":18}},"type":"Literal","value":"extend","raw":"\"extend\""},"computed":false,"value":{"range":[4583,4741],"loc":{"start":{"line":131,"column":20},"end":{"line":136,"column":11}},"type":"ObjectExpression","properties":[{"range":[4597,4698],"loc":{"start":{"line":132,"column":12},"end":{"line":134,"column":13}},"type":"Property","key":{"range":[4597,4602],"loc":{"start":{"line":132,"column":12},"end":{"line":132,"column":17}},"type":"Identifier","name":"value"},"computed":false,"value":{"range":[4604,4698],"loc":{"start":{"line":132,"column":19},"end":{"line":134,"column":13}},"type":"FunctionExpression","id":null,"params":[{"range":[4614,4615],"loc":{"start":{"line":132,"column":29},"end":{"line":132,"column":30}},"type":"Identifier","name":"L"}],"defaults":[],"body":{"range":[4617,4698],"loc":{"start":{"line":132,"column":32},"end":{"line":134,"column":13}},"type":"BlockStatement","body":[{"range":[4633,4684],"loc":{"start":{"line":133,"column":14},"end":{"line":133,"column":65}},"type":"ForStatement","init":{"range":[4638,4647],"loc":{"start":{"line":133,"column":19},"end":{"line":133,"column":28}},"type":"VariableDeclaration","declarations":[{"range":[4642,4647],"loc":{"start":{"line":133,"column":23},"end":{"line":133,"column":28}},"type":"VariableDeclarator","id":{"range":[4642,4643],"loc":{"start":{"line":133,"column":23},"end":{"line":133,"column":24}},"type":"Identifier","name":"i"},"init":{"range":[4646,4647],"loc":{"start":{"line":133,"column":27},"end":{"line":133,"column":28}},"type":"Literal","value":0,"raw":"0"}}],"kind":"var"},"test":{"range":[4649,4661],"loc":{"start":{"line":133,"column":30},"end":{"line":133,"column":42}},"type":"BinaryExpression","operator":"<","left":{"range":[4649,4650],"loc":{"start":{"line":133,"column":30},"end":{"line":133,"column":31}},"type":"Identifier","name":"i"},"right":{"range":[4653,4661],"loc":{"start":{"line":133,"column":34},"end":{"line":133,"column":42}},"type":"MemberExpression","computed":false,"object":{"range":[4653,4654],"loc":{"start":{"line":133,"column":34},"end":{"line":133,"column":35}},"type":"Identifier","name":"L"},"property":{"range":[4655,4661],"loc":{"start":{"line":133,"column":36},"end":{"line":133,"column":42}},"type":"Identifier","name":"length"}}},"update":{"range":[4663,4666],"loc":{"start":{"line":133,"column":44},"end":{"line":133,"column":47}},"type":"UpdateExpression","operator":"++","argument":{"range":[4663,4664],"loc":{"start":{"line":133,"column":44},"end":{"line":133,"column":45}},"type":"Identifier","name":"i"},"prefix":false},"body":{"range":[4668,4684],"loc":{"start":{"line":133,"column":49},"end":{"line":133,"column":65}},"type":"ExpressionStatement","expression":{"range":[4668,4683],"loc":{"start":{"line":133,"column":49},"end":{"line":133,"column":64}},"type":"CallExpression","callee":{"range":[4668,4677],"loc":{"start":{"line":133,"column":49},"end":{"line":133,"column":58}},"type":"MemberExpression","computed":false,"object":{"range":[4668,4672],"loc":{"start":{"line":133,"column":49},"end":{"line":133,"column":53}},"type":"ThisExpression"},"property":{"range":[4673,4677],"loc":{"start":{"line":133,"column":54},"end":{"line":133,"column":58}},"type":"Identifier","name":"push"}},"arguments":[{"range":[4678,4682],"loc":{"start":{"line":133,"column":59},"end":{"line":133,"column":63}},"type":"MemberExpression","computed":true,"object":{"range":[4678,4679],"loc":{"start":{"line":133,"column":59},"end":{"line":133,"column":60}},"type":"Identifier","name":"L"},"property":{"range":[4680,4681],"loc":{"start":{"line":133,"column":61},"end":{"line":133,"column":62}},"type":"Identifier","name":"i"}}]}}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[4712,4729],"loc":{"start":{"line":135,"column":12},"end":{"line":135,"column":29}},"type":"Property","key":{"range":[4712,4722],"loc":{"start":{"line":135,"column":12},"end":{"line":135,"column":22}},"type":"Identifier","name":"enumerable"},"computed":false,"value":{"range":[4724,4729],"loc":{"start":{"line":135,"column":24},"end":{"line":135,"column":29}},"type":"Literal","value":false,"raw":"false"},"kind":"init","method":false,"shorthand":false}]},"kind":"init","method":false,"shorthand":false},{"range":[4753,4892],"loc":{"start":{"line":137,"column":10},"end":{"line":142,"column":11}},"type":"Property","key":{"range":[4753,4760],"loc":{"start":{"line":137,"column":10},"end":{"line":137,"column":17}},"type":"Literal","value":"index","raw":"\"index\""},"computed":false,"value":{"range":[4762,4892],"loc":{"start":{"line":137,"column":19},"end":{"line":142,"column":11}},"type":"ObjectExpression","properties":[{"range":[4776,4849],"loc":{"start":{"line":138,"column":12},"end":{"line":140,"column":13}},"type":"Property","key":{"range":[4776,4781],"loc":{"start":{"line":138,"column":12},"end":{"line":138,"column":17}},"type":"Identifier","name":"value"},"computed":false,"value":{"range":[4783,4849],"loc":{"start":{"line":138,"column":19},"end":{"line":140,"column":13}},"type":"FunctionExpression","id":null,"params":[{"range":[4793,4794],"loc":{"start":{"line":138,"column":29},"end":{"line":138,"column":30}},"type":"Identifier","name":"x"}],"defaults":[],"body":{"range":[4796,4849],"loc":{"start":{"line":138,"column":32},"end":{"line":140,"column":13}},"type":"BlockStatement","body":[{"range":[4812,4835],"loc":{"start":{"line":139,"column":14},"end":{"line":139,"column":37}},"type":"ReturnStatement","argument":{"range":[4819,4834],"loc":{"start":{"line":139,"column":21},"end":{"line":139,"column":36}},"type":"CallExpression","callee":{"range":[4819,4831],"loc":{"start":{"line":139,"column":21},"end":{"line":139,"column":33}},"type":"MemberExpression","computed":false,"object":{"range":[4819,4823],"loc":{"start":{"line":139,"column":21},"end":{"line":139,"column":25}},"type":"ThisExpression"},"property":{"range":[4824,4831],"loc":{"start":{"line":139,"column":26},"end":{"line":139,"column":33}},"type":"Identifier","name":"indexOf"}},"arguments":[{"range":[4832,4833],"loc":{"start":{"line":139,"column":34},"end":{"line":139,"column":35}},"type":"Identifier","name":"x"}]}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[4863,4880],"loc":{"start":{"line":141,"column":12},"end":{"line":141,"column":29}},"type":"Property","key":{"range":[4863,4873],"loc":{"start":{"line":141,"column":12},"end":{"line":141,"column":22}},"type":"Identifier","name":"enumerable"},"computed":false,"value":{"range":[4875,4880],"loc":{"start":{"line":141,"column":24},"end":{"line":141,"column":29}},"type":"Literal","value":false,"raw":"false"},"kind":"init","method":false,"shorthand":false}]},"kind":"init","method":false,"shorthand":false},{"range":[4904,5370],"loc":{"start":{"line":143,"column":10},"end":{"line":156,"column":11}},"type":"Property","key":{"range":[4904,4913],"loc":{"start":{"line":143,"column":10},"end":{"line":143,"column":19}},"type":"Literal","value":"indexOf","raw":"\"indexOf\""},"computed":false,"value":{"range":[4915,5370],"loc":{"start":{"line":143,"column":21},"end":{"line":156,"column":11}},"type":"ObjectExpression","properties":[{"range":[4929,5327],"loc":{"start":{"line":144,"column":12},"end":{"line":154,"column":13}},"type":"Property","key":{"range":[4929,4934],"loc":{"start":{"line":144,"column":12},"end":{"line":144,"column":17}},"type":"Identifier","name":"value"},"computed":false,"value":{"range":[4936,5327],"loc":{"start":{"line":144,"column":19},"end":{"line":154,"column":13}},"type":"FunctionExpression","id":null,"params":[{"range":[4946,4947],"loc":{"start":{"line":144,"column":29},"end":{"line":144,"column":30}},"type":"Identifier","name":"x"},{"range":[4949,4958],"loc":{"start":{"line":144,"column":32},"end":{"line":144,"column":41}},"type":"Identifier","name":"fromIndex"}],"defaults":[],"body":{"range":[4960,5327],"loc":{"start":{"line":144,"column":43},"end":{"line":154,"column":13}},"type":"BlockStatement","body":[{"range":[4976,5288],"loc":{"start":{"line":145,"column":14},"end":{"line":152,"column":27}},"type":"TryStatement","block":{"range":[4980,5260],"loc":{"start":{"line":145,"column":18},"end":{"line":151,"column":15}},"type":"BlockStatement","body":[{"range":[4998,5244],"loc":{"start":{"line":146,"column":16},"end":{"line":150,"column":17}},"type":"ForStatement","init":{"range":[5003,5036],"loc":{"start":{"line":146,"column":21},"end":{"line":146,"column":54}},"type":"VariableDeclaration","declarations":[{"range":[5007,5036],"loc":{"start":{"line":146,"column":25},"end":{"line":146,"column":54}},"type":"VariableDeclarator","id":{"range":[5007,5008],"loc":{"start":{"line":146,"column":25},"end":{"line":146,"column":26}},"type":"Identifier","name":"i"},"init":{"range":[5011,5036],"loc":{"start":{"line":146,"column":29},"end":{"line":146,"column":54}},"type":"ConditionalExpression","test":{"range":[5011,5020],"loc":{"start":{"line":146,"column":29},"end":{"line":146,"column":38}},"type":"Identifier","name":"fromIndex"},"consequent":{"range":[5023,5032],"loc":{"start":{"line":146,"column":41},"end":{"line":146,"column":50}},"type":"Identifier","name":"fromIndex"},"alternate":{"range":[5035,5036],"loc":{"start":{"line":146,"column":53},"end":{"line":146,"column":54}},"type":"Literal","value":0,"raw":"0"}}}],"kind":"var"},"test":{"range":[5038,5053],"loc":{"start":{"line":146,"column":56},"end":{"line":146,"column":71}},"type":"BinaryExpression","operator":"<","left":{"range":[5038,5039],"loc":{"start":{"line":146,"column":56},"end":{"line":146,"column":57}},"type":"Identifier","name":"i"},"right":{"range":[5042,5053],"loc":{"start":{"line":146,"column":60},"end":{"line":146,"column":71}},"type":"MemberExpression","computed":false,"object":{"range":[5042,5046],"loc":{"start":{"line":146,"column":60},"end":{"line":146,"column":64}},"type":"ThisExpression"},"property":{"range":[5047,5053],"loc":{"start":{"line":146,"column":65},"end":{"line":146,"column":71}},"type":"Identifier","name":"length"}}},"update":{"range":[5055,5058],"loc":{"start":{"line":146,"column":73},"end":{"line":146,"column":76}},"type":"UpdateExpression","operator":"++","argument":{"range":[5055,5056],"loc":{"start":{"line":146,"column":73},"end":{"line":146,"column":74}},"type":"Identifier","name":"i"},"prefix":false},"body":{"range":[5060,5244],"loc":{"start":{"line":146,"column":78},"end":{"line":150,"column":17}},"type":"BlockStatement","body":[{"range":[5080,5226],"loc":{"start":{"line":147,"column":18},"end":{"line":149,"column":53}},"type":"IfStatement","test":{"range":[5084,5116],"loc":{"start":{"line":147,"column":22},"end":{"line":147,"column":54}},"type":"CallExpression","callee":{"range":[5084,5106],"loc":{"start":{"line":147,"column":22},"end":{"line":147,"column":44}},"type":"MemberExpression","computed":false,"object":{"range":[5084,5091],"loc":{"start":{"line":147,"column":22},"end":{"line":147,"column":29}},"type":"MemberExpression","computed":true,"object":{"range":[5084,5088],"loc":{"start":{"line":147,"column":22},"end":{"line":147,"column":26}},"type":"ThisExpression"},"property":{"range":[5089,5090],"loc":{"start":{"line":147,"column":27},"end":{"line":147,"column":28}},"type":"Identifier","name":"i"}},"property":{"range":[5092,5106],"loc":{"start":{"line":147,"column":30},"end":{"line":147,"column":44}},"type":"Identifier","name":"hasOwnProperty"}},"arguments":[{"range":[5107,5115],"loc":{"start":{"line":147,"column":45},"end":{"line":147,"column":53}},"type":"Literal","value":"equals","raw":"\"equals\""}]},"consequent":{"range":[5118,5192],"loc":{"start":{"line":147,"column":56},"end":{"line":149,"column":19}},"type":"BlockStatement","body":[{"range":[5140,5172],"loc":{"start":{"line":148,"column":20},"end":{"line":148,"column":52}},"type":"IfStatement","test":{"range":[5144,5161],"loc":{"start":{"line":148,"column":24},"end":{"line":148,"column":41}},"type":"CallExpression","callee":{"range":[5144,5158],"loc":{"start":{"line":148,"column":24},"end":{"line":148,"column":38}},"type":"MemberExpression","computed":false,"object":{"range":[5144,5151],"loc":{"start":{"line":148,"column":24},"end":{"line":148,"column":31}},"type":"MemberExpression","computed":true,"object":{"range":[5144,5148],"loc":{"start":{"line":148,"column":24},"end":{"line":148,"column":28}},"type":"ThisExpression"},"property":{"range":[5149,5150],"loc":{"start":{"line":148,"column":29},"end":{"line":148,"column":30}},"type":"Identifier","name":"i"}},"property":{"range":[5152,5158],"loc":{"start":{"line":148,"column":32},"end":{"line":148,"column":38}},"type":"Identifier","name":"equals"}},"arguments":[{"range":[5159,5160],"loc":{"start":{"line":148,"column":39},"end":{"line":148,"column":40}},"type":"Identifier","name":"x"}]},"consequent":{"range":[5163,5172],"loc":{"start":{"line":148,"column":43},"end":{"line":148,"column":52}},"type":"ReturnStatement","argument":{"range":[5170,5171],"loc":{"start":{"line":148,"column":50},"end":{"line":148,"column":51}},"type":"Identifier","name":"i"}},"alternate":null}]},"alternate":{"range":[5198,5226],"loc":{"start":{"line":149,"column":25},"end":{"line":149,"column":53}},"type":"IfStatement","test":{"range":[5202,5215],"loc":{"start":{"line":149,"column":29},"end":{"line":149,"column":42}},"type":"BinaryExpression","operator":"===","left":{"range":[5202,5209],"loc":{"start":{"line":149,"column":29},"end":{"line":149,"column":36}},"type":"MemberExpression","computed":true,"object":{"range":[5202,5206],"loc":{"start":{"line":149,"column":29},"end":{"line":149,"column":33}},"type":"ThisExpression"},"property":{"range":[5207,5208],"loc":{"start":{"line":149,"column":34},"end":{"line":149,"column":35}},"type":"Identifier","name":"i"}},"right":{"range":[5214,5215],"loc":{"start":{"line":149,"column":41},"end":{"line":149,"column":42}},"type":"Identifier","name":"x"}},"consequent":{"range":[5217,5226],"loc":{"start":{"line":149,"column":44},"end":{"line":149,"column":53}},"type":"ReturnStatement","argument":{"range":[5224,5225],"loc":{"start":{"line":149,"column":51},"end":{"line":149,"column":52}},"type":"Identifier","name":"i"}},"alternate":null}}]}}]},"guardedHandlers":[],"handlers":[{"range":[5275,5288],"loc":{"start":{"line":152,"column":14},"end":{"line":152,"column":27}},"type":"CatchClause","param":{"range":[5282,5283],"loc":{"start":{"line":152,"column":21},"end":{"line":152,"column":22}},"type":"Identifier","name":"e"},"body":{"range":[5285,5288],"loc":{"start":{"line":152,"column":24},"end":{"line":152,"column":27}},"type":"BlockStatement","body":[]}}],"handler":{"range":[5275,5288],"loc":{"start":{"line":152,"column":14},"end":{"line":152,"column":27}},"type":"CatchClause","param":{"range":[5282,5283],"loc":{"start":{"line":152,"column":21},"end":{"line":152,"column":22}},"type":"Identifier","name":"e"},"body":{"range":[5285,5288],"loc":{"start":{"line":152,"column":24},"end":{"line":152,"column":27}},"type":"BlockStatement","body":[]}},"finalizer":null},{"range":[5303,5313],"loc":{"start":{"line":153,"column":14},"end":{"line":153,"column":24}},"type":"ReturnStatement","argument":{"range":[5310,5312],"loc":{"start":{"line":153,"column":21},"end":{"line":153,"column":23}},"type":"UnaryExpression","operator":"-","argument":{"range":[5311,5312],"loc":{"start":{"line":153,"column":22},"end":{"line":153,"column":23}},"type":"Literal","value":1,"raw":"1"},"prefix":true}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[5341,5358],"loc":{"start":{"line":155,"column":12},"end":{"line":155,"column":29}},"type":"Property","key":{"range":[5341,5351],"loc":{"start":{"line":155,"column":12},"end":{"line":155,"column":22}},"type":"Identifier","name":"enumerable"},"computed":false,"value":{"range":[5353,5358],"loc":{"start":{"line":155,"column":24},"end":{"line":155,"column":29}},"type":"Literal","value":false,"raw":"false"},"kind":"init","method":false,"shorthand":false}]},"kind":"init","method":false,"shorthand":false},{"range":[5382,5523],"loc":{"start":{"line":157,"column":10},"end":{"line":162,"column":11}},"type":"Property","key":{"range":[5382,5390],"loc":{"start":{"line":157,"column":10},"end":{"line":157,"column":18}},"type":"Literal","value":"insert","raw":"\"insert\""},"computed":false,"value":{"range":[5392,5523],"loc":{"start":{"line":157,"column":20},"end":{"line":162,"column":11}},"type":"ObjectExpression","properties":[{"range":[5406,5480],"loc":{"start":{"line":158,"column":12},"end":{"line":160,"column":13}},"type":"Property","key":{"range":[5406,5411],"loc":{"start":{"line":158,"column":12},"end":{"line":158,"column":17}},"type":"Identifier","name":"value"},"computed":false,"value":{"range":[5413,5480],"loc":{"start":{"line":158,"column":19},"end":{"line":160,"column":13}},"type":"FunctionExpression","id":null,"params":[{"range":[5423,5424],"loc":{"start":{"line":158,"column":29},"end":{"line":158,"column":30}},"type":"Identifier","name":"i"},{"range":[5426,5427],"loc":{"start":{"line":158,"column":32},"end":{"line":158,"column":33}},"type":"Identifier","name":"x"}],"defaults":[],"body":{"range":[5429,5480],"loc":{"start":{"line":158,"column":35},"end":{"line":160,"column":13}},"type":"BlockStatement","body":[{"range":[5445,5466],"loc":{"start":{"line":159,"column":14},"end":{"line":159,"column":35}},"type":"ExpressionStatement","expression":{"range":[5445,5465],"loc":{"start":{"line":159,"column":14},"end":{"line":159,"column":34}},"type":"CallExpression","callee":{"range":[5445,5456],"loc":{"start":{"line":159,"column":14},"end":{"line":159,"column":25}},"type":"MemberExpression","computed":false,"object":{"range":[5445,5449],"loc":{"start":{"line":159,"column":14},"end":{"line":159,"column":18}},"type":"ThisExpression"},"property":{"range":[5450,5456],"loc":{"start":{"line":159,"column":19},"end":{"line":159,"column":25}},"type":"Identifier","name":"splice"}},"arguments":[{"range":[5457,5458],"loc":{"start":{"line":159,"column":26},"end":{"line":159,"column":27}},"type":"Identifier","name":"i"},{"range":[5460,5461],"loc":{"start":{"line":159,"column":29},"end":{"line":159,"column":30}},"type":"Literal","value":0,"raw":"0"},{"range":[5463,5464],"loc":{"start":{"line":159,"column":32},"end":{"line":159,"column":33}},"type":"Identifier","name":"x"}]}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[5494,5511],"loc":{"start":{"line":161,"column":12},"end":{"line":161,"column":29}},"type":"Property","key":{"range":[5494,5504],"loc":{"start":{"line":161,"column":12},"end":{"line":161,"column":22}},"type":"Identifier","name":"enumerable"},"computed":false,"value":{"range":[5506,5511],"loc":{"start":{"line":161,"column":24},"end":{"line":161,"column":29}},"type":"Literal","value":false,"raw":"false"},"kind":"init","method":false,"shorthand":false}]},"kind":"init","method":false,"shorthand":false},{"range":[5535,5787],"loc":{"start":{"line":163,"column":10},"end":{"line":172,"column":11}},"type":"Property","key":{"range":[5535,5540],"loc":{"start":{"line":163,"column":10},"end":{"line":163,"column":15}},"type":"Literal","value":"pop","raw":"\"pop\""},"computed":false,"value":{"range":[5542,5787],"loc":{"start":{"line":163,"column":17},"end":{"line":172,"column":11}},"type":"ObjectExpression","properties":[{"range":[5556,5744],"loc":{"start":{"line":164,"column":12},"end":{"line":170,"column":13}},"type":"Property","key":{"range":[5556,5561],"loc":{"start":{"line":164,"column":12},"end":{"line":164,"column":17}},"type":"Identifier","name":"value"},"computed":false,"value":{"range":[5563,5744],"loc":{"start":{"line":164,"column":19},"end":{"line":170,"column":13}},"type":"FunctionExpression","id":null,"params":[{"range":[5573,5574],"loc":{"start":{"line":164,"column":29},"end":{"line":164,"column":30}},"type":"Identifier","name":"i"}],"defaults":[],"body":{"range":[5576,5744],"loc":{"start":{"line":164,"column":32},"end":{"line":170,"column":13}},"type":"BlockStatement","body":[{"range":[5592,5636],"loc":{"start":{"line":165,"column":14},"end":{"line":166,"column":36}},"type":"IfStatement","test":{"range":[5596,5598],"loc":{"start":{"line":165,"column":18},"end":{"line":165,"column":20}},"type":"UnaryExpression","operator":"!","argument":{"range":[5597,5598],"loc":{"start":{"line":165,"column":19},"end":{"line":165,"column":20}},"type":"Identifier","name":"i"},"prefix":true},"consequent":{"range":[5616,5636],"loc":{"start":{"line":166,"column":16},"end":{"line":166,"column":36}},"type":"ExpressionStatement","expression":{"range":[5616,5635],"loc":{"start":{"line":166,"column":16},"end":{"line":166,"column":35}},"type":"AssignmentExpression","operator":"=","left":{"range":[5616,5617],"loc":{"start":{"line":166,"column":16},"end":{"line":166,"column":17}},"type":"Identifier","name":"i"},"right":{"range":[5620,5635],"loc":{"start":{"line":166,"column":20},"end":{"line":166,"column":35}},"type":"BinaryExpression","operator":"-","left":{"range":[5620,5631],"loc":{"start":{"line":166,"column":20},"end":{"line":166,"column":31}},"type":"MemberExpression","computed":false,"object":{"range":[5620,5624],"loc":{"start":{"line":166,"column":20},"end":{"line":166,"column":24}},"type":"ThisExpression"},"property":{"range":[5625,5631],"loc":{"start":{"line":166,"column":25},"end":{"line":166,"column":31}},"type":"Identifier","name":"length"}},"right":{"range":[5634,5635],"loc":{"start":{"line":166,"column":34},"end":{"line":166,"column":35}},"type":"Literal","value":1,"raw":"1"}}}},"alternate":null},{"range":[5651,5670],"loc":{"start":{"line":167,"column":14},"end":{"line":167,"column":33}},"type":"VariableDeclaration","declarations":[{"range":[5655,5669],"loc":{"start":{"line":167,"column":18},"end":{"line":167,"column":32}},"type":"VariableDeclarator","id":{"range":[5655,5659],"loc":{"start":{"line":167,"column":18},"end":{"line":167,"column":22}},"type":"Identifier","name":"item"},"init":{"range":[5662,5669],"loc":{"start":{"line":167,"column":25},"end":{"line":167,"column":32}},"type":"MemberExpression","computed":true,"object":{"range":[5662,5666],"loc":{"start":{"line":167,"column":25},"end":{"line":167,"column":29}},"type":"ThisExpression"},"property":{"range":[5667,5668],"loc":{"start":{"line":167,"column":30},"end":{"line":167,"column":31}},"type":"Identifier","name":"i"}}}],"kind":"var"},{"range":[5685,5703],"loc":{"start":{"line":168,"column":14},"end":{"line":168,"column":32}},"type":"ExpressionStatement","expression":{"range":[5685,5702],"loc":{"start":{"line":168,"column":14},"end":{"line":168,"column":31}},"type":"CallExpression","callee":{"range":[5685,5696],"loc":{"start":{"line":168,"column":14},"end":{"line":168,"column":25}},"type":"MemberExpression","computed":false,"object":{"range":[5685,5689],"loc":{"start":{"line":168,"column":14},"end":{"line":168,"column":18}},"type":"ThisExpression"},"property":{"range":[5690,5696],"loc":{"start":{"line":168,"column":19},"end":{"line":168,"column":25}},"type":"Identifier","name":"splice"}},"arguments":[{"range":[5697,5698],"loc":{"start":{"line":168,"column":26},"end":{"line":168,"column":27}},"type":"Identifier","name":"i"},{"range":[5700,5701],"loc":{"start":{"line":168,"column":29},"end":{"line":168,"column":30}},"type":"Literal","value":1,"raw":"1"}]}},{"range":[5718,5730],"loc":{"start":{"line":169,"column":14},"end":{"line":169,"column":26}},"type":"ReturnStatement","argument":{"range":[5725,5729],"loc":{"start":{"line":169,"column":21},"end":{"line":169,"column":25}},"type":"Identifier","name":"item"}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[5758,5775],"loc":{"start":{"line":171,"column":12},"end":{"line":171,"column":29}},"type":"Property","key":{"range":[5758,5768],"loc":{"start":{"line":171,"column":12},"end":{"line":171,"column":22}},"type":"Identifier","name":"enumerable"},"computed":false,"value":{"range":[5770,5775],"loc":{"start":{"line":171,"column":24},"end":{"line":171,"column":29}},"type":"Literal","value":false,"raw":"false"},"kind":"init","method":false,"shorthand":false}]},"kind":"init","method":false,"shorthand":false},{"range":[5799,5993],"loc":{"start":{"line":173,"column":10},"end":{"line":178,"column":11}},"type":"Property","key":{"range":[5799,5809],"loc":{"start":{"line":173,"column":10},"end":{"line":173,"column":20}},"type":"Literal","value":"_pySlice","raw":"\"_pySlice\""},"computed":false,"value":{"range":[5811,5993],"loc":{"start":{"line":173,"column":22},"end":{"line":178,"column":11}},"type":"ObjectExpression","properties":[{"range":[5825,5950],"loc":{"start":{"line":174,"column":12},"end":{"line":176,"column":13}},"type":"Property","key":{"range":[5825,5830],"loc":{"start":{"line":174,"column":12},"end":{"line":174,"column":17}},"type":"Identifier","name":"value"},"computed":false,"value":{"range":[5832,5950],"loc":{"start":{"line":174,"column":19},"end":{"line":176,"column":13}},"type":"FunctionExpression","id":null,"params":[{"range":[5842,5847],"loc":{"start":{"line":174,"column":29},"end":{"line":174,"column":34}},"type":"Identifier","name":"start"},{"range":[5849,5852],"loc":{"start":{"line":174,"column":36},"end":{"line":174,"column":39}},"type":"Identifier","name":"end"},{"range":[5854,5858],"loc":{"start":{"line":174,"column":41},"end":{"line":174,"column":45}},"type":"Identifier","name":"step"}],"defaults":[],"body":{"range":[5860,5950],"loc":{"start":{"line":174,"column":47},"end":{"line":176,"column":13}},"type":"BlockStatement","body":[{"range":[5876,5936],"loc":{"start":{"line":175,"column":14},"end":{"line":175,"column":74}},"type":"ReturnStatement","argument":{"range":[5883,5935],"loc":{"start":{"line":175,"column":21},"end":{"line":175,"column":73}},"type":"CallExpression","callee":{"range":[5883,5911],"loc":{"start":{"line":175,"column":21},"end":{"line":175,"column":49}},"type":"MemberExpression","computed":false,"object":{"range":[5883,5905],"loc":{"start":{"line":175,"column":21},"end":{"line":175,"column":43}},"type":"MemberExpression","computed":false,"object":{"range":[5883,5896],"loc":{"start":{"line":175,"column":21},"end":{"line":175,"column":34}},"type":"Identifier","name":"pythonRuntime"},"property":{"range":[5897,5905],"loc":{"start":{"line":175,"column":35},"end":{"line":175,"column":43}},"type":"Identifier","name":"internal"}},"property":{"range":[5906,5911],"loc":{"start":{"line":175,"column":44},"end":{"line":175,"column":49}},"type":"Identifier","name":"slice"}},"arguments":[{"range":[5912,5916],"loc":{"start":{"line":175,"column":50},"end":{"line":175,"column":54}},"type":"ThisExpression"},{"range":[5918,5923],"loc":{"start":{"line":175,"column":56},"end":{"line":175,"column":61}},"type":"Identifier","name":"start"},{"range":[5925,5928],"loc":{"start":{"line":175,"column":63},"end":{"line":175,"column":66}},"type":"Identifier","name":"end"},{"range":[5930,5934],"loc":{"start":{"line":175,"column":68},"end":{"line":175,"column":72}},"type":"Identifier","name":"step"}]}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[5964,5981],"loc":{"start":{"line":177,"column":12},"end":{"line":177,"column":29}},"type":"Property","key":{"range":[5964,5974],"loc":{"start":{"line":177,"column":12},"end":{"line":177,"column":22}},"type":"Identifier","name":"enumerable"},"computed":false,"value":{"range":[5976,5981],"loc":{"start":{"line":177,"column":24},"end":{"line":177,"column":29}},"type":"Literal","value":false,"raw":"false"},"kind":"init","method":false,"shorthand":false}]},"kind":"init","method":false,"shorthand":false},{"range":[6005,6154],"loc":{"start":{"line":179,"column":10},"end":{"line":184,"column":11}},"type":"Property","key":{"range":[6005,6013],"loc":{"start":{"line":179,"column":10},"end":{"line":179,"column":18}},"type":"Literal","value":"remove","raw":"\"remove\""},"computed":false,"value":{"range":[6015,6154],"loc":{"start":{"line":179,"column":20},"end":{"line":184,"column":11}},"type":"ObjectExpression","properties":[{"range":[6029,6111],"loc":{"start":{"line":180,"column":12},"end":{"line":182,"column":13}},"type":"Property","key":{"range":[6029,6034],"loc":{"start":{"line":180,"column":12},"end":{"line":180,"column":17}},"type":"Identifier","name":"value"},"computed":false,"value":{"range":[6036,6111],"loc":{"start":{"line":180,"column":19},"end":{"line":182,"column":13}},"type":"FunctionExpression","id":null,"params":[{"range":[6046,6047],"loc":{"start":{"line":180,"column":29},"end":{"line":180,"column":30}},"type":"Identifier","name":"x"}],"defaults":[],"body":{"range":[6049,6111],"loc":{"start":{"line":180,"column":32},"end":{"line":182,"column":13}},"type":"BlockStatement","body":[{"range":[6065,6097],"loc":{"start":{"line":181,"column":14},"end":{"line":181,"column":46}},"type":"ExpressionStatement","expression":{"range":[6065,6096],"loc":{"start":{"line":181,"column":14},"end":{"line":181,"column":45}},"type":"CallExpression","callee":{"range":[6065,6076],"loc":{"start":{"line":181,"column":14},"end":{"line":181,"column":25}},"type":"MemberExpression","computed":false,"object":{"range":[6065,6069],"loc":{"start":{"line":181,"column":14},"end":{"line":181,"column":18}},"type":"ThisExpression"},"property":{"range":[6070,6076],"loc":{"start":{"line":181,"column":19},"end":{"line":181,"column":25}},"type":"Identifier","name":"splice"}},"arguments":[{"range":[6077,6092],"loc":{"start":{"line":181,"column":26},"end":{"line":181,"column":41}},"type":"CallExpression","callee":{"range":[6077,6089],"loc":{"start":{"line":181,"column":26},"end":{"line":181,"column":38}},"type":"MemberExpression","computed":false,"object":{"range":[6077,6081],"loc":{"start":{"line":181,"column":26},"end":{"line":181,"column":30}},"type":"ThisExpression"},"property":{"range":[6082,6089],"loc":{"start":{"line":181,"column":31},"end":{"line":181,"column":38}},"type":"Identifier","name":"indexOf"}},"arguments":[{"range":[6090,6091],"loc":{"start":{"line":181,"column":39},"end":{"line":181,"column":40}},"type":"Identifier","name":"x"}]},{"range":[6094,6095],"loc":{"start":{"line":181,"column":43},"end":{"line":181,"column":44}},"type":"Literal","value":1,"raw":"1"}]}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[6125,6142],"loc":{"start":{"line":183,"column":12},"end":{"line":183,"column":29}},"type":"Property","key":{"range":[6125,6135],"loc":{"start":{"line":183,"column":12},"end":{"line":183,"column":22}},"type":"Identifier","name":"enumerable"},"computed":false,"value":{"range":[6137,6142],"loc":{"start":{"line":183,"column":24},"end":{"line":183,"column":29}},"type":"Literal","value":false,"raw":"false"},"kind":"init","method":false,"shorthand":false}]},"kind":"init","method":false,"shorthand":false},{"range":[6166,7608],"loc":{"start":{"line":185,"column":10},"end":{"line":224,"column":11}},"type":"Property","key":{"range":[6166,6172],"loc":{"start":{"line":185,"column":10},"end":{"line":185,"column":16}},"type":"Literal","value":"sort","raw":"\"sort\""},"computed":false,"value":{"range":[6174,7608],"loc":{"start":{"line":185,"column":18},"end":{"line":224,"column":11}},"type":"ObjectExpression","properties":[{"range":[6188,7565],"loc":{"start":{"line":186,"column":12},"end":{"line":222,"column":13}},"type":"Property","key":{"range":[6188,6193],"loc":{"start":{"line":186,"column":12},"end":{"line":186,"column":17}},"type":"Identifier","name":"value"},"computed":false,"value":{"range":[6195,7565],"loc":{"start":{"line":186,"column":19},"end":{"line":222,"column":13}},"type":"FunctionExpression","id":null,"params":[{"range":[6204,6205],"loc":{"start":{"line":186,"column":28},"end":{"line":186,"column":29}},"type":"Identifier","name":"x"},{"range":[6207,6214],"loc":{"start":{"line":186,"column":31},"end":{"line":186,"column":38}},"type":"Identifier","name":"reverse"}],"defaults":[],"body":{"range":[6216,7565],"loc":{"start":{"line":186,"column":40},"end":{"line":222,"column":13}},"type":"BlockStatement","body":[{"range":[6232,6258],"loc":{"start":{"line":187,"column":14},"end":{"line":187,"column":40}},"type":"VariableDeclaration","declarations":[{"range":[6236,6257],"loc":{"start":{"line":187,"column":18},"end":{"line":187,"column":39}},"type":"VariableDeclarator","id":{"range":[6236,6241],"loc":{"start":{"line":187,"column":18},"end":{"line":187,"column":23}},"type":"Identifier","name":"list2"},"init":{"range":[6244,6257],"loc":{"start":{"line":187,"column":26},"end":{"line":187,"column":39}},"type":"CallExpression","callee":{"range":[6244,6254],"loc":{"start":{"line":187,"column":26},"end":{"line":187,"column":36}},"type":"MemberExpression","computed":false,"object":{"range":[6244,6248],"loc":{"start":{"line":187,"column":26},"end":{"line":187,"column":30}},"type":"ThisExpression"},"property":{"range":[6249,6254],"loc":{"start":{"line":187,"column":31},"end":{"line":187,"column":36}},"type":"Identifier","name":"slice"}},"arguments":[{"range":[6255,6256],"loc":{"start":{"line":187,"column":37},"end":{"line":187,"column":38}},"type":"Literal","value":0,"raw":"0"}]}}],"kind":"var"},{"range":[6273,6756],"loc":{"start":{"line":188,"column":14},"end":{"line":198,"column":15}},"type":"VariableDeclaration","declarations":[{"range":[6277,6756],"loc":{"start":{"line":188,"column":18},"end":{"line":198,"column":15}},"type":"VariableDeclarator","id":{"range":[6277,6286],"loc":{"start":{"line":188,"column":18},"end":{"line":188,"column":27}},"type":"Identifier","name":"apply_key"},"init":{"range":[6289,6756],"loc":{"start":{"line":188,"column":30},"end":{"line":198,"column":15}},"type":"FunctionExpression","id":null,"params":[{"range":[6298,6299],"loc":{"start":{"line":188,"column":39},"end":{"line":188,"column":40}},"type":"Identifier","name":"a"},{"range":[6301,6310],"loc":{"start":{"line":188,"column":42},"end":{"line":188,"column":51}},"type":"Identifier","name":"numerical"}],"defaults":[],"body":{"range":[6312,6756],"loc":{"start":{"line":188,"column":53},"end":{"line":198,"column":15}},"type":"BlockStatement","body":[{"range":[6330,6355],"loc":{"start":{"line":189,"column":16},"end":{"line":189,"column":41}},"type":"VariableDeclaration","declarations":[{"range":[6334,6354],"loc":{"start":{"line":189,"column":20},"end":{"line":189,"column":40}},"type":"VariableDeclarator","id":{"range":[6334,6339],"loc":{"start":{"line":189,"column":20},"end":{"line":189,"column":25}},"type":"Identifier","name":"list3"},"init":{"range":[6342,6354],"loc":{"start":{"line":189,"column":28},"end":{"line":189,"column":40}},"type":"CallExpression","callee":{"range":[6342,6351],"loc":{"start":{"line":189,"column":28},"end":{"line":189,"column":37}},"type":"MemberExpression","computed":false,"object":{"range":[6342,6347],"loc":{"start":{"line":189,"column":28},"end":{"line":189,"column":33}},"type":"Identifier","name":"list2"},"property":{"range":[6348,6351],"loc":{"start":{"line":189,"column":34},"end":{"line":189,"column":37}},"type":"Identifier","name":"map"}},"arguments":[{"range":[6352,6353],"loc":{"start":{"line":189,"column":38},"end":{"line":189,"column":39}},"type":"Identifier","name":"x"}]}}],"kind":"var"},{"range":[6454,6470],"loc":{"start":{"line":191,"column":16},"end":{"line":191,"column":32}},"type":"VariableDeclaration","declarations":[{"range":[6458,6470],"loc":{"start":{"line":191,"column":20},"end":{"line":191,"column":32}},"type":"VariableDeclarator","id":{"range":[6458,6465],"loc":{"start":{"line":191,"column":20},"end":{"line":191,"column":27}},"type":"Identifier","name":"mapping"},"init":{"range":[6468,6470],"loc":{"start":{"line":191,"column":30},"end":{"line":191,"column":32}},"type":"ObjectExpression","properties":[]}}],"kind":"var"},{"range":[6487,6536],"loc":{"start":{"line":192,"column":16},"end":{"line":192,"column":65}},"type":"ForInStatement","left":{"range":[6491,6496],"loc":{"start":{"line":192,"column":20},"end":{"line":192,"column":25}},"type":"VariableDeclaration","declarations":[{"range":[6495,6496],"loc":{"start":{"line":192,"column":24},"end":{"line":192,"column":25}},"type":"VariableDeclarator","id":{"range":[6495,6496],"loc":{"start":{"line":192,"column":24},"end":{"line":192,"column":25}},"type":"Identifier","name":"i"},"init":null}],"kind":"var"},"right":{"range":[6500,6505],"loc":{"start":{"line":192,"column":29},"end":{"line":192,"column":34}},"type":"Identifier","name":"list3"},"body":{"range":[6507,6536],"loc":{"start":{"line":192,"column":36},"end":{"line":192,"column":65}},"type":"ExpressionStatement","expression":{"range":[6507,6535],"loc":{"start":{"line":192,"column":36},"end":{"line":192,"column":64}},"type":"AssignmentExpression","operator":"=","left":{"range":[6507,6524],"loc":{"start":{"line":192,"column":36},"end":{"line":192,"column":53}},"type":"MemberExpression","computed":true,"object":{"range":[6507,6514],"loc":{"start":{"line":192,"column":36},"end":{"line":192,"column":43}},"type":"Identifier","name":"mapping"},"property":{"range":[6515,6523],"loc":{"start":{"line":192,"column":44},"end":{"line":192,"column":52}},"type":"MemberExpression","computed":true,"object":{"range":[6515,6520],"loc":{"start":{"line":192,"column":44},"end":{"line":192,"column":49}},"type":"Identifier","name":"list3"},"property":{"range":[6521,6522],"loc":{"start":{"line":192,"column":50},"end":{"line":192,"column":51}},"type":"Identifier","name":"i"}}},"right":{"range":[6527,6535],"loc":{"start":{"line":192,"column":56},"end":{"line":192,"column":64}},"type":"MemberExpression","computed":true,"object":{"range":[6527,6532],"loc":{"start":{"line":192,"column":56},"end":{"line":192,"column":61}},"type":"Identifier","name":"list2"},"property":{"range":[6533,6534],"loc":{"start":{"line":192,"column":62},"end":{"line":192,"column":63}},"type":"Identifier","name":"i"}}}},"each":false},{"range":[6553,6682],"loc":{"start":{"line":193,"column":16},"end":{"line":196,"column":30}},"type":"IfStatement","test":{"range":[6556,6565],"loc":{"start":{"line":193,"column":19},"end":{"line":193,"column":28}},"type":"Identifier","name":"numerical"},"consequent":{"range":[6585,6630],"loc":{"start":{"line":194,"column":18},"end":{"line":194,"column":63}},"type":"ExpressionStatement","expression":{"range":[6585,6629],"loc":{"start":{"line":194,"column":18},"end":{"line":194,"column":62}},"type":"CallExpression","callee":{"range":[6585,6595],"loc":{"start":{"line":194,"column":18},"end":{"line":194,"column":28}},"type":"MemberExpression","computed":false,"object":{"range":[6585,6590],"loc":{"start":{"line":194,"column":18},"end":{"line":194,"column":23}},"type":"Identifier","name":"list3"},"property":{"range":[6591,6595],"loc":{"start":{"line":194,"column":24},"end":{"line":194,"column":28}},"type":"Identifier","name":"sort"}},"arguments":[{"range":[6596,6628],"loc":{"start":{"line":194,"column":29},"end":{"line":194,"column":61}},"type":"FunctionExpression","id":null,"params":[{"range":[6605,6606],"loc":{"start":{"line":194,"column":38},"end":{"line":194,"column":39}},"type":"Identifier","name":"a"},{"range":[6608,6609],"loc":{"start":{"line":194,"column":41},"end":{"line":194,"column":42}},"type":"Identifier","name":"b"}],"defaults":[],"body":{"range":[6611,6628],"loc":{"start":{"line":194,"column":44},"end":{"line":194,"column":61}},"type":"BlockStatement","body":[{"range":[6613,6626],"loc":{"start":{"line":194,"column":46},"end":{"line":194,"column":59}},"type":"ReturnStatement","argument":{"range":[6620,6625],"loc":{"start":{"line":194,"column":53},"end":{"line":194,"column":58}},"type":"BinaryExpression","operator":"-","left":{"range":[6620,6621],"loc":{"start":{"line":194,"column":53},"end":{"line":194,"column":54}},"type":"Identifier","name":"a"},"right":{"range":[6624,6625],"loc":{"start":{"line":194,"column":57},"end":{"line":194,"column":58}},"type":"Identifier","name":"b"}}}]},"generator":false,"expression":false}]}},"alternate":{"range":[6670,6682],"loc":{"start":{"line":196,"column":18},"end":{"line":196,"column":30}},"type":"ExpressionStatement","expression":{"range":[6670,6682],"loc":{"start":{"line":196,"column":18},"end":{"line":196,"column":30}},"type":"CallExpression","callee":{"range":[6670,6680],"loc":{"start":{"line":196,"column":18},"end":{"line":196,"column":28}},"type":"MemberExpression","computed":false,"object":{"range":[6670,6675],"loc":{"start":{"line":196,"column":18},"end":{"line":196,"column":23}},"type":"Identifier","name":"list3"},"property":{"range":[6676,6680],"loc":{"start":{"line":196,"column":24},"end":{"line":196,"column":28}},"type":"Identifier","name":"sort"}},"arguments":[]}}},{"range":[6699,6740],"loc":{"start":{"line":197,"column":16},"end":{"line":197,"column":57}},"type":"ForInStatement","left":{"range":[6703,6708],"loc":{"start":{"line":197,"column":20},"end":{"line":197,"column":25}},"type":"VariableDeclaration","declarations":[{"range":[6707,6708],"loc":{"start":{"line":197,"column":24},"end":{"line":197,"column":25}},"type":"VariableDeclarator","id":{"range":[6707,6708],"loc":{"start":{"line":197,"column":24},"end":{"line":197,"column":25}},"type":"Identifier","name":"i"},"init":null}],"kind":"var"},"right":{"range":[6712,6713],"loc":{"start":{"line":197,"column":29},"end":{"line":197,"column":30}},"type":"Identifier","name":"a"},"body":{"range":[6715,6740],"loc":{"start":{"line":197,"column":32},"end":{"line":197,"column":57}},"type":"ExpressionStatement","expression":{"range":[6715,6739],"loc":{"start":{"line":197,"column":32},"end":{"line":197,"column":56}},"type":"AssignmentExpression","operator":"=","left":{"range":[6715,6719],"loc":{"start":{"line":197,"column":32},"end":{"line":197,"column":36}},"type":"MemberExpression","computed":true,"object":{"range":[6715,6716],"loc":{"start":{"line":197,"column":32},"end":{"line":197,"column":33}},"type":"Identifier","name":"a"},"property":{"range":[6717,6718],"loc":{"start":{"line":197,"column":34},"end":{"line":197,"column":35}},"type":"Identifier","name":"i"}},"right":{"range":[6722,6739],"loc":{"start":{"line":197,"column":39},"end":{"line":197,"column":56}},"type":"MemberExpression","computed":true,"object":{"range":[6722,6729],"loc":{"start":{"line":197,"column":39},"end":{"line":197,"column":46}},"type":"Identifier","name":"mapping"},"property":{"range":[6730,6738],"loc":{"start":{"line":197,"column":47},"end":{"line":197,"column":55}},"type":"MemberExpression","computed":true,"object":{"range":[6730,6735],"loc":{"start":{"line":197,"column":47},"end":{"line":197,"column":52}},"type":"Identifier","name":"list3"},"property":{"range":[6736,6737],"loc":{"start":{"line":197,"column":53},"end":{"line":197,"column":54}},"type":"Identifier","name":"i"}}}}},"each":false}]},"generator":false,"expression":false}}],"kind":"var"},{"range":[6771,7240],"loc":{"start":{"line":199,"column":14},"end":{"line":212,"column":15}},"type":"ForInStatement","left":{"range":[6775,6780],"loc":{"start":{"line":199,"column":18},"end":{"line":199,"column":23}},"type":"VariableDeclaration","declarations":[{"range":[6779,6780],"loc":{"start":{"line":199,"column":22},"end":{"line":199,"column":23}},"type":"VariableDeclarator","id":{"range":[6779,6780],"loc":{"start":{"line":199,"column":22},"end":{"line":199,"column":23}},"type":"Identifier","name":"i"},"init":null}],"kind":"var"},"right":{"range":[6784,6788],"loc":{"start":{"line":199,"column":27},"end":{"line":199,"column":31}},"type":"ThisExpression"},"body":{"range":[6790,7240],"loc":{"start":{"line":199,"column":33},"end":{"line":212,"column":15}},"type":"BlockStatement","body":[{"range":[6808,7224],"loc":{"start":{"line":200,"column":16},"end":{"line":211,"column":17}},"type":"IfStatement","test":{"range":[6811,6860],"loc":{"start":{"line":200,"column":19},"end":{"line":200,"column":68}},"type":"LogicalExpression","operator":"||","left":{"range":[6811,6838],"loc":{"start":{"line":200,"column":19},"end":{"line":200,"column":46}},"type":"BinaryExpression","operator":"!==","left":{"range":[6811,6825],"loc":{"start":{"line":200,"column":19},"end":{"line":200,"column":33}},"type":"UnaryExpression","operator":"typeof","argument":{"range":[6818,6825],"loc":{"start":{"line":200,"column":26},"end":{"line":200,"column":33}},"type":"MemberExpression","computed":true,"object":{"range":[6818,6822],"loc":{"start":{"line":200,"column":26},"end":{"line":200,"column":30}},"type":"ThisExpression"},"property":{"range":[6823,6824],"loc":{"start":{"line":200,"column":31},"end":{"line":200,"column":32}},"type":"Identifier","name":"i"}},"prefix":true},"right":{"range":[6830,6838],"loc":{"start":{"line":200,"column":38},"end":{"line":200,"column":46}},"type":"Literal","value":"number","raw":"'number'"}},"right":{"range":[6842,6860],"loc":{"start":{"line":200,"column":50},"end":{"line":200,"column":68}},"type":"UnaryExpression","operator":"!","argument":{"range":[6843,6860],"loc":{"start":{"line":200,"column":51},"end":{"line":200,"column":68}},"type":"CallExpression","callee":{"range":[6843,6851],"loc":{"start":{"line":200,"column":51},"end":{"line":200,"column":59}},"type":"Identifier","name":"isFinite"},"arguments":[{"range":[6852,6859],"loc":{"start":{"line":200,"column":60},"end":{"line":200,"column":67}},"type":"MemberExpression","computed":true,"object":{"range":[6852,6856],"loc":{"start":{"line":200,"column":60},"end":{"line":200,"column":64}},"type":"ThisExpression"},"property":{"range":[6857,6858],"loc":{"start":{"line":200,"column":65},"end":{"line":200,"column":66}},"type":"Identifier","name":"i"}}]},"prefix":true}},"consequent":{"range":[6862,7224],"loc":{"start":{"line":200,"column":70},"end":{"line":211,"column":17}},"type":"BlockStatement","body":[{"range":[6882,7114],"loc":{"start":{"line":201,"column":18},"end":{"line":207,"column":19}},"type":"IfStatement","test":{"range":[6885,6908],"loc":{"start":{"line":201,"column":21},"end":{"line":201,"column":44}},"type":"BinaryExpression","operator":"!=","left":{"range":[6885,6893],"loc":{"start":{"line":201,"column":21},"end":{"line":201,"column":29}},"type":"UnaryExpression","operator":"typeof","argument":{"range":[6892,6893],"loc":{"start":{"line":201,"column":28},"end":{"line":201,"column":29}},"type":"Identifier","name":"x"},"prefix":true},"right":{"range":[6897,6908],"loc":{"start":{"line":201,"column":33},"end":{"line":201,"column":44}},"type":"Literal","value":"undefined","raw":"'undefined'"}},"consequent":{"range":[6910,6975],"loc":{"start":{"line":201,"column":46},"end":{"line":203,"column":19}},"type":"BlockStatement","body":[{"range":[6932,6955],"loc":{"start":{"line":202,"column":20},"end":{"line":202,"column":43}},"type":"ExpressionStatement","expression":{"range":[6932,6954],"loc":{"start":{"line":202,"column":20},"end":{"line":202,"column":42}},"type":"CallExpression","callee":{"range":[6932,6941],"loc":{"start":{"line":202,"column":20},"end":{"line":202,"column":29}},"type":"Identifier","name":"apply_key"},"arguments":[{"range":[6942,6946],"loc":{"start":{"line":202,"column":30},"end":{"line":202,"column":34}},"type":"ThisExpression"},{"range":[6948,6953],"loc":{"start":{"line":202,"column":36},"end":{"line":202,"column":41}},"type":"Literal","value":false,"raw":"false"}]}}]},"alternate":{"range":[6999,7114],"loc":{"start":{"line":204,"column":23},"end":{"line":207,"column":19}},"type":"BlockStatement","body":[{"range":[7021,7034],"loc":{"start":{"line":205,"column":20},"end":{"line":205,"column":33}},"type":"ExpressionStatement","expression":{"range":[7021,7033],"loc":{"start":{"line":205,"column":20},"end":{"line":205,"column":32}},"type":"CallExpression","callee":{"range":[7021,7031],"loc":{"start":{"line":205,"column":20},"end":{"line":205,"column":30}},"type":"MemberExpression","computed":false,"object":{"range":[7021,7026],"loc":{"start":{"line":205,"column":20},"end":{"line":205,"column":25}},"type":"Identifier","name":"list2"},"property":{"range":[7027,7031],"loc":{"start":{"line":205,"column":26},"end":{"line":205,"column":30}},"type":"Identifier","name":"sort"}},"arguments":[]}},{"range":[7055,7094],"loc":{"start":{"line":206,"column":20},"end":{"line":206,"column":59}},"type":"ForInStatement","left":{"range":[7060,7065],"loc":{"start":{"line":206,"column":25},"end":{"line":206,"column":30}},"type":"VariableDeclaration","declarations":[{"range":[7064,7065],"loc":{"start":{"line":206,"column":29},"end":{"line":206,"column":30}},"type":"VariableDeclarator","id":{"range":[7064,7065],"loc":{"start":{"line":206,"column":29},"end":{"line":206,"column":30}},"type":"Identifier","name":"j"},"init":null}],"kind":"var"},"right":{"range":[7069,7073],"loc":{"start":{"line":206,"column":34},"end":{"line":206,"column":38}},"type":"ThisExpression"},"body":{"range":[7075,7094],"loc":{"start":{"line":206,"column":40},"end":{"line":206,"column":59}},"type":"ExpressionStatement","expression":{"range":[7075,7093],"loc":{"start":{"line":206,"column":40},"end":{"line":206,"column":58}},"type":"AssignmentExpression","operator":"=","left":{"range":[7075,7082],"loc":{"start":{"line":206,"column":40},"end":{"line":206,"column":47}},"type":"MemberExpression","computed":true,"object":{"range":[7075,7079],"loc":{"start":{"line":206,"column":40},"end":{"line":206,"column":44}},"type":"ThisExpression"},"property":{"range":[7080,7081],"loc":{"start":{"line":206,"column":45},"end":{"line":206,"column":46}},"type":"Identifier","name":"j"}},"right":{"range":[7085,7093],"loc":{"start":{"line":206,"column":50},"end":{"line":206,"column":58}},"type":"MemberExpression","computed":true,"object":{"range":[7085,7090],"loc":{"start":{"line":206,"column":50},"end":{"line":206,"column":55}},"type":"Identifier","name":"list2"},"property":{"range":[7091,7092],"loc":{"start":{"line":206,"column":56},"end":{"line":206,"column":57}},"type":"Identifier","name":"j"}}}},"each":false}]}},{"range":[7133,7180],"loc":{"start":{"line":208,"column":18},"end":{"line":209,"column":35}},"type":"IfStatement","test":{"range":[7136,7143],"loc":{"start":{"line":208,"column":21},"end":{"line":208,"column":28}},"type":"Identifier","name":"reverse"},"consequent":{"range":[7165,7180],"loc":{"start":{"line":209,"column":20},"end":{"line":209,"column":35}},"type":"ExpressionStatement","expression":{"range":[7165,7179],"loc":{"start":{"line":209,"column":20},"end":{"line":209,"column":34}},"type":"CallExpression","callee":{"range":[7165,7177],"loc":{"start":{"line":209,"column":20},"end":{"line":209,"column":32}},"type":"MemberExpression","computed":false,"object":{"range":[7165,7169],"loc":{"start":{"line":209,"column":20},"end":{"line":209,"column":24}},"type":"ThisExpression"},"property":{"range":[7170,7177],"loc":{"start":{"line":209,"column":25},"end":{"line":209,"column":32}},"type":"Identifier","name":"reverse"}},"arguments":[]}},"alternate":null},{"range":[7199,7206],"loc":{"start":{"line":210,"column":18},"end":{"line":210,"column":25}},"type":"ReturnStatement","argument":null}]},"alternate":null}]},"each":false},{"range":[7255,7493],"loc":{"start":{"line":213,"column":14},"end":{"line":219,"column":15}},"type":"IfStatement","test":{"range":[7258,7281],"loc":{"start":{"line":213,"column":17},"end":{"line":213,"column":40}},"type":"BinaryExpression","operator":"!=","left":{"range":[7258,7266],"loc":{"start":{"line":213,"column":17},"end":{"line":213,"column":25}},"type":"UnaryExpression","operator":"typeof","argument":{"range":[7265,7266],"loc":{"start":{"line":213,"column":24},"end":{"line":213,"column":25}},"type":"Identifier","name":"x"},"prefix":true},"right":{"range":[7270,7281],"loc":{"start":{"line":213,"column":29},"end":{"line":213,"column":40}},"type":"Literal","value":"undefined","raw":"'undefined'"}},"consequent":{"range":[7283,7339],"loc":{"start":{"line":213,"column":42},"end":{"line":215,"column":15}},"type":"BlockStatement","body":[{"range":[7301,7323],"loc":{"start":{"line":214,"column":16},"end":{"line":214,"column":38}},"type":"ExpressionStatement","expression":{"range":[7301,7322],"loc":{"start":{"line":214,"column":16},"end":{"line":214,"column":37}},"type":"CallExpression","callee":{"range":[7301,7310],"loc":{"start":{"line":214,"column":16},"end":{"line":214,"column":25}},"type":"Identifier","name":"apply_key"},"arguments":[{"range":[7311,7315],"loc":{"start":{"line":214,"column":26},"end":{"line":214,"column":30}},"type":"ThisExpression"},{"range":[7317,7321],"loc":{"start":{"line":214,"column":32},"end":{"line":214,"column":36}},"type":"Literal","value":true,"raw":"true"}]}}]},"alternate":{"range":[7359,7493],"loc":{"start":{"line":216,"column":19},"end":{"line":219,"column":15}},"type":"BlockStatement","body":[{"range":[7377,7422],"loc":{"start":{"line":217,"column":16},"end":{"line":217,"column":61}},"type":"ExpressionStatement","expression":{"range":[7377,7421],"loc":{"start":{"line":217,"column":16},"end":{"line":217,"column":60}},"type":"CallExpression","callee":{"range":[7377,7387],"loc":{"start":{"line":217,"column":16},"end":{"line":217,"column":26}},"type":"MemberExpression","computed":false,"object":{"range":[7377,7382],"loc":{"start":{"line":217,"column":16},"end":{"line":217,"column":21}},"type":"Identifier","name":"list2"},"property":{"range":[7383,7387],"loc":{"start":{"line":217,"column":22},"end":{"line":217,"column":26}},"type":"Identifier","name":"sort"}},"arguments":[{"range":[7388,7420],"loc":{"start":{"line":217,"column":27},"end":{"line":217,"column":59}},"type":"FunctionExpression","id":null,"params":[{"range":[7397,7398],"loc":{"start":{"line":217,"column":36},"end":{"line":217,"column":37}},"type":"Identifier","name":"a"},{"range":[7400,7401],"loc":{"start":{"line":217,"column":39},"end":{"line":217,"column":40}},"type":"Identifier","name":"b"}],"defaults":[],"body":{"range":[7403,7420],"loc":{"start":{"line":217,"column":42},"end":{"line":217,"column":59}},"type":"BlockStatement","body":[{"range":[7405,7418],"loc":{"start":{"line":217,"column":44},"end":{"line":217,"column":57}},"type":"ReturnStatement","argument":{"range":[7412,7417],"loc":{"start":{"line":217,"column":51},"end":{"line":217,"column":56}},"type":"BinaryExpression","operator":"-","left":{"range":[7412,7413],"loc":{"start":{"line":217,"column":51},"end":{"line":217,"column":52}},"type":"Identifier","name":"a"},"right":{"range":[7416,7417],"loc":{"start":{"line":217,"column":55},"end":{"line":217,"column":56}},"type":"Identifier","name":"b"}}}]},"generator":false,"expression":false}]}},{"range":[7439,7477],"loc":{"start":{"line":218,"column":16},"end":{"line":218,"column":54}},"type":"ForInStatement","left":{"range":[7443,7448],"loc":{"start":{"line":218,"column":20},"end":{"line":218,"column":25}},"type":"VariableDeclaration","declarations":[{"range":[7447,7448],"loc":{"start":{"line":218,"column":24},"end":{"line":218,"column":25}},"type":"VariableDeclarator","id":{"range":[7447,7448],"loc":{"start":{"line":218,"column":24},"end":{"line":218,"column":25}},"type":"Identifier","name":"i"},"init":null}],"kind":"var"},"right":{"range":[7452,7456],"loc":{"start":{"line":218,"column":29},"end":{"line":218,"column":33}},"type":"ThisExpression"},"body":{"range":[7458,7477],"loc":{"start":{"line":218,"column":35},"end":{"line":218,"column":54}},"type":"ExpressionStatement","expression":{"range":[7458,7476],"loc":{"start":{"line":218,"column":35},"end":{"line":218,"column":53}},"type":"AssignmentExpression","operator":"=","left":{"range":[7458,7465],"loc":{"start":{"line":218,"column":35},"end":{"line":218,"column":42}},"type":"MemberExpression","computed":true,"object":{"range":[7458,7462],"loc":{"start":{"line":218,"column":35},"end":{"line":218,"column":39}},"type":"ThisExpression"},"property":{"range":[7463,7464],"loc":{"start":{"line":218,"column":40},"end":{"line":218,"column":41}},"type":"Identifier","name":"i"}},"right":{"range":[7468,7476],"loc":{"start":{"line":218,"column":45},"end":{"line":218,"column":53}},"type":"MemberExpression","computed":true,"object":{"range":[7468,7473],"loc":{"start":{"line":218,"column":45},"end":{"line":218,"column":50}},"type":"Identifier","name":"list2"},"property":{"range":[7474,7475],"loc":{"start":{"line":218,"column":51},"end":{"line":218,"column":52}},"type":"Identifier","name":"i"}}}},"each":false}]}},{"range":[7508,7551],"loc":{"start":{"line":220,"column":14},"end":{"line":221,"column":31}},"type":"IfStatement","test":{"range":[7511,7518],"loc":{"start":{"line":220,"column":17},"end":{"line":220,"column":24}},"type":"Identifier","name":"reverse"},"consequent":{"range":[7536,7551],"loc":{"start":{"line":221,"column":16},"end":{"line":221,"column":31}},"type":"ExpressionStatement","expression":{"range":[7536,7550],"loc":{"start":{"line":221,"column":16},"end":{"line":221,"column":30}},"type":"CallExpression","callee":{"range":[7536,7548],"loc":{"start":{"line":221,"column":16},"end":{"line":221,"column":28}},"type":"MemberExpression","computed":false,"object":{"range":[7536,7540],"loc":{"start":{"line":221,"column":16},"end":{"line":221,"column":20}},"type":"ThisExpression"},"property":{"range":[7541,7548],"loc":{"start":{"line":221,"column":21},"end":{"line":221,"column":28}},"type":"Identifier","name":"reverse"}},"arguments":[]}},"alternate":null}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[7579,7596],"loc":{"start":{"line":223,"column":12},"end":{"line":223,"column":29}},"type":"Property","key":{"range":[7579,7589],"loc":{"start":{"line":223,"column":12},"end":{"line":223,"column":22}},"type":"Identifier","name":"enumerable"},"computed":false,"value":{"range":[7591,7596],"loc":{"start":{"line":223,"column":24},"end":{"line":223,"column":29}},"type":"Literal","value":false,"raw":"false"},"kind":"init","method":false,"shorthand":false}]},"kind":"init","method":false,"shorthand":false},{"range":[7620,7773],"loc":{"start":{"line":225,"column":10},"end":{"line":230,"column":11}},"type":"Property","key":{"range":[7620,7630],"loc":{"start":{"line":225,"column":10},"end":{"line":225,"column":20}},"type":"Literal","value":"toString","raw":"\"toString\""},"computed":false,"value":{"range":[7632,7773],"loc":{"start":{"line":225,"column":22},"end":{"line":230,"column":11}},"type":"ObjectExpression","properties":[{"range":[7646,7730],"loc":{"start":{"line":226,"column":12},"end":{"line":228,"column":13}},"type":"Property","key":{"range":[7646,7651],"loc":{"start":{"line":226,"column":12},"end":{"line":226,"column":17}},"type":"Identifier","name":"value"},"computed":false,"value":{"range":[7653,7730],"loc":{"start":{"line":226,"column":19},"end":{"line":228,"column":13}},"type":"FunctionExpression","id":null,"params":[],"defaults":[],"body":{"range":[7665,7730],"loc":{"start":{"line":226,"column":31},"end":{"line":228,"column":13}},"type":"BlockStatement","body":[{"range":[7681,7716],"loc":{"start":{"line":227,"column":14},"end":{"line":227,"column":49}},"type":"ReturnStatement","argument":{"range":[7688,7715],"loc":{"start":{"line":227,"column":21},"end":{"line":227,"column":48}},"type":"BinaryExpression","operator":"+","left":{"range":[7688,7709],"loc":{"start":{"line":227,"column":21},"end":{"line":227,"column":42}},"type":"BinaryExpression","operator":"+","left":{"range":[7688,7691],"loc":{"start":{"line":227,"column":21},"end":{"line":227,"column":24}},"type":"Literal","value":"[","raw":"'['"},"right":{"range":[7694,7709],"loc":{"start":{"line":227,"column":27},"end":{"line":227,"column":42}},"type":"CallExpression","callee":{"range":[7694,7703],"loc":{"start":{"line":227,"column":27},"end":{"line":227,"column":36}},"type":"MemberExpression","computed":false,"object":{"range":[7694,7698],"loc":{"start":{"line":227,"column":27},"end":{"line":227,"column":31}},"type":"ThisExpression"},"property":{"range":[7699,7703],"loc":{"start":{"line":227,"column":32},"end":{"line":227,"column":36}},"type":"Identifier","name":"join"}},"arguments":[{"range":[7704,7708],"loc":{"start":{"line":227,"column":37},"end":{"line":227,"column":41}},"type":"Literal","value":", ","raw":"', '"}]}},"right":{"range":[7712,7715],"loc":{"start":{"line":227,"column":45},"end":{"line":227,"column":48}},"type":"Literal","value":"]","raw":"']'"}}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[7744,7761],"loc":{"start":{"line":229,"column":12},"end":{"line":229,"column":29}},"type":"Property","key":{"range":[7744,7754],"loc":{"start":{"line":229,"column":12},"end":{"line":229,"column":22}},"type":"Identifier","name":"enumerable"},"computed":false,"value":{"range":[7756,7761],"loc":{"start":{"line":229,"column":24},"end":{"line":229,"column":29}},"type":"Literal","value":false,"raw":"false"},"kind":"init","method":false,"shorthand":false}]},"kind":"init","method":false,"shorthand":false}]},"kind":"init","method":false,"shorthand":false},{"range":[7789,8100],"loc":{"start":{"line":232,"column":6},"end":{"line":239,"column":7}},"type":"Property","key":{"range":[7789,7799],"loc":{"start":{"line":232,"column":6},"end":{"line":232,"column":16}},"type":"Identifier","name":"createList"},"computed":false,"value":{"range":[7801,8100],"loc":{"start":{"line":232,"column":18},"end":{"line":239,"column":7}},"type":"FunctionExpression","id":null,"params":[],"defaults":[],"body":{"range":[7813,8100],"loc":{"start":{"line":232,"column":30},"end":{"line":239,"column":7}},"type":"BlockStatement","body":[{"range":[7823,7866],"loc":{"start":{"line":233,"column":8},"end":{"line":233,"column":51}},"type":"VariableDeclaration","declarations":[{"range":[7827,7865],"loc":{"start":{"line":233,"column":12},"end":{"line":233,"column":50}},"type":"VariableDeclarator","id":{"range":[7827,7830],"loc":{"start":{"line":233,"column":12},"end":{"line":233,"column":15}},"type":"Identifier","name":"ret"},"init":{"range":[7833,7865],"loc":{"start":{"line":233,"column":18},"end":{"line":233,"column":50}},"type":"NewExpression","callee":{"range":[7837,7863],"loc":{"start":{"line":233,"column":22},"end":{"line":233,"column":48}},"type":"MemberExpression","computed":false,"object":{"range":[7837,7858],"loc":{"start":{"line":233,"column":22},"end":{"line":233,"column":43}},"type":"MemberExpression","computed":false,"object":{"range":[7837,7850],"loc":{"start":{"line":233,"column":22},"end":{"line":233,"column":35}},"type":"Identifier","name":"pythonRuntime"},"property":{"range":[7851,7858],"loc":{"start":{"line":233,"column":36},"end":{"line":233,"column":43}},"type":"Identifier","name":"objects"}},"property":{"range":[7859,7863],"loc":{"start":{"line":233,"column":44},"end":{"line":233,"column":48}},"type":"Identifier","name":"list"}},"arguments":[]}}],"kind":"var"},{"range":[7875,8072],"loc":{"start":{"line":234,"column":8},"end":{"line":237,"column":58}},"type":"IfStatement","test":{"range":[7879,7934],"loc":{"start":{"line":234,"column":12},"end":{"line":234,"column":67}},"type":"LogicalExpression","operator":"&&","left":{"range":[7879,7901],"loc":{"start":{"line":234,"column":12},"end":{"line":234,"column":34}},"type":"BinaryExpression","operator":"===","left":{"range":[7879,7895],"loc":{"start":{"line":234,"column":12},"end":{"line":234,"column":28}},"type":"MemberExpression","computed":false,"object":{"range":[7879,7888],"loc":{"start":{"line":234,"column":12},"end":{"line":234,"column":21}},"type":"Identifier","name":"arguments"},"property":{"range":[7889,7895],"loc":{"start":{"line":234,"column":22},"end":{"line":234,"column":28}},"type":"Identifier","name":"length"}},"right":{"range":[7900,7901],"loc":{"start":{"line":234,"column":33},"end":{"line":234,"column":34}},"type":"Literal","value":1,"raw":"1"}},"right":{"range":[7905,7934],"loc":{"start":{"line":234,"column":38},"end":{"line":234,"column":67}},"type":"BinaryExpression","operator":"instanceof","left":{"range":[7905,7917],"loc":{"start":{"line":234,"column":38},"end":{"line":234,"column":50}},"type":"MemberExpression","computed":true,"object":{"range":[7905,7914],"loc":{"start":{"line":234,"column":38},"end":{"line":234,"column":47}},"type":"Identifier","name":"arguments"},"property":{"range":[7915,7916],"loc":{"start":{"line":234,"column":48},"end":{"line":234,"column":49}},"type":"Literal","value":0,"raw":"0"}},"right":{"range":[7929,7934],"loc":{"start":{"line":234,"column":62},"end":{"line":234,"column":67}},"type":"Identifier","name":"Array"}}},"consequent":{"range":[7946,8000],"loc":{"start":{"line":235,"column":10},"end":{"line":235,"column":64}},"type":"ForInStatement","left":{"range":[7951,7956],"loc":{"start":{"line":235,"column":15},"end":{"line":235,"column":20}},"type":"VariableDeclaration","declarations":[{"range":[7955,7956],"loc":{"start":{"line":235,"column":19},"end":{"line":235,"column":20}},"type":"VariableDeclarator","id":{"range":[7955,7956],"loc":{"start":{"line":235,"column":19},"end":{"line":235,"column":20}},"type":"Identifier","name":"i"},"init":null}],"kind":"var"},"right":{"range":[7960,7972],"loc":{"start":{"line":235,"column":24},"end":{"line":235,"column":36}},"type":"MemberExpression","computed":true,"object":{"range":[7960,7969],"loc":{"start":{"line":235,"column":24},"end":{"line":235,"column":33}},"type":"Identifier","name":"arguments"},"property":{"range":[7970,7971],"loc":{"start":{"line":235,"column":34},"end":{"line":235,"column":35}},"type":"Literal","value":0,"raw":"0"}},"body":{"range":[7974,8000],"loc":{"start":{"line":235,"column":38},"end":{"line":235,"column":64}},"type":"ExpressionStatement","expression":{"range":[7974,7999],"loc":{"start":{"line":235,"column":38},"end":{"line":235,"column":63}},"type":"CallExpression","callee":{"range":[7974,7982],"loc":{"start":{"line":235,"column":38},"end":{"line":235,"column":46}},"type":"MemberExpression","computed":false,"object":{"range":[7974,7977],"loc":{"start":{"line":235,"column":38},"end":{"line":235,"column":41}},"type":"Identifier","name":"ret"},"property":{"range":[7978,7982],"loc":{"start":{"line":235,"column":42},"end":{"line":235,"column":46}},"type":"Identifier","name":"push"}},"arguments":[{"range":[7983,7998],"loc":{"start":{"line":235,"column":47},"end":{"line":235,"column":62}},"type":"MemberExpression","computed":true,"object":{"range":[7983,7995],"loc":{"start":{"line":235,"column":47},"end":{"line":235,"column":59}},"type":"MemberExpression","computed":true,"object":{"range":[7983,7992],"loc":{"start":{"line":235,"column":47},"end":{"line":235,"column":56}},"type":"Identifier","name":"arguments"},"property":{"range":[7993,7994],"loc":{"start":{"line":235,"column":57},"end":{"line":235,"column":58}},"type":"Literal","value":0,"raw":"0"}},"property":{"range":[7996,7997],"loc":{"start":{"line":235,"column":60},"end":{"line":235,"column":61}},"type":"Identifier","name":"i"}}]}},"each":false},"alternate":{"range":[8024,8072],"loc":{"start":{"line":237,"column":10},"end":{"line":237,"column":58}},"type":"ForInStatement","left":{"range":[8029,8034],"loc":{"start":{"line":237,"column":15},"end":{"line":237,"column":20}},"type":"VariableDeclaration","declarations":[{"range":[8033,8034],"loc":{"start":{"line":237,"column":19},"end":{"line":237,"column":20}},"type":"VariableDeclarator","id":{"range":[8033,8034],"loc":{"start":{"line":237,"column":19},"end":{"line":237,"column":20}},"type":"Identifier","name":"i"},"init":null}],"kind":"var"},"right":{"range":[8038,8047],"loc":{"start":{"line":237,"column":24},"end":{"line":237,"column":33}},"type":"Identifier","name":"arguments"},"body":{"range":[8049,8072],"loc":{"start":{"line":237,"column":35},"end":{"line":237,"column":58}},"type":"ExpressionStatement","expression":{"range":[8049,8071],"loc":{"start":{"line":237,"column":35},"end":{"line":237,"column":57}},"type":"CallExpression","callee":{"range":[8049,8057],"loc":{"start":{"line":237,"column":35},"end":{"line":237,"column":43}},"type":"MemberExpression","computed":false,"object":{"range":[8049,8052],"loc":{"start":{"line":237,"column":35},"end":{"line":237,"column":38}},"type":"Identifier","name":"ret"},"property":{"range":[8053,8057],"loc":{"start":{"line":237,"column":39},"end":{"line":237,"column":43}},"type":"Identifier","name":"push"}},"arguments":[{"range":[8058,8070],"loc":{"start":{"line":237,"column":44},"end":{"line":237,"column":56}},"type":"MemberExpression","computed":true,"object":{"range":[8058,8067],"loc":{"start":{"line":237,"column":44},"end":{"line":237,"column":53}},"type":"Identifier","name":"arguments"},"property":{"range":[8068,8069],"loc":{"start":{"line":237,"column":54},"end":{"line":237,"column":55}},"type":"Identifier","name":"i"}}]}},"each":false}},{"range":[8081,8092],"loc":{"start":{"line":238,"column":8},"end":{"line":238,"column":19}},"type":"ReturnStatement","argument":{"range":[8088,8091],"loc":{"start":{"line":238,"column":15},"end":{"line":238,"column":18}},"type":"Identifier","name":"ret"}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[8108,9891],"loc":{"start":{"line":240,"column":6},"end":{"line":302,"column":7}},"type":"Property","key":{"range":[8108,8130],"loc":{"start":{"line":240,"column":6},"end":{"line":240,"column":28}},"type":"Identifier","name":"dictPropertyDescriptor"},"computed":false,"value":{"range":[8132,9891],"loc":{"start":{"line":240,"column":30},"end":{"line":302,"column":7}},"type":"ObjectExpression","properties":[{"range":[8142,8236],"loc":{"start":{"line":241,"column":8},"end":{"line":244,"column":9}},"type":"Property","key":{"range":[8142,8149],"loc":{"start":{"line":241,"column":8},"end":{"line":241,"column":15}},"type":"Literal","value":"_type","raw":"\"_type\""},"computed":false,"value":{"range":[8151,8236],"loc":{"start":{"line":241,"column":17},"end":{"line":244,"column":9}},"type":"ObjectExpression","properties":[{"range":[8163,8197],"loc":{"start":{"line":242,"column":10},"end":{"line":242,"column":44}},"type":"Property","key":{"range":[8163,8166],"loc":{"start":{"line":242,"column":10},"end":{"line":242,"column":13}},"type":"Identifier","name":"get"},"computed":false,"value":{"range":[8168,8197],"loc":{"start":{"line":242,"column":15},"end":{"line":242,"column":44}},"type":"FunctionExpression","id":null,"params":[],"defaults":[],"body":{"range":[8180,8197],"loc":{"start":{"line":242,"column":27},"end":{"line":242,"column":44}},"type":"BlockStatement","body":[{"range":[8182,8196],"loc":{"start":{"line":242,"column":29},"end":{"line":242,"column":43}},"type":"ReturnStatement","argument":{"range":[8189,8195],"loc":{"start":{"line":242,"column":36},"end":{"line":242,"column":42}},"type":"Literal","value":"dict","raw":"'dict'"}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[8209,8226],"loc":{"start":{"line":243,"column":10},"end":{"line":243,"column":27}},"type":"Property","key":{"range":[8209,8219],"loc":{"start":{"line":243,"column":10},"end":{"line":243,"column":20}},"type":"Identifier","name":"enumerable"},"computed":false,"value":{"range":[8221,8226],"loc":{"start":{"line":243,"column":22},"end":{"line":243,"column":27}},"type":"Literal","value":false,"raw":"false"},"kind":"init","method":false,"shorthand":false}]},"kind":"init","method":false,"shorthand":false},{"range":[8246,8343],"loc":{"start":{"line":245,"column":8},"end":{"line":248,"column":9}},"type":"Property","key":{"range":[8246,8257],"loc":{"start":{"line":245,"column":8},"end":{"line":245,"column":19}},"type":"Literal","value":"_isPython","raw":"\"_isPython\""},"computed":false,"value":{"range":[8259,8343],"loc":{"start":{"line":245,"column":21},"end":{"line":248,"column":9}},"type":"ObjectExpression","properties":[{"range":[8271,8304],"loc":{"start":{"line":246,"column":10},"end":{"line":246,"column":43}},"type":"Property","key":{"range":[8271,8274],"loc":{"start":{"line":246,"column":10},"end":{"line":246,"column":13}},"type":"Identifier","name":"get"},"computed":false,"value":{"range":[8276,8304],"loc":{"start":{"line":246,"column":15},"end":{"line":246,"column":43}},"type":"FunctionExpression","id":null,"params":[],"defaults":[],"body":{"range":[8288,8304],"loc":{"start":{"line":246,"column":27},"end":{"line":246,"column":43}},"type":"BlockStatement","body":[{"range":[8290,8302],"loc":{"start":{"line":246,"column":29},"end":{"line":246,"column":41}},"type":"ReturnStatement","argument":{"range":[8297,8301],"loc":{"start":{"line":246,"column":36},"end":{"line":246,"column":40}},"type":"Literal","value":true,"raw":"true"}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[8316,8333],"loc":{"start":{"line":247,"column":10},"end":{"line":247,"column":27}},"type":"Property","key":{"range":[8316,8326],"loc":{"start":{"line":247,"column":10},"end":{"line":247,"column":20}},"type":"Identifier","name":"enumerable"},"computed":false,"value":{"range":[8328,8333],"loc":{"start":{"line":247,"column":22},"end":{"line":247,"column":27}},"type":"Literal","value":false,"raw":"false"},"kind":"init","method":false,"shorthand":false}]},"kind":"init","method":false,"shorthand":false},{"range":[8353,8620],"loc":{"start":{"line":249,"column":8},"end":{"line":256,"column":9}},"type":"Property","key":{"range":[8353,8360],"loc":{"start":{"line":249,"column":8},"end":{"line":249,"column":15}},"type":"Literal","value":"items","raw":"\"items\""},"computed":false,"value":{"range":[8362,8620],"loc":{"start":{"line":249,"column":17},"end":{"line":256,"column":9}},"type":"ObjectExpression","properties":[{"range":[8374,8581],"loc":{"start":{"line":250,"column":10},"end":{"line":254,"column":11}},"type":"Property","key":{"range":[8374,8379],"loc":{"start":{"line":250,"column":10},"end":{"line":250,"column":15}},"type":"Identifier","name":"value"},"computed":false,"value":{"range":[8381,8581],"loc":{"start":{"line":250,"column":17},"end":{"line":254,"column":11}},"type":"FunctionExpression","id":null,"params":[],"defaults":[],"body":{"range":[8393,8581],"loc":{"start":{"line":250,"column":29},"end":{"line":254,"column":11}},"type":"BlockStatement","body":[{"range":[8407,8452],"loc":{"start":{"line":251,"column":12},"end":{"line":251,"column":57}},"type":"VariableDeclaration","declarations":[{"range":[8411,8451],"loc":{"start":{"line":251,"column":16},"end":{"line":251,"column":56}},"type":"VariableDeclarator","id":{"range":[8411,8416],"loc":{"start":{"line":251,"column":16},"end":{"line":251,"column":21}},"type":"Identifier","name":"items"},"init":{"range":[8419,8451],"loc":{"start":{"line":251,"column":24},"end":{"line":251,"column":56}},"type":"NewExpression","callee":{"range":[8423,8449],"loc":{"start":{"line":251,"column":28},"end":{"line":251,"column":54}},"type":"MemberExpression","computed":false,"object":{"range":[8423,8444],"loc":{"start":{"line":251,"column":28},"end":{"line":251,"column":49}},"type":"MemberExpression","computed":false,"object":{"range":[8423,8436],"loc":{"start":{"line":251,"column":28},"end":{"line":251,"column":41}},"type":"Identifier","name":"pythonRuntime"},"property":{"range":[8437,8444],"loc":{"start":{"line":251,"column":42},"end":{"line":251,"column":49}},"type":"Identifier","name":"objects"}},"property":{"range":[8445,8449],"loc":{"start":{"line":251,"column":50},"end":{"line":251,"column":54}},"type":"Identifier","name":"list"}},"arguments":[]}}],"kind":"var"},{"range":[8465,8543],"loc":{"start":{"line":252,"column":12},"end":{"line":252,"column":90}},"type":"ForInStatement","left":{"range":[8470,8475],"loc":{"start":{"line":252,"column":17},"end":{"line":252,"column":22}},"type":"VariableDeclaration","declarations":[{"range":[8474,8475],"loc":{"start":{"line":252,"column":21},"end":{"line":252,"column":22}},"type":"VariableDeclarator","id":{"range":[8474,8475],"loc":{"start":{"line":252,"column":21},"end":{"line":252,"column":22}},"type":"Identifier","name":"k"},"init":null}],"kind":"var"},"right":{"range":[8479,8483],"loc":{"start":{"line":252,"column":26},"end":{"line":252,"column":30}},"type":"ThisExpression"},"body":{"range":[8485,8543],"loc":{"start":{"line":252,"column":32},"end":{"line":252,"column":90}},"type":"ExpressionStatement","expression":{"range":[8485,8542],"loc":{"start":{"line":252,"column":32},"end":{"line":252,"column":89}},"type":"CallExpression","callee":{"range":[8485,8497],"loc":{"start":{"line":252,"column":32},"end":{"line":252,"column":44}},"type":"MemberExpression","computed":false,"object":{"range":[8485,8490],"loc":{"start":{"line":252,"column":32},"end":{"line":252,"column":37}},"type":"Identifier","name":"items"},"property":{"range":[8491,8497],"loc":{"start":{"line":252,"column":38},"end":{"line":252,"column":44}},"type":"Identifier","name":"append"}},"arguments":[{"range":[8498,8541],"loc":{"start":{"line":252,"column":45},"end":{"line":252,"column":88}},"type":"NewExpression","callee":{"range":[8502,8529],"loc":{"start":{"line":252,"column":49},"end":{"line":252,"column":76}},"type":"MemberExpression","computed":false,"object":{"range":[8502,8523],"loc":{"start":{"line":252,"column":49},"end":{"line":252,"column":70}},"type":"MemberExpression","computed":false,"object":{"range":[8502,8515],"loc":{"start":{"line":252,"column":49},"end":{"line":252,"column":62}},"type":"Identifier","name":"pythonRuntime"},"property":{"range":[8516,8523],"loc":{"start":{"line":252,"column":63},"end":{"line":252,"column":70}},"type":"Identifier","name":"objects"}},"property":{"range":[8524,8529],"loc":{"start":{"line":252,"column":71},"end":{"line":252,"column":76}},"type":"Identifier","name":"tuple"}},"arguments":[{"range":[8530,8531],"loc":{"start":{"line":252,"column":77},"end":{"line":252,"column":78}},"type":"Identifier","name":"k"},{"range":[8533,8540],"loc":{"start":{"line":252,"column":80},"end":{"line":252,"column":87}},"type":"MemberExpression","computed":true,"object":{"range":[8533,8537],"loc":{"start":{"line":252,"column":80},"end":{"line":252,"column":84}},"type":"ThisExpression"},"property":{"range":[8538,8539],"loc":{"start":{"line":252,"column":85},"end":{"line":252,"column":86}},"type":"Identifier","name":"k"}}]}]}},"each":false},{"range":[8556,8569],"loc":{"start":{"line":253,"column":12},"end":{"line":253,"column":25}},"type":"ReturnStatement","argument":{"range":[8563,8568],"loc":{"start":{"line":253,"column":19},"end":{"line":253,"column":24}},"type":"Identifier","name":"items"}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[8593,8610],"loc":{"start":{"line":255,"column":10},"end":{"line":255,"column":27}},"type":"Property","key":{"range":[8593,8603],"loc":{"start":{"line":255,"column":10},"end":{"line":255,"column":20}},"type":"Identifier","name":"enumerable"},"computed":false,"value":{"range":[8605,8610],"loc":{"start":{"line":255,"column":22},"end":{"line":255,"column":27}},"type":"Literal","value":false,"raw":"false"},"kind":"init","method":false,"shorthand":false}]},"kind":"init","method":false,"shorthand":false},{"range":[8630,8766],"loc":{"start":{"line":257,"column":8},"end":{"line":262,"column":9}},"type":"Property","key":{"range":[8630,8638],"loc":{"start":{"line":257,"column":8},"end":{"line":257,"column":16}},"type":"Literal","value":"length","raw":"\"length\""},"computed":false,"value":{"range":[8640,8766],"loc":{"start":{"line":257,"column":18},"end":{"line":262,"column":9}},"type":"ObjectExpression","properties":[{"range":[8652,8727],"loc":{"start":{"line":258,"column":10},"end":{"line":260,"column":11}},"type":"Property","key":{"range":[8652,8655],"loc":{"start":{"line":258,"column":10},"end":{"line":258,"column":13}},"type":"Identifier","name":"get"},"computed":false,"value":{"range":[8657,8727],"loc":{"start":{"line":258,"column":15},"end":{"line":260,"column":11}},"type":"FunctionExpression","id":null,"params":[],"defaults":[],"body":{"range":[8669,8727],"loc":{"start":{"line":258,"column":27},"end":{"line":260,"column":11}},"type":"BlockStatement","body":[{"range":[8683,8715],"loc":{"start":{"line":259,"column":12},"end":{"line":259,"column":44}},"type":"ReturnStatement","argument":{"range":[8690,8714],"loc":{"start":{"line":259,"column":19},"end":{"line":259,"column":43}},"type":"MemberExpression","computed":false,"object":{"range":[8690,8707],"loc":{"start":{"line":259,"column":19},"end":{"line":259,"column":36}},"type":"CallExpression","callee":{"range":[8690,8701],"loc":{"start":{"line":259,"column":19},"end":{"line":259,"column":30}},"type":"MemberExpression","computed":false,"object":{"range":[8690,8696],"loc":{"start":{"line":259,"column":19},"end":{"line":259,"column":25}},"type":"Identifier","name":"Object"},"property":{"range":[8697,8701],"loc":{"start":{"line":259,"column":26},"end":{"line":259,"column":30}},"type":"Identifier","name":"keys"}},"arguments":[{"range":[8702,8706],"loc":{"start":{"line":259,"column":31},"end":{"line":259,"column":35}},"type":"ThisExpression"}]},"property":{"range":[8708,8714],"loc":{"start":{"line":259,"column":37},"end":{"line":259,"column":43}},"type":"Identifier","name":"length"}}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[8739,8756],"loc":{"start":{"line":261,"column":10},"end":{"line":261,"column":27}},"type":"Property","key":{"range":[8739,8749],"loc":{"start":{"line":261,"column":10},"end":{"line":261,"column":20}},"type":"Identifier","name":"enumerable"},"computed":false,"value":{"range":[8751,8756],"loc":{"start":{"line":261,"column":22},"end":{"line":261,"column":27}},"type":"Literal","value":false,"raw":"false"},"kind":"init","method":false,"shorthand":false}]},"kind":"init","method":false,"shorthand":false},{"range":[8776,8916],"loc":{"start":{"line":263,"column":8},"end":{"line":268,"column":9}},"type":"Property","key":{"range":[8776,8783],"loc":{"start":{"line":263,"column":8},"end":{"line":263,"column":15}},"type":"Literal","value":"clear","raw":"\"clear\""},"computed":false,"value":{"range":[8785,8916],"loc":{"start":{"line":263,"column":17},"end":{"line":268,"column":9}},"type":"ObjectExpression","properties":[{"range":[8797,8877],"loc":{"start":{"line":264,"column":10},"end":{"line":266,"column":11}},"type":"Property","key":{"range":[8797,8802],"loc":{"start":{"line":264,"column":10},"end":{"line":264,"column":15}},"type":"Identifier","name":"value"},"computed":false,"value":{"range":[8804,8877],"loc":{"start":{"line":264,"column":17},"end":{"line":266,"column":11}},"type":"FunctionExpression","id":null,"params":[],"defaults":[],"body":{"range":[8816,8877],"loc":{"start":{"line":264,"column":29},"end":{"line":266,"column":11}},"type":"BlockStatement","body":[{"range":[8830,8865],"loc":{"start":{"line":265,"column":12},"end":{"line":265,"column":47}},"type":"ForInStatement","left":{"range":[8835,8840],"loc":{"start":{"line":265,"column":17},"end":{"line":265,"column":22}},"type":"VariableDeclaration","declarations":[{"range":[8839,8840],"loc":{"start":{"line":265,"column":21},"end":{"line":265,"column":22}},"type":"VariableDeclarator","id":{"range":[8839,8840],"loc":{"start":{"line":265,"column":21},"end":{"line":265,"column":22}},"type":"Identifier","name":"i"},"init":null}],"kind":"var"},"right":{"range":[8844,8848],"loc":{"start":{"line":265,"column":26},"end":{"line":265,"column":30}},"type":"ThisExpression"},"body":{"range":[8850,8865],"loc":{"start":{"line":265,"column":32},"end":{"line":265,"column":47}},"type":"ExpressionStatement","expression":{"range":[8850,8864],"loc":{"start":{"line":265,"column":32},"end":{"line":265,"column":46}},"type":"UnaryExpression","operator":"delete","argument":{"range":[8857,8864],"loc":{"start":{"line":265,"column":39},"end":{"line":265,"column":46}},"type":"MemberExpression","computed":true,"object":{"range":[8857,8861],"loc":{"start":{"line":265,"column":39},"end":{"line":265,"column":43}},"type":"ThisExpression"},"property":{"range":[8862,8863],"loc":{"start":{"line":265,"column":44},"end":{"line":265,"column":45}},"type":"Identifier","name":"i"}},"prefix":true}},"each":false}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[8889,8906],"loc":{"start":{"line":267,"column":10},"end":{"line":267,"column":27}},"type":"Property","key":{"range":[8889,8899],"loc":{"start":{"line":267,"column":10},"end":{"line":267,"column":20}},"type":"Identifier","name":"enumerable"},"computed":false,"value":{"range":[8901,8906],"loc":{"start":{"line":267,"column":22},"end":{"line":267,"column":27}},"type":"Literal","value":false,"raw":"false"},"kind":"init","method":false,"shorthand":false}]},"kind":"init","method":false,"shorthand":false},{"range":[8926,9148],"loc":{"start":{"line":269,"column":8},"end":{"line":276,"column":9}},"type":"Property","key":{"range":[8926,8931],"loc":{"start":{"line":269,"column":8},"end":{"line":269,"column":13}},"type":"Literal","value":"get","raw":"\"get\""},"computed":false,"value":{"range":[8933,9148],"loc":{"start":{"line":269,"column":15},"end":{"line":276,"column":9}},"type":"ObjectExpression","properties":[{"range":[8945,9109],"loc":{"start":{"line":270,"column":10},"end":{"line":274,"column":11}},"type":"Property","key":{"range":[8945,8950],"loc":{"start":{"line":270,"column":10},"end":{"line":270,"column":15}},"type":"Identifier","name":"value"},"computed":false,"value":{"range":[8952,9109],"loc":{"start":{"line":270,"column":17},"end":{"line":274,"column":11}},"type":"FunctionExpression","id":null,"params":[{"range":[8962,8965],"loc":{"start":{"line":270,"column":27},"end":{"line":270,"column":30}},"type":"Identifier","name":"key"},{"range":[8967,8970],"loc":{"start":{"line":270,"column":32},"end":{"line":270,"column":35}},"type":"Identifier","name":"def"}],"defaults":[],"body":{"range":[8972,9109],"loc":{"start":{"line":270,"column":37},"end":{"line":274,"column":11}},"type":"BlockStatement","body":[{"range":[8986,9072],"loc":{"start":{"line":271,"column":12},"end":{"line":272,"column":51}},"type":"IfStatement","test":{"range":[8990,9001],"loc":{"start":{"line":271,"column":16},"end":{"line":271,"column":27}},"type":"BinaryExpression","operator":"in","left":{"range":[8990,8993],"loc":{"start":{"line":271,"column":16},"end":{"line":271,"column":19}},"type":"Identifier","name":"key"},"right":{"range":[8997,9001],"loc":{"start":{"line":271,"column":23},"end":{"line":271,"column":27}},"type":"ThisExpression"}},"consequent":{"range":[9003,9020],"loc":{"start":{"line":271,"column":29},"end":{"line":271,"column":46}},"type":"ReturnStatement","argument":{"range":[9010,9019],"loc":{"start":{"line":271,"column":36},"end":{"line":271,"column":45}},"type":"MemberExpression","computed":true,"object":{"range":[9010,9014],"loc":{"start":{"line":271,"column":36},"end":{"line":271,"column":40}},"type":"ThisExpression"},"property":{"range":[9015,9018],"loc":{"start":{"line":271,"column":41},"end":{"line":271,"column":44}},"type":"Identifier","name":"key"}}},"alternate":{"range":[9038,9072],"loc":{"start":{"line":272,"column":17},"end":{"line":272,"column":51}},"type":"IfStatement","test":{"range":[9042,9059],"loc":{"start":{"line":272,"column":21},"end":{"line":272,"column":38}},"type":"BinaryExpression","operator":"!==","left":{"range":[9042,9045],"loc":{"start":{"line":272,"column":21},"end":{"line":272,"column":24}},"type":"Identifier","name":"def"},"right":{"range":[9050,9059],"loc":{"start":{"line":272,"column":29},"end":{"line":272,"column":38}},"type":"Identifier","name":"undefined"}},"consequent":{"range":[9061,9072],"loc":{"start":{"line":272,"column":40},"end":{"line":272,"column":51}},"type":"ReturnStatement","argument":{"range":[9068,9071],"loc":{"start":{"line":272,"column":47},"end":{"line":272,"column":50}},"type":"Identifier","name":"def"}},"alternate":null}},{"range":[9085,9097],"loc":{"start":{"line":273,"column":12},"end":{"line":273,"column":24}},"type":"ReturnStatement","argument":{"range":[9092,9096],"loc":{"start":{"line":273,"column":19},"end":{"line":273,"column":23}},"type":"Literal","value":null,"raw":"null"}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[9121,9138],"loc":{"start":{"line":275,"column":10},"end":{"line":275,"column":27}},"type":"Property","key":{"range":[9121,9131],"loc":{"start":{"line":275,"column":10},"end":{"line":275,"column":20}},"type":"Identifier","name":"enumerable"},"computed":false,"value":{"range":[9133,9138],"loc":{"start":{"line":275,"column":22},"end":{"line":275,"column":27}},"type":"Literal","value":false,"raw":"false"},"kind":"init","method":false,"shorthand":false}]},"kind":"init","method":false,"shorthand":false},{"range":[9158,9287],"loc":{"start":{"line":277,"column":8},"end":{"line":282,"column":9}},"type":"Property","key":{"range":[9158,9164],"loc":{"start":{"line":277,"column":8},"end":{"line":277,"column":14}},"type":"Literal","value":"keys","raw":"\"keys\""},"computed":false,"value":{"range":[9166,9287],"loc":{"start":{"line":277,"column":16},"end":{"line":282,"column":9}},"type":"ObjectExpression","properties":[{"range":[9178,9248],"loc":{"start":{"line":278,"column":10},"end":{"line":280,"column":11}},"type":"Property","key":{"range":[9178,9183],"loc":{"start":{"line":278,"column":10},"end":{"line":278,"column":15}},"type":"Identifier","name":"value"},"computed":false,"value":{"range":[9185,9248],"loc":{"start":{"line":278,"column":17},"end":{"line":280,"column":11}},"type":"FunctionExpression","id":null,"params":[],"defaults":[],"body":{"range":[9197,9248],"loc":{"start":{"line":278,"column":29},"end":{"line":280,"column":11}},"type":"BlockStatement","body":[{"range":[9211,9236],"loc":{"start":{"line":279,"column":12},"end":{"line":279,"column":37}},"type":"ReturnStatement","argument":{"range":[9218,9235],"loc":{"start":{"line":279,"column":19},"end":{"line":279,"column":36}},"type":"CallExpression","callee":{"range":[9218,9229],"loc":{"start":{"line":279,"column":19},"end":{"line":279,"column":30}},"type":"MemberExpression","computed":false,"object":{"range":[9218,9224],"loc":{"start":{"line":279,"column":19},"end":{"line":279,"column":25}},"type":"Identifier","name":"Object"},"property":{"range":[9225,9229],"loc":{"start":{"line":279,"column":26},"end":{"line":279,"column":30}},"type":"Identifier","name":"keys"}},"arguments":[{"range":[9230,9234],"loc":{"start":{"line":279,"column":31},"end":{"line":279,"column":35}},"type":"ThisExpression"}]}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[9260,9277],"loc":{"start":{"line":281,"column":10},"end":{"line":281,"column":27}},"type":"Property","key":{"range":[9260,9270],"loc":{"start":{"line":281,"column":10},"end":{"line":281,"column":20}},"type":"Identifier","name":"enumerable"},"computed":false,"value":{"range":[9272,9277],"loc":{"start":{"line":281,"column":22},"end":{"line":281,"column":27}},"type":"Literal","value":false,"raw":"false"},"kind":"init","method":false,"shorthand":false}]},"kind":"init","method":false,"shorthand":false},{"range":[9297,9642],"loc":{"start":{"line":283,"column":8},"end":{"line":294,"column":9}},"type":"Property","key":{"range":[9297,9302],"loc":{"start":{"line":283,"column":8},"end":{"line":283,"column":13}},"type":"Literal","value":"pop","raw":"\"pop\""},"computed":false,"value":{"range":[9304,9642],"loc":{"start":{"line":283,"column":15},"end":{"line":294,"column":9}},"type":"ObjectExpression","properties":[{"range":[9316,9603],"loc":{"start":{"line":284,"column":10},"end":{"line":292,"column":11}},"type":"Property","key":{"range":[9316,9321],"loc":{"start":{"line":284,"column":10},"end":{"line":284,"column":15}},"type":"Identifier","name":"value"},"computed":false,"value":{"range":[9323,9603],"loc":{"start":{"line":284,"column":17},"end":{"line":292,"column":11}},"type":"FunctionExpression","id":null,"params":[{"range":[9333,9336],"loc":{"start":{"line":284,"column":27},"end":{"line":284,"column":30}},"type":"Identifier","name":"key"},{"range":[9338,9341],"loc":{"start":{"line":284,"column":32},"end":{"line":284,"column":35}},"type":"Identifier","name":"def"}],"defaults":[],"body":{"range":[9343,9603],"loc":{"start":{"line":284,"column":37},"end":{"line":292,"column":11}},"type":"BlockStatement","body":[{"range":[9357,9367],"loc":{"start":{"line":285,"column":12},"end":{"line":285,"column":22}},"type":"VariableDeclaration","declarations":[{"range":[9361,9366],"loc":{"start":{"line":285,"column":16},"end":{"line":285,"column":21}},"type":"VariableDeclarator","id":{"range":[9361,9366],"loc":{"start":{"line":285,"column":16},"end":{"line":285,"column":21}},"type":"Identifier","name":"value"},"init":null}],"kind":"var"},{"range":[9380,9565],"loc":{"start":{"line":286,"column":12},"end":{"line":290,"column":46}},"type":"IfStatement","test":{"range":[9384,9395],"loc":{"start":{"line":286,"column":16},"end":{"line":286,"column":27}},"type":"BinaryExpression","operator":"in","left":{"range":[9384,9387],"loc":{"start":{"line":286,"column":16},"end":{"line":286,"column":19}},"type":"Identifier","name":"key"},"right":{"range":[9391,9395],"loc":{"start":{"line":286,"column":23},"end":{"line":286,"column":27}},"type":"ThisExpression"}},"consequent":{"range":[9397,9477],"loc":{"start":{"line":286,"column":29},"end":{"line":289,"column":13}},"type":"BlockStatement","body":[{"range":[9413,9431],"loc":{"start":{"line":287,"column":14},"end":{"line":287,"column":32}},"type":"ExpressionStatement","expression":{"range":[9413,9430],"loc":{"start":{"line":287,"column":14},"end":{"line":287,"column":31}},"type":"AssignmentExpression","operator":"=","left":{"range":[9413,9418],"loc":{"start":{"line":287,"column":14},"end":{"line":287,"column":19}},"type":"Identifier","name":"value"},"right":{"range":[9421,9430],"loc":{"start":{"line":287,"column":22},"end":{"line":287,"column":31}},"type":"MemberExpression","computed":true,"object":{"range":[9421,9425],"loc":{"start":{"line":287,"column":22},"end":{"line":287,"column":26}},"type":"ThisExpression"},"property":{"range":[9426,9429],"loc":{"start":{"line":287,"column":27},"end":{"line":287,"column":30}},"type":"Identifier","name":"key"}}}},{"range":[9446,9463],"loc":{"start":{"line":288,"column":14},"end":{"line":288,"column":31}},"type":"ExpressionStatement","expression":{"range":[9446,9462],"loc":{"start":{"line":288,"column":14},"end":{"line":288,"column":30}},"type":"UnaryExpression","operator":"delete","argument":{"range":[9453,9462],"loc":{"start":{"line":288,"column":21},"end":{"line":288,"column":30}},"type":"MemberExpression","computed":true,"object":{"range":[9453,9457],"loc":{"start":{"line":288,"column":21},"end":{"line":288,"column":25}},"type":"ThisExpression"},"property":{"range":[9458,9461],"loc":{"start":{"line":288,"column":26},"end":{"line":288,"column":29}},"type":"Identifier","name":"key"}},"prefix":true}}]},"alternate":{"range":[9483,9565],"loc":{"start":{"line":289,"column":19},"end":{"line":290,"column":46}},"type":"IfStatement","test":{"range":[9487,9504],"loc":{"start":{"line":289,"column":23},"end":{"line":289,"column":40}},"type":"BinaryExpression","operator":"!==","left":{"range":[9487,9490],"loc":{"start":{"line":289,"column":23},"end":{"line":289,"column":26}},"type":"Identifier","name":"def"},"right":{"range":[9495,9504],"loc":{"start":{"line":289,"column":31},"end":{"line":289,"column":40}},"type":"Identifier","name":"undefined"}},"consequent":{"range":[9506,9518],"loc":{"start":{"line":289,"column":42},"end":{"line":289,"column":54}},"type":"ExpressionStatement","expression":{"range":[9506,9517],"loc":{"start":{"line":289,"column":42},"end":{"line":289,"column":53}},"type":"AssignmentExpression","operator":"=","left":{"range":[9506,9511],"loc":{"start":{"line":289,"column":42},"end":{"line":289,"column":47}},"type":"Identifier","name":"value"},"right":{"range":[9514,9517],"loc":{"start":{"line":289,"column":50},"end":{"line":289,"column":53}},"type":"Identifier","name":"def"}}},"alternate":{"range":[9536,9565],"loc":{"start":{"line":290,"column":17},"end":{"line":290,"column":46}},"type":"ReturnStatement","argument":{"range":[9543,9564],"loc":{"start":{"line":290,"column":24},"end":{"line":290,"column":45}},"type":"NewExpression","callee":{"range":[9547,9552],"loc":{"start":{"line":290,"column":28},"end":{"line":290,"column":33}},"type":"Identifier","name":"Error"},"arguments":[{"range":[9553,9563],"loc":{"start":{"line":290,"column":34},"end":{"line":290,"column":44}},"type":"Literal","value":"KeyError","raw":"\"KeyError\""}]}}}},{"range":[9578,9591],"loc":{"start":{"line":291,"column":12},"end":{"line":291,"column":25}},"type":"ReturnStatement","argument":{"range":[9585,9590],"loc":{"start":{"line":291,"column":19},"end":{"line":291,"column":24}},"type":"Identifier","name":"value"}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[9615,9632],"loc":{"start":{"line":293,"column":10},"end":{"line":293,"column":27}},"type":"Property","key":{"range":[9615,9625],"loc":{"start":{"line":293,"column":10},"end":{"line":293,"column":20}},"type":"Identifier","name":"enumerable"},"computed":false,"value":{"range":[9627,9632],"loc":{"start":{"line":293,"column":22},"end":{"line":293,"column":27}},"type":"Literal","value":false,"raw":"false"},"kind":"init","method":false,"shorthand":false}]},"kind":"init","method":false,"shorthand":false},{"range":[9644,9883],"loc":{"start":{"line":294,"column":11},"end":{"line":301,"column":9}},"type":"Property","key":{"range":[9644,9652],"loc":{"start":{"line":294,"column":11},"end":{"line":294,"column":19}},"type":"Literal","value":"values","raw":"\"values\""},"computed":false,"value":{"range":[9654,9883],"loc":{"start":{"line":294,"column":21},"end":{"line":301,"column":9}},"type":"ObjectExpression","properties":[{"range":[9666,9844],"loc":{"start":{"line":295,"column":10},"end":{"line":299,"column":11}},"type":"Property","key":{"range":[9666,9671],"loc":{"start":{"line":295,"column":10},"end":{"line":295,"column":15}},"type":"Identifier","name":"value"},"computed":false,"value":{"range":[9673,9844],"loc":{"start":{"line":295,"column":17},"end":{"line":299,"column":11}},"type":"FunctionExpression","id":null,"params":[],"defaults":[],"body":{"range":[9685,9844],"loc":{"start":{"line":295,"column":29},"end":{"line":299,"column":11}},"type":"BlockStatement","body":[{"range":[9699,9745],"loc":{"start":{"line":296,"column":12},"end":{"line":296,"column":58}},"type":"VariableDeclaration","declarations":[{"range":[9703,9744],"loc":{"start":{"line":296,"column":16},"end":{"line":296,"column":57}},"type":"VariableDeclarator","id":{"range":[9703,9709],"loc":{"start":{"line":296,"column":16},"end":{"line":296,"column":22}},"type":"Identifier","name":"values"},"init":{"range":[9712,9744],"loc":{"start":{"line":296,"column":25},"end":{"line":296,"column":57}},"type":"NewExpression","callee":{"range":[9716,9742],"loc":{"start":{"line":296,"column":29},"end":{"line":296,"column":55}},"type":"MemberExpression","computed":false,"object":{"range":[9716,9737],"loc":{"start":{"line":296,"column":29},"end":{"line":296,"column":50}},"type":"MemberExpression","computed":false,"object":{"range":[9716,9729],"loc":{"start":{"line":296,"column":29},"end":{"line":296,"column":42}},"type":"Identifier","name":"pythonRuntime"},"property":{"range":[9730,9737],"loc":{"start":{"line":296,"column":43},"end":{"line":296,"column":50}},"type":"Identifier","name":"objects"}},"property":{"range":[9738,9742],"loc":{"start":{"line":296,"column":51},"end":{"line":296,"column":55}},"type":"Identifier","name":"list"}},"arguments":[]}}],"kind":"var"},{"range":[9758,9805],"loc":{"start":{"line":297,"column":12},"end":{"line":297,"column":59}},"type":"ForInStatement","left":{"range":[9763,9770],"loc":{"start":{"line":297,"column":17},"end":{"line":297,"column":24}},"type":"VariableDeclaration","declarations":[{"range":[9767,9770],"loc":{"start":{"line":297,"column":21},"end":{"line":297,"column":24}},"type":"VariableDeclarator","id":{"range":[9767,9770],"loc":{"start":{"line":297,"column":21},"end":{"line":297,"column":24}},"type":"Identifier","name":"key"},"init":null}],"kind":"var"},"right":{"range":[9774,9778],"loc":{"start":{"line":297,"column":28},"end":{"line":297,"column":32}},"type":"ThisExpression"},"body":{"range":[9780,9805],"loc":{"start":{"line":297,"column":34},"end":{"line":297,"column":59}},"type":"ExpressionStatement","expression":{"range":[9780,9804],"loc":{"start":{"line":297,"column":34},"end":{"line":297,"column":58}},"type":"CallExpression","callee":{"range":[9780,9793],"loc":{"start":{"line":297,"column":34},"end":{"line":297,"column":47}},"type":"MemberExpression","computed":false,"object":{"range":[9780,9786],"loc":{"start":{"line":297,"column":34},"end":{"line":297,"column":40}},"type":"Identifier","name":"values"},"property":{"range":[9787,9793],"loc":{"start":{"line":297,"column":41},"end":{"line":297,"column":47}},"type":"Identifier","name":"append"}},"arguments":[{"range":[9794,9803],"loc":{"start":{"line":297,"column":48},"end":{"line":297,"column":57}},"type":"MemberExpression","computed":true,"object":{"range":[9794,9798],"loc":{"start":{"line":297,"column":48},"end":{"line":297,"column":52}},"type":"ThisExpression"},"property":{"range":[9799,9802],"loc":{"start":{"line":297,"column":53},"end":{"line":297,"column":56}},"type":"Identifier","name":"key"}}]}},"each":false},{"range":[9818,9832],"loc":{"start":{"line":298,"column":12},"end":{"line":298,"column":26}},"type":"ReturnStatement","argument":{"range":[9825,9831],"loc":{"start":{"line":298,"column":19},"end":{"line":298,"column":25}},"type":"Identifier","name":"values"}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[9856,9873],"loc":{"start":{"line":300,"column":10},"end":{"line":300,"column":27}},"type":"Property","key":{"range":[9856,9866],"loc":{"start":{"line":300,"column":10},"end":{"line":300,"column":20}},"type":"Identifier","name":"enumerable"},"computed":false,"value":{"range":[9868,9873],"loc":{"start":{"line":300,"column":22},"end":{"line":300,"column":27}},"type":"Literal","value":false,"raw":"false"},"kind":"init","method":false,"shorthand":false}]},"kind":"init","method":false,"shorthand":false}]},"kind":"init","method":false,"shorthand":false}]},"kind":"init","method":false,"shorthand":false},{"range":[9903,12066],"loc":{"start":{"line":304,"column":4},"end":{"line":356,"column":5}},"type":"Property","key":{"range":[9903,9906],"loc":{"start":{"line":304,"column":4},"end":{"line":304,"column":7}},"type":"Identifier","name":"ops"},"computed":false,"value":{"range":[9908,12066],"loc":{"start":{"line":304,"column":9},"end":{"line":356,"column":5}},"type":"ObjectExpression","properties":[{"range":[9916,10584],"loc":{"start":{"line":305,"column":6},"end":{"line":319,"column":7}},"type":"Property","key":{"range":[9916,9919],"loc":{"start":{"line":305,"column":6},"end":{"line":305,"column":9}},"type":"Identifier","name":"add"},"computed":false,"value":{"range":[9921,10584],"loc":{"start":{"line":305,"column":11},"end":{"line":319,"column":7}},"type":"FunctionExpression","id":null,"params":[{"range":[9931,9932],"loc":{"start":{"line":305,"column":21},"end":{"line":305,"column":22}},"type":"Identifier","name":"a"},{"range":[9934,9935],"loc":{"start":{"line":305,"column":24},"end":{"line":305,"column":25}},"type":"Identifier","name":"b"}],"defaults":[],"body":{"range":[9937,10584],"loc":{"start":{"line":305,"column":27},"end":{"line":319,"column":7}},"type":"BlockStatement","body":[{"range":[9947,10554],"loc":{"start":{"line":306,"column":8},"end":{"line":317,"column":9}},"type":"IfStatement","test":{"range":[9951,10042],"loc":{"start":{"line":306,"column":12},"end":{"line":306,"column":103}},"type":"LogicalExpression","operator":"&&","left":{"range":[9951,10007],"loc":{"start":{"line":306,"column":12},"end":{"line":306,"column":68}},"type":"LogicalExpression","operator":"&&","left":{"range":[9951,9972],"loc":{"start":{"line":306,"column":12},"end":{"line":306,"column":33}},"type":"BinaryExpression","operator":"===","left":{"range":[9951,9959],"loc":{"start":{"line":306,"column":12},"end":{"line":306,"column":20}},"type":"UnaryExpression","operator":"typeof","argument":{"range":[9958,9959],"loc":{"start":{"line":306,"column":19},"end":{"line":306,"column":20}},"type":"Identifier","name":"a"},"prefix":true},"right":{"range":[9964,9972],"loc":{"start":{"line":306,"column":25},"end":{"line":306,"column":33}},"type":"Literal","value":"object","raw":"'object'"}},"right":{"range":[9976,10007],"loc":{"start":{"line":306,"column":37},"end":{"line":306,"column":68}},"type":"CallExpression","callee":{"range":[9976,10004],"loc":{"start":{"line":306,"column":37},"end":{"line":306,"column":65}},"type":"MemberExpression","computed":false,"object":{"range":[9976,9998],"loc":{"start":{"line":306,"column":37},"end":{"line":306,"column":59}},"type":"MemberExpression","computed":false,"object":{"range":[9976,9989],"loc":{"start":{"line":306,"column":37},"end":{"line":306,"column":50}},"type":"Identifier","name":"pythonRuntime"},"property":{"range":[9990,9998],"loc":{"start":{"line":306,"column":51},"end":{"line":306,"column":59}},"type":"Identifier","name":"internal"}},"property":{"range":[9999,10004],"loc":{"start":{"line":306,"column":60},"end":{"line":306,"column":65}},"type":"Identifier","name":"isSeq"}},"arguments":[{"range":[10005,10006],"loc":{"start":{"line":306,"column":66},"end":{"line":306,"column":67}},"type":"Identifier","name":"a"}]}},"right":{"range":[10011,10042],"loc":{"start":{"line":306,"column":72},"end":{"line":306,"column":103}},"type":"CallExpression","callee":{"range":[10011,10039],"loc":{"start":{"line":306,"column":72},"end":{"line":306,"column":100}},"type":"MemberExpression","computed":false,"object":{"range":[10011,10033],"loc":{"start":{"line":306,"column":72},"end":{"line":306,"column":94}},"type":"MemberExpression","computed":false,"object":{"range":[10011,10024],"loc":{"start":{"line":306,"column":72},"end":{"line":306,"column":85}},"type":"Identifier","name":"pythonRuntime"},"property":{"range":[10025,10033],"loc":{"start":{"line":306,"column":86},"end":{"line":306,"column":94}},"type":"Identifier","name":"internal"}},"property":{"range":[10034,10039],"loc":{"start":{"line":306,"column":95},"end":{"line":306,"column":100}},"type":"Identifier","name":"isSeq"}},"arguments":[{"range":[10040,10041],"loc":{"start":{"line":306,"column":101},"end":{"line":306,"column":102}},"type":"Identifier","name":"b"}]}},"consequent":{"range":[10044,10554],"loc":{"start":{"line":306,"column":105},"end":{"line":317,"column":9}},"type":"BlockStatement","body":[{"range":[10056,10187],"loc":{"start":{"line":307,"column":10},"end":{"line":308,"column":106}},"type":"IfStatement","test":{"range":[10060,10079],"loc":{"start":{"line":307,"column":14},"end":{"line":307,"column":33}},"type":"BinaryExpression","operator":"!==","left":{"range":[10060,10067],"loc":{"start":{"line":307,"column":14},"end":{"line":307,"column":21}},"type":"MemberExpression","computed":false,"object":{"range":[10060,10061],"loc":{"start":{"line":307,"column":14},"end":{"line":307,"column":15}},"type":"Identifier","name":"a"},"property":{"range":[10062,10067],"loc":{"start":{"line":307,"column":16},"end":{"line":307,"column":21}},"type":"Identifier","name":"_type"}},"right":{"range":[10072,10079],"loc":{"start":{"line":307,"column":26},"end":{"line":307,"column":33}},"type":"MemberExpression","computed":false,"object":{"range":[10072,10073],"loc":{"start":{"line":307,"column":26},"end":{"line":307,"column":27}},"type":"Identifier","name":"b"},"property":{"range":[10074,10079],"loc":{"start":{"line":307,"column":28},"end":{"line":307,"column":33}},"type":"Identifier","name":"_type"}}},"consequent":{"range":[10093,10187],"loc":{"start":{"line":308,"column":12},"end":{"line":308,"column":106}},"type":"ThrowStatement","argument":{"range":[10099,10186],"loc":{"start":{"line":308,"column":18},"end":{"line":308,"column":105}},"type":"CallExpression","callee":{"range":[10099,10108],"loc":{"start":{"line":308,"column":18},"end":{"line":308,"column":27}},"type":"Identifier","name":"TypeError"},"arguments":[{"range":[10109,10185],"loc":{"start":{"line":308,"column":28},"end":{"line":308,"column":104}},"type":"BinaryExpression","operator":"+","left":{"range":[10109,10175],"loc":{"start":{"line":308,"column":28},"end":{"line":308,"column":94}},"type":"BinaryExpression","operator":"+","left":{"range":[10109,10164],"loc":{"start":{"line":308,"column":28},"end":{"line":308,"column":83}},"type":"BinaryExpression","operator":"+","left":{"range":[10109,10154],"loc":{"start":{"line":308,"column":28},"end":{"line":308,"column":73}},"type":"BinaryExpression","operator":"+","left":{"range":[10109,10142],"loc":{"start":{"line":308,"column":28},"end":{"line":308,"column":61}},"type":"BinaryExpression","operator":"+","left":{"range":[10109,10132],"loc":{"start":{"line":308,"column":28},"end":{"line":308,"column":51}},"type":"Literal","value":"can only concatenate ","raw":"\"can only concatenate \""},"right":{"range":[10135,10142],"loc":{"start":{"line":308,"column":54},"end":{"line":308,"column":61}},"type":"MemberExpression","computed":false,"object":{"range":[10135,10136],"loc":{"start":{"line":308,"column":54},"end":{"line":308,"column":55}},"type":"Identifier","name":"a"},"property":{"range":[10137,10142],"loc":{"start":{"line":308,"column":56},"end":{"line":308,"column":61}},"type":"Identifier","name":"_type"}}},"right":{"range":[10145,10154],"loc":{"start":{"line":308,"column":64},"end":{"line":308,"column":73}},"type":"Literal","value":" (not '","raw":"\" (not '\""}},"right":{"range":[10157,10164],"loc":{"start":{"line":308,"column":76},"end":{"line":308,"column":83}},"type":"MemberExpression","computed":false,"object":{"range":[10157,10158],"loc":{"start":{"line":308,"column":76},"end":{"line":308,"column":77}},"type":"Identifier","name":"b"},"property":{"range":[10159,10164],"loc":{"start":{"line":308,"column":78},"end":{"line":308,"column":83}},"type":"Identifier","name":"_type"}}},"right":{"range":[10167,10175],"loc":{"start":{"line":308,"column":86},"end":{"line":308,"column":94}},"type":"Literal","value":"') to ","raw":"\"') to \""}},"right":{"range":[10178,10185],"loc":{"start":{"line":308,"column":97},"end":{"line":308,"column":104}},"type":"MemberExpression","computed":false,"object":{"range":[10178,10179],"loc":{"start":{"line":308,"column":97},"end":{"line":308,"column":98}},"type":"Identifier","name":"a"},"property":{"range":[10180,10185],"loc":{"start":{"line":308,"column":99},"end":{"line":308,"column":104}},"type":"Identifier","name":"_type"}}}]}},"alternate":null},{"range":[10198,10206],"loc":{"start":{"line":309,"column":10},"end":{"line":309,"column":18}},"type":"VariableDeclaration","declarations":[{"range":[10202,10205],"loc":{"start":{"line":309,"column":14},"end":{"line":309,"column":17}},"type":"VariableDeclarator","id":{"range":[10202,10205],"loc":{"start":{"line":309,"column":14},"end":{"line":309,"column":17}},"type":"Identifier","name":"ret"},"init":null}],"kind":"var"},{"range":[10217,10361],"loc":{"start":{"line":310,"column":10},"end":{"line":311,"column":80}},"type":"IfStatement","test":{"range":[10221,10239],"loc":{"start":{"line":310,"column":14},"end":{"line":310,"column":32}},"type":"BinaryExpression","operator":"===","left":{"range":[10221,10228],"loc":{"start":{"line":310,"column":14},"end":{"line":310,"column":21}},"type":"MemberExpression","computed":false,"object":{"range":[10221,10222],"loc":{"start":{"line":310,"column":14},"end":{"line":310,"column":15}},"type":"Identifier","name":"a"},"property":{"range":[10223,10228],"loc":{"start":{"line":310,"column":16},"end":{"line":310,"column":21}},"type":"Identifier","name":"_type"}},"right":{"range":[10233,10239],"loc":{"start":{"line":310,"column":26},"end":{"line":310,"column":32}},"type":"Literal","value":"list","raw":"'list'"}},"consequent":{"range":[10241,10280],"loc":{"start":{"line":310,"column":34},"end":{"line":310,"column":73}},"type":"ExpressionStatement","expression":{"range":[10241,10279],"loc":{"start":{"line":310,"column":34},"end":{"line":310,"column":72}},"type":"AssignmentExpression","operator":"=","left":{"range":[10241,10244],"loc":{"start":{"line":310,"column":34},"end":{"line":310,"column":37}},"type":"Identifier","name":"ret"},"right":{"range":[10247,10279],"loc":{"start":{"line":310,"column":40},"end":{"line":310,"column":72}},"type":"NewExpression","callee":{"range":[10251,10277],"loc":{"start":{"line":310,"column":44},"end":{"line":310,"column":70}},"type":"MemberExpression","computed":false,"object":{"range":[10251,10272],"loc":{"start":{"line":310,"column":44},"end":{"line":310,"column":65}},"type":"MemberExpression","computed":false,"object":{"range":[10251,10264],"loc":{"start":{"line":310,"column":44},"end":{"line":310,"column":57}},"type":"Identifier","name":"pythonRuntime"},"property":{"range":[10265,10272],"loc":{"start":{"line":310,"column":58},"end":{"line":310,"column":65}},"type":"Identifier","name":"objects"}},"property":{"range":[10273,10277],"loc":{"start":{"line":310,"column":66},"end":{"line":310,"column":70}},"type":"Identifier","name":"list"}},"arguments":[]}}},"alternate":{"range":[10296,10361],"loc":{"start":{"line":311,"column":15},"end":{"line":311,"column":80}},"type":"IfStatement","test":{"range":[10300,10319],"loc":{"start":{"line":311,"column":19},"end":{"line":311,"column":38}},"type":"BinaryExpression","operator":"===","left":{"range":[10300,10307],"loc":{"start":{"line":311,"column":19},"end":{"line":311,"column":26}},"type":"MemberExpression","computed":false,"object":{"range":[10300,10301],"loc":{"start":{"line":311,"column":19},"end":{"line":311,"column":20}},"type":"Identifier","name":"a"},"property":{"range":[10302,10307],"loc":{"start":{"line":311,"column":21},"end":{"line":311,"column":26}},"type":"Identifier","name":"_type"}},"right":{"range":[10312,10319],"loc":{"start":{"line":311,"column":31},"end":{"line":311,"column":38}},"type":"Literal","value":"tuple","raw":"'tuple'"}},"consequent":{"range":[10321,10361],"loc":{"start":{"line":311,"column":40},"end":{"line":311,"column":80}},"type":"ExpressionStatement","expression":{"range":[10321,10360],"loc":{"start":{"line":311,"column":40},"end":{"line":311,"column":79}},"type":"AssignmentExpression","operator":"=","left":{"range":[10321,10324],"loc":{"start":{"line":311,"column":40},"end":{"line":311,"column":43}},"type":"Identifier","name":"ret"},"right":{"range":[10327,10360],"loc":{"start":{"line":311,"column":46},"end":{"line":311,"column":79}},"type":"NewExpression","callee":{"range":[10331,10358],"loc":{"start":{"line":311,"column":50},"end":{"line":311,"column":77}},"type":"MemberExpression","computed":false,"object":{"range":[10331,10352],"loc":{"start":{"line":311,"column":50},"end":{"line":311,"column":71}},"type":"MemberExpression","computed":false,"object":{"range":[10331,10344],"loc":{"start":{"line":311,"column":50},"end":{"line":311,"column":63}},"type":"Identifier","name":"pythonRuntime"},"property":{"range":[10345,10352],"loc":{"start":{"line":311,"column":64},"end":{"line":311,"column":71}},"type":"Identifier","name":"objects"}},"property":{"range":[10353,10358],"loc":{"start":{"line":311,"column":72},"end":{"line":311,"column":77}},"type":"Identifier","name":"tuple"}},"arguments":[]}}},"alternate":null}},{"range":[10372,10544],"loc":{"start":{"line":312,"column":10},"end":{"line":316,"column":11}},"type":"IfStatement","test":{"range":[10376,10379],"loc":{"start":{"line":312,"column":14},"end":{"line":312,"column":17}},"type":"Identifier","name":"ret"},"consequent":{"range":[10381,10544],"loc":{"start":{"line":312,"column":19},"end":{"line":316,"column":11}},"type":"BlockStatement","body":[{"range":[10395,10445],"loc":{"start":{"line":313,"column":12},"end":{"line":313,"column":62}},"type":"ForStatement","init":{"range":[10400,10409],"loc":{"start":{"line":313,"column":17},"end":{"line":313,"column":26}},"type":"VariableDeclaration","declarations":[{"range":[10404,10409],"loc":{"start":{"line":313,"column":21},"end":{"line":313,"column":26}},"type":"VariableDeclarator","id":{"range":[10404,10405],"loc":{"start":{"line":313,"column":21},"end":{"line":313,"column":22}},"type":"Identifier","name":"i"},"init":{"range":[10408,10409],"loc":{"start":{"line":313,"column":25},"end":{"line":313,"column":26}},"type":"Literal","value":0,"raw":"0"}}],"kind":"var"},"test":{"range":[10411,10423],"loc":{"start":{"line":313,"column":28},"end":{"line":313,"column":40}},"type":"BinaryExpression","operator":"<","left":{"range":[10411,10412],"loc":{"start":{"line":313,"column":28},"end":{"line":313,"column":29}},"type":"Identifier","name":"i"},"right":{"range":[10415,10423],"loc":{"start":{"line":313,"column":32},"end":{"line":313,"column":40}},"type":"MemberExpression","computed":false,"object":{"range":[10415,10416],"loc":{"start":{"line":313,"column":32},"end":{"line":313,"column":33}},"type":"Identifier","name":"a"},"property":{"range":[10417,10423],"loc":{"start":{"line":313,"column":34},"end":{"line":313,"column":40}},"type":"Identifier","name":"length"}}},"update":{"range":[10425,10428],"loc":{"start":{"line":313,"column":42},"end":{"line":313,"column":45}},"type":"UpdateExpression","operator":"++","argument":{"range":[10425,10426],"loc":{"start":{"line":313,"column":42},"end":{"line":313,"column":43}},"type":"Identifier","name":"i"},"prefix":false},"body":{"range":[10430,10445],"loc":{"start":{"line":313,"column":47},"end":{"line":313,"column":62}},"type":"ExpressionStatement","expression":{"range":[10430,10444],"loc":{"start":{"line":313,"column":47},"end":{"line":313,"column":61}},"type":"CallExpression","callee":{"range":[10430,10438],"loc":{"start":{"line":313,"column":47},"end":{"line":313,"column":55}},"type":"MemberExpression","computed":false,"object":{"range":[10430,10433],"loc":{"start":{"line":313,"column":47},"end":{"line":313,"column":50}},"type":"Identifier","name":"ret"},"property":{"range":[10434,10438],"loc":{"start":{"line":313,"column":51},"end":{"line":313,"column":55}},"type":"Identifier","name":"push"}},"arguments":[{"range":[10439,10443],"loc":{"start":{"line":313,"column":56},"end":{"line":313,"column":60}},"type":"MemberExpression","computed":true,"object":{"range":[10439,10440],"loc":{"start":{"line":313,"column":56},"end":{"line":313,"column":57}},"type":"Identifier","name":"a"},"property":{"range":[10441,10442],"loc":{"start":{"line":313,"column":58},"end":{"line":313,"column":59}},"type":"Identifier","name":"i"}}]}}},{"range":[10458,10508],"loc":{"start":{"line":314,"column":12},"end":{"line":314,"column":62}},"type":"ForStatement","init":{"range":[10463,10472],"loc":{"start":{"line":314,"column":17},"end":{"line":314,"column":26}},"type":"VariableDeclaration","declarations":[{"range":[10467,10472],"loc":{"start":{"line":314,"column":21},"end":{"line":314,"column":26}},"type":"VariableDeclarator","id":{"range":[10467,10468],"loc":{"start":{"line":314,"column":21},"end":{"line":314,"column":22}},"type":"Identifier","name":"i"},"init":{"range":[10471,10472],"loc":{"start":{"line":314,"column":25},"end":{"line":314,"column":26}},"type":"Literal","value":0,"raw":"0"}}],"kind":"var"},"test":{"range":[10474,10486],"loc":{"start":{"line":314,"column":28},"end":{"line":314,"column":40}},"type":"BinaryExpression","operator":"<","left":{"range":[10474,10475],"loc":{"start":{"line":314,"column":28},"end":{"line":314,"column":29}},"type":"Identifier","name":"i"},"right":{"range":[10478,10486],"loc":{"start":{"line":314,"column":32},"end":{"line":314,"column":40}},"type":"MemberExpression","computed":false,"object":{"range":[10478,10479],"loc":{"start":{"line":314,"column":32},"end":{"line":314,"column":33}},"type":"Identifier","name":"b"},"property":{"range":[10480,10486],"loc":{"start":{"line":314,"column":34},"end":{"line":314,"column":40}},"type":"Identifier","name":"length"}}},"update":{"range":[10488,10491],"loc":{"start":{"line":314,"column":42},"end":{"line":314,"column":45}},"type":"UpdateExpression","operator":"++","argument":{"range":[10488,10489],"loc":{"start":{"line":314,"column":42},"end":{"line":314,"column":43}},"type":"Identifier","name":"i"},"prefix":false},"body":{"range":[10493,10508],"loc":{"start":{"line":314,"column":47},"end":{"line":314,"column":62}},"type":"ExpressionStatement","expression":{"range":[10493,10507],"loc":{"start":{"line":314,"column":47},"end":{"line":314,"column":61}},"type":"CallExpression","callee":{"range":[10493,10501],"loc":{"start":{"line":314,"column":47},"end":{"line":314,"column":55}},"type":"MemberExpression","computed":false,"object":{"range":[10493,10496],"loc":{"start":{"line":314,"column":47},"end":{"line":314,"column":50}},"type":"Identifier","name":"ret"},"property":{"range":[10497,10501],"loc":{"start":{"line":314,"column":51},"end":{"line":314,"column":55}},"type":"Identifier","name":"push"}},"arguments":[{"range":[10502,10506],"loc":{"start":{"line":314,"column":56},"end":{"line":314,"column":60}},"type":"MemberExpression","computed":true,"object":{"range":[10502,10503],"loc":{"start":{"line":314,"column":56},"end":{"line":314,"column":57}},"type":"Identifier","name":"b"},"property":{"range":[10504,10505],"loc":{"start":{"line":314,"column":58},"end":{"line":314,"column":59}},"type":"Identifier","name":"i"}}]}}},{"range":[10521,10532],"loc":{"start":{"line":315,"column":12},"end":{"line":315,"column":23}},"type":"ReturnStatement","argument":{"range":[10528,10531],"loc":{"start":{"line":315,"column":19},"end":{"line":315,"column":22}},"type":"Identifier","name":"ret"}}]},"alternate":null}]},"alternate":null},{"range":[10563,10576],"loc":{"start":{"line":318,"column":8},"end":{"line":318,"column":21}},"type":"ReturnStatement","argument":{"range":[10570,10575],"loc":{"start":{"line":318,"column":15},"end":{"line":318,"column":20}},"type":"BinaryExpression","operator":"+","left":{"range":[10570,10571],"loc":{"start":{"line":318,"column":15},"end":{"line":318,"column":16}},"type":"Identifier","name":"a"},"right":{"range":[10574,10575],"loc":{"start":{"line":318,"column":19},"end":{"line":318,"column":20}},"type":"Identifier","name":"b"}}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[10592,10725],"loc":{"start":{"line":320,"column":6},"end":{"line":323,"column":7}},"type":"Property","key":{"range":[10592,10594],"loc":{"start":{"line":320,"column":6},"end":{"line":320,"column":8}},"type":"Identifier","name":"in"},"computed":false,"value":{"range":[10596,10725],"loc":{"start":{"line":320,"column":10},"end":{"line":323,"column":7}},"type":"FunctionExpression","id":null,"params":[{"range":[10606,10607],"loc":{"start":{"line":320,"column":20},"end":{"line":320,"column":21}},"type":"Identifier","name":"a"},{"range":[10609,10610],"loc":{"start":{"line":320,"column":23},"end":{"line":320,"column":24}},"type":"Identifier","name":"b"},{"range":[10612,10613],"loc":{"start":{"line":320,"column":26},"end":{"line":320,"column":27}},"type":"Identifier","name":"n"}],"defaults":[],"body":{"range":[10615,10725],"loc":{"start":{"line":320,"column":29},"end":{"line":323,"column":7}},"type":"BlockStatement","body":[{"range":[10625,10690],"loc":{"start":{"line":321,"column":8},"end":{"line":321,"column":73}},"type":"VariableDeclaration","declarations":[{"range":[10629,10689],"loc":{"start":{"line":321,"column":12},"end":{"line":321,"column":72}},"type":"VariableDeclarator","id":{"range":[10629,10630],"loc":{"start":{"line":321,"column":12},"end":{"line":321,"column":13}},"type":"Identifier","name":"r"},"init":{"range":[10633,10689],"loc":{"start":{"line":321,"column":16},"end":{"line":321,"column":72}},"type":"ConditionalExpression","test":{"range":[10633,10660],"loc":{"start":{"line":321,"column":16},"end":{"line":321,"column":43}},"type":"CallExpression","callee":{"range":[10633,10649],"loc":{"start":{"line":321,"column":16},"end":{"line":321,"column":32}},"type":"MemberExpression","computed":false,"object":{"range":[10633,10634],"loc":{"start":{"line":321,"column":16},"end":{"line":321,"column":17}},"type":"Identifier","name":"b"},"property":{"range":[10635,10649],"loc":{"start":{"line":321,"column":18},"end":{"line":321,"column":32}},"type":"Identifier","name":"hasOwnProperty"}},"arguments":[{"range":[10650,10659],"loc":{"start":{"line":321,"column":33},"end":{"line":321,"column":42}},"type":"Literal","value":"indexOf","raw":"'indexOf'"}]},"consequent":{"range":[10663,10680],"loc":{"start":{"line":321,"column":46},"end":{"line":321,"column":63}},"type":"BinaryExpression","operator":">=","left":{"range":[10663,10675],"loc":{"start":{"line":321,"column":46},"end":{"line":321,"column":58}},"type":"CallExpression","callee":{"range":[10663,10672],"loc":{"start":{"line":321,"column":46},"end":{"line":321,"column":55}},"type":"MemberExpression","computed":false,"object":{"range":[10663,10664],"loc":{"start":{"line":321,"column":46},"end":{"line":321,"column":47}},"type":"Identifier","name":"b"},"property":{"range":[10665,10672],"loc":{"start":{"line":321,"column":48},"end":{"line":321,"column":55}},"type":"Identifier","name":"indexOf"}},"arguments":[{"range":[10673,10674],"loc":{"start":{"line":321,"column":56},"end":{"line":321,"column":57}},"type":"Identifier","name":"a"}]},"right":{"range":[10679,10680],"loc":{"start":{"line":321,"column":62},"end":{"line":321,"column":63}},"type":"Literal","value":0,"raw":"0"}},"alternate":{"range":[10683,10689],"loc":{"start":{"line":321,"column":66},"end":{"line":321,"column":72}},"type":"BinaryExpression","operator":"in","left":{"range":[10683,10684],"loc":{"start":{"line":321,"column":66},"end":{"line":321,"column":67}},"type":"Identifier","name":"a"},"right":{"range":[10688,10689],"loc":{"start":{"line":321,"column":71},"end":{"line":321,"column":72}},"type":"Identifier","name":"b"}}}}],"kind":"var"},{"range":[10699,10717],"loc":{"start":{"line":322,"column":8},"end":{"line":322,"column":26}},"type":"ReturnStatement","argument":{"range":[10706,10716],"loc":{"start":{"line":322,"column":15},"end":{"line":322,"column":25}},"type":"ConditionalExpression","test":{"range":[10706,10707],"loc":{"start":{"line":322,"column":15},"end":{"line":322,"column":16}},"type":"Identifier","name":"n"},"consequent":{"range":[10710,10712],"loc":{"start":{"line":322,"column":19},"end":{"line":322,"column":21}},"type":"UnaryExpression","operator":"!","argument":{"range":[10711,10712],"loc":{"start":{"line":322,"column":20},"end":{"line":322,"column":21}},"type":"Identifier","name":"r"},"prefix":true},"alternate":{"range":[10715,10716],"loc":{"start":{"line":322,"column":24},"end":{"line":322,"column":25}},"type":"Identifier","name":"r"}}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[10733,11763],"loc":{"start":{"line":324,"column":6},"end":{"line":348,"column":7}},"type":"Property","key":{"range":[10733,10741],"loc":{"start":{"line":324,"column":6},"end":{"line":324,"column":14}},"type":"Identifier","name":"multiply"},"computed":false,"value":{"range":[10743,11763],"loc":{"start":{"line":324,"column":16},"end":{"line":348,"column":7}},"type":"FunctionExpression","id":null,"params":[{"range":[10753,10754],"loc":{"start":{"line":324,"column":26},"end":{"line":324,"column":27}},"type":"Identifier","name":"a"},{"range":[10756,10757],"loc":{"start":{"line":324,"column":29},"end":{"line":324,"column":30}},"type":"Identifier","name":"b"}],"defaults":[],"body":{"range":[10759,11763],"loc":{"start":{"line":324,"column":32},"end":{"line":348,"column":7}},"type":"BlockStatement","body":[{"range":[10826,11733],"loc":{"start":{"line":326,"column":8},"end":{"line":346,"column":9}},"type":"IfStatement","test":{"range":[10831,10852],"loc":{"start":{"line":326,"column":13},"end":{"line":326,"column":34}},"type":"BinaryExpression","operator":"===","left":{"range":[10831,10839],"loc":{"start":{"line":326,"column":13},"end":{"line":326,"column":21}},"type":"UnaryExpression","operator":"typeof","argument":{"range":[10838,10839],"loc":{"start":{"line":326,"column":20},"end":{"line":326,"column":21}},"type":"Identifier","name":"a"},"prefix":true},"right":{"range":[10844,10852],"loc":{"start":{"line":326,"column":26},"end":{"line":326,"column":34}},"type":"Literal","value":"object","raw":"'object'"}},"consequent":{"range":[10855,11733],"loc":{"start":{"line":326,"column":37},"end":{"line":346,"column":9}},"type":"BlockStatement","body":[{"range":[10867,11723],"loc":{"start":{"line":327,"column":10},"end":{"line":345,"column":11}},"type":"IfStatement","test":{"range":[10871,10925],"loc":{"start":{"line":327,"column":14},"end":{"line":327,"column":68}},"type":"LogicalExpression","operator":"&&","left":{"range":[10871,10902],"loc":{"start":{"line":327,"column":14},"end":{"line":327,"column":45}},"type":"CallExpression","callee":{"range":[10871,10899],"loc":{"start":{"line":327,"column":14},"end":{"line":327,"column":42}},"type":"MemberExpression","computed":false,"object":{"range":[10871,10893],"loc":{"start":{"line":327,"column":14},"end":{"line":327,"column":36}},"type":"MemberExpression","computed":false,"object":{"range":[10871,10884],"loc":{"start":{"line":327,"column":14},"end":{"line":327,"column":27}},"type":"Identifier","name":"pythonRuntime"},"property":{"range":[10885,10893],"loc":{"start":{"line":327,"column":28},"end":{"line":327,"column":36}},"type":"Identifier","name":"internal"}},"property":{"range":[10894,10899],"loc":{"start":{"line":327,"column":37},"end":{"line":327,"column":42}},"type":"Identifier","name":"isSeq"}},"arguments":[{"range":[10900,10901],"loc":{"start":{"line":327,"column":43},"end":{"line":327,"column":44}},"type":"Identifier","name":"a"}]},"right":{"range":[10906,10925],"loc":{"start":{"line":327,"column":49},"end":{"line":327,"column":68}},"type":"UnaryExpression","operator":"!","argument":{"range":[10907,10925],"loc":{"start":{"line":327,"column":50},"end":{"line":327,"column":68}},"type":"CallExpression","callee":{"range":[10907,10912],"loc":{"start":{"line":327,"column":50},"end":{"line":327,"column":55}},"type":"Identifier","name":"isNaN"},"arguments":[{"range":[10913,10924],"loc":{"start":{"line":327,"column":56},"end":{"line":327,"column":67}},"type":"CallExpression","callee":{"range":[10913,10921],"loc":{"start":{"line":327,"column":56},"end":{"line":327,"column":64}},"type":"Identifier","name":"parseInt"},"arguments":[{"range":[10922,10923],"loc":{"start":{"line":327,"column":65},"end":{"line":327,"column":66}},"type":"Identifier","name":"b"}]}]},"prefix":true}},"consequent":{"range":[10927,11292],"loc":{"start":{"line":327,"column":70},"end":{"line":336,"column":11}},"type":"BlockStatement","body":[{"range":[10941,10949],"loc":{"start":{"line":328,"column":12},"end":{"line":328,"column":20}},"type":"VariableDeclaration","declarations":[{"range":[10945,10948],"loc":{"start":{"line":328,"column":16},"end":{"line":328,"column":19}},"type":"VariableDeclarator","id":{"range":[10945,10948],"loc":{"start":{"line":328,"column":16},"end":{"line":328,"column":19}},"type":"Identifier","name":"ret"},"init":null}],"kind":"var"},{"range":[10962,11108],"loc":{"start":{"line":329,"column":12},"end":{"line":330,"column":82}},"type":"IfStatement","test":{"range":[10966,10984],"loc":{"start":{"line":329,"column":16},"end":{"line":329,"column":34}},"type":"BinaryExpression","operator":"===","left":{"range":[10966,10973],"loc":{"start":{"line":329,"column":16},"end":{"line":329,"column":23}},"type":"MemberExpression","computed":false,"object":{"range":[10966,10967],"loc":{"start":{"line":329,"column":16},"end":{"line":329,"column":17}},"type":"Identifier","name":"a"},"property":{"range":[10968,10973],"loc":{"start":{"line":329,"column":18},"end":{"line":329,"column":23}},"type":"Identifier","name":"_type"}},"right":{"range":[10978,10984],"loc":{"start":{"line":329,"column":28},"end":{"line":329,"column":34}},"type":"Literal","value":"list","raw":"'list'"}},"consequent":{"range":[10986,11025],"loc":{"start":{"line":329,"column":36},"end":{"line":329,"column":75}},"type":"ExpressionStatement","expression":{"range":[10986,11024],"loc":{"start":{"line":329,"column":36},"end":{"line":329,"column":74}},"type":"AssignmentExpression","operator":"=","left":{"range":[10986,10989],"loc":{"start":{"line":329,"column":36},"end":{"line":329,"column":39}},"type":"Identifier","name":"ret"},"right":{"range":[10992,11024],"loc":{"start":{"line":329,"column":42},"end":{"line":329,"column":74}},"type":"NewExpression","callee":{"range":[10996,11022],"loc":{"start":{"line":329,"column":46},"end":{"line":329,"column":72}},"type":"MemberExpression","computed":false,"object":{"range":[10996,11017],"loc":{"start":{"line":329,"column":46},"end":{"line":329,"column":67}},"type":"MemberExpression","computed":false,"object":{"range":[10996,11009],"loc":{"start":{"line":329,"column":46},"end":{"line":329,"column":59}},"type":"Identifier","name":"pythonRuntime"},"property":{"range":[11010,11017],"loc":{"start":{"line":329,"column":60},"end":{"line":329,"column":67}},"type":"Identifier","name":"objects"}},"property":{"range":[11018,11022],"loc":{"start":{"line":329,"column":68},"end":{"line":329,"column":72}},"type":"Identifier","name":"list"}},"arguments":[]}}},"alternate":{"range":[11043,11108],"loc":{"start":{"line":330,"column":17},"end":{"line":330,"column":82}},"type":"IfStatement","test":{"range":[11047,11066],"loc":{"start":{"line":330,"column":21},"end":{"line":330,"column":40}},"type":"BinaryExpression","operator":"===","left":{"range":[11047,11054],"loc":{"start":{"line":330,"column":21},"end":{"line":330,"column":28}},"type":"MemberExpression","computed":false,"object":{"range":[11047,11048],"loc":{"start":{"line":330,"column":21},"end":{"line":330,"column":22}},"type":"Identifier","name":"a"},"property":{"range":[11049,11054],"loc":{"start":{"line":330,"column":23},"end":{"line":330,"column":28}},"type":"Identifier","name":"_type"}},"right":{"range":[11059,11066],"loc":{"start":{"line":330,"column":33},"end":{"line":330,"column":40}},"type":"Literal","value":"tuple","raw":"'tuple'"}},"consequent":{"range":[11068,11108],"loc":{"start":{"line":330,"column":42},"end":{"line":330,"column":82}},"type":"ExpressionStatement","expression":{"range":[11068,11107],"loc":{"start":{"line":330,"column":42},"end":{"line":330,"column":81}},"type":"AssignmentExpression","operator":"=","left":{"range":[11068,11071],"loc":{"start":{"line":330,"column":42},"end":{"line":330,"column":45}},"type":"Identifier","name":"ret"},"right":{"range":[11074,11107],"loc":{"start":{"line":330,"column":48},"end":{"line":330,"column":81}},"type":"NewExpression","callee":{"range":[11078,11105],"loc":{"start":{"line":330,"column":52},"end":{"line":330,"column":79}},"type":"MemberExpression","computed":false,"object":{"range":[11078,11099],"loc":{"start":{"line":330,"column":52},"end":{"line":330,"column":73}},"type":"MemberExpression","computed":false,"object":{"range":[11078,11091],"loc":{"start":{"line":330,"column":52},"end":{"line":330,"column":65}},"type":"Identifier","name":"pythonRuntime"},"property":{"range":[11092,11099],"loc":{"start":{"line":330,"column":66},"end":{"line":330,"column":73}},"type":"Identifier","name":"objects"}},"property":{"range":[11100,11105],"loc":{"start":{"line":330,"column":74},"end":{"line":330,"column":79}},"type":"Identifier","name":"tuple"}},"arguments":[]}}},"alternate":null}},{"range":[11121,11280],"loc":{"start":{"line":331,"column":12},"end":{"line":335,"column":13}},"type":"IfStatement","test":{"range":[11125,11128],"loc":{"start":{"line":331,"column":16},"end":{"line":331,"column":19}},"type":"Identifier","name":"ret"},"consequent":{"range":[11130,11280],"loc":{"start":{"line":331,"column":21},"end":{"line":335,"column":13}},"type":"BlockStatement","body":[{"range":[11146,11240],"loc":{"start":{"line":332,"column":14},"end":{"line":333,"column":66}},"type":"ForStatement","init":{"range":[11151,11160],"loc":{"start":{"line":332,"column":19},"end":{"line":332,"column":28}},"type":"VariableDeclaration","declarations":[{"range":[11155,11160],"loc":{"start":{"line":332,"column":23},"end":{"line":332,"column":28}},"type":"VariableDeclarator","id":{"range":[11155,11156],"loc":{"start":{"line":332,"column":23},"end":{"line":332,"column":24}},"type":"Identifier","name":"i"},"init":{"range":[11159,11160],"loc":{"start":{"line":332,"column":27},"end":{"line":332,"column":28}},"type":"Literal","value":0,"raw":"0"}}],"kind":"var"},"test":{"range":[11162,11167],"loc":{"start":{"line":332,"column":30},"end":{"line":332,"column":35}},"type":"BinaryExpression","operator":"<","left":{"range":[11162,11163],"loc":{"start":{"line":332,"column":30},"end":{"line":332,"column":31}},"type":"Identifier","name":"i"},"right":{"range":[11166,11167],"loc":{"start":{"line":332,"column":34},"end":{"line":332,"column":35}},"type":"Identifier","name":"b"}},"update":{"range":[11169,11172],"loc":{"start":{"line":332,"column":37},"end":{"line":332,"column":40}},"type":"UpdateExpression","operator":"++","argument":{"range":[11169,11170],"loc":{"start":{"line":332,"column":37},"end":{"line":332,"column":38}},"type":"Identifier","name":"i"},"prefix":false},"body":{"range":[11190,11240],"loc":{"start":{"line":333,"column":16},"end":{"line":333,"column":66}},"type":"ForStatement","init":{"range":[11195,11204],"loc":{"start":{"line":333,"column":21},"end":{"line":333,"column":30}},"type":"VariableDeclaration","declarations":[{"range":[11199,11204],"loc":{"start":{"line":333,"column":25},"end":{"line":333,"column":30}},"type":"VariableDeclarator","id":{"range":[11199,11200],"loc":{"start":{"line":333,"column":25},"end":{"line":333,"column":26}},"type":"Identifier","name":"j"},"init":{"range":[11203,11204],"loc":{"start":{"line":333,"column":29},"end":{"line":333,"column":30}},"type":"Literal","value":0,"raw":"0"}}],"kind":"var"},"test":{"range":[11206,11218],"loc":{"start":{"line":333,"column":32},"end":{"line":333,"column":44}},"type":"BinaryExpression","operator":"<","left":{"range":[11206,11207],"loc":{"start":{"line":333,"column":32},"end":{"line":333,"column":33}},"type":"Identifier","name":"j"},"right":{"range":[11210,11218],"loc":{"start":{"line":333,"column":36},"end":{"line":333,"column":44}},"type":"MemberExpression","computed":false,"object":{"range":[11210,11211],"loc":{"start":{"line":333,"column":36},"end":{"line":333,"column":37}},"type":"Identifier","name":"a"},"property":{"range":[11212,11218],"loc":{"start":{"line":333,"column":38},"end":{"line":333,"column":44}},"type":"Identifier","name":"length"}}},"update":{"range":[11220,11223],"loc":{"start":{"line":333,"column":46},"end":{"line":333,"column":49}},"type":"UpdateExpression","operator":"++","argument":{"range":[11220,11221],"loc":{"start":{"line":333,"column":46},"end":{"line":333,"column":47}},"type":"Identifier","name":"j"},"prefix":false},"body":{"range":[11225,11240],"loc":{"start":{"line":333,"column":51},"end":{"line":333,"column":66}},"type":"ExpressionStatement","expression":{"range":[11225,11239],"loc":{"start":{"line":333,"column":51},"end":{"line":333,"column":65}},"type":"CallExpression","callee":{"range":[11225,11233],"loc":{"start":{"line":333,"column":51},"end":{"line":333,"column":59}},"type":"MemberExpression","computed":false,"object":{"range":[11225,11228],"loc":{"start":{"line":333,"column":51},"end":{"line":333,"column":54}},"type":"Identifier","name":"ret"},"property":{"range":[11229,11233],"loc":{"start":{"line":333,"column":55},"end":{"line":333,"column":59}},"type":"Identifier","name":"push"}},"arguments":[{"range":[11234,11238],"loc":{"start":{"line":333,"column":60},"end":{"line":333,"column":64}},"type":"MemberExpression","computed":true,"object":{"range":[11234,11235],"loc":{"start":{"line":333,"column":60},"end":{"line":333,"column":61}},"type":"Identifier","name":"a"},"property":{"range":[11236,11237],"loc":{"start":{"line":333,"column":62},"end":{"line":333,"column":63}},"type":"Identifier","name":"j"}}]}}}},{"range":[11255,11266],"loc":{"start":{"line":334,"column":14},"end":{"line":334,"column":25}},"type":"ReturnStatement","argument":{"range":[11262,11265],"loc":{"start":{"line":334,"column":21},"end":{"line":334,"column":24}},"type":"Identifier","name":"ret"}}]},"alternate":null}]},"alternate":{"range":[11298,11723],"loc":{"start":{"line":336,"column":17},"end":{"line":345,"column":11}},"type":"IfStatement","test":{"range":[11302,11356],"loc":{"start":{"line":336,"column":21},"end":{"line":336,"column":75}},"type":"LogicalExpression","operator":"&&","left":{"range":[11302,11333],"loc":{"start":{"line":336,"column":21},"end":{"line":336,"column":52}},"type":"CallExpression","callee":{"range":[11302,11330],"loc":{"start":{"line":336,"column":21},"end":{"line":336,"column":49}},"type":"MemberExpression","computed":false,"object":{"range":[11302,11324],"loc":{"start":{"line":336,"column":21},"end":{"line":336,"column":43}},"type":"MemberExpression","computed":false,"object":{"range":[11302,11315],"loc":{"start":{"line":336,"column":21},"end":{"line":336,"column":34}},"type":"Identifier","name":"pythonRuntime"},"property":{"range":[11316,11324],"loc":{"start":{"line":336,"column":35},"end":{"line":336,"column":43}},"type":"Identifier","name":"internal"}},"property":{"range":[11325,11330],"loc":{"start":{"line":336,"column":44},"end":{"line":336,"column":49}},"type":"Identifier","name":"isSeq"}},"arguments":[{"range":[11331,11332],"loc":{"start":{"line":336,"column":50},"end":{"line":336,"column":51}},"type":"Identifier","name":"b"}]},"right":{"range":[11337,11356],"loc":{"start":{"line":336,"column":56},"end":{"line":336,"column":75}},"type":"UnaryExpression","operator":"!","argument":{"range":[11338,11356],"loc":{"start":{"line":336,"column":57},"end":{"line":336,"column":75}},"type":"CallExpression","callee":{"range":[11338,11343],"loc":{"start":{"line":336,"column":57},"end":{"line":336,"column":62}},"type":"Identifier","name":"isNaN"},"arguments":[{"range":[11344,11355],"loc":{"start":{"line":336,"column":63},"end":{"line":336,"column":74}},"type":"CallExpression","callee":{"range":[11344,11352],"loc":{"start":{"line":336,"column":63},"end":{"line":336,"column":71}},"type":"Identifier","name":"parseInt"},"arguments":[{"range":[11353,11354],"loc":{"start":{"line":336,"column":72},"end":{"line":336,"column":73}},"type":"Identifier","name":"a"}]}]},"prefix":true}},"consequent":{"range":[11358,11723],"loc":{"start":{"line":336,"column":77},"end":{"line":345,"column":11}},"type":"BlockStatement","body":[{"range":[11372,11380],"loc":{"start":{"line":337,"column":12},"end":{"line":337,"column":20}},"type":"VariableDeclaration","declarations":[{"range":[11376,11379],"loc":{"start":{"line":337,"column":16},"end":{"line":337,"column":19}},"type":"VariableDeclarator","id":{"range":[11376,11379],"loc":{"start":{"line":337,"column":16},"end":{"line":337,"column":19}},"type":"Identifier","name":"ret"},"init":null}],"kind":"var"},{"range":[11393,11539],"loc":{"start":{"line":338,"column":12},"end":{"line":339,"column":82}},"type":"IfStatement","test":{"range":[11397,11415],"loc":{"start":{"line":338,"column":16},"end":{"line":338,"column":34}},"type":"BinaryExpression","operator":"===","left":{"range":[11397,11404],"loc":{"start":{"line":338,"column":16},"end":{"line":338,"column":23}},"type":"MemberExpression","computed":false,"object":{"range":[11397,11398],"loc":{"start":{"line":338,"column":16},"end":{"line":338,"column":17}},"type":"Identifier","name":"b"},"property":{"range":[11399,11404],"loc":{"start":{"line":338,"column":18},"end":{"line":338,"column":23}},"type":"Identifier","name":"_type"}},"right":{"range":[11409,11415],"loc":{"start":{"line":338,"column":28},"end":{"line":338,"column":34}},"type":"Literal","value":"list","raw":"'list'"}},"consequent":{"range":[11417,11456],"loc":{"start":{"line":338,"column":36},"end":{"line":338,"column":75}},"type":"ExpressionStatement","expression":{"range":[11417,11455],"loc":{"start":{"line":338,"column":36},"end":{"line":338,"column":74}},"type":"AssignmentExpression","operator":"=","left":{"range":[11417,11420],"loc":{"start":{"line":338,"column":36},"end":{"line":338,"column":39}},"type":"Identifier","name":"ret"},"right":{"range":[11423,11455],"loc":{"start":{"line":338,"column":42},"end":{"line":338,"column":74}},"type":"NewExpression","callee":{"range":[11427,11453],"loc":{"start":{"line":338,"column":46},"end":{"line":338,"column":72}},"type":"MemberExpression","computed":false,"object":{"range":[11427,11448],"loc":{"start":{"line":338,"column":46},"end":{"line":338,"column":67}},"type":"MemberExpression","computed":false,"object":{"range":[11427,11440],"loc":{"start":{"line":338,"column":46},"end":{"line":338,"column":59}},"type":"Identifier","name":"pythonRuntime"},"property":{"range":[11441,11448],"loc":{"start":{"line":338,"column":60},"end":{"line":338,"column":67}},"type":"Identifier","name":"objects"}},"property":{"range":[11449,11453],"loc":{"start":{"line":338,"column":68},"end":{"line":338,"column":72}},"type":"Identifier","name":"list"}},"arguments":[]}}},"alternate":{"range":[11474,11539],"loc":{"start":{"line":339,"column":17},"end":{"line":339,"column":82}},"type":"IfStatement","test":{"range":[11478,11497],"loc":{"start":{"line":339,"column":21},"end":{"line":339,"column":40}},"type":"BinaryExpression","operator":"===","left":{"range":[11478,11485],"loc":{"start":{"line":339,"column":21},"end":{"line":339,"column":28}},"type":"MemberExpression","computed":false,"object":{"range":[11478,11479],"loc":{"start":{"line":339,"column":21},"end":{"line":339,"column":22}},"type":"Identifier","name":"b"},"property":{"range":[11480,11485],"loc":{"start":{"line":339,"column":23},"end":{"line":339,"column":28}},"type":"Identifier","name":"_type"}},"right":{"range":[11490,11497],"loc":{"start":{"line":339,"column":33},"end":{"line":339,"column":40}},"type":"Literal","value":"tuple","raw":"'tuple'"}},"consequent":{"range":[11499,11539],"loc":{"start":{"line":339,"column":42},"end":{"line":339,"column":82}},"type":"ExpressionStatement","expression":{"range":[11499,11538],"loc":{"start":{"line":339,"column":42},"end":{"line":339,"column":81}},"type":"AssignmentExpression","operator":"=","left":{"range":[11499,11502],"loc":{"start":{"line":339,"column":42},"end":{"line":339,"column":45}},"type":"Identifier","name":"ret"},"right":{"range":[11505,11538],"loc":{"start":{"line":339,"column":48},"end":{"line":339,"column":81}},"type":"NewExpression","callee":{"range":[11509,11536],"loc":{"start":{"line":339,"column":52},"end":{"line":339,"column":79}},"type":"MemberExpression","computed":false,"object":{"range":[11509,11530],"loc":{"start":{"line":339,"column":52},"end":{"line":339,"column":73}},"type":"MemberExpression","computed":false,"object":{"range":[11509,11522],"loc":{"start":{"line":339,"column":52},"end":{"line":339,"column":65}},"type":"Identifier","name":"pythonRuntime"},"property":{"range":[11523,11530],"loc":{"start":{"line":339,"column":66},"end":{"line":339,"column":73}},"type":"Identifier","name":"objects"}},"property":{"range":[11531,11536],"loc":{"start":{"line":339,"column":74},"end":{"line":339,"column":79}},"type":"Identifier","name":"tuple"}},"arguments":[]}}},"alternate":null}},{"range":[11552,11711],"loc":{"start":{"line":340,"column":12},"end":{"line":344,"column":13}},"type":"IfStatement","test":{"range":[11556,11559],"loc":{"start":{"line":340,"column":16},"end":{"line":340,"column":19}},"type":"Identifier","name":"ret"},"consequent":{"range":[11561,11711],"loc":{"start":{"line":340,"column":21},"end":{"line":344,"column":13}},"type":"BlockStatement","body":[{"range":[11577,11671],"loc":{"start":{"line":341,"column":14},"end":{"line":342,"column":66}},"type":"ForStatement","init":{"range":[11582,11591],"loc":{"start":{"line":341,"column":19},"end":{"line":341,"column":28}},"type":"VariableDeclaration","declarations":[{"range":[11586,11591],"loc":{"start":{"line":341,"column":23},"end":{"line":341,"column":28}},"type":"VariableDeclarator","id":{"range":[11586,11587],"loc":{"start":{"line":341,"column":23},"end":{"line":341,"column":24}},"type":"Identifier","name":"i"},"init":{"range":[11590,11591],"loc":{"start":{"line":341,"column":27},"end":{"line":341,"column":28}},"type":"Literal","value":0,"raw":"0"}}],"kind":"var"},"test":{"range":[11593,11598],"loc":{"start":{"line":341,"column":30},"end":{"line":341,"column":35}},"type":"BinaryExpression","operator":"<","left":{"range":[11593,11594],"loc":{"start":{"line":341,"column":30},"end":{"line":341,"column":31}},"type":"Identifier","name":"i"},"right":{"range":[11597,11598],"loc":{"start":{"line":341,"column":34},"end":{"line":341,"column":35}},"type":"Identifier","name":"a"}},"update":{"range":[11600,11603],"loc":{"start":{"line":341,"column":37},"end":{"line":341,"column":40}},"type":"UpdateExpression","operator":"++","argument":{"range":[11600,11601],"loc":{"start":{"line":341,"column":37},"end":{"line":341,"column":38}},"type":"Identifier","name":"i"},"prefix":false},"body":{"range":[11621,11671],"loc":{"start":{"line":342,"column":16},"end":{"line":342,"column":66}},"type":"ForStatement","init":{"range":[11626,11635],"loc":{"start":{"line":342,"column":21},"end":{"line":342,"column":30}},"type":"VariableDeclaration","declarations":[{"range":[11630,11635],"loc":{"start":{"line":342,"column":25},"end":{"line":342,"column":30}},"type":"VariableDeclarator","id":{"range":[11630,11631],"loc":{"start":{"line":342,"column":25},"end":{"line":342,"column":26}},"type":"Identifier","name":"j"},"init":{"range":[11634,11635],"loc":{"start":{"line":342,"column":29},"end":{"line":342,"column":30}},"type":"Literal","value":0,"raw":"0"}}],"kind":"var"},"test":{"range":[11637,11649],"loc":{"start":{"line":342,"column":32},"end":{"line":342,"column":44}},"type":"BinaryExpression","operator":"<","left":{"range":[11637,11638],"loc":{"start":{"line":342,"column":32},"end":{"line":342,"column":33}},"type":"Identifier","name":"j"},"right":{"range":[11641,11649],"loc":{"start":{"line":342,"column":36},"end":{"line":342,"column":44}},"type":"MemberExpression","computed":false,"object":{"range":[11641,11642],"loc":{"start":{"line":342,"column":36},"end":{"line":342,"column":37}},"type":"Identifier","name":"b"},"property":{"range":[11643,11649],"loc":{"start":{"line":342,"column":38},"end":{"line":342,"column":44}},"type":"Identifier","name":"length"}}},"update":{"range":[11651,11654],"loc":{"start":{"line":342,"column":46},"end":{"line":342,"column":49}},"type":"UpdateExpression","operator":"++","argument":{"range":[11651,11652],"loc":{"start":{"line":342,"column":46},"end":{"line":342,"column":47}},"type":"Identifier","name":"j"},"prefix":false},"body":{"range":[11656,11671],"loc":{"start":{"line":342,"column":51},"end":{"line":342,"column":66}},"type":"ExpressionStatement","expression":{"range":[11656,11670],"loc":{"start":{"line":342,"column":51},"end":{"line":342,"column":65}},"type":"CallExpression","callee":{"range":[11656,11664],"loc":{"start":{"line":342,"column":51},"end":{"line":342,"column":59}},"type":"MemberExpression","computed":false,"object":{"range":[11656,11659],"loc":{"start":{"line":342,"column":51},"end":{"line":342,"column":54}},"type":"Identifier","name":"ret"},"property":{"range":[11660,11664],"loc":{"start":{"line":342,"column":55},"end":{"line":342,"column":59}},"type":"Identifier","name":"push"}},"arguments":[{"range":[11665,11669],"loc":{"start":{"line":342,"column":60},"end":{"line":342,"column":64}},"type":"MemberExpression","computed":true,"object":{"range":[11665,11666],"loc":{"start":{"line":342,"column":60},"end":{"line":342,"column":61}},"type":"Identifier","name":"b"},"property":{"range":[11667,11668],"loc":{"start":{"line":342,"column":62},"end":{"line":342,"column":63}},"type":"Identifier","name":"j"}}]}}}},{"range":[11686,11697],"loc":{"start":{"line":343,"column":14},"end":{"line":343,"column":25}},"type":"ReturnStatement","argument":{"range":[11693,11696],"loc":{"start":{"line":343,"column":21},"end":{"line":343,"column":24}},"type":"Identifier","name":"ret"}}]},"alternate":null}]},"alternate":null}}]},"alternate":null},{"range":[11742,11755],"loc":{"start":{"line":347,"column":8},"end":{"line":347,"column":21}},"type":"ReturnStatement","argument":{"range":[11749,11754],"loc":{"start":{"line":347,"column":15},"end":{"line":347,"column":20}},"type":"BinaryExpression","operator":"*","left":{"range":[11749,11750],"loc":{"start":{"line":347,"column":15},"end":{"line":347,"column":16}},"type":"Identifier","name":"a"},"right":{"range":[11753,11754],"loc":{"start":{"line":347,"column":19},"end":{"line":347,"column":20}},"type":"Identifier","name":"b"}}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[11771,12060],"loc":{"start":{"line":349,"column":6},"end":{"line":355,"column":7}},"type":"Property","key":{"range":[11771,11785],"loc":{"start":{"line":349,"column":6},"end":{"line":349,"column":20}},"type":"Identifier","name":"subscriptIndex"},"computed":false,"value":{"range":[11787,12060],"loc":{"start":{"line":349,"column":22},"end":{"line":355,"column":7}},"type":"FunctionExpression","id":null,"params":[{"range":[11797,11798],"loc":{"start":{"line":349,"column":32},"end":{"line":349,"column":33}},"type":"Identifier","name":"o"},{"range":[11800,11801],"loc":{"start":{"line":349,"column":35},"end":{"line":349,"column":36}},"type":"Identifier","name":"i"}],"defaults":[],"body":{"range":[11803,12060],"loc":{"start":{"line":349,"column":38},"end":{"line":355,"column":7}},"type":"BlockStatement","body":[{"range":[11813,11836],"loc":{"start":{"line":350,"column":8},"end":{"line":350,"column":31}},"type":"IfStatement","test":{"range":[11818,11824],"loc":{"start":{"line":350,"column":13},"end":{"line":350,"column":19}},"type":"BinaryExpression","operator":">=","left":{"range":[11818,11819],"loc":{"start":{"line":350,"column":13},"end":{"line":350,"column":14}},"type":"Identifier","name":"i"},"right":{"range":[11823,11824],"loc":{"start":{"line":350,"column":18},"end":{"line":350,"column":19}},"type":"Literal","value":0,"raw":"0"}},"consequent":{"range":[11827,11836],"loc":{"start":{"line":350,"column":22},"end":{"line":350,"column":31}},"type":"ReturnStatement","argument":{"range":[11834,11835],"loc":{"start":{"line":350,"column":29},"end":{"line":350,"column":30}},"type":"Identifier","name":"i"}},"alternate":null},{"range":[11845,11904],"loc":{"start":{"line":351,"column":8},"end":{"line":351,"column":67}},"type":"IfStatement","test":{"range":[11850,11881],"loc":{"start":{"line":351,"column":13},"end":{"line":351,"column":44}},"type":"CallExpression","callee":{"range":[11850,11878],"loc":{"start":{"line":351,"column":13},"end":{"line":351,"column":41}},"type":"MemberExpression","computed":false,"object":{"range":[11850,11872],"loc":{"start":{"line":351,"column":13},"end":{"line":351,"column":35}},"type":"MemberExpression","computed":false,"object":{"range":[11850,11863],"loc":{"start":{"line":351,"column":13},"end":{"line":351,"column":26}},"type":"Identifier","name":"pythonRuntime"},"property":{"range":[11864,11872],"loc":{"start":{"line":351,"column":27},"end":{"line":351,"column":35}},"type":"Identifier","name":"internal"}},"property":{"range":[11873,11878],"loc":{"start":{"line":351,"column":36},"end":{"line":351,"column":41}},"type":"Identifier","name":"isSeq"}},"arguments":[{"range":[11879,11880],"loc":{"start":{"line":351,"column":42},"end":{"line":351,"column":43}},"type":"Identifier","name":"o"}]},"consequent":{"range":[11884,11904],"loc":{"start":{"line":351,"column":47},"end":{"line":351,"column":67}},"type":"ReturnStatement","argument":{"range":[11891,11903],"loc":{"start":{"line":351,"column":54},"end":{"line":351,"column":66}},"type":"BinaryExpression","operator":"+","left":{"range":[11891,11899],"loc":{"start":{"line":351,"column":54},"end":{"line":351,"column":62}},"type":"MemberExpression","computed":false,"object":{"range":[11891,11892],"loc":{"start":{"line":351,"column":54},"end":{"line":351,"column":55}},"type":"Identifier","name":"o"},"property":{"range":[11893,11899],"loc":{"start":{"line":351,"column":56},"end":{"line":351,"column":62}},"type":"Identifier","name":"length"}},"right":{"range":[11902,11903],"loc":{"start":{"line":351,"column":65},"end":{"line":351,"column":66}},"type":"Identifier","name":"i"}}},"alternate":null},{"range":[11913,11976],"loc":{"start":{"line":352,"column":8},"end":{"line":352,"column":71}},"type":"IfStatement","test":{"range":[11918,11953],"loc":{"start":{"line":352,"column":13},"end":{"line":352,"column":48}},"type":"CallExpression","callee":{"range":[11918,11950],"loc":{"start":{"line":352,"column":13},"end":{"line":352,"column":45}},"type":"MemberExpression","computed":false,"object":{"range":[11918,11940],"loc":{"start":{"line":352,"column":13},"end":{"line":352,"column":35}},"type":"MemberExpression","computed":false,"object":{"range":[11918,11931],"loc":{"start":{"line":352,"column":13},"end":{"line":352,"column":26}},"type":"Identifier","name":"pythonRuntime"},"property":{"range":[11932,11940],"loc":{"start":{"line":352,"column":27},"end":{"line":352,"column":35}},"type":"Identifier","name":"internal"}},"property":{"range":[11941,11950],"loc":{"start":{"line":352,"column":36},"end":{"line":352,"column":45}},"type":"Identifier","name":"isJSArray"}},"arguments":[{"range":[11951,11952],"loc":{"start":{"line":352,"column":46},"end":{"line":352,"column":47}},"type":"Identifier","name":"o"}]},"consequent":{"range":[11956,11976],"loc":{"start":{"line":352,"column":51},"end":{"line":352,"column":71}},"type":"ReturnStatement","argument":{"range":[11963,11975],"loc":{"start":{"line":352,"column":58},"end":{"line":352,"column":70}},"type":"BinaryExpression","operator":"+","left":{"range":[11963,11971],"loc":{"start":{"line":352,"column":58},"end":{"line":352,"column":66}},"type":"MemberExpression","computed":false,"object":{"range":[11963,11964],"loc":{"start":{"line":352,"column":58},"end":{"line":352,"column":59}},"type":"Identifier","name":"o"},"property":{"range":[11965,11971],"loc":{"start":{"line":352,"column":60},"end":{"line":352,"column":66}},"type":"Identifier","name":"length"}},"right":{"range":[11974,11975],"loc":{"start":{"line":352,"column":69},"end":{"line":352,"column":70}},"type":"Identifier","name":"i"}}},"alternate":null},{"range":[11985,12034],"loc":{"start":{"line":353,"column":8},"end":{"line":353,"column":57}},"type":"IfStatement","test":{"range":[11990,12011],"loc":{"start":{"line":353,"column":13},"end":{"line":353,"column":34}},"type":"BinaryExpression","operator":"===","left":{"range":[11990,11998],"loc":{"start":{"line":353,"column":13},"end":{"line":353,"column":21}},"type":"UnaryExpression","operator":"typeof","argument":{"range":[11997,11998],"loc":{"start":{"line":353,"column":20},"end":{"line":353,"column":21}},"type":"Identifier","name":"o"},"prefix":true},"right":{"range":[12003,12011],"loc":{"start":{"line":353,"column":26},"end":{"line":353,"column":34}},"type":"Literal","value":"string","raw":"\"string\""}},"consequent":{"range":[12014,12034],"loc":{"start":{"line":353,"column":37},"end":{"line":353,"column":57}},"type":"ReturnStatement","argument":{"range":[12021,12033],"loc":{"start":{"line":353,"column":44},"end":{"line":353,"column":56}},"type":"BinaryExpression","operator":"+","left":{"range":[12021,12029],"loc":{"start":{"line":353,"column":44},"end":{"line":353,"column":52}},"type":"MemberExpression","computed":false,"object":{"range":[12021,12022],"loc":{"start":{"line":353,"column":44},"end":{"line":353,"column":45}},"type":"Identifier","name":"o"},"property":{"range":[12023,12029],"loc":{"start":{"line":353,"column":46},"end":{"line":353,"column":52}},"type":"Identifier","name":"length"}},"right":{"range":[12032,12033],"loc":{"start":{"line":353,"column":55},"end":{"line":353,"column":56}},"type":"Identifier","name":"i"}}},"alternate":null},{"range":[12043,12052],"loc":{"start":{"line":354,"column":8},"end":{"line":354,"column":17}},"type":"ReturnStatement","argument":{"range":[12050,12051],"loc":{"start":{"line":354,"column":15},"end":{"line":354,"column":16}},"type":"Identifier","name":"i"}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false}]},"kind":"init","method":false,"shorthand":false},{"range":[12073,14831],"loc":{"start":{"line":358,"column":4},"end":{"line":451,"column":5}},"type":"Property","key":{"range":[12073,12080],"loc":{"start":{"line":358,"column":4},"end":{"line":358,"column":11}},"type":"Identifier","name":"objects"},"computed":false,"value":{"range":[12082,14831],"loc":{"start":{"line":358,"column":13},"end":{"line":451,"column":5}},"type":"ObjectExpression","properties":[{"range":[12090,12265],"loc":{"start":{"line":359,"column":6},"end":{"line":363,"column":7}},"type":"Property","key":{"range":[12090,12094],"loc":{"start":{"line":359,"column":6},"end":{"line":359,"column":10}},"type":"Identifier","name":"dict"},"computed":false,"value":{"range":[12096,12265],"loc":{"start":{"line":359,"column":12},"end":{"line":363,"column":7}},"type":"FunctionExpression","id":null,"params":[],"defaults":[],"body":{"range":[12108,12265],"loc":{"start":{"line":359,"column":24},"end":{"line":363,"column":7}},"type":"BlockStatement","body":[{"range":[12118,12145],"loc":{"start":{"line":360,"column":8},"end":{"line":360,"column":35}},"type":"VariableDeclaration","declarations":[{"range":[12122,12144],"loc":{"start":{"line":360,"column":12},"end":{"line":360,"column":34}},"type":"VariableDeclarator","id":{"range":[12122,12125],"loc":{"start":{"line":360,"column":12},"end":{"line":360,"column":15}},"type":"Identifier","name":"obj"},"init":{"range":[12128,12144],"loc":{"start":{"line":360,"column":18},"end":{"line":360,"column":34}},"type":"NewExpression","callee":{"range":[12132,12142],"loc":{"start":{"line":360,"column":22},"end":{"line":360,"column":32}},"type":"Identifier","name":"PythonDict"},"arguments":[]}}],"kind":"var"},{"range":[12154,12237],"loc":{"start":{"line":361,"column":8},"end":{"line":361,"column":91}},"type":"ForStatement","init":{"range":[12159,12168],"loc":{"start":{"line":361,"column":13},"end":{"line":361,"column":22}},"type":"VariableDeclaration","declarations":[{"range":[12163,12168],"loc":{"start":{"line":361,"column":17},"end":{"line":361,"column":22}},"type":"VariableDeclarator","id":{"range":[12163,12164],"loc":{"start":{"line":361,"column":17},"end":{"line":361,"column":18}},"type":"Identifier","name":"i"},"init":{"range":[12167,12168],"loc":{"start":{"line":361,"column":21},"end":{"line":361,"column":22}},"type":"Literal","value":0,"raw":"0"}}],"kind":"var"},"test":{"range":[12170,12190],"loc":{"start":{"line":361,"column":24},"end":{"line":361,"column":44}},"type":"BinaryExpression","operator":"<","left":{"range":[12170,12171],"loc":{"start":{"line":361,"column":24},"end":{"line":361,"column":25}},"type":"Identifier","name":"i"},"right":{"range":[12174,12190],"loc":{"start":{"line":361,"column":28},"end":{"line":361,"column":44}},"type":"MemberExpression","computed":false,"object":{"range":[12174,12183],"loc":{"start":{"line":361,"column":28},"end":{"line":361,"column":37}},"type":"Identifier","name":"arguments"},"property":{"range":[12184,12190],"loc":{"start":{"line":361,"column":38},"end":{"line":361,"column":44}},"type":"Identifier","name":"length"}}},"update":{"range":[12192,12195],"loc":{"start":{"line":361,"column":46},"end":{"line":361,"column":49}},"type":"UpdateExpression","operator":"++","argument":{"range":[12194,12195],"loc":{"start":{"line":361,"column":48},"end":{"line":361,"column":49}},"type":"Identifier","name":"i"},"prefix":true},"body":{"range":[12198,12237],"loc":{"start":{"line":361,"column":52},"end":{"line":361,"column":91}},"type":"ExpressionStatement","expression":{"range":[12198,12236],"loc":{"start":{"line":361,"column":52},"end":{"line":361,"column":90}},"type":"AssignmentExpression","operator":"=","left":{"range":[12198,12218],"loc":{"start":{"line":361,"column":52},"end":{"line":361,"column":72}},"type":"MemberExpression","computed":true,"object":{"range":[12198,12201],"loc":{"start":{"line":361,"column":52},"end":{"line":361,"column":55}},"type":"Identifier","name":"obj"},"property":{"range":[12202,12217],"loc":{"start":{"line":361,"column":56},"end":{"line":361,"column":71}},"type":"MemberExpression","computed":true,"object":{"range":[12202,12214],"loc":{"start":{"line":361,"column":56},"end":{"line":361,"column":68}},"type":"MemberExpression","computed":true,"object":{"range":[12202,12211],"loc":{"start":{"line":361,"column":56},"end":{"line":361,"column":65}},"type":"Identifier","name":"arguments"},"property":{"range":[12212,12213],"loc":{"start":{"line":361,"column":66},"end":{"line":361,"column":67}},"type":"Identifier","name":"i"}},"property":{"range":[12215,12216],"loc":{"start":{"line":361,"column":69},"end":{"line":361,"column":70}},"type":"Literal","value":0,"raw":"0"}}},"right":{"range":[12221,12236],"loc":{"start":{"line":361,"column":75},"end":{"line":361,"column":90}},"type":"MemberExpression","computed":true,"object":{"range":[12221,12233],"loc":{"start":{"line":361,"column":75},"end":{"line":361,"column":87}},"type":"MemberExpression","computed":true,"object":{"range":[12221,12230],"loc":{"start":{"line":361,"column":75},"end":{"line":361,"column":84}},"type":"Identifier","name":"arguments"},"property":{"range":[12231,12232],"loc":{"start":{"line":361,"column":85},"end":{"line":361,"column":86}},"type":"Identifier","name":"i"}},"property":{"range":[12234,12235],"loc":{"start":{"line":361,"column":88},"end":{"line":361,"column":89}},"type":"Literal","value":1,"raw":"1"}}}}},{"range":[12246,12257],"loc":{"start":{"line":362,"column":8},"end":{"line":362,"column":19}},"type":"ReturnStatement","argument":{"range":[12253,12256],"loc":{"start":{"line":362,"column":15},"end":{"line":362,"column":18}},"type":"Identifier","name":"obj"}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[12273,12430],"loc":{"start":{"line":364,"column":6},"end":{"line":369,"column":7}},"type":"Property","key":{"range":[12273,12277],"loc":{"start":{"line":364,"column":6},"end":{"line":364,"column":10}},"type":"Identifier","name":"list"},"computed":false,"value":{"range":[12279,12430],"loc":{"start":{"line":364,"column":12},"end":{"line":369,"column":7}},"type":"FunctionExpression","id":null,"params":[],"defaults":[],"body":{"range":[12291,12430],"loc":{"start":{"line":364,"column":24},"end":{"line":369,"column":7}},"type":"BlockStatement","body":[{"range":[12301,12314],"loc":{"start":{"line":365,"column":8},"end":{"line":365,"column":21}},"type":"VariableDeclaration","declarations":[{"range":[12305,12313],"loc":{"start":{"line":365,"column":12},"end":{"line":365,"column":20}},"type":"VariableDeclarator","id":{"range":[12305,12308],"loc":{"start":{"line":365,"column":12},"end":{"line":365,"column":15}},"type":"Identifier","name":"arr"},"init":{"range":[12311,12313],"loc":{"start":{"line":365,"column":18},"end":{"line":365,"column":20}},"type":"ArrayExpression","elements":[]}}],"kind":"var"},{"range":[12323,12354],"loc":{"start":{"line":366,"column":8},"end":{"line":366,"column":39}},"type":"ExpressionStatement","expression":{"range":[12323,12353],"loc":{"start":{"line":366,"column":8},"end":{"line":366,"column":38}},"type":"CallExpression","callee":{"range":[12323,12337],"loc":{"start":{"line":366,"column":8},"end":{"line":366,"column":22}},"type":"MemberExpression","computed":false,"object":{"range":[12323,12331],"loc":{"start":{"line":366,"column":8},"end":{"line":366,"column":16}},"type":"MemberExpression","computed":false,"object":{"range":[12323,12326],"loc":{"start":{"line":366,"column":8},"end":{"line":366,"column":11}},"type":"Identifier","name":"arr"},"property":{"range":[12327,12331],"loc":{"start":{"line":366,"column":12},"end":{"line":366,"column":16}},"type":"Identifier","name":"push"}},"property":{"range":[12332,12337],"loc":{"start":{"line":366,"column":17},"end":{"line":366,"column":22}},"type":"Identifier","name":"apply"}},"arguments":[{"range":[12338,12341],"loc":{"start":{"line":366,"column":23},"end":{"line":366,"column":26}},"type":"Identifier","name":"arr"},{"range":[12343,12352],"loc":{"start":{"line":366,"column":28},"end":{"line":366,"column":37}},"type":"Identifier","name":"arguments"}]}},{"range":[12363,12402],"loc":{"start":{"line":367,"column":8},"end":{"line":367,"column":47}},"type":"ExpressionStatement","expression":{"range":[12363,12401],"loc":{"start":{"line":367,"column":8},"end":{"line":367,"column":46}},"type":"CallExpression","callee":{"range":[12363,12396],"loc":{"start":{"line":367,"column":8},"end":{"line":367,"column":41}},"type":"MemberExpression","computed":false,"object":{"range":[12363,12382],"loc":{"start":{"line":367,"column":8},"end":{"line":367,"column":27}},"type":"MemberExpression","computed":false,"object":{"range":[12363,12376],"loc":{"start":{"line":367,"column":8},"end":{"line":367,"column":21}},"type":"Identifier","name":"pythonRuntime"},"property":{"range":[12377,12382],"loc":{"start":{"line":367,"column":22},"end":{"line":367,"column":27}},"type":"Identifier","name":"utils"}},"property":{"range":[12383,12396],"loc":{"start":{"line":367,"column":28},"end":{"line":367,"column":41}},"type":"Identifier","name":"convertToList"}},"arguments":[{"range":[12397,12400],"loc":{"start":{"line":367,"column":42},"end":{"line":367,"column":45}},"type":"Identifier","name":"arr"}]}},{"range":[12411,12422],"loc":{"start":{"line":368,"column":8},"end":{"line":368,"column":19}},"type":"ReturnStatement","argument":{"range":[12418,12421],"loc":{"start":{"line":368,"column":15},"end":{"line":368,"column":18}},"type":"Identifier","name":"arr"}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[12438,14825],"loc":{"start":{"line":370,"column":6},"end":{"line":450,"column":7}},"type":"Property","key":{"range":[12438,12443],"loc":{"start":{"line":370,"column":6},"end":{"line":370,"column":11}},"type":"Identifier","name":"tuple"},"computed":false,"value":{"range":[12445,14825],"loc":{"start":{"line":370,"column":13},"end":{"line":450,"column":7}},"type":"FunctionExpression","id":null,"params":[],"defaults":[],"body":{"range":[12457,14825],"loc":{"start":{"line":370,"column":25},"end":{"line":450,"column":7}},"type":"BlockStatement","body":[{"range":[12467,12480],"loc":{"start":{"line":371,"column":8},"end":{"line":371,"column":21}},"type":"VariableDeclaration","declarations":[{"range":[12471,12479],"loc":{"start":{"line":371,"column":12},"end":{"line":371,"column":20}},"type":"VariableDeclarator","id":{"range":[12471,12474],"loc":{"start":{"line":371,"column":12},"end":{"line":371,"column":15}},"type":"Identifier","name":"arr"},"init":{"range":[12477,12479],"loc":{"start":{"line":371,"column":18},"end":{"line":371,"column":20}},"type":"ArrayExpression","elements":[]}}],"kind":"var"},{"range":[12489,12520],"loc":{"start":{"line":372,"column":8},"end":{"line":372,"column":39}},"type":"ExpressionStatement","expression":{"range":[12489,12519],"loc":{"start":{"line":372,"column":8},"end":{"line":372,"column":38}},"type":"CallExpression","callee":{"range":[12489,12503],"loc":{"start":{"line":372,"column":8},"end":{"line":372,"column":22}},"type":"MemberExpression","computed":false,"object":{"range":[12489,12497],"loc":{"start":{"line":372,"column":8},"end":{"line":372,"column":16}},"type":"MemberExpression","computed":false,"object":{"range":[12489,12492],"loc":{"start":{"line":372,"column":8},"end":{"line":372,"column":11}},"type":"Identifier","name":"arr"},"property":{"range":[12493,12497],"loc":{"start":{"line":372,"column":12},"end":{"line":372,"column":16}},"type":"Identifier","name":"push"}},"property":{"range":[12498,12503],"loc":{"start":{"line":372,"column":17},"end":{"line":372,"column":22}},"type":"Identifier","name":"apply"}},"arguments":[{"range":[12504,12507],"loc":{"start":{"line":372,"column":23},"end":{"line":372,"column":26}},"type":"Identifier","name":"arr"},{"range":[12509,12518],"loc":{"start":{"line":372,"column":28},"end":{"line":372,"column":37}},"type":"Identifier","name":"arguments"}]}},{"range":[12529,12662],"loc":{"start":{"line":373,"column":8},"end":{"line":377,"column":11}},"type":"ExpressionStatement","expression":{"range":[12529,12661],"loc":{"start":{"line":373,"column":8},"end":{"line":377,"column":10}},"type":"CallExpression","callee":{"range":[12529,12550],"loc":{"start":{"line":373,"column":8},"end":{"line":373,"column":29}},"type":"MemberExpression","computed":false,"object":{"range":[12529,12535],"loc":{"start":{"line":373,"column":8},"end":{"line":373,"column":14}},"type":"Identifier","name":"Object"},"property":{"range":[12536,12550],"loc":{"start":{"line":373,"column":15},"end":{"line":373,"column":29}},"type":"Identifier","name":"defineProperty"}},"arguments":[{"range":[12551,12554],"loc":{"start":{"line":373,"column":30},"end":{"line":373,"column":33}},"type":"Identifier","name":"arr"},{"range":[12556,12563],"loc":{"start":{"line":373,"column":35},"end":{"line":373,"column":42}},"type":"Literal","value":"_type","raw":"\"_type\""},{"range":[12573,12660],"loc":{"start":{"line":374,"column":8},"end":{"line":377,"column":9}},"type":"ObjectExpression","properties":[{"range":[12585,12621],"loc":{"start":{"line":375,"column":10},"end":{"line":375,"column":46}},"type":"Property","key":{"range":[12585,12588],"loc":{"start":{"line":375,"column":10},"end":{"line":375,"column":13}},"type":"Identifier","name":"get"},"computed":false,"value":{"range":[12590,12621],"loc":{"start":{"line":375,"column":15},"end":{"line":375,"column":46}},"type":"FunctionExpression","id":null,"params":[],"defaults":[],"body":{"range":[12602,12621],"loc":{"start":{"line":375,"column":27},"end":{"line":375,"column":46}},"type":"BlockStatement","body":[{"range":[12604,12619],"loc":{"start":{"line":375,"column":29},"end":{"line":375,"column":44}},"type":"ReturnStatement","argument":{"range":[12611,12618],"loc":{"start":{"line":375,"column":36},"end":{"line":375,"column":43}},"type":"Literal","value":"tuple","raw":"'tuple'"}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[12633,12650],"loc":{"start":{"line":376,"column":10},"end":{"line":376,"column":27}},"type":"Property","key":{"range":[12633,12643],"loc":{"start":{"line":376,"column":10},"end":{"line":376,"column":20}},"type":"Identifier","name":"enumerable"},"computed":false,"value":{"range":[12645,12650],"loc":{"start":{"line":376,"column":22},"end":{"line":376,"column":27}},"type":"Literal","value":false,"raw":"false"},"kind":"init","method":false,"shorthand":false}]}]}},{"range":[12671,12805],"loc":{"start":{"line":378,"column":8},"end":{"line":382,"column":11}},"type":"ExpressionStatement","expression":{"range":[12671,12804],"loc":{"start":{"line":378,"column":8},"end":{"line":382,"column":10}},"type":"CallExpression","callee":{"range":[12671,12692],"loc":{"start":{"line":378,"column":8},"end":{"line":378,"column":29}},"type":"MemberExpression","computed":false,"object":{"range":[12671,12677],"loc":{"start":{"line":378,"column":8},"end":{"line":378,"column":14}},"type":"Identifier","name":"Object"},"property":{"range":[12678,12692],"loc":{"start":{"line":378,"column":15},"end":{"line":378,"column":29}},"type":"Identifier","name":"defineProperty"}},"arguments":[{"range":[12693,12696],"loc":{"start":{"line":378,"column":30},"end":{"line":378,"column":33}},"type":"Identifier","name":"arr"},{"range":[12698,12709],"loc":{"start":{"line":378,"column":35},"end":{"line":378,"column":46}},"type":"Literal","value":"_isPython","raw":"\"_isPython\""},{"range":[12719,12803],"loc":{"start":{"line":379,"column":8},"end":{"line":382,"column":9}},"type":"ObjectExpression","properties":[{"range":[12731,12764],"loc":{"start":{"line":380,"column":10},"end":{"line":380,"column":43}},"type":"Property","key":{"range":[12731,12734],"loc":{"start":{"line":380,"column":10},"end":{"line":380,"column":13}},"type":"Identifier","name":"get"},"computed":false,"value":{"range":[12736,12764],"loc":{"start":{"line":380,"column":15},"end":{"line":380,"column":43}},"type":"FunctionExpression","id":null,"params":[],"defaults":[],"body":{"range":[12748,12764],"loc":{"start":{"line":380,"column":27},"end":{"line":380,"column":43}},"type":"BlockStatement","body":[{"range":[12750,12762],"loc":{"start":{"line":380,"column":29},"end":{"line":380,"column":41}},"type":"ReturnStatement","argument":{"range":[12757,12761],"loc":{"start":{"line":380,"column":36},"end":{"line":380,"column":40}},"type":"Literal","value":true,"raw":"true"}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[12776,12793],"loc":{"start":{"line":381,"column":10},"end":{"line":381,"column":27}},"type":"Property","key":{"range":[12776,12786],"loc":{"start":{"line":381,"column":10},"end":{"line":381,"column":20}},"type":"Identifier","name":"enumerable"},"computed":false,"value":{"range":[12788,12793],"loc":{"start":{"line":381,"column":22},"end":{"line":381,"column":27}},"type":"Literal","value":false,"raw":"false"},"kind":"init","method":false,"shorthand":false}]}]}},{"range":[12814,13077],"loc":{"start":{"line":383,"column":8},"end":{"line":392,"column":11}},"type":"ExpressionStatement","expression":{"range":[12814,13076],"loc":{"start":{"line":383,"column":8},"end":{"line":392,"column":10}},"type":"CallExpression","callee":{"range":[12814,12835],"loc":{"start":{"line":383,"column":8},"end":{"line":383,"column":29}},"type":"MemberExpression","computed":false,"object":{"range":[12814,12820],"loc":{"start":{"line":383,"column":8},"end":{"line":383,"column":14}},"type":"Identifier","name":"Object"},"property":{"range":[12821,12835],"loc":{"start":{"line":383,"column":15},"end":{"line":383,"column":29}},"type":"Identifier","name":"defineProperty"}},"arguments":[{"range":[12836,12839],"loc":{"start":{"line":383,"column":30},"end":{"line":383,"column":33}},"type":"Identifier","name":"arr"},{"range":[12841,12848],"loc":{"start":{"line":383,"column":35},"end":{"line":383,"column":42}},"type":"Literal","value":"count","raw":"\"count\""},{"range":[12858,13075],"loc":{"start":{"line":384,"column":8},"end":{"line":392,"column":9}},"type":"ObjectExpression","properties":[{"range":[12870,13036],"loc":{"start":{"line":385,"column":10},"end":{"line":390,"column":11}},"type":"Property","key":{"range":[12870,12875],"loc":{"start":{"line":385,"column":10},"end":{"line":385,"column":15}},"type":"Identifier","name":"value"},"computed":false,"value":{"range":[12877,13036],"loc":{"start":{"line":385,"column":17},"end":{"line":390,"column":11}},"type":"FunctionExpression","id":null,"params":[{"range":[12887,12888],"loc":{"start":{"line":385,"column":27},"end":{"line":385,"column":28}},"type":"Identifier","name":"x"}],"defaults":[],"body":{"range":[12890,13036],"loc":{"start":{"line":385,"column":30},"end":{"line":390,"column":11}},"type":"BlockStatement","body":[{"range":[12904,12914],"loc":{"start":{"line":386,"column":12},"end":{"line":386,"column":22}},"type":"VariableDeclaration","declarations":[{"range":[12908,12913],"loc":{"start":{"line":386,"column":16},"end":{"line":386,"column":21}},"type":"VariableDeclarator","id":{"range":[12908,12909],"loc":{"start":{"line":386,"column":16},"end":{"line":386,"column":17}},"type":"Identifier","name":"c"},"init":{"range":[12912,12913],"loc":{"start":{"line":386,"column":20},"end":{"line":386,"column":21}},"type":"Literal","value":0,"raw":"0"}}],"kind":"var"},{"range":[12927,13002],"loc":{"start":{"line":387,"column":12},"end":{"line":388,"column":37}},"type":"ForStatement","init":{"range":[12932,12941],"loc":{"start":{"line":387,"column":17},"end":{"line":387,"column":26}},"type":"VariableDeclaration","declarations":[{"range":[12936,12941],"loc":{"start":{"line":387,"column":21},"end":{"line":387,"column":26}},"type":"VariableDeclarator","id":{"range":[12936,12937],"loc":{"start":{"line":387,"column":21},"end":{"line":387,"column":22}},"type":"Identifier","name":"i"},"init":{"range":[12940,12941],"loc":{"start":{"line":387,"column":25},"end":{"line":387,"column":26}},"type":"Literal","value":0,"raw":"0"}}],"kind":"var"},"test":{"range":[12943,12958],"loc":{"start":{"line":387,"column":28},"end":{"line":387,"column":43}},"type":"BinaryExpression","operator":"<","left":{"range":[12943,12944],"loc":{"start":{"line":387,"column":28},"end":{"line":387,"column":29}},"type":"Identifier","name":"i"},"right":{"range":[12947,12958],"loc":{"start":{"line":387,"column":32},"end":{"line":387,"column":43}},"type":"MemberExpression","computed":false,"object":{"range":[12947,12951],"loc":{"start":{"line":387,"column":32},"end":{"line":387,"column":36}},"type":"ThisExpression"},"property":{"range":[12952,12958],"loc":{"start":{"line":387,"column":37},"end":{"line":387,"column":43}},"type":"Identifier","name":"length"}}},"update":{"range":[12960,12963],"loc":{"start":{"line":387,"column":45},"end":{"line":387,"column":48}},"type":"UpdateExpression","operator":"++","argument":{"range":[12960,12961],"loc":{"start":{"line":387,"column":45},"end":{"line":387,"column":46}},"type":"Identifier","name":"i"},"prefix":false},"body":{"range":[12979,13002],"loc":{"start":{"line":388,"column":14},"end":{"line":388,"column":37}},"type":"IfStatement","test":{"range":[12983,12996],"loc":{"start":{"line":388,"column":18},"end":{"line":388,"column":31}},"type":"BinaryExpression","operator":"===","left":{"range":[12983,12990],"loc":{"start":{"line":388,"column":18},"end":{"line":388,"column":25}},"type":"MemberExpression","computed":true,"object":{"range":[12983,12987],"loc":{"start":{"line":388,"column":18},"end":{"line":388,"column":22}},"type":"ThisExpression"},"property":{"range":[12988,12989],"loc":{"start":{"line":388,"column":23},"end":{"line":388,"column":24}},"type":"Identifier","name":"i"}},"right":{"range":[12995,12996],"loc":{"start":{"line":388,"column":30},"end":{"line":388,"column":31}},"type":"Identifier","name":"x"}},"consequent":{"range":[12998,13002],"loc":{"start":{"line":388,"column":33},"end":{"line":388,"column":37}},"type":"ExpressionStatement","expression":{"range":[12998,13001],"loc":{"start":{"line":388,"column":33},"end":{"line":388,"column":36}},"type":"UpdateExpression","operator":"++","argument":{"range":[12998,12999],"loc":{"start":{"line":388,"column":33},"end":{"line":388,"column":34}},"type":"Identifier","name":"c"},"prefix":false}},"alternate":null}},{"range":[13015,13024],"loc":{"start":{"line":389,"column":12},"end":{"line":389,"column":21}},"type":"ReturnStatement","argument":{"range":[13022,13023],"loc":{"start":{"line":389,"column":19},"end":{"line":389,"column":20}},"type":"Identifier","name":"c"}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[13048,13065],"loc":{"start":{"line":391,"column":10},"end":{"line":391,"column":27}},"type":"Property","key":{"range":[13048,13058],"loc":{"start":{"line":391,"column":10},"end":{"line":391,"column":20}},"type":"Identifier","name":"enumerable"},"computed":false,"value":{"range":[13060,13065],"loc":{"start":{"line":391,"column":22},"end":{"line":391,"column":27}},"type":"Literal","value":false,"raw":"false"},"kind":"init","method":false,"shorthand":false}]}]}},{"range":[13086,13630],"loc":{"start":{"line":393,"column":8},"end":{"line":409,"column":11}},"type":"ExpressionStatement","expression":{"range":[13086,13629],"loc":{"start":{"line":393,"column":8},"end":{"line":409,"column":10}},"type":"CallExpression","callee":{"range":[13086,13107],"loc":{"start":{"line":393,"column":8},"end":{"line":393,"column":29}},"type":"MemberExpression","computed":false,"object":{"range":[13086,13092],"loc":{"start":{"line":393,"column":8},"end":{"line":393,"column":14}},"type":"Identifier","name":"Object"},"property":{"range":[13093,13107],"loc":{"start":{"line":393,"column":15},"end":{"line":393,"column":29}},"type":"Identifier","name":"defineProperty"}},"arguments":[{"range":[13108,13111],"loc":{"start":{"line":393,"column":30},"end":{"line":393,"column":33}},"type":"Identifier","name":"arr"},{"range":[13113,13121],"loc":{"start":{"line":393,"column":35},"end":{"line":393,"column":43}},"type":"Literal","value":"equals","raw":"\"equals\""},{"range":[13131,13628],"loc":{"start":{"line":394,"column":8},"end":{"line":409,"column":9}},"type":"ObjectExpression","properties":[{"range":[13143,13589],"loc":{"start":{"line":395,"column":10},"end":{"line":407,"column":11}},"type":"Property","key":{"range":[13143,13148],"loc":{"start":{"line":395,"column":10},"end":{"line":395,"column":15}},"type":"Identifier","name":"value"},"computed":false,"value":{"range":[13150,13589],"loc":{"start":{"line":395,"column":17},"end":{"line":407,"column":11}},"type":"FunctionExpression","id":null,"params":[{"range":[13160,13161],"loc":{"start":{"line":395,"column":27},"end":{"line":395,"column":28}},"type":"Identifier","name":"x"}],"defaults":[],"body":{"range":[13163,13589],"loc":{"start":{"line":395,"column":30},"end":{"line":407,"column":11}},"type":"BlockStatement","body":[{"range":[13177,13551],"loc":{"start":{"line":396,"column":12},"end":{"line":405,"column":25}},"type":"TryStatement","block":{"range":[13181,13525],"loc":{"start":{"line":396,"column":16},"end":{"line":404,"column":13}},"type":"BlockStatement","body":[{"range":[13197,13240],"loc":{"start":{"line":397,"column":14},"end":{"line":397,"column":57}},"type":"IfStatement","test":{"range":[13201,13225],"loc":{"start":{"line":397,"column":18},"end":{"line":397,"column":42}},"type":"BinaryExpression","operator":"!==","left":{"range":[13201,13212],"loc":{"start":{"line":397,"column":18},"end":{"line":397,"column":29}},"type":"MemberExpression","computed":false,"object":{"range":[13201,13205],"loc":{"start":{"line":397,"column":18},"end":{"line":397,"column":22}},"type":"ThisExpression"},"property":{"range":[13206,13212],"loc":{"start":{"line":397,"column":23},"end":{"line":397,"column":29}},"type":"Identifier","name":"length"}},"right":{"range":[13217,13225],"loc":{"start":{"line":397,"column":34},"end":{"line":397,"column":42}},"type":"MemberExpression","computed":false,"object":{"range":[13217,13218],"loc":{"start":{"line":397,"column":34},"end":{"line":397,"column":35}},"type":"Identifier","name":"x"},"property":{"range":[13219,13225],"loc":{"start":{"line":397,"column":36},"end":{"line":397,"column":42}},"type":"Identifier","name":"length"}}},"consequent":{"range":[13227,13240],"loc":{"start":{"line":397,"column":44},"end":{"line":397,"column":57}},"type":"ReturnStatement","argument":{"range":[13234,13239],"loc":{"start":{"line":397,"column":51},"end":{"line":397,"column":56}},"type":"Literal","value":false,"raw":"false"}},"alternate":null},{"range":[13255,13484],"loc":{"start":{"line":398,"column":14},"end":{"line":402,"column":15}},"type":"ForStatement","init":{"range":[13260,13269],"loc":{"start":{"line":398,"column":19},"end":{"line":398,"column":28}},"type":"VariableDeclaration","declarations":[{"range":[13264,13269],"loc":{"start":{"line":398,"column":23},"end":{"line":398,"column":28}},"type":"VariableDeclarator","id":{"range":[13264,13265],"loc":{"start":{"line":398,"column":23},"end":{"line":398,"column":24}},"type":"Identifier","name":"i"},"init":{"range":[13268,13269],"loc":{"start":{"line":398,"column":27},"end":{"line":398,"column":28}},"type":"Literal","value":0,"raw":"0"}}],"kind":"var"},"test":{"range":[13271,13286],"loc":{"start":{"line":398,"column":30},"end":{"line":398,"column":45}},"type":"BinaryExpression","operator":"<","left":{"range":[13271,13272],"loc":{"start":{"line":398,"column":30},"end":{"line":398,"column":31}},"type":"Identifier","name":"i"},"right":{"range":[13275,13286],"loc":{"start":{"line":398,"column":34},"end":{"line":398,"column":45}},"type":"MemberExpression","computed":false,"object":{"range":[13275,13279],"loc":{"start":{"line":398,"column":34},"end":{"line":398,"column":38}},"type":"ThisExpression"},"property":{"range":[13280,13286],"loc":{"start":{"line":398,"column":39},"end":{"line":398,"column":45}},"type":"Identifier","name":"length"}}},"update":{"range":[13288,13291],"loc":{"start":{"line":398,"column":47},"end":{"line":398,"column":50}},"type":"UpdateExpression","operator":"++","argument":{"range":[13288,13289],"loc":{"start":{"line":398,"column":47},"end":{"line":398,"column":48}},"type":"Identifier","name":"i"},"prefix":false},"body":{"range":[13293,13484],"loc":{"start":{"line":398,"column":52},"end":{"line":402,"column":15}},"type":"BlockStatement","body":[{"range":[13311,13468],"loc":{"start":{"line":399,"column":16},"end":{"line":401,"column":58}},"type":"IfStatement","test":{"range":[13315,13347],"loc":{"start":{"line":399,"column":20},"end":{"line":399,"column":52}},"type":"CallExpression","callee":{"range":[13315,13337],"loc":{"start":{"line":399,"column":20},"end":{"line":399,"column":42}},"type":"MemberExpression","computed":false,"object":{"range":[13315,13322],"loc":{"start":{"line":399,"column":20},"end":{"line":399,"column":27}},"type":"MemberExpression","computed":true,"object":{"range":[13315,13319],"loc":{"start":{"line":399,"column":20},"end":{"line":399,"column":24}},"type":"ThisExpression"},"property":{"range":[13320,13321],"loc":{"start":{"line":399,"column":25},"end":{"line":399,"column":26}},"type":"Identifier","name":"i"}},"property":{"range":[13323,13337],"loc":{"start":{"line":399,"column":28},"end":{"line":399,"column":42}},"type":"Identifier","name":"hasOwnProperty"}},"arguments":[{"range":[13338,13346],"loc":{"start":{"line":399,"column":43},"end":{"line":399,"column":51}},"type":"Literal","value":"equals","raw":"\"equals\""}]},"consequent":{"range":[13349,13427],"loc":{"start":{"line":399,"column":54},"end":{"line":401,"column":17}},"type":"BlockStatement","body":[{"range":[13369,13409],"loc":{"start":{"line":400,"column":18},"end":{"line":400,"column":58}},"type":"IfStatement","test":{"range":[13373,13394],"loc":{"start":{"line":400,"column":22},"end":{"line":400,"column":43}},"type":"UnaryExpression","operator":"!","argument":{"range":[13374,13394],"loc":{"start":{"line":400,"column":23},"end":{"line":400,"column":43}},"type":"CallExpression","callee":{"range":[13374,13388],"loc":{"start":{"line":400,"column":23},"end":{"line":400,"column":37}},"type":"MemberExpression","computed":false,"object":{"range":[13374,13381],"loc":{"start":{"line":400,"column":23},"end":{"line":400,"column":30}},"type":"MemberExpression","computed":true,"object":{"range":[13374,13378],"loc":{"start":{"line":400,"column":23},"end":{"line":400,"column":27}},"type":"ThisExpression"},"property":{"range":[13379,13380],"loc":{"start":{"line":400,"column":28},"end":{"line":400,"column":29}},"type":"Identifier","name":"i"}},"property":{"range":[13382,13388],"loc":{"start":{"line":400,"column":31},"end":{"line":400,"column":37}},"type":"Identifier","name":"equals"}},"arguments":[{"range":[13389,13393],"loc":{"start":{"line":400,"column":38},"end":{"line":400,"column":42}},"type":"MemberExpression","computed":true,"object":{"range":[13389,13390],"loc":{"start":{"line":400,"column":38},"end":{"line":400,"column":39}},"type":"Identifier","name":"x"},"property":{"range":[13391,13392],"loc":{"start":{"line":400,"column":40},"end":{"line":400,"column":41}},"type":"Identifier","name":"i"}}]},"prefix":true},"consequent":{"range":[13396,13409],"loc":{"start":{"line":400,"column":45},"end":{"line":400,"column":58}},"type":"ReturnStatement","argument":{"range":[13403,13408],"loc":{"start":{"line":400,"column":52},"end":{"line":400,"column":57}},"type":"Literal","value":false,"raw":"false"}},"alternate":null}]},"alternate":{"range":[13433,13468],"loc":{"start":{"line":401,"column":23},"end":{"line":401,"column":58}},"type":"IfStatement","test":{"range":[13437,13453],"loc":{"start":{"line":401,"column":27},"end":{"line":401,"column":43}},"type":"BinaryExpression","operator":"!==","left":{"range":[13437,13444],"loc":{"start":{"line":401,"column":27},"end":{"line":401,"column":34}},"type":"MemberExpression","computed":true,"object":{"range":[13437,13441],"loc":{"start":{"line":401,"column":27},"end":{"line":401,"column":31}},"type":"ThisExpression"},"property":{"range":[13442,13443],"loc":{"start":{"line":401,"column":32},"end":{"line":401,"column":33}},"type":"Identifier","name":"i"}},"right":{"range":[13449,13453],"loc":{"start":{"line":401,"column":39},"end":{"line":401,"column":43}},"type":"MemberExpression","computed":true,"object":{"range":[13449,13450],"loc":{"start":{"line":401,"column":39},"end":{"line":401,"column":40}},"type":"Identifier","name":"x"},"property":{"range":[13451,13452],"loc":{"start":{"line":401,"column":41},"end":{"line":401,"column":42}},"type":"Identifier","name":"i"}}},"consequent":{"range":[13455,13468],"loc":{"start":{"line":401,"column":45},"end":{"line":401,"column":58}},"type":"ReturnStatement","argument":{"range":[13462,13467],"loc":{"start":{"line":401,"column":52},"end":{"line":401,"column":57}},"type":"Literal","value":false,"raw":"false"}},"alternate":null}}]}},{"range":[13499,13511],"loc":{"start":{"line":403,"column":14},"end":{"line":403,"column":26}},"type":"ReturnStatement","argument":{"range":[13506,13510],"loc":{"start":{"line":403,"column":21},"end":{"line":403,"column":25}},"type":"Literal","value":true,"raw":"true"}}]},"guardedHandlers":[],"handlers":[{"range":[13538,13551],"loc":{"start":{"line":405,"column":12},"end":{"line":405,"column":25}},"type":"CatchClause","param":{"range":[13545,13546],"loc":{"start":{"line":405,"column":19},"end":{"line":405,"column":20}},"type":"Identifier","name":"e"},"body":{"range":[13548,13551],"loc":{"start":{"line":405,"column":22},"end":{"line":405,"column":25}},"type":"BlockStatement","body":[]}}],"handler":{"range":[13538,13551],"loc":{"start":{"line":405,"column":12},"end":{"line":405,"column":25}},"type":"CatchClause","param":{"range":[13545,13546],"loc":{"start":{"line":405,"column":19},"end":{"line":405,"column":20}},"type":"Identifier","name":"e"},"body":{"range":[13548,13551],"loc":{"start":{"line":405,"column":22},"end":{"line":405,"column":25}},"type":"BlockStatement","body":[]}},"finalizer":null},{"range":[13564,13577],"loc":{"start":{"line":406,"column":12},"end":{"line":406,"column":25}},"type":"ReturnStatement","argument":{"range":[13571,13576],"loc":{"start":{"line":406,"column":19},"end":{"line":406,"column":24}},"type":"Literal","value":false,"raw":"false"}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[13601,13618],"loc":{"start":{"line":408,"column":10},"end":{"line":408,"column":27}},"type":"Property","key":{"range":[13601,13611],"loc":{"start":{"line":408,"column":10},"end":{"line":408,"column":20}},"type":"Identifier","name":"enumerable"},"computed":false,"value":{"range":[13613,13618],"loc":{"start":{"line":408,"column":22},"end":{"line":408,"column":27}},"type":"Literal","value":false,"raw":"false"},"kind":"init","method":false,"shorthand":false}]}]}},{"range":[13639,13805],"loc":{"start":{"line":410,"column":8},"end":{"line":416,"column":11}},"type":"ExpressionStatement","expression":{"range":[13639,13804],"loc":{"start":{"line":410,"column":8},"end":{"line":416,"column":10}},"type":"CallExpression","callee":{"range":[13639,13660],"loc":{"start":{"line":410,"column":8},"end":{"line":410,"column":29}},"type":"MemberExpression","computed":false,"object":{"range":[13639,13645],"loc":{"start":{"line":410,"column":8},"end":{"line":410,"column":14}},"type":"Identifier","name":"Object"},"property":{"range":[13646,13660],"loc":{"start":{"line":410,"column":15},"end":{"line":410,"column":29}},"type":"Identifier","name":"defineProperty"}},"arguments":[{"range":[13661,13664],"loc":{"start":{"line":410,"column":30},"end":{"line":410,"column":33}},"type":"Identifier","name":"arr"},{"range":[13666,13673],"loc":{"start":{"line":410,"column":35},"end":{"line":410,"column":42}},"type":"Literal","value":"index","raw":"\"index\""},{"range":[13683,13803],"loc":{"start":{"line":411,"column":8},"end":{"line":416,"column":9}},"type":"ObjectExpression","properties":[{"range":[13695,13764],"loc":{"start":{"line":412,"column":10},"end":{"line":414,"column":11}},"type":"Property","key":{"range":[13695,13700],"loc":{"start":{"line":412,"column":10},"end":{"line":412,"column":15}},"type":"Identifier","name":"value"},"computed":false,"value":{"range":[13702,13764],"loc":{"start":{"line":412,"column":17},"end":{"line":414,"column":11}},"type":"FunctionExpression","id":null,"params":[{"range":[13712,13713],"loc":{"start":{"line":412,"column":27},"end":{"line":412,"column":28}},"type":"Identifier","name":"x"}],"defaults":[],"body":{"range":[13715,13764],"loc":{"start":{"line":412,"column":30},"end":{"line":414,"column":11}},"type":"BlockStatement","body":[{"range":[13729,13752],"loc":{"start":{"line":413,"column":12},"end":{"line":413,"column":35}},"type":"ReturnStatement","argument":{"range":[13736,13751],"loc":{"start":{"line":413,"column":19},"end":{"line":413,"column":34}},"type":"CallExpression","callee":{"range":[13736,13748],"loc":{"start":{"line":413,"column":19},"end":{"line":413,"column":31}},"type":"MemberExpression","computed":false,"object":{"range":[13736,13740],"loc":{"start":{"line":413,"column":19},"end":{"line":413,"column":23}},"type":"ThisExpression"},"property":{"range":[13741,13748],"loc":{"start":{"line":413,"column":24},"end":{"line":413,"column":31}},"type":"Identifier","name":"indexOf"}},"arguments":[{"range":[13749,13750],"loc":{"start":{"line":413,"column":32},"end":{"line":413,"column":33}},"type":"Identifier","name":"x"}]}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[13776,13793],"loc":{"start":{"line":415,"column":10},"end":{"line":415,"column":27}},"type":"Property","key":{"range":[13776,13786],"loc":{"start":{"line":415,"column":10},"end":{"line":415,"column":20}},"type":"Identifier","name":"enumerable"},"computed":false,"value":{"range":[13788,13793],"loc":{"start":{"line":415,"column":22},"end":{"line":415,"column":27}},"type":"Literal","value":false,"raw":"false"},"kind":"init","method":false,"shorthand":false}]}]}},{"range":[13814,14291],"loc":{"start":{"line":417,"column":8},"end":{"line":431,"column":11}},"type":"ExpressionStatement","expression":{"range":[13814,14290],"loc":{"start":{"line":417,"column":8},"end":{"line":431,"column":10}},"type":"CallExpression","callee":{"range":[13814,13835],"loc":{"start":{"line":417,"column":8},"end":{"line":417,"column":29}},"type":"MemberExpression","computed":false,"object":{"range":[13814,13820],"loc":{"start":{"line":417,"column":8},"end":{"line":417,"column":14}},"type":"Identifier","name":"Object"},"property":{"range":[13821,13835],"loc":{"start":{"line":417,"column":15},"end":{"line":417,"column":29}},"type":"Identifier","name":"defineProperty"}},"arguments":[{"range":[13836,13839],"loc":{"start":{"line":417,"column":30},"end":{"line":417,"column":33}},"type":"Identifier","name":"arr"},{"range":[13841,13850],"loc":{"start":{"line":417,"column":35},"end":{"line":417,"column":44}},"type":"Literal","value":"indexOf","raw":"\"indexOf\""},{"range":[13860,14289],"loc":{"start":{"line":418,"column":8},"end":{"line":431,"column":9}},"type":"ObjectExpression","properties":[{"range":[13872,14250],"loc":{"start":{"line":419,"column":10},"end":{"line":429,"column":11}},"type":"Property","key":{"range":[13872,13877],"loc":{"start":{"line":419,"column":10},"end":{"line":419,"column":15}},"type":"Identifier","name":"value"},"computed":false,"value":{"range":[13879,14250],"loc":{"start":{"line":419,"column":17},"end":{"line":429,"column":11}},"type":"FunctionExpression","id":null,"params":[{"range":[13889,13890],"loc":{"start":{"line":419,"column":27},"end":{"line":419,"column":28}},"type":"Identifier","name":"x"},{"range":[13892,13901],"loc":{"start":{"line":419,"column":30},"end":{"line":419,"column":39}},"type":"Identifier","name":"fromIndex"}],"defaults":[],"body":{"range":[13903,14250],"loc":{"start":{"line":419,"column":41},"end":{"line":429,"column":11}},"type":"BlockStatement","body":[{"range":[13917,14215],"loc":{"start":{"line":420,"column":12},"end":{"line":427,"column":25}},"type":"TryStatement","block":{"range":[13921,14189],"loc":{"start":{"line":420,"column":16},"end":{"line":426,"column":13}},"type":"BlockStatement","body":[{"range":[13937,14175],"loc":{"start":{"line":421,"column":14},"end":{"line":425,"column":15}},"type":"ForStatement","init":{"range":[13942,13975],"loc":{"start":{"line":421,"column":19},"end":{"line":421,"column":52}},"type":"VariableDeclaration","declarations":[{"range":[13946,13975],"loc":{"start":{"line":421,"column":23},"end":{"line":421,"column":52}},"type":"VariableDeclarator","id":{"range":[13946,13947],"loc":{"start":{"line":421,"column":23},"end":{"line":421,"column":24}},"type":"Identifier","name":"i"},"init":{"range":[13950,13975],"loc":{"start":{"line":421,"column":27},"end":{"line":421,"column":52}},"type":"ConditionalExpression","test":{"range":[13950,13959],"loc":{"start":{"line":421,"column":27},"end":{"line":421,"column":36}},"type":"Identifier","name":"fromIndex"},"consequent":{"range":[13962,13971],"loc":{"start":{"line":421,"column":39},"end":{"line":421,"column":48}},"type":"Identifier","name":"fromIndex"},"alternate":{"range":[13974,13975],"loc":{"start":{"line":421,"column":51},"end":{"line":421,"column":52}},"type":"Literal","value":0,"raw":"0"}}}],"kind":"var"},"test":{"range":[13977,13992],"loc":{"start":{"line":421,"column":54},"end":{"line":421,"column":69}},"type":"BinaryExpression","operator":"<","left":{"range":[13977,13978],"loc":{"start":{"line":421,"column":54},"end":{"line":421,"column":55}},"type":"Identifier","name":"i"},"right":{"range":[13981,13992],"loc":{"start":{"line":421,"column":58},"end":{"line":421,"column":69}},"type":"MemberExpression","computed":false,"object":{"range":[13981,13985],"loc":{"start":{"line":421,"column":58},"end":{"line":421,"column":62}},"type":"ThisExpression"},"property":{"range":[13986,13992],"loc":{"start":{"line":421,"column":63},"end":{"line":421,"column":69}},"type":"Identifier","name":"length"}}},"update":{"range":[13994,13997],"loc":{"start":{"line":421,"column":71},"end":{"line":421,"column":74}},"type":"UpdateExpression","operator":"++","argument":{"range":[13994,13995],"loc":{"start":{"line":421,"column":71},"end":{"line":421,"column":72}},"type":"Identifier","name":"i"},"prefix":false},"body":{"range":[13999,14175],"loc":{"start":{"line":421,"column":76},"end":{"line":425,"column":15}},"type":"BlockStatement","body":[{"range":[14017,14159],"loc":{"start":{"line":422,"column":16},"end":{"line":424,"column":51}},"type":"IfStatement","test":{"range":[14021,14053],"loc":{"start":{"line":422,"column":20},"end":{"line":422,"column":52}},"type":"CallExpression","callee":{"range":[14021,14043],"loc":{"start":{"line":422,"column":20},"end":{"line":422,"column":42}},"type":"MemberExpression","computed":false,"object":{"range":[14021,14028],"loc":{"start":{"line":422,"column":20},"end":{"line":422,"column":27}},"type":"MemberExpression","computed":true,"object":{"range":[14021,14025],"loc":{"start":{"line":422,"column":20},"end":{"line":422,"column":24}},"type":"ThisExpression"},"property":{"range":[14026,14027],"loc":{"start":{"line":422,"column":25},"end":{"line":422,"column":26}},"type":"Identifier","name":"i"}},"property":{"range":[14029,14043],"loc":{"start":{"line":422,"column":28},"end":{"line":422,"column":42}},"type":"Identifier","name":"hasOwnProperty"}},"arguments":[{"range":[14044,14052],"loc":{"start":{"line":422,"column":43},"end":{"line":422,"column":51}},"type":"Literal","value":"equals","raw":"\"equals\""}]},"consequent":{"range":[14055,14125],"loc":{"start":{"line":422,"column":54},"end":{"line":424,"column":17}},"type":"BlockStatement","body":[{"range":[14075,14107],"loc":{"start":{"line":423,"column":18},"end":{"line":423,"column":50}},"type":"IfStatement","test":{"range":[14079,14096],"loc":{"start":{"line":423,"column":22},"end":{"line":423,"column":39}},"type":"CallExpression","callee":{"range":[14079,14093],"loc":{"start":{"line":423,"column":22},"end":{"line":423,"column":36}},"type":"MemberExpression","computed":false,"object":{"range":[14079,14086],"loc":{"start":{"line":423,"column":22},"end":{"line":423,"column":29}},"type":"MemberExpression","computed":true,"object":{"range":[14079,14083],"loc":{"start":{"line":423,"column":22},"end":{"line":423,"column":26}},"type":"ThisExpression"},"property":{"range":[14084,14085],"loc":{"start":{"line":423,"column":27},"end":{"line":423,"column":28}},"type":"Identifier","name":"i"}},"property":{"range":[14087,14093],"loc":{"start":{"line":423,"column":30},"end":{"line":423,"column":36}},"type":"Identifier","name":"equals"}},"arguments":[{"range":[14094,14095],"loc":{"start":{"line":423,"column":37},"end":{"line":423,"column":38}},"type":"Identifier","name":"x"}]},"consequent":{"range":[14098,14107],"loc":{"start":{"line":423,"column":41},"end":{"line":423,"column":50}},"type":"ReturnStatement","argument":{"range":[14105,14106],"loc":{"start":{"line":423,"column":48},"end":{"line":423,"column":49}},"type":"Identifier","name":"i"}},"alternate":null}]},"alternate":{"range":[14131,14159],"loc":{"start":{"line":424,"column":23},"end":{"line":424,"column":51}},"type":"IfStatement","test":{"range":[14135,14148],"loc":{"start":{"line":424,"column":27},"end":{"line":424,"column":40}},"type":"BinaryExpression","operator":"===","left":{"range":[14135,14142],"loc":{"start":{"line":424,"column":27},"end":{"line":424,"column":34}},"type":"MemberExpression","computed":true,"object":{"range":[14135,14139],"loc":{"start":{"line":424,"column":27},"end":{"line":424,"column":31}},"type":"ThisExpression"},"property":{"range":[14140,14141],"loc":{"start":{"line":424,"column":32},"end":{"line":424,"column":33}},"type":"Identifier","name":"i"}},"right":{"range":[14147,14148],"loc":{"start":{"line":424,"column":39},"end":{"line":424,"column":40}},"type":"Identifier","name":"x"}},"consequent":{"range":[14150,14159],"loc":{"start":{"line":424,"column":42},"end":{"line":424,"column":51}},"type":"ReturnStatement","argument":{"range":[14157,14158],"loc":{"start":{"line":424,"column":49},"end":{"line":424,"column":50}},"type":"Identifier","name":"i"}},"alternate":null}}]}}]},"guardedHandlers":[],"handlers":[{"range":[14202,14215],"loc":{"start":{"line":427,"column":12},"end":{"line":427,"column":25}},"type":"CatchClause","param":{"range":[14209,14210],"loc":{"start":{"line":427,"column":19},"end":{"line":427,"column":20}},"type":"Identifier","name":"e"},"body":{"range":[14212,14215],"loc":{"start":{"line":427,"column":22},"end":{"line":427,"column":25}},"type":"BlockStatement","body":[]}}],"handler":{"range":[14202,14215],"loc":{"start":{"line":427,"column":12},"end":{"line":427,"column":25}},"type":"CatchClause","param":{"range":[14209,14210],"loc":{"start":{"line":427,"column":19},"end":{"line":427,"column":20}},"type":"Identifier","name":"e"},"body":{"range":[14212,14215],"loc":{"start":{"line":427,"column":22},"end":{"line":427,"column":25}},"type":"BlockStatement","body":[]}},"finalizer":null},{"range":[14228,14238],"loc":{"start":{"line":428,"column":12},"end":{"line":428,"column":22}},"type":"ReturnStatement","argument":{"range":[14235,14237],"loc":{"start":{"line":428,"column":19},"end":{"line":428,"column":21}},"type":"UnaryExpression","operator":"-","argument":{"range":[14236,14237],"loc":{"start":{"line":428,"column":20},"end":{"line":428,"column":21}},"type":"Literal","value":1,"raw":"1"},"prefix":true}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[14262,14279],"loc":{"start":{"line":430,"column":10},"end":{"line":430,"column":27}},"type":"Property","key":{"range":[14262,14272],"loc":{"start":{"line":430,"column":10},"end":{"line":430,"column":20}},"type":"Identifier","name":"enumerable"},"computed":false,"value":{"range":[14274,14279],"loc":{"start":{"line":430,"column":22},"end":{"line":430,"column":27}},"type":"Literal","value":false,"raw":"false"},"kind":"init","method":false,"shorthand":false}]}]}},{"range":[14300,14524],"loc":{"start":{"line":432,"column":8},"end":{"line":438,"column":11}},"type":"ExpressionStatement","expression":{"range":[14300,14523],"loc":{"start":{"line":432,"column":8},"end":{"line":438,"column":10}},"type":"CallExpression","callee":{"range":[14300,14321],"loc":{"start":{"line":432,"column":8},"end":{"line":432,"column":29}},"type":"MemberExpression","computed":false,"object":{"range":[14300,14306],"loc":{"start":{"line":432,"column":8},"end":{"line":432,"column":14}},"type":"Identifier","name":"Object"},"property":{"range":[14307,14321],"loc":{"start":{"line":432,"column":15},"end":{"line":432,"column":29}},"type":"Identifier","name":"defineProperty"}},"arguments":[{"range":[14322,14325],"loc":{"start":{"line":432,"column":30},"end":{"line":432,"column":33}},"type":"Identifier","name":"arr"},{"range":[14327,14337],"loc":{"start":{"line":432,"column":35},"end":{"line":432,"column":45}},"type":"Literal","value":"_pySlice","raw":"\"_pySlice\""},{"range":[14347,14522],"loc":{"start":{"line":433,"column":8},"end":{"line":438,"column":9}},"type":"ObjectExpression","properties":[{"range":[14359,14481],"loc":{"start":{"line":434,"column":10},"end":{"line":436,"column":11}},"type":"Property","key":{"range":[14359,14364],"loc":{"start":{"line":434,"column":10},"end":{"line":434,"column":15}},"type":"Identifier","name":"value"},"computed":false,"value":{"range":[14366,14481],"loc":{"start":{"line":434,"column":17},"end":{"line":436,"column":11}},"type":"FunctionExpression","id":null,"params":[{"range":[14376,14381],"loc":{"start":{"line":434,"column":27},"end":{"line":434,"column":32}},"type":"Identifier","name":"start"},{"range":[14383,14386],"loc":{"start":{"line":434,"column":34},"end":{"line":434,"column":37}},"type":"Identifier","name":"end"},{"range":[14388,14392],"loc":{"start":{"line":434,"column":39},"end":{"line":434,"column":43}},"type":"Identifier","name":"step"}],"defaults":[],"body":{"range":[14394,14481],"loc":{"start":{"line":434,"column":45},"end":{"line":436,"column":11}},"type":"BlockStatement","body":[{"range":[14409,14469],"loc":{"start":{"line":435,"column":12},"end":{"line":435,"column":72}},"type":"ReturnStatement","argument":{"range":[14416,14468],"loc":{"start":{"line":435,"column":19},"end":{"line":435,"column":71}},"type":"CallExpression","callee":{"range":[14416,14444],"loc":{"start":{"line":435,"column":19},"end":{"line":435,"column":47}},"type":"MemberExpression","computed":false,"object":{"range":[14416,14438],"loc":{"start":{"line":435,"column":19},"end":{"line":435,"column":41}},"type":"MemberExpression","computed":false,"object":{"range":[14416,14429],"loc":{"start":{"line":435,"column":19},"end":{"line":435,"column":32}},"type":"Identifier","name":"pythonRuntime"},"property":{"range":[14430,14438],"loc":{"start":{"line":435,"column":33},"end":{"line":435,"column":41}},"type":"Identifier","name":"internal"}},"property":{"range":[14439,14444],"loc":{"start":{"line":435,"column":42},"end":{"line":435,"column":47}},"type":"Identifier","name":"slice"}},"arguments":[{"range":[14445,14449],"loc":{"start":{"line":435,"column":48},"end":{"line":435,"column":52}},"type":"ThisExpression"},{"range":[14451,14456],"loc":{"start":{"line":435,"column":54},"end":{"line":435,"column":59}},"type":"Identifier","name":"start"},{"range":[14458,14461],"loc":{"start":{"line":435,"column":61},"end":{"line":435,"column":64}},"type":"Identifier","name":"end"},{"range":[14463,14467],"loc":{"start":{"line":435,"column":66},"end":{"line":435,"column":70}},"type":"Identifier","name":"step"}]}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[14495,14512],"loc":{"start":{"line":437,"column":12},"end":{"line":437,"column":29}},"type":"Property","key":{"range":[14495,14505],"loc":{"start":{"line":437,"column":12},"end":{"line":437,"column":22}},"type":"Identifier","name":"enumerable"},"computed":false,"value":{"range":[14507,14512],"loc":{"start":{"line":437,"column":24},"end":{"line":437,"column":29}},"type":"Literal","value":false,"raw":"false"},"kind":"init","method":false,"shorthand":false}]}]}},{"range":[14533,14797],"loc":{"start":{"line":439,"column":8},"end":{"line":448,"column":11}},"type":"ExpressionStatement","expression":{"range":[14533,14796],"loc":{"start":{"line":439,"column":8},"end":{"line":448,"column":10}},"type":"CallExpression","callee":{"range":[14533,14554],"loc":{"start":{"line":439,"column":8},"end":{"line":439,"column":29}},"type":"MemberExpression","computed":false,"object":{"range":[14533,14539],"loc":{"start":{"line":439,"column":8},"end":{"line":439,"column":14}},"type":"Identifier","name":"Object"},"property":{"range":[14540,14554],"loc":{"start":{"line":439,"column":15},"end":{"line":439,"column":29}},"type":"Identifier","name":"defineProperty"}},"arguments":[{"range":[14555,14558],"loc":{"start":{"line":439,"column":30},"end":{"line":439,"column":33}},"type":"Identifier","name":"arr"},{"range":[14560,14570],"loc":{"start":{"line":439,"column":35},"end":{"line":439,"column":45}},"type":"Literal","value":"toString","raw":"\"toString\""},{"range":[14580,14795],"loc":{"start":{"line":440,"column":8},"end":{"line":448,"column":9}},"type":"ObjectExpression","properties":[{"range":[14592,14756],"loc":{"start":{"line":441,"column":10},"end":{"line":446,"column":11}},"type":"Property","key":{"range":[14592,14597],"loc":{"start":{"line":441,"column":10},"end":{"line":441,"column":15}},"type":"Identifier","name":"value"},"computed":false,"value":{"range":[14599,14756],"loc":{"start":{"line":441,"column":17},"end":{"line":446,"column":11}},"type":"FunctionExpression","id":null,"params":[],"defaults":[],"body":{"range":[14611,14756],"loc":{"start":{"line":441,"column":29},"end":{"line":446,"column":11}},"type":"BlockStatement","body":[{"range":[14625,14655],"loc":{"start":{"line":442,"column":12},"end":{"line":442,"column":42}},"type":"VariableDeclaration","declarations":[{"range":[14629,14654],"loc":{"start":{"line":442,"column":16},"end":{"line":442,"column":41}},"type":"VariableDeclarator","id":{"range":[14629,14630],"loc":{"start":{"line":442,"column":16},"end":{"line":442,"column":17}},"type":"Identifier","name":"s"},"init":{"range":[14633,14654],"loc":{"start":{"line":442,"column":20},"end":{"line":442,"column":41}},"type":"BinaryExpression","operator":"+","left":{"range":[14633,14636],"loc":{"start":{"line":442,"column":20},"end":{"line":442,"column":23}},"type":"Literal","value":"(","raw":"'('"},"right":{"range":[14639,14654],"loc":{"start":{"line":442,"column":26},"end":{"line":442,"column":41}},"type":"CallExpression","callee":{"range":[14639,14648],"loc":{"start":{"line":442,"column":26},"end":{"line":442,"column":35}},"type":"MemberExpression","computed":false,"object":{"range":[14639,14643],"loc":{"start":{"line":442,"column":26},"end":{"line":442,"column":30}},"type":"ThisExpression"},"property":{"range":[14644,14648],"loc":{"start":{"line":442,"column":31},"end":{"line":442,"column":35}},"type":"Identifier","name":"join"}},"arguments":[{"range":[14649,14653],"loc":{"start":{"line":442,"column":36},"end":{"line":442,"column":40}},"type":"Literal","value":", ","raw":"', '"}]}}}],"kind":"var"},{"range":[14668,14700],"loc":{"start":{"line":443,"column":12},"end":{"line":443,"column":44}},"type":"IfStatement","test":{"range":[14672,14689],"loc":{"start":{"line":443,"column":16},"end":{"line":443,"column":33}},"type":"BinaryExpression","operator":"===","left":{"range":[14672,14683],"loc":{"start":{"line":443,"column":16},"end":{"line":443,"column":27}},"type":"MemberExpression","computed":false,"object":{"range":[14672,14676],"loc":{"start":{"line":443,"column":16},"end":{"line":443,"column":20}},"type":"ThisExpression"},"property":{"range":[14677,14683],"loc":{"start":{"line":443,"column":21},"end":{"line":443,"column":27}},"type":"Identifier","name":"length"}},"right":{"range":[14688,14689],"loc":{"start":{"line":443,"column":32},"end":{"line":443,"column":33}},"type":"Literal","value":1,"raw":"1"}},"consequent":{"range":[14691,14700],"loc":{"start":{"line":443,"column":35},"end":{"line":443,"column":44}},"type":"ExpressionStatement","expression":{"range":[14691,14699],"loc":{"start":{"line":443,"column":35},"end":{"line":443,"column":43}},"type":"AssignmentExpression","operator":"+=","left":{"range":[14691,14692],"loc":{"start":{"line":443,"column":35},"end":{"line":443,"column":36}},"type":"Identifier","name":"s"},"right":{"range":[14696,14699],"loc":{"start":{"line":443,"column":40},"end":{"line":443,"column":43}},"type":"Literal","value":",","raw":"','"}}},"alternate":null},{"range":[14713,14722],"loc":{"start":{"line":444,"column":12},"end":{"line":444,"column":21}},"type":"ExpressionStatement","expression":{"range":[14713,14721],"loc":{"start":{"line":444,"column":12},"end":{"line":444,"column":20}},"type":"AssignmentExpression","operator":"+=","left":{"range":[14713,14714],"loc":{"start":{"line":444,"column":12},"end":{"line":444,"column":13}},"type":"Identifier","name":"s"},"right":{"range":[14718,14721],"loc":{"start":{"line":444,"column":17},"end":{"line":444,"column":20}},"type":"Literal","value":")","raw":"')'"}}},{"range":[14735,14744],"loc":{"start":{"line":445,"column":12},"end":{"line":445,"column":21}},"type":"ReturnStatement","argument":{"range":[14742,14743],"loc":{"start":{"line":445,"column":19},"end":{"line":445,"column":20}},"type":"Identifier","name":"s"}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[14768,14785],"loc":{"start":{"line":447,"column":10},"end":{"line":447,"column":27}},"type":"Property","key":{"range":[14768,14778],"loc":{"start":{"line":447,"column":10},"end":{"line":447,"column":20}},"type":"Identifier","name":"enumerable"},"computed":false,"value":{"range":[14780,14785],"loc":{"start":{"line":447,"column":22},"end":{"line":447,"column":27}},"type":"Literal","value":false,"raw":"false"},"kind":"init","method":false,"shorthand":false}]}]}},{"range":[14806,14817],"loc":{"start":{"line":449,"column":8},"end":{"line":449,"column":19}},"type":"ReturnStatement","argument":{"range":[14813,14816],"loc":{"start":{"line":449,"column":15},"end":{"line":449,"column":18}},"type":"Identifier","name":"arr"}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false}]},"kind":"init","method":false,"shorthand":false},{"range":[14872,22533],"loc":{"start":{"line":455,"column":4},"end":{"line":644,"column":5}},"type":"Property","key":{"range":[14872,14881],"loc":{"start":{"line":455,"column":4},"end":{"line":455,"column":13}},"type":"Identifier","name":"functions"},"computed":false,"value":{"range":[14883,22533],"loc":{"start":{"line":455,"column":15},"end":{"line":644,"column":5}},"type":"ObjectExpression","properties":[{"range":[14891,14945],"loc":{"start":{"line":456,"column":6},"end":{"line":458,"column":7}},"type":"Property","key":{"range":[14891,14894],"loc":{"start":{"line":456,"column":6},"end":{"line":456,"column":9}},"type":"Identifier","name":"abs"},"computed":false,"value":{"range":[14896,14945],"loc":{"start":{"line":456,"column":11},"end":{"line":458,"column":7}},"type":"FunctionExpression","id":null,"params":[{"range":[14905,14906],"loc":{"start":{"line":456,"column":20},"end":{"line":456,"column":21}},"type":"Identifier","name":"x"}],"defaults":[],"body":{"range":[14908,14945],"loc":{"start":{"line":456,"column":23},"end":{"line":458,"column":7}},"type":"BlockStatement","body":[{"range":[14918,14937],"loc":{"start":{"line":457,"column":8},"end":{"line":457,"column":27}},"type":"ReturnStatement","argument":{"range":[14925,14936],"loc":{"start":{"line":457,"column":15},"end":{"line":457,"column":26}},"type":"CallExpression","callee":{"range":[14925,14933],"loc":{"start":{"line":457,"column":15},"end":{"line":457,"column":23}},"type":"MemberExpression","computed":false,"object":{"range":[14925,14929],"loc":{"start":{"line":457,"column":15},"end":{"line":457,"column":19}},"type":"Identifier","name":"Math"},"property":{"range":[14930,14933],"loc":{"start":{"line":457,"column":20},"end":{"line":457,"column":23}},"type":"Identifier","name":"abs"}},"arguments":[{"range":[14934,14935],"loc":{"start":{"line":457,"column":24},"end":{"line":457,"column":25}},"type":"Identifier","name":"x"}]}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[14953,15109],"loc":{"start":{"line":459,"column":6},"end":{"line":462,"column":7}},"type":"Property","key":{"range":[14953,14956],"loc":{"start":{"line":459,"column":6},"end":{"line":459,"column":9}},"type":"Identifier","name":"all"},"computed":false,"value":{"range":[14958,15109],"loc":{"start":{"line":459,"column":11},"end":{"line":462,"column":7}},"type":"FunctionExpression","id":null,"params":[{"range":[14967,14975],"loc":{"start":{"line":459,"column":20},"end":{"line":459,"column":28}},"type":"Identifier","name":"iterable"}],"defaults":[],"body":{"range":[14977,15109],"loc":{"start":{"line":459,"column":30},"end":{"line":462,"column":7}},"type":"BlockStatement","body":[{"range":[14987,15080],"loc":{"start":{"line":460,"column":8},"end":{"line":460,"column":101}},"type":"ForInStatement","left":{"range":[14992,14997],"loc":{"start":{"line":460,"column":13},"end":{"line":460,"column":18}},"type":"VariableDeclaration","declarations":[{"range":[14996,14997],"loc":{"start":{"line":460,"column":17},"end":{"line":460,"column":18}},"type":"VariableDeclarator","id":{"range":[14996,14997],"loc":{"start":{"line":460,"column":17},"end":{"line":460,"column":18}},"type":"Identifier","name":"i"},"init":null}],"kind":"var"},"right":{"range":[15001,15009],"loc":{"start":{"line":460,"column":22},"end":{"line":460,"column":30}},"type":"Identifier","name":"iterable"},"body":{"range":[15011,15080],"loc":{"start":{"line":460,"column":32},"end":{"line":460,"column":101}},"type":"IfStatement","test":{"range":[15015,15065],"loc":{"start":{"line":460,"column":36},"end":{"line":460,"column":86}},"type":"BinaryExpression","operator":"!==","left":{"range":[15015,15056],"loc":{"start":{"line":460,"column":36},"end":{"line":460,"column":77}},"type":"CallExpression","callee":{"range":[15015,15043],"loc":{"start":{"line":460,"column":36},"end":{"line":460,"column":64}},"type":"MemberExpression","computed":false,"object":{"range":[15015,15038],"loc":{"start":{"line":460,"column":36},"end":{"line":460,"column":59}},"type":"MemberExpression","computed":false,"object":{"range":[15015,15028],"loc":{"start":{"line":460,"column":36},"end":{"line":460,"column":49}},"type":"Identifier","name":"pythonRuntime"},"property":{"range":[15029,15038],"loc":{"start":{"line":460,"column":50},"end":{"line":460,"column":59}},"type":"Identifier","name":"functions"}},"property":{"range":[15039,15043],"loc":{"start":{"line":460,"column":60},"end":{"line":460,"column":64}},"type":"Identifier","name":"bool"}},"arguments":[{"range":[15044,15055],"loc":{"start":{"line":460,"column":65},"end":{"line":460,"column":76}},"type":"MemberExpression","computed":true,"object":{"range":[15044,15052],"loc":{"start":{"line":460,"column":65},"end":{"line":460,"column":73}},"type":"Identifier","name":"iterable"},"property":{"range":[15053,15054],"loc":{"start":{"line":460,"column":74},"end":{"line":460,"column":75}},"type":"Identifier","name":"i"}}]},"right":{"range":[15061,15065],"loc":{"start":{"line":460,"column":82},"end":{"line":460,"column":86}},"type":"Literal","value":true,"raw":"true"}},"consequent":{"range":[15067,15080],"loc":{"start":{"line":460,"column":88},"end":{"line":460,"column":101}},"type":"ReturnStatement","argument":{"range":[15074,15079],"loc":{"start":{"line":460,"column":95},"end":{"line":460,"column":100}},"type":"Literal","value":false,"raw":"false"}},"alternate":null},"each":false},{"range":[15089,15101],"loc":{"start":{"line":461,"column":8},"end":{"line":461,"column":20}},"type":"ReturnStatement","argument":{"range":[15096,15100],"loc":{"start":{"line":461,"column":15},"end":{"line":461,"column":19}},"type":"Literal","value":true,"raw":"true"}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[15117,15273],"loc":{"start":{"line":463,"column":6},"end":{"line":466,"column":7}},"type":"Property","key":{"range":[15117,15120],"loc":{"start":{"line":463,"column":6},"end":{"line":463,"column":9}},"type":"Identifier","name":"any"},"computed":false,"value":{"range":[15122,15273],"loc":{"start":{"line":463,"column":11},"end":{"line":466,"column":7}},"type":"FunctionExpression","id":null,"params":[{"range":[15131,15139],"loc":{"start":{"line":463,"column":20},"end":{"line":463,"column":28}},"type":"Identifier","name":"iterable"}],"defaults":[],"body":{"range":[15141,15273],"loc":{"start":{"line":463,"column":30},"end":{"line":466,"column":7}},"type":"BlockStatement","body":[{"range":[15151,15243],"loc":{"start":{"line":464,"column":8},"end":{"line":464,"column":100}},"type":"ForInStatement","left":{"range":[15156,15161],"loc":{"start":{"line":464,"column":13},"end":{"line":464,"column":18}},"type":"VariableDeclaration","declarations":[{"range":[15160,15161],"loc":{"start":{"line":464,"column":17},"end":{"line":464,"column":18}},"type":"VariableDeclarator","id":{"range":[15160,15161],"loc":{"start":{"line":464,"column":17},"end":{"line":464,"column":18}},"type":"Identifier","name":"i"},"init":null}],"kind":"var"},"right":{"range":[15165,15173],"loc":{"start":{"line":464,"column":22},"end":{"line":464,"column":30}},"type":"Identifier","name":"iterable"},"body":{"range":[15175,15243],"loc":{"start":{"line":464,"column":32},"end":{"line":464,"column":100}},"type":"IfStatement","test":{"range":[15179,15229],"loc":{"start":{"line":464,"column":36},"end":{"line":464,"column":86}},"type":"BinaryExpression","operator":"===","left":{"range":[15179,15220],"loc":{"start":{"line":464,"column":36},"end":{"line":464,"column":77}},"type":"CallExpression","callee":{"range":[15179,15207],"loc":{"start":{"line":464,"column":36},"end":{"line":464,"column":64}},"type":"MemberExpression","computed":false,"object":{"range":[15179,15202],"loc":{"start":{"line":464,"column":36},"end":{"line":464,"column":59}},"type":"MemberExpression","computed":false,"object":{"range":[15179,15192],"loc":{"start":{"line":464,"column":36},"end":{"line":464,"column":49}},"type":"Identifier","name":"pythonRuntime"},"property":{"range":[15193,15202],"loc":{"start":{"line":464,"column":50},"end":{"line":464,"column":59}},"type":"Identifier","name":"functions"}},"property":{"range":[15203,15207],"loc":{"start":{"line":464,"column":60},"end":{"line":464,"column":64}},"type":"Identifier","name":"bool"}},"arguments":[{"range":[15208,15219],"loc":{"start":{"line":464,"column":65},"end":{"line":464,"column":76}},"type":"MemberExpression","computed":true,"object":{"range":[15208,15216],"loc":{"start":{"line":464,"column":65},"end":{"line":464,"column":73}},"type":"Identifier","name":"iterable"},"property":{"range":[15217,15218],"loc":{"start":{"line":464,"column":74},"end":{"line":464,"column":75}},"type":"Identifier","name":"i"}}]},"right":{"range":[15225,15229],"loc":{"start":{"line":464,"column":82},"end":{"line":464,"column":86}},"type":"Literal","value":true,"raw":"true"}},"consequent":{"range":[15231,15243],"loc":{"start":{"line":464,"column":88},"end":{"line":464,"column":100}},"type":"ReturnStatement","argument":{"range":[15238,15242],"loc":{"start":{"line":464,"column":95},"end":{"line":464,"column":99}},"type":"Literal","value":true,"raw":"true"}},"alternate":null},"each":false},{"range":[15252,15265],"loc":{"start":{"line":465,"column":8},"end":{"line":465,"column":21}},"type":"ReturnStatement","argument":{"range":[15259,15264],"loc":{"start":{"line":465,"column":15},"end":{"line":465,"column":20}},"type":"Literal","value":false,"raw":"false"}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[15281,16281],"loc":{"start":{"line":467,"column":6},"end":{"line":484,"column":7}},"type":"Property","key":{"range":[15281,15286],"loc":{"start":{"line":467,"column":6},"end":{"line":467,"column":11}},"type":"Identifier","name":"ascii"},"computed":false,"value":{"range":[15288,16281],"loc":{"start":{"line":467,"column":13},"end":{"line":484,"column":7}},"type":"FunctionExpression","id":null,"params":[{"range":[15297,15300],"loc":{"start":{"line":467,"column":22},"end":{"line":467,"column":25}},"type":"Identifier","name":"obj"}],"defaults":[],"body":{"range":[15302,16281],"loc":{"start":{"line":467,"column":27},"end":{"line":484,"column":7}},"type":"BlockStatement","body":[{"range":[15312,15394],"loc":{"start":{"line":468,"column":8},"end":{"line":470,"column":17}},"type":"VariableDeclaration","declarations":[{"range":[15316,15353],"loc":{"start":{"line":468,"column":12},"end":{"line":468,"column":49}},"type":"VariableDeclarator","id":{"range":[15316,15317],"loc":{"start":{"line":468,"column":12},"end":{"line":468,"column":13}},"type":"Identifier","name":"s"},"init":{"range":[15320,15353],"loc":{"start":{"line":468,"column":16},"end":{"line":468,"column":49}},"type":"CallExpression","callee":{"range":[15320,15348],"loc":{"start":{"line":468,"column":16},"end":{"line":468,"column":44}},"type":"MemberExpression","computed":false,"object":{"range":[15320,15343],"loc":{"start":{"line":468,"column":16},"end":{"line":468,"column":39}},"type":"MemberExpression","computed":false,"object":{"range":[15320,15333],"loc":{"start":{"line":468,"column":16},"end":{"line":468,"column":29}},"type":"Identifier","name":"pythonRuntime"},"property":{"range":[15334,15343],"loc":{"start":{"line":468,"column":30},"end":{"line":468,"column":39}},"type":"Identifier","name":"functions"}},"property":{"range":[15344,15348],"loc":{"start":{"line":468,"column":40},"end":{"line":468,"column":44}},"type":"Identifier","name":"repr"}},"arguments":[{"range":[15349,15352],"loc":{"start":{"line":468,"column":45},"end":{"line":468,"column":48}},"type":"Identifier","name":"obj"}]}},{"range":[15367,15375],"loc":{"start":{"line":469,"column":12},"end":{"line":469,"column":20}},"type":"VariableDeclarator","id":{"range":[15367,15370],"loc":{"start":{"line":469,"column":12},"end":{"line":469,"column":15}},"type":"Identifier","name":"asc"},"init":{"range":[15373,15375],"loc":{"start":{"line":469,"column":18},"end":{"line":469,"column":20}},"type":"Literal","value":"","raw":"\"\""}},{"range":[15389,15393],"loc":{"start":{"line":470,"column":12},"end":{"line":470,"column":16}},"type":"VariableDeclarator","id":{"range":[15389,15393],"loc":{"start":{"line":470,"column":12},"end":{"line":470,"column":16}},"type":"Identifier","name":"code"},"init":null}],"kind":"var"},{"range":[15403,16253],"loc":{"start":{"line":471,"column":8},"end":{"line":482,"column":9}},"type":"ForStatement","init":{"range":[15408,15417],"loc":{"start":{"line":471,"column":13},"end":{"line":471,"column":22}},"type":"VariableDeclaration","declarations":[{"range":[15412,15417],"loc":{"start":{"line":471,"column":17},"end":{"line":471,"column":22}},"type":"VariableDeclarator","id":{"range":[15412,15413],"loc":{"start":{"line":471,"column":17},"end":{"line":471,"column":18}},"type":"Identifier","name":"i"},"init":{"range":[15416,15417],"loc":{"start":{"line":471,"column":21},"end":{"line":471,"column":22}},"type":"Literal","value":0,"raw":"0"}}],"kind":"var"},"test":{"range":[15419,15431],"loc":{"start":{"line":471,"column":24},"end":{"line":471,"column":36}},"type":"BinaryExpression","operator":"<","left":{"range":[15419,15420],"loc":{"start":{"line":471,"column":24},"end":{"line":471,"column":25}},"type":"Identifier","name":"i"},"right":{"range":[15423,15431],"loc":{"start":{"line":471,"column":28},"end":{"line":471,"column":36}},"type":"MemberExpression","computed":false,"object":{"range":[15423,15424],"loc":{"start":{"line":471,"column":28},"end":{"line":471,"column":29}},"type":"Identifier","name":"s"},"property":{"range":[15425,15431],"loc":{"start":{"line":471,"column":30},"end":{"line":471,"column":36}},"type":"Identifier","name":"length"}}},"update":{"range":[15433,15436],"loc":{"start":{"line":471,"column":38},"end":{"line":471,"column":41}},"type":"UpdateExpression","operator":"++","argument":{"range":[15433,15434],"loc":{"start":{"line":471,"column":38},"end":{"line":471,"column":39}},"type":"Identifier","name":"i"},"prefix":false},"body":{"range":[15438,16253],"loc":{"start":{"line":471,"column":43},"end":{"line":482,"column":9}},"type":"BlockStatement","body":[{"range":[15450,15473],"loc":{"start":{"line":472,"column":10},"end":{"line":472,"column":33}},"type":"ExpressionStatement","expression":{"range":[15450,15472],"loc":{"start":{"line":472,"column":10},"end":{"line":472,"column":32}},"type":"AssignmentExpression","operator":"=","left":{"range":[15450,15454],"loc":{"start":{"line":472,"column":10},"end":{"line":472,"column":14}},"type":"Identifier","name":"code"},"right":{"range":[15457,15472],"loc":{"start":{"line":472,"column":17},"end":{"line":472,"column":32}},"type":"CallExpression","callee":{"range":[15457,15469],"loc":{"start":{"line":472,"column":17},"end":{"line":472,"column":29}},"type":"MemberExpression","computed":false,"object":{"range":[15457,15458],"loc":{"start":{"line":472,"column":17},"end":{"line":472,"column":18}},"type":"Identifier","name":"s"},"property":{"range":[15459,15469],"loc":{"start":{"line":472,"column":19},"end":{"line":472,"column":29}},"type":"Identifier","name":"charCodeAt"}},"arguments":[{"range":[15470,15471],"loc":{"start":{"line":472,"column":30},"end":{"line":472,"column":31}},"type":"Identifier","name":"i"}]}}},{"range":[15484,16107],"loc":{"start":{"line":473,"column":10},"end":{"line":481,"column":15}},"type":"IfStatement","test":{"range":[15488,15499],"loc":{"start":{"line":473,"column":14},"end":{"line":473,"column":25}},"type":"BinaryExpression","operator":"<=","left":{"range":[15488,15492],"loc":{"start":{"line":473,"column":14},"end":{"line":473,"column":18}},"type":"Identifier","name":"code"},"right":{"range":[15496,15499],"loc":{"start":{"line":473,"column":22},"end":{"line":473,"column":25}},"type":"Literal","value":127,"raw":"127"}},"consequent":{"range":[15501,15513],"loc":{"start":{"line":473,"column":27},"end":{"line":473,"column":39}},"type":"ExpressionStatement","expression":{"range":[15501,15512],"loc":{"start":{"line":473,"column":27},"end":{"line":473,"column":38}},"type":"AssignmentExpression","operator":"+=","left":{"range":[15501,15504],"loc":{"start":{"line":473,"column":27},"end":{"line":473,"column":30}},"type":"Identifier","name":"asc"},"right":{"range":[15508,15512],"loc":{"start":{"line":473,"column":34},"end":{"line":473,"column":38}},"type":"MemberExpression","computed":true,"object":{"range":[15508,15509],"loc":{"start":{"line":473,"column":34},"end":{"line":473,"column":35}},"type":"Identifier","name":"s"},"property":{"range":[15510,15511],"loc":{"start":{"line":473,"column":36},"end":{"line":473,"column":37}},"type":"Identifier","name":"i"}}}},"alternate":{"range":[15529,16107],"loc":{"start":{"line":474,"column":15},"end":{"line":481,"column":15}},"type":"IfStatement","test":{"range":[15533,15545],"loc":{"start":{"line":474,"column":19},"end":{"line":474,"column":31}},"type":"BinaryExpression","operator":"<=","left":{"range":[15533,15537],"loc":{"start":{"line":474,"column":19},"end":{"line":474,"column":23}},"type":"Identifier","name":"code"},"right":{"range":[15541,15545],"loc":{"start":{"line":474,"column":27},"end":{"line":474,"column":31}},"type":"Literal","value":255,"raw":"0xFF"}},"consequent":{"range":[15547,15580],"loc":{"start":{"line":474,"column":33},"end":{"line":474,"column":66}},"type":"ExpressionStatement","expression":{"range":[15547,15579],"loc":{"start":{"line":474,"column":33},"end":{"line":474,"column":65}},"type":"AssignmentExpression","operator":"+=","left":{"range":[15547,15550],"loc":{"start":{"line":474,"column":33},"end":{"line":474,"column":36}},"type":"Identifier","name":"asc"},"right":{"range":[15554,15579],"loc":{"start":{"line":474,"column":40},"end":{"line":474,"column":65}},"type":"BinaryExpression","operator":"+","left":{"range":[15554,15559],"loc":{"start":{"line":474,"column":40},"end":{"line":474,"column":45}},"type":"Literal","value":"\\x","raw":"\"\\\\x\""},"right":{"range":[15562,15579],"loc":{"start":{"line":474,"column":48},"end":{"line":474,"column":65}},"type":"CallExpression","callee":{"range":[15562,15575],"loc":{"start":{"line":474,"column":48},"end":{"line":474,"column":61}},"type":"MemberExpression","computed":false,"object":{"range":[15562,15566],"loc":{"start":{"line":474,"column":48},"end":{"line":474,"column":52}},"type":"Identifier","name":"code"},"property":{"range":[15567,15575],"loc":{"start":{"line":474,"column":53},"end":{"line":474,"column":61}},"type":"Identifier","name":"toString"}},"arguments":[{"range":[15576,15578],"loc":{"start":{"line":474,"column":62},"end":{"line":474,"column":64}},"type":"Literal","value":16,"raw":"16"}]}}}},"alternate":{"range":[15596,16107],"loc":{"start":{"line":475,"column":15},"end":{"line":481,"column":15}},"type":"IfStatement","test":{"range":[15600,15632],"loc":{"start":{"line":475,"column":19},"end":{"line":475,"column":51}},"type":"LogicalExpression","operator":"&&","left":{"range":[15600,15614],"loc":{"start":{"line":475,"column":19},"end":{"line":475,"column":33}},"type":"BinaryExpression","operator":"<=","left":{"range":[15600,15606],"loc":{"start":{"line":475,"column":19},"end":{"line":475,"column":25}},"type":"Literal","value":55296,"raw":"0xD800"},"right":{"range":[15610,15614],"loc":{"start":{"line":475,"column":29},"end":{"line":475,"column":33}},"type":"Identifier","name":"code"}},"right":{"range":[15618,15632],"loc":{"start":{"line":475,"column":37},"end":{"line":475,"column":51}},"type":"BinaryExpression","operator":"<=","left":{"range":[15618,15622],"loc":{"start":{"line":475,"column":37},"end":{"line":475,"column":41}},"type":"Identifier","name":"code"},"right":{"range":[15626,15632],"loc":{"start":{"line":475,"column":45},"end":{"line":475,"column":51}},"type":"Literal","value":56319,"raw":"0xDBFF"}}},"consequent":{"range":[15634,15927],"loc":{"start":{"line":475,"column":53},"end":{"line":479,"column":11}},"type":"BlockStatement","body":[{"range":[15787,15851],"loc":{"start":{"line":477,"column":12},"end":{"line":477,"column":76}},"type":"ExpressionStatement","expression":{"range":[15787,15850],"loc":{"start":{"line":477,"column":12},"end":{"line":477,"column":75}},"type":"AssignmentExpression","operator":"=","left":{"range":[15787,15791],"loc":{"start":{"line":477,"column":12},"end":{"line":477,"column":16}},"type":"Identifier","name":"code"},"right":{"range":[15794,15850],"loc":{"start":{"line":477,"column":19},"end":{"line":477,"column":75}},"type":"BinaryExpression","operator":"+","left":{"range":[15794,15842],"loc":{"start":{"line":477,"column":19},"end":{"line":477,"column":67}},"type":"BinaryExpression","operator":"+","left":{"range":[15795,15814],"loc":{"start":{"line":477,"column":20},"end":{"line":477,"column":39}},"type":"BinaryExpression","operator":"*","left":{"range":[15796,15807],"loc":{"start":{"line":477,"column":21},"end":{"line":477,"column":32}},"type":"BinaryExpression","operator":"-","left":{"range":[15796,15800],"loc":{"start":{"line":477,"column":21},"end":{"line":477,"column":25}},"type":"Identifier","name":"code"},"right":{"range":[15801,15807],"loc":{"start":{"line":477,"column":26},"end":{"line":477,"column":32}},"type":"Literal","value":55296,"raw":"0xD800"}},"right":{"range":[15809,15814],"loc":{"start":{"line":477,"column":34},"end":{"line":477,"column":39}},"type":"Literal","value":1024,"raw":"0x400"}},"right":{"range":[15817,15841],"loc":{"start":{"line":477,"column":42},"end":{"line":477,"column":66}},"type":"BinaryExpression","operator":"-","left":{"range":[15817,15834],"loc":{"start":{"line":477,"column":42},"end":{"line":477,"column":59}},"type":"CallExpression","callee":{"range":[15817,15829],"loc":{"start":{"line":477,"column":42},"end":{"line":477,"column":54}},"type":"MemberExpression","computed":false,"object":{"range":[15817,15818],"loc":{"start":{"line":477,"column":42},"end":{"line":477,"column":43}},"type":"Identifier","name":"s"},"property":{"range":[15819,15829],"loc":{"start":{"line":477,"column":44},"end":{"line":477,"column":54}},"type":"Identifier","name":"charCodeAt"}},"arguments":[{"range":[15830,15833],"loc":{"start":{"line":477,"column":55},"end":{"line":477,"column":58}},"type":"UpdateExpression","operator":"++","argument":{"range":[15832,15833],"loc":{"start":{"line":477,"column":57},"end":{"line":477,"column":58}},"type":"Identifier","name":"i"},"prefix":true}]},"right":{"range":[15835,15841],"loc":{"start":{"line":477,"column":60},"end":{"line":477,"column":66}},"type":"Literal","value":56320,"raw":"0xDC00"}}},"right":{"range":[15843,15850],"loc":{"start":{"line":477,"column":68},"end":{"line":477,"column":75}},"type":"Literal","value":65536,"raw":"0x10000"}}}},{"range":[15864,15915],"loc":{"start":{"line":478,"column":12},"end":{"line":478,"column":63}},"type":"ExpressionStatement","expression":{"range":[15864,15914],"loc":{"start":{"line":478,"column":12},"end":{"line":478,"column":62}},"type":"AssignmentExpression","operator":"+=","left":{"range":[15864,15867],"loc":{"start":{"line":478,"column":12},"end":{"line":478,"column":15}},"type":"Identifier","name":"asc"},"right":{"range":[15871,15914],"loc":{"start":{"line":478,"column":19},"end":{"line":478,"column":62}},"type":"BinaryExpression","operator":"+","left":{"range":[15871,15876],"loc":{"start":{"line":478,"column":19},"end":{"line":478,"column":24}},"type":"Literal","value":"\\U","raw":"\"\\\\U\""},"right":{"range":[15879,15914],"loc":{"start":{"line":478,"column":27},"end":{"line":478,"column":62}},"type":"CallExpression","callee":{"range":[15879,15910],"loc":{"start":{"line":478,"column":27},"end":{"line":478,"column":58}},"type":"MemberExpression","computed":false,"object":{"range":[15880,15903],"loc":{"start":{"line":478,"column":28},"end":{"line":478,"column":51}},"type":"BinaryExpression","operator":"+","left":{"range":[15880,15885],"loc":{"start":{"line":478,"column":28},"end":{"line":478,"column":33}},"type":"Literal","value":"000","raw":"\"000\""},"right":{"range":[15886,15903],"loc":{"start":{"line":478,"column":34},"end":{"line":478,"column":51}},"type":"CallExpression","callee":{"range":[15886,15899],"loc":{"start":{"line":478,"column":34},"end":{"line":478,"column":47}},"type":"MemberExpression","computed":false,"object":{"range":[15886,15890],"loc":{"start":{"line":478,"column":34},"end":{"line":478,"column":38}},"type":"Identifier","name":"code"},"property":{"range":[15891,15899],"loc":{"start":{"line":478,"column":39},"end":{"line":478,"column":47}},"type":"Identifier","name":"toString"}},"arguments":[{"range":[15900,15902],"loc":{"start":{"line":478,"column":48},"end":{"line":478,"column":50}},"type":"Literal","value":16,"raw":"16"}]}},"property":{"range":[15905,15910],"loc":{"start":{"line":478,"column":53},"end":{"line":478,"column":58}},"type":"Identifier","name":"slice"}},"arguments":[{"range":[15911,15913],"loc":{"start":{"line":478,"column":59},"end":{"line":478,"column":61}},"type":"UnaryExpression","operator":"-","argument":{"range":[15912,15913],"loc":{"start":{"line":478,"column":60},"end":{"line":478,"column":61}},"type":"Literal","value":8,"raw":"8"},"prefix":true}]}}}}]},"alternate":{"range":[15933,16107],"loc":{"start":{"line":479,"column":17},"end":{"line":481,"column":15}},"type":"IfStatement","test":{"range":[15937,15951],"loc":{"start":{"line":479,"column":21},"end":{"line":479,"column":35}},"type":"BinaryExpression","operator":"<=","left":{"range":[15937,15941],"loc":{"start":{"line":479,"column":21},"end":{"line":479,"column":25}},"type":"Identifier","name":"code"},"right":{"range":[15945,15951],"loc":{"start":{"line":479,"column":29},"end":{"line":479,"column":35}},"type":"Literal","value":65535,"raw":"0xFFFF"}},"consequent":{"range":[15953,16002],"loc":{"start":{"line":479,"column":37},"end":{"line":479,"column":86}},"type":"ExpressionStatement","expression":{"range":[15953,16001],"loc":{"start":{"line":479,"column":37},"end":{"line":479,"column":85}},"type":"AssignmentExpression","operator":"+=","left":{"range":[15953,15956],"loc":{"start":{"line":479,"column":37},"end":{"line":479,"column":40}},"type":"Identifier","name":"asc"},"right":{"range":[15960,16001],"loc":{"start":{"line":479,"column":44},"end":{"line":479,"column":85}},"type":"BinaryExpression","operator":"+","left":{"range":[15960,15965],"loc":{"start":{"line":479,"column":44},"end":{"line":479,"column":49}},"type":"Literal","value":"\\u","raw":"\"\\\\u\""},"right":{"range":[15968,16001],"loc":{"start":{"line":479,"column":52},"end":{"line":479,"column":85}},"type":"CallExpression","callee":{"range":[15968,15997],"loc":{"start":{"line":479,"column":52},"end":{"line":479,"column":81}},"type":"MemberExpression","computed":false,"object":{"range":[15969,15990],"loc":{"start":{"line":479,"column":53},"end":{"line":479,"column":74}},"type":"BinaryExpression","operator":"+","left":{"range":[15969,15972],"loc":{"start":{"line":479,"column":53},"end":{"line":479,"column":56}},"type":"Literal","value":"0","raw":"\"0\""},"right":{"range":[15973,15990],"loc":{"start":{"line":479,"column":57},"end":{"line":479,"column":74}},"type":"CallExpression","callee":{"range":[15973,15986],"loc":{"start":{"line":479,"column":57},"end":{"line":479,"column":70}},"type":"MemberExpression","computed":false,"object":{"range":[15973,15977],"loc":{"start":{"line":479,"column":57},"end":{"line":479,"column":61}},"type":"Identifier","name":"code"},"property":{"range":[15978,15986],"loc":{"start":{"line":479,"column":62},"end":{"line":479,"column":70}},"type":"Identifier","name":"toString"}},"arguments":[{"range":[15987,15989],"loc":{"start":{"line":479,"column":71},"end":{"line":479,"column":73}},"type":"Literal","value":16,"raw":"16"}]}},"property":{"range":[15992,15997],"loc":{"start":{"line":479,"column":76},"end":{"line":479,"column":81}},"type":"Identifier","name":"slice"}},"arguments":[{"range":[15998,16000],"loc":{"start":{"line":479,"column":82},"end":{"line":479,"column":84}},"type":"UnaryExpression","operator":"-","argument":{"range":[15999,16000],"loc":{"start":{"line":479,"column":83},"end":{"line":479,"column":84}},"type":"Literal","value":4,"raw":"4"},"prefix":true}]}}}},"alternate":{"range":[16018,16107],"loc":{"start":{"line":480,"column":15},"end":{"line":481,"column":15}},"type":"IfStatement","test":{"range":[16022,16038],"loc":{"start":{"line":480,"column":19},"end":{"line":480,"column":35}},"type":"BinaryExpression","operator":"<=","left":{"range":[16022,16026],"loc":{"start":{"line":480,"column":19},"end":{"line":480,"column":23}},"type":"Identifier","name":"code"},"right":{"range":[16030,16038],"loc":{"start":{"line":480,"column":27},"end":{"line":480,"column":35}},"type":"Literal","value":1114111,"raw":"0x10FFFF"}},"consequent":{"range":[16040,16091],"loc":{"start":{"line":480,"column":37},"end":{"line":480,"column":88}},"type":"ExpressionStatement","expression":{"range":[16040,16090],"loc":{"start":{"line":480,"column":37},"end":{"line":480,"column":87}},"type":"AssignmentExpression","operator":"+=","left":{"range":[16040,16043],"loc":{"start":{"line":480,"column":37},"end":{"line":480,"column":40}},"type":"Identifier","name":"asc"},"right":{"range":[16047,16090],"loc":{"start":{"line":480,"column":44},"end":{"line":480,"column":87}},"type":"BinaryExpression","operator":"+","left":{"range":[16047,16052],"loc":{"start":{"line":480,"column":44},"end":{"line":480,"column":49}},"type":"Literal","value":"\\U","raw":"\"\\\\U\""},"right":{"range":[16055,16090],"loc":{"start":{"line":480,"column":52},"end":{"line":480,"column":87}},"type":"CallExpression","callee":{"range":[16055,16086],"loc":{"start":{"line":480,"column":52},"end":{"line":480,"column":83}},"type":"MemberExpression","computed":false,"object":{"range":[16056,16079],"loc":{"start":{"line":480,"column":53},"end":{"line":480,"column":76}},"type":"BinaryExpression","operator":"+","left":{"range":[16056,16061],"loc":{"start":{"line":480,"column":53},"end":{"line":480,"column":58}},"type":"Literal","value":"000","raw":"\"000\""},"right":{"range":[16062,16079],"loc":{"start":{"line":480,"column":59},"end":{"line":480,"column":76}},"type":"CallExpression","callee":{"range":[16062,16075],"loc":{"start":{"line":480,"column":59},"end":{"line":480,"column":72}},"type":"MemberExpression","computed":false,"object":{"range":[16062,16066],"loc":{"start":{"line":480,"column":59},"end":{"line":480,"column":63}},"type":"Identifier","name":"code"},"property":{"range":[16067,16075],"loc":{"start":{"line":480,"column":64},"end":{"line":480,"column":72}},"type":"Identifier","name":"toString"}},"arguments":[{"range":[16076,16078],"loc":{"start":{"line":480,"column":73},"end":{"line":480,"column":75}},"type":"Literal","value":16,"raw":"16"}]}},"property":{"range":[16081,16086],"loc":{"start":{"line":480,"column":78},"end":{"line":480,"column":83}},"type":"Identifier","name":"slice"}},"arguments":[{"range":[16087,16089],"loc":{"start":{"line":480,"column":84},"end":{"line":480,"column":86}},"type":"UnaryExpression","operator":"-","argument":{"range":[16088,16089],"loc":{"start":{"line":480,"column":85},"end":{"line":480,"column":86}},"type":"Literal","value":8,"raw":"8"},"prefix":true}]}}}},"alternate":{"range":[16106,16107],"loc":{"start":{"line":481,"column":14},"end":{"line":481,"column":15}},"type":"EmptyStatement"}}}}}}]}},{"range":[16262,16273],"loc":{"start":{"line":483,"column":8},"end":{"line":483,"column":19}},"type":"ReturnStatement","argument":{"range":[16269,16272],"loc":{"start":{"line":483,"column":15},"end":{"line":483,"column":18}},"type":"Identifier","name":"asc"}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[16289,16864],"loc":{"start":{"line":485,"column":6},"end":{"line":494,"column":7}},"type":"Property","key":{"range":[16289,16293],"loc":{"start":{"line":485,"column":6},"end":{"line":485,"column":10}},"type":"Identifier","name":"bool"},"computed":false,"value":{"range":[16295,16864],"loc":{"start":{"line":485,"column":12},"end":{"line":494,"column":7}},"type":"FunctionExpression","id":null,"params":[{"range":[16304,16305],"loc":{"start":{"line":485,"column":21},"end":{"line":485,"column":22}},"type":"Identifier","name":"x"}],"defaults":[],"body":{"range":[16307,16864],"loc":{"start":{"line":485,"column":24},"end":{"line":494,"column":7}},"type":"BlockStatement","body":[{"range":[16317,16817],"loc":{"start":{"line":486,"column":8},"end":{"line":493,"column":92}},"type":"ReturnStatement","argument":{"range":[16324,16816],"loc":{"start":{"line":486,"column":15},"end":{"line":493,"column":91}},"type":"UnaryExpression","operator":"!","argument":{"range":[16326,16815],"loc":{"start":{"line":486,"column":17},"end":{"line":493,"column":90}},"type":"LogicalExpression","operator":"||","left":{"range":[16326,16684],"loc":{"start":{"line":486,"column":17},"end":{"line":492,"column":69}},"type":"LogicalExpression","operator":"||","left":{"range":[16326,16507],"loc":{"start":{"line":486,"column":17},"end":{"line":490,"column":31}},"type":"LogicalExpression","operator":"||","left":{"range":[16326,16464],"loc":{"start":{"line":486,"column":17},"end":{"line":489,"column":24}},"type":"LogicalExpression","operator":"||","left":{"range":[16326,16427],"loc":{"start":{"line":486,"column":17},"end":{"line":488,"column":28}},"type":"LogicalExpression","operator":"||","left":{"range":[16326,16387],"loc":{"start":{"line":486,"column":17},"end":{"line":487,"column":27}},"type":"LogicalExpression","operator":"||","left":{"range":[16326,16341],"loc":{"start":{"line":486,"column":17},"end":{"line":486,"column":32}},"type":"BinaryExpression","operator":"===","left":{"range":[16326,16327],"loc":{"start":{"line":486,"column":17},"end":{"line":486,"column":18}},"type":"Identifier","name":"x"},"right":{"range":[16332,16341],"loc":{"start":{"line":486,"column":23},"end":{"line":486,"column":32}},"type":"Identifier","name":"undefined"}},"right":{"range":[16377,16387],"loc":{"start":{"line":487,"column":17},"end":{"line":487,"column":27}},"type":"BinaryExpression","operator":"===","left":{"range":[16377,16378],"loc":{"start":{"line":487,"column":17},"end":{"line":487,"column":18}},"type":"Identifier","name":"x"},"right":{"range":[16383,16387],"loc":{"start":{"line":487,"column":23},"end":{"line":487,"column":27}},"type":"Literal","value":null,"raw":"null"}}},"right":{"range":[16416,16427],"loc":{"start":{"line":488,"column":17},"end":{"line":488,"column":28}},"type":"BinaryExpression","operator":"===","left":{"range":[16416,16417],"loc":{"start":{"line":488,"column":17},"end":{"line":488,"column":18}},"type":"Identifier","name":"x"},"right":{"range":[16422,16427],"loc":{"start":{"line":488,"column":23},"end":{"line":488,"column":28}},"type":"Literal","value":false,"raw":"false"}}},"right":{"range":[16457,16464],"loc":{"start":{"line":489,"column":17},"end":{"line":489,"column":24}},"type":"BinaryExpression","operator":"===","left":{"range":[16457,16458],"loc":{"start":{"line":489,"column":17},"end":{"line":489,"column":18}},"type":"Identifier","name":"x"},"right":{"range":[16463,16464],"loc":{"start":{"line":489,"column":23},"end":{"line":489,"column":24}},"type":"Literal","value":0,"raw":"0"}}},"right":{"range":[16493,16507],"loc":{"start":{"line":490,"column":17},"end":{"line":490,"column":31}},"type":"BinaryExpression","operator":"===","left":{"range":[16493,16501],"loc":{"start":{"line":490,"column":17},"end":{"line":490,"column":25}},"type":"MemberExpression","computed":false,"object":{"range":[16493,16494],"loc":{"start":{"line":490,"column":17},"end":{"line":490,"column":18}},"type":"Identifier","name":"x"},"property":{"range":[16495,16501],"loc":{"start":{"line":490,"column":19},"end":{"line":490,"column":25}},"type":"Identifier","name":"length"}},"right":{"range":[16506,16507],"loc":{"start":{"line":490,"column":30},"end":{"line":490,"column":31}},"type":"Literal","value":0,"raw":"0"}}},"right":{"range":[16633,16683],"loc":{"start":{"line":492,"column":18},"end":{"line":492,"column":68}},"type":"LogicalExpression","operator":"&&","left":{"range":[16633,16657],"loc":{"start":{"line":492,"column":18},"end":{"line":492,"column":42}},"type":"BinaryExpression","operator":"!==","left":{"range":[16633,16643],"loc":{"start":{"line":492,"column":18},"end":{"line":492,"column":28}},"type":"MemberExpression","computed":false,"object":{"range":[16633,16634],"loc":{"start":{"line":492,"column":18},"end":{"line":492,"column":19}},"type":"Identifier","name":"x"},"property":{"range":[16635,16643],"loc":{"start":{"line":492,"column":20},"end":{"line":492,"column":28}},"type":"Identifier","name":"__bool__"}},"right":{"range":[16648,16657],"loc":{"start":{"line":492,"column":33},"end":{"line":492,"column":42}},"type":"Identifier","name":"undefined"}},"right":{"range":[16661,16683],"loc":{"start":{"line":492,"column":46},"end":{"line":492,"column":68}},"type":"BinaryExpression","operator":"===","left":{"range":[16661,16673],"loc":{"start":{"line":492,"column":46},"end":{"line":492,"column":58}},"type":"CallExpression","callee":{"range":[16661,16671],"loc":{"start":{"line":492,"column":46},"end":{"line":492,"column":56}},"type":"MemberExpression","computed":false,"object":{"range":[16661,16662],"loc":{"start":{"line":492,"column":46},"end":{"line":492,"column":47}},"type":"Identifier","name":"x"},"property":{"range":[16663,16671],"loc":{"start":{"line":492,"column":48},"end":{"line":492,"column":56}},"type":"Identifier","name":"__bool__"}},"arguments":[]},"right":{"range":[16678,16683],"loc":{"start":{"line":492,"column":63},"end":{"line":492,"column":68}},"type":"Literal","value":false,"raw":"false"}}}},"right":{"range":[16743,16814],"loc":{"start":{"line":493,"column":18},"end":{"line":493,"column":89}},"type":"LogicalExpression","operator":"&&","left":{"range":[16743,16766],"loc":{"start":{"line":493,"column":18},"end":{"line":493,"column":41}},"type":"BinaryExpression","operator":"!==","left":{"range":[16743,16752],"loc":{"start":{"line":493,"column":18},"end":{"line":493,"column":27}},"type":"MemberExpression","computed":false,"object":{"range":[16743,16744],"loc":{"start":{"line":493,"column":18},"end":{"line":493,"column":19}},"type":"Identifier","name":"x"},"property":{"range":[16745,16752],"loc":{"start":{"line":493,"column":20},"end":{"line":493,"column":27}},"type":"Identifier","name":"__len__"}},"right":{"range":[16757,16766],"loc":{"start":{"line":493,"column":32},"end":{"line":493,"column":41}},"type":"Identifier","name":"undefined"}},"right":{"range":[16771,16813],"loc":{"start":{"line":493,"column":46},"end":{"line":493,"column":88}},"type":"LogicalExpression","operator":"||","left":{"range":[16771,16792],"loc":{"start":{"line":493,"column":46},"end":{"line":493,"column":67}},"type":"BinaryExpression","operator":"===","left":{"range":[16771,16782],"loc":{"start":{"line":493,"column":46},"end":{"line":493,"column":57}},"type":"CallExpression","callee":{"range":[16771,16780],"loc":{"start":{"line":493,"column":46},"end":{"line":493,"column":55}},"type":"MemberExpression","computed":false,"object":{"range":[16771,16772],"loc":{"start":{"line":493,"column":46},"end":{"line":493,"column":47}},"type":"Identifier","name":"x"},"property":{"range":[16773,16780],"loc":{"start":{"line":493,"column":48},"end":{"line":493,"column":55}},"type":"Identifier","name":"__len__"}},"arguments":[]},"right":{"range":[16787,16792],"loc":{"start":{"line":493,"column":62},"end":{"line":493,"column":67}},"type":"Literal","value":false,"raw":"false"}},"right":{"range":[16796,16813],"loc":{"start":{"line":493,"column":71},"end":{"line":493,"column":88}},"type":"BinaryExpression","operator":"===","left":{"range":[16796,16807],"loc":{"start":{"line":493,"column":71},"end":{"line":493,"column":82}},"type":"CallExpression","callee":{"range":[16796,16805],"loc":{"start":{"line":493,"column":71},"end":{"line":493,"column":80}},"type":"MemberExpression","computed":false,"object":{"range":[16796,16797],"loc":{"start":{"line":493,"column":71},"end":{"line":493,"column":72}},"type":"Identifier","name":"x"},"property":{"range":[16798,16805],"loc":{"start":{"line":493,"column":73},"end":{"line":493,"column":80}},"type":"Identifier","name":"__len__"}},"arguments":[]},"right":{"range":[16812,16813],"loc":{"start":{"line":493,"column":87},"end":{"line":493,"column":88}},"type":"Literal","value":0,"raw":"0"}}}}},"prefix":true}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[16872,16983],"loc":{"start":{"line":495,"column":6},"end":{"line":497,"column":7}},"type":"Property","key":{"range":[16872,16875],"loc":{"start":{"line":495,"column":6},"end":{"line":495,"column":9}},"type":"Identifier","name":"chr"},"computed":false,"value":{"range":[16877,16983],"loc":{"start":{"line":495,"column":11},"end":{"line":497,"column":7}},"type":"FunctionExpression","id":null,"params":[{"range":[16886,16887],"loc":{"start":{"line":495,"column":20},"end":{"line":495,"column":21}},"type":"Identifier","name":"i"}],"defaults":[],"body":{"range":[16889,16983],"loc":{"start":{"line":495,"column":23},"end":{"line":497,"column":7}},"type":"BlockStatement","body":[{"range":[16899,16929],"loc":{"start":{"line":496,"column":8},"end":{"line":496,"column":38}},"type":"ReturnStatement","argument":{"range":[16906,16928],"loc":{"start":{"line":496,"column":15},"end":{"line":496,"column":37}},"type":"CallExpression","callee":{"range":[16906,16925],"loc":{"start":{"line":496,"column":15},"end":{"line":496,"column":34}},"type":"MemberExpression","computed":false,"object":{"range":[16906,16912],"loc":{"start":{"line":496,"column":15},"end":{"line":496,"column":21}},"type":"Identifier","name":"String"},"property":{"range":[16913,16925],"loc":{"start":{"line":496,"column":22},"end":{"line":496,"column":34}},"type":"Identifier","name":"fromCharCode"}},"arguments":[{"range":[16926,16927],"loc":{"start":{"line":496,"column":35},"end":{"line":496,"column":36}},"type":"Identifier","name":"i"}]}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[16991,17089],"loc":{"start":{"line":498,"column":6},"end":{"line":500,"column":7}},"type":"Property","key":{"range":[16991,16997],"loc":{"start":{"line":498,"column":6},"end":{"line":498,"column":12}},"type":"Identifier","name":"divmod"},"computed":false,"value":{"range":[16999,17089],"loc":{"start":{"line":498,"column":14},"end":{"line":500,"column":7}},"type":"FunctionExpression","id":null,"params":[{"range":[17008,17009],"loc":{"start":{"line":498,"column":23},"end":{"line":498,"column":24}},"type":"Identifier","name":"a"},{"range":[17011,17012],"loc":{"start":{"line":498,"column":26},"end":{"line":498,"column":27}},"type":"Identifier","name":"b"}],"defaults":[],"body":{"range":[17014,17089],"loc":{"start":{"line":498,"column":29},"end":{"line":500,"column":7}},"type":"BlockStatement","body":[{"range":[17024,17081],"loc":{"start":{"line":499,"column":8},"end":{"line":499,"column":65}},"type":"ReturnStatement","argument":{"range":[17031,17080],"loc":{"start":{"line":499,"column":15},"end":{"line":499,"column":64}},"type":"CallExpression","callee":{"range":[17031,17058],"loc":{"start":{"line":499,"column":15},"end":{"line":499,"column":42}},"type":"MemberExpression","computed":false,"object":{"range":[17031,17052],"loc":{"start":{"line":499,"column":15},"end":{"line":499,"column":36}},"type":"MemberExpression","computed":false,"object":{"range":[17031,17044],"loc":{"start":{"line":499,"column":15},"end":{"line":499,"column":28}},"type":"Identifier","name":"pythonRuntime"},"property":{"range":[17045,17052],"loc":{"start":{"line":499,"column":29},"end":{"line":499,"column":36}},"type":"Identifier","name":"objects"}},"property":{"range":[17053,17058],"loc":{"start":{"line":499,"column":37},"end":{"line":499,"column":42}},"type":"Identifier","name":"tuple"}},"arguments":[{"range":[17059,17074],"loc":{"start":{"line":499,"column":43},"end":{"line":499,"column":58}},"type":"CallExpression","callee":{"range":[17059,17069],"loc":{"start":{"line":499,"column":43},"end":{"line":499,"column":53}},"type":"MemberExpression","computed":false,"object":{"range":[17059,17063],"loc":{"start":{"line":499,"column":43},"end":{"line":499,"column":47}},"type":"Identifier","name":"Math"},"property":{"range":[17064,17069],"loc":{"start":{"line":499,"column":48},"end":{"line":499,"column":53}},"type":"Identifier","name":"floor"}},"arguments":[{"range":[17070,17073],"loc":{"start":{"line":499,"column":54},"end":{"line":499,"column":57}},"type":"BinaryExpression","operator":"/","left":{"range":[17070,17071],"loc":{"start":{"line":499,"column":54},"end":{"line":499,"column":55}},"type":"Identifier","name":"a"},"right":{"range":[17072,17073],"loc":{"start":{"line":499,"column":56},"end":{"line":499,"column":57}},"type":"Identifier","name":"b"}}]},{"range":[17076,17079],"loc":{"start":{"line":499,"column":60},"end":{"line":499,"column":63}},"type":"BinaryExpression","operator":"%","left":{"range":[17076,17077],"loc":{"start":{"line":499,"column":60},"end":{"line":499,"column":61}},"type":"Identifier","name":"a"},"right":{"range":[17078,17079],"loc":{"start":{"line":499,"column":62},"end":{"line":499,"column":63}},"type":"Identifier","name":"b"}}]}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[17097,17340],"loc":{"start":{"line":501,"column":6},"end":{"line":506,"column":7}},"type":"Property","key":{"range":[17097,17106],"loc":{"start":{"line":501,"column":6},"end":{"line":501,"column":15}},"type":"Identifier","name":"enumerate"},"computed":false,"value":{"range":[17108,17340],"loc":{"start":{"line":501,"column":17},"end":{"line":506,"column":7}},"type":"FunctionExpression","id":null,"params":[{"range":[17117,17125],"loc":{"start":{"line":501,"column":26},"end":{"line":501,"column":34}},"type":"Identifier","name":"iterable"},{"range":[17127,17132],"loc":{"start":{"line":501,"column":36},"end":{"line":501,"column":41}},"type":"Identifier","name":"start"}],"defaults":[],"body":{"range":[17134,17340],"loc":{"start":{"line":501,"column":43},"end":{"line":506,"column":7}},"type":"BlockStatement","body":[{"range":[17144,17163],"loc":{"start":{"line":502,"column":8},"end":{"line":502,"column":27}},"type":"ExpressionStatement","expression":{"range":[17144,17162],"loc":{"start":{"line":502,"column":8},"end":{"line":502,"column":26}},"type":"AssignmentExpression","operator":"=","left":{"range":[17144,17149],"loc":{"start":{"line":502,"column":8},"end":{"line":502,"column":13}},"type":"Identifier","name":"start"},"right":{"range":[17152,17162],"loc":{"start":{"line":502,"column":16},"end":{"line":502,"column":26}},"type":"LogicalExpression","operator":"||","left":{"range":[17152,17157],"loc":{"start":{"line":502,"column":16},"end":{"line":502,"column":21}},"type":"Identifier","name":"start"},"right":{"range":[17161,17162],"loc":{"start":{"line":502,"column":25},"end":{"line":502,"column":26}},"type":"Literal","value":0,"raw":"0"}}}},{"range":[17172,17215],"loc":{"start":{"line":503,"column":8},"end":{"line":503,"column":51}},"type":"VariableDeclaration","declarations":[{"range":[17176,17214],"loc":{"start":{"line":503,"column":12},"end":{"line":503,"column":50}},"type":"VariableDeclarator","id":{"range":[17176,17179],"loc":{"start":{"line":503,"column":12},"end":{"line":503,"column":15}},"type":"Identifier","name":"ret"},"init":{"range":[17182,17214],"loc":{"start":{"line":503,"column":18},"end":{"line":503,"column":50}},"type":"NewExpression","callee":{"range":[17186,17212],"loc":{"start":{"line":503,"column":22},"end":{"line":503,"column":48}},"type":"MemberExpression","computed":false,"object":{"range":[17186,17207],"loc":{"start":{"line":503,"column":22},"end":{"line":503,"column":43}},"type":"MemberExpression","computed":false,"object":{"range":[17186,17199],"loc":{"start":{"line":503,"column":22},"end":{"line":503,"column":35}},"type":"Identifier","name":"pythonRuntime"},"property":{"range":[17200,17207],"loc":{"start":{"line":503,"column":36},"end":{"line":503,"column":43}},"type":"Identifier","name":"objects"}},"property":{"range":[17208,17212],"loc":{"start":{"line":503,"column":44},"end":{"line":503,"column":48}},"type":"Identifier","name":"list"}},"arguments":[]}}],"kind":"var"},{"range":[17224,17312],"loc":{"start":{"line":504,"column":8},"end":{"line":504,"column":96}},"type":"ForInStatement","left":{"range":[17229,17234],"loc":{"start":{"line":504,"column":13},"end":{"line":504,"column":18}},"type":"VariableDeclaration","declarations":[{"range":[17233,17234],"loc":{"start":{"line":504,"column":17},"end":{"line":504,"column":18}},"type":"VariableDeclarator","id":{"range":[17233,17234],"loc":{"start":{"line":504,"column":17},"end":{"line":504,"column":18}},"type":"Identifier","name":"i"},"init":null}],"kind":"var"},"right":{"range":[17238,17246],"loc":{"start":{"line":504,"column":22},"end":{"line":504,"column":30}},"type":"Identifier","name":"iterable"},"body":{"range":[17248,17312],"loc":{"start":{"line":504,"column":32},"end":{"line":504,"column":96}},"type":"ExpressionStatement","expression":{"range":[17248,17311],"loc":{"start":{"line":504,"column":32},"end":{"line":504,"column":95}},"type":"CallExpression","callee":{"range":[17248,17256],"loc":{"start":{"line":504,"column":32},"end":{"line":504,"column":40}},"type":"MemberExpression","computed":false,"object":{"range":[17248,17251],"loc":{"start":{"line":504,"column":32},"end":{"line":504,"column":35}},"type":"Identifier","name":"ret"},"property":{"range":[17252,17256],"loc":{"start":{"line":504,"column":36},"end":{"line":504,"column":40}},"type":"Identifier","name":"push"}},"arguments":[{"range":[17257,17310],"loc":{"start":{"line":504,"column":41},"end":{"line":504,"column":94}},"type":"NewExpression","callee":{"range":[17261,17288],"loc":{"start":{"line":504,"column":45},"end":{"line":504,"column":72}},"type":"MemberExpression","computed":false,"object":{"range":[17261,17282],"loc":{"start":{"line":504,"column":45},"end":{"line":504,"column":66}},"type":"MemberExpression","computed":false,"object":{"range":[17261,17274],"loc":{"start":{"line":504,"column":45},"end":{"line":504,"column":58}},"type":"Identifier","name":"pythonRuntime"},"property":{"range":[17275,17282],"loc":{"start":{"line":504,"column":59},"end":{"line":504,"column":66}},"type":"Identifier","name":"objects"}},"property":{"range":[17283,17288],"loc":{"start":{"line":504,"column":67},"end":{"line":504,"column":72}},"type":"Identifier","name":"tuple"}},"arguments":[{"range":[17289,17296],"loc":{"start":{"line":504,"column":73},"end":{"line":504,"column":80}},"type":"UpdateExpression","operator":"++","argument":{"range":[17289,17294],"loc":{"start":{"line":504,"column":73},"end":{"line":504,"column":78}},"type":"Identifier","name":"start"},"prefix":false},{"range":[17298,17309],"loc":{"start":{"line":504,"column":82},"end":{"line":504,"column":93}},"type":"MemberExpression","computed":true,"object":{"range":[17298,17306],"loc":{"start":{"line":504,"column":82},"end":{"line":504,"column":90}},"type":"Identifier","name":"iterable"},"property":{"range":[17307,17308],"loc":{"start":{"line":504,"column":91},"end":{"line":504,"column":92}},"type":"Identifier","name":"i"}}]}]}},"each":false},{"range":[17321,17332],"loc":{"start":{"line":505,"column":8},"end":{"line":505,"column":19}},"type":"ReturnStatement","argument":{"range":[17328,17331],"loc":{"start":{"line":505,"column":15},"end":{"line":505,"column":18}},"type":"Identifier","name":"ret"}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[17348,17585],"loc":{"start":{"line":507,"column":6},"end":{"line":512,"column":7}},"type":"Property","key":{"range":[17348,17354],"loc":{"start":{"line":507,"column":6},"end":{"line":507,"column":12}},"type":"Identifier","name":"filter"},"computed":false,"value":{"range":[17356,17585],"loc":{"start":{"line":507,"column":14},"end":{"line":512,"column":7}},"type":"FunctionExpression","id":null,"params":[{"range":[17365,17367],"loc":{"start":{"line":507,"column":23},"end":{"line":507,"column":25}},"type":"Identifier","name":"fn"},{"range":[17369,17377],"loc":{"start":{"line":507,"column":27},"end":{"line":507,"column":35}},"type":"Identifier","name":"iterable"}],"defaults":[],"body":{"range":[17379,17585],"loc":{"start":{"line":507,"column":37},"end":{"line":512,"column":7}},"type":"BlockStatement","body":[{"range":[17389,17429],"loc":{"start":{"line":508,"column":8},"end":{"line":508,"column":48}},"type":"ExpressionStatement","expression":{"range":[17389,17428],"loc":{"start":{"line":508,"column":8},"end":{"line":508,"column":47}},"type":"AssignmentExpression","operator":"=","left":{"range":[17389,17391],"loc":{"start":{"line":508,"column":8},"end":{"line":508,"column":10}},"type":"Identifier","name":"fn"},"right":{"range":[17394,17428],"loc":{"start":{"line":508,"column":13},"end":{"line":508,"column":47}},"type":"LogicalExpression","operator":"||","left":{"range":[17394,17396],"loc":{"start":{"line":508,"column":13},"end":{"line":508,"column":15}},"type":"Identifier","name":"fn"},"right":{"range":[17400,17428],"loc":{"start":{"line":508,"column":19},"end":{"line":508,"column":47}},"type":"FunctionExpression","id":null,"params":[],"defaults":[],"body":{"range":[17412,17428],"loc":{"start":{"line":508,"column":31},"end":{"line":508,"column":47}},"type":"BlockStatement","body":[{"range":[17414,17426],"loc":{"start":{"line":508,"column":33},"end":{"line":508,"column":45}},"type":"ReturnStatement","argument":{"range":[17421,17425],"loc":{"start":{"line":508,"column":40},"end":{"line":508,"column":44}},"type":"Literal","value":true,"raw":"true"}}]},"generator":false,"expression":false}}}},{"range":[17438,17481],"loc":{"start":{"line":509,"column":8},"end":{"line":509,"column":51}},"type":"VariableDeclaration","declarations":[{"range":[17442,17480],"loc":{"start":{"line":509,"column":12},"end":{"line":509,"column":50}},"type":"VariableDeclarator","id":{"range":[17442,17445],"loc":{"start":{"line":509,"column":12},"end":{"line":509,"column":15}},"type":"Identifier","name":"ret"},"init":{"range":[17448,17480],"loc":{"start":{"line":509,"column":18},"end":{"line":509,"column":50}},"type":"NewExpression","callee":{"range":[17452,17478],"loc":{"start":{"line":509,"column":22},"end":{"line":509,"column":48}},"type":"MemberExpression","computed":false,"object":{"range":[17452,17473],"loc":{"start":{"line":509,"column":22},"end":{"line":509,"column":43}},"type":"MemberExpression","computed":false,"object":{"range":[17452,17465],"loc":{"start":{"line":509,"column":22},"end":{"line":509,"column":35}},"type":"Identifier","name":"pythonRuntime"},"property":{"range":[17466,17473],"loc":{"start":{"line":509,"column":36},"end":{"line":509,"column":43}},"type":"Identifier","name":"objects"}},"property":{"range":[17474,17478],"loc":{"start":{"line":509,"column":44},"end":{"line":509,"column":48}},"type":"Identifier","name":"list"}},"arguments":[]}}],"kind":"var"},{"range":[17490,17557],"loc":{"start":{"line":510,"column":8},"end":{"line":510,"column":75}},"type":"ForInStatement","left":{"range":[17495,17500],"loc":{"start":{"line":510,"column":13},"end":{"line":510,"column":18}},"type":"VariableDeclaration","declarations":[{"range":[17499,17500],"loc":{"start":{"line":510,"column":17},"end":{"line":510,"column":18}},"type":"VariableDeclarator","id":{"range":[17499,17500],"loc":{"start":{"line":510,"column":17},"end":{"line":510,"column":18}},"type":"Identifier","name":"i"},"init":null}],"kind":"var"},"right":{"range":[17504,17512],"loc":{"start":{"line":510,"column":22},"end":{"line":510,"column":30}},"type":"Identifier","name":"iterable"},"body":{"range":[17514,17557],"loc":{"start":{"line":510,"column":32},"end":{"line":510,"column":75}},"type":"IfStatement","test":{"range":[17518,17533],"loc":{"start":{"line":510,"column":36},"end":{"line":510,"column":51}},"type":"CallExpression","callee":{"range":[17518,17520],"loc":{"start":{"line":510,"column":36},"end":{"line":510,"column":38}},"type":"Identifier","name":"fn"},"arguments":[{"range":[17521,17532],"loc":{"start":{"line":510,"column":39},"end":{"line":510,"column":50}},"type":"MemberExpression","computed":true,"object":{"range":[17521,17529],"loc":{"start":{"line":510,"column":39},"end":{"line":510,"column":47}},"type":"Identifier","name":"iterable"},"property":{"range":[17530,17531],"loc":{"start":{"line":510,"column":48},"end":{"line":510,"column":49}},"type":"Identifier","name":"i"}}]},"consequent":{"range":[17535,17557],"loc":{"start":{"line":510,"column":53},"end":{"line":510,"column":75}},"type":"ExpressionStatement","expression":{"range":[17535,17556],"loc":{"start":{"line":510,"column":53},"end":{"line":510,"column":74}},"type":"CallExpression","callee":{"range":[17535,17543],"loc":{"start":{"line":510,"column":53},"end":{"line":510,"column":61}},"type":"MemberExpression","computed":false,"object":{"range":[17535,17538],"loc":{"start":{"line":510,"column":53},"end":{"line":510,"column":56}},"type":"Identifier","name":"ret"},"property":{"range":[17539,17543],"loc":{"start":{"line":510,"column":57},"end":{"line":510,"column":61}},"type":"Identifier","name":"push"}},"arguments":[{"range":[17544,17555],"loc":{"start":{"line":510,"column":62},"end":{"line":510,"column":73}},"type":"MemberExpression","computed":true,"object":{"range":[17544,17552],"loc":{"start":{"line":510,"column":62},"end":{"line":510,"column":70}},"type":"Identifier","name":"iterable"},"property":{"range":[17553,17554],"loc":{"start":{"line":510,"column":71},"end":{"line":510,"column":72}},"type":"Identifier","name":"i"}}]}},"alternate":null},"each":false},{"range":[17566,17577],"loc":{"start":{"line":511,"column":8},"end":{"line":511,"column":19}},"type":"ReturnStatement","argument":{"range":[17573,17576],"loc":{"start":{"line":511,"column":15},"end":{"line":511,"column":18}},"type":"Identifier","name":"ret"}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[17593,18322],"loc":{"start":{"line":513,"column":6},"end":{"line":526,"column":7}},"type":"Property","key":{"range":[17593,17598],"loc":{"start":{"line":513,"column":6},"end":{"line":513,"column":11}},"type":"Identifier","name":"float"},"computed":false,"value":{"range":[17600,18322],"loc":{"start":{"line":513,"column":13},"end":{"line":526,"column":7}},"type":"FunctionExpression","id":null,"params":[{"range":[17609,17610],"loc":{"start":{"line":513,"column":22},"end":{"line":513,"column":23}},"type":"Identifier","name":"x"}],"defaults":[],"body":{"range":[17612,18322],"loc":{"start":{"line":513,"column":25},"end":{"line":526,"column":7}},"type":"BlockStatement","body":[{"range":[17622,18314],"loc":{"start":{"line":514,"column":8},"end":{"line":525,"column":9}},"type":"IfStatement","test":{"range":[17626,17641],"loc":{"start":{"line":514,"column":12},"end":{"line":514,"column":27}},"type":"BinaryExpression","operator":"===","left":{"range":[17626,17627],"loc":{"start":{"line":514,"column":12},"end":{"line":514,"column":13}},"type":"Identifier","name":"x"},"right":{"range":[17632,17641],"loc":{"start":{"line":514,"column":18},"end":{"line":514,"column":27}},"type":"Identifier","name":"undefined"}},"consequent":{"range":[17643,17654],"loc":{"start":{"line":514,"column":29},"end":{"line":514,"column":40}},"type":"ReturnStatement","argument":{"range":[17650,17653],"loc":{"start":{"line":514,"column":36},"end":{"line":514,"column":39}},"type":"Literal","value":0,"raw":"0.0"}},"alternate":{"range":[17668,18314],"loc":{"start":{"line":515,"column":13},"end":{"line":525,"column":9}},"type":"IfStatement","test":{"range":[17672,17692],"loc":{"start":{"line":515,"column":17},"end":{"line":515,"column":37}},"type":"BinaryExpression","operator":"==","left":{"range":[17672,17680],"loc":{"start":{"line":515,"column":17},"end":{"line":515,"column":25}},"type":"UnaryExpression","operator":"typeof","argument":{"range":[17679,17680],"loc":{"start":{"line":515,"column":24},"end":{"line":515,"column":25}},"type":"Identifier","name":"x"},"prefix":true},"right":{"range":[17684,17692],"loc":{"start":{"line":515,"column":29},"end":{"line":515,"column":37}},"type":"Literal","value":"string","raw":"\"string\""}},"consequent":{"range":[17694,17955],"loc":{"start":{"line":515,"column":39},"end":{"line":520,"column":9}},"type":"BlockStatement","body":[{"range":[17730,17757],"loc":{"start":{"line":516,"column":10},"end":{"line":516,"column":37}},"type":"ExpressionStatement","expression":{"range":[17730,17756],"loc":{"start":{"line":516,"column":10},"end":{"line":516,"column":36}},"type":"AssignmentExpression","operator":"=","left":{"range":[17730,17731],"loc":{"start":{"line":516,"column":10},"end":{"line":516,"column":11}},"type":"Identifier","name":"x"},"right":{"range":[17734,17756],"loc":{"start":{"line":516,"column":14},"end":{"line":516,"column":36}},"type":"CallExpression","callee":{"range":[17734,17754],"loc":{"start":{"line":516,"column":14},"end":{"line":516,"column":34}},"type":"MemberExpression","computed":false,"object":{"range":[17734,17742],"loc":{"start":{"line":516,"column":14},"end":{"line":516,"column":22}},"type":"CallExpression","callee":{"range":[17734,17740],"loc":{"start":{"line":516,"column":14},"end":{"line":516,"column":20}},"type":"MemberExpression","computed":false,"object":{"range":[17734,17735],"loc":{"start":{"line":516,"column":14},"end":{"line":516,"column":15}},"type":"Identifier","name":"x"},"property":{"range":[17736,17740],"loc":{"start":{"line":516,"column":16},"end":{"line":516,"column":20}},"type":"Identifier","name":"trim"}},"arguments":[]},"property":{"range":[17743,17754],"loc":{"start":{"line":516,"column":23},"end":{"line":516,"column":34}},"type":"Identifier","name":"toLowerCase"}},"arguments":[]}}},{"range":[17768,17945],"loc":{"start":{"line":517,"column":10},"end":{"line":519,"column":36}},"type":"IfStatement","test":{"range":[17772,17812],"loc":{"start":{"line":517,"column":14},"end":{"line":517,"column":54}},"type":"BinaryExpression","operator":"!==","left":{"range":[17772,17803],"loc":{"start":{"line":517,"column":14},"end":{"line":517,"column":45}},"type":"CallExpression","callee":{"range":[17772,17800],"loc":{"start":{"line":517,"column":14},"end":{"line":517,"column":42}},"type":"MemberExpression","computed":false,"object":{"range":[17773,17794],"loc":{"start":{"line":517,"column":15},"end":{"line":517,"column":36}},"type":"Literal","value":"/^[+-]?inf(inity)?$/i","raw":"/^[+-]?inf(inity)?$/i","regex":{"pattern":"^[+-]?inf(inity)?$","flags":"i"}},"property":{"range":[17796,17800],"loc":{"start":{"line":517,"column":38},"end":{"line":517,"column":42}},"type":"Identifier","name":"exec"}},"arguments":[{"range":[17801,17802],"loc":{"start":{"line":517,"column":43},"end":{"line":517,"column":44}},"type":"Identifier","name":"x"}]},"right":{"range":[17808,17812],"loc":{"start":{"line":517,"column":50},"end":{"line":517,"column":54}},"type":"Literal","value":null,"raw":"null"}},"consequent":{"range":[17814,17848],"loc":{"start":{"line":517,"column":56},"end":{"line":517,"column":90}},"type":"ReturnStatement","argument":{"range":[17821,17847],"loc":{"start":{"line":517,"column":63},"end":{"line":517,"column":89}},"type":"BinaryExpression","operator":"*","left":{"range":[17821,17829],"loc":{"start":{"line":517,"column":63},"end":{"line":517,"column":71}},"type":"Identifier","name":"Infinity"},"right":{"range":[17831,17846],"loc":{"start":{"line":517,"column":73},"end":{"line":517,"column":88}},"type":"ConditionalExpression","test":{"range":[17831,17841],"loc":{"start":{"line":517,"column":73},"end":{"line":517,"column":83}},"type":"BinaryExpression","operator":"===","left":{"range":[17831,17835],"loc":{"start":{"line":517,"column":73},"end":{"line":517,"column":77}},"type":"MemberExpression","computed":true,"object":{"range":[17831,17832],"loc":{"start":{"line":517,"column":73},"end":{"line":517,"column":74}},"type":"Identifier","name":"x"},"property":{"range":[17833,17834],"loc":{"start":{"line":517,"column":75},"end":{"line":517,"column":76}},"type":"Literal","value":0,"raw":"0"}},"right":{"range":[17838,17841],"loc":{"start":{"line":517,"column":80},"end":{"line":517,"column":83}},"type":"Literal","value":"-","raw":"\"-\""}},"consequent":{"range":[17842,17844],"loc":{"start":{"line":517,"column":84},"end":{"line":517,"column":86}},"type":"UnaryExpression","operator":"-","argument":{"range":[17843,17844],"loc":{"start":{"line":517,"column":85},"end":{"line":517,"column":86}},"type":"Literal","value":1,"raw":"1"},"prefix":true},"alternate":{"range":[17845,17846],"loc":{"start":{"line":517,"column":87},"end":{"line":517,"column":88}},"type":"Literal","value":1,"raw":"1"}}}},"alternate":{"range":[17864,17945],"loc":{"start":{"line":518,"column":15},"end":{"line":519,"column":36}},"type":"IfStatement","test":{"range":[17868,17895],"loc":{"start":{"line":518,"column":19},"end":{"line":518,"column":46}},"type":"BinaryExpression","operator":"!==","left":{"range":[17868,17886],"loc":{"start":{"line":518,"column":19},"end":{"line":518,"column":37}},"type":"CallExpression","callee":{"range":[17868,17883],"loc":{"start":{"line":518,"column":19},"end":{"line":518,"column":34}},"type":"MemberExpression","computed":false,"object":{"range":[17869,17877],"loc":{"start":{"line":518,"column":20},"end":{"line":518,"column":28}},"type":"Literal","value":"/^nan$/i","raw":"/^nan$/i","regex":{"pattern":"^nan$","flags":"i"}},"property":{"range":[17879,17883],"loc":{"start":{"line":518,"column":30},"end":{"line":518,"column":34}},"type":"Identifier","name":"exec"}},"arguments":[{"range":[17884,17885],"loc":{"start":{"line":518,"column":35},"end":{"line":518,"column":36}},"type":"Identifier","name":"x"}]},"right":{"range":[17891,17895],"loc":{"start":{"line":518,"column":42},"end":{"line":518,"column":46}},"type":"Literal","value":null,"raw":"null"}},"consequent":{"range":[17897,17908],"loc":{"start":{"line":518,"column":48},"end":{"line":518,"column":59}},"type":"ReturnStatement","argument":{"range":[17904,17907],"loc":{"start":{"line":518,"column":55},"end":{"line":518,"column":58}},"type":"Identifier","name":"NaN"}},"alternate":{"range":[17924,17945],"loc":{"start":{"line":519,"column":15},"end":{"line":519,"column":36}},"type":"ReturnStatement","argument":{"range":[17931,17944],"loc":{"start":{"line":519,"column":22},"end":{"line":519,"column":35}},"type":"CallExpression","callee":{"range":[17931,17941],"loc":{"start":{"line":519,"column":22},"end":{"line":519,"column":32}},"type":"Identifier","name":"parseFloat"},"arguments":[{"range":[17942,17943],"loc":{"start":{"line":519,"column":33},"end":{"line":519,"column":34}},"type":"Identifier","name":"x"}]}}}}]},"alternate":{"range":[17961,18314],"loc":{"start":{"line":520,"column":15},"end":{"line":525,"column":9}},"type":"IfStatement","test":{"range":[17965,17985],"loc":{"start":{"line":520,"column":19},"end":{"line":520,"column":39}},"type":"BinaryExpression","operator":"==","left":{"range":[17965,17973],"loc":{"start":{"line":520,"column":19},"end":{"line":520,"column":27}},"type":"UnaryExpression","operator":"typeof","argument":{"range":[17972,17973],"loc":{"start":{"line":520,"column":26},"end":{"line":520,"column":27}},"type":"Identifier","name":"x"},"prefix":true},"right":{"range":[17977,17985],"loc":{"start":{"line":520,"column":31},"end":{"line":520,"column":39}},"type":"Literal","value":"number","raw":"\"number\""}},"consequent":{"range":[17987,18115],"loc":{"start":{"line":520,"column":41},"end":{"line":522,"column":9}},"type":"BlockStatement","body":[{"range":[18023,18032],"loc":{"start":{"line":521,"column":10},"end":{"line":521,"column":19}},"type":"ReturnStatement","argument":{"range":[18030,18031],"loc":{"start":{"line":521,"column":17},"end":{"line":521,"column":18}},"type":"Identifier","name":"x"}}]},"alternate":{"range":[18121,18314],"loc":{"start":{"line":522,"column":15},"end":{"line":525,"column":9}},"type":"BlockStatement","body":[{"range":[18133,18213],"loc":{"start":{"line":523,"column":10},"end":{"line":524,"column":27}},"type":"IfStatement","test":{"range":[18137,18162],"loc":{"start":{"line":523,"column":14},"end":{"line":523,"column":39}},"type":"BinaryExpression","operator":"!==","left":{"range":[18137,18148],"loc":{"start":{"line":523,"column":14},"end":{"line":523,"column":25}},"type":"MemberExpression","computed":false,"object":{"range":[18137,18138],"loc":{"start":{"line":523,"column":14},"end":{"line":523,"column":15}},"type":"Identifier","name":"x"},"property":{"range":[18139,18148],"loc":{"start":{"line":523,"column":16},"end":{"line":523,"column":25}},"type":"Identifier","name":"__float__"}},"right":{"range":[18153,18162],"loc":{"start":{"line":523,"column":30},"end":{"line":523,"column":39}},"type":"Identifier","name":"undefined"}},"consequent":{"range":[18164,18185],"loc":{"start":{"line":523,"column":41},"end":{"line":523,"column":62}},"type":"ReturnStatement","argument":{"range":[18171,18184],"loc":{"start":{"line":523,"column":48},"end":{"line":523,"column":61}},"type":"CallExpression","callee":{"range":[18171,18182],"loc":{"start":{"line":523,"column":48},"end":{"line":523,"column":59}},"type":"MemberExpression","computed":false,"object":{"range":[18171,18172],"loc":{"start":{"line":523,"column":48},"end":{"line":523,"column":49}},"type":"Identifier","name":"x"},"property":{"range":[18173,18182],"loc":{"start":{"line":523,"column":50},"end":{"line":523,"column":59}},"type":"Identifier","name":"__float__"}},"arguments":[]}},"alternate":{"range":[18201,18213],"loc":{"start":{"line":524,"column":15},"end":{"line":524,"column":27}},"type":"ReturnStatement","argument":{"range":[18208,18212],"loc":{"start":{"line":524,"column":22},"end":{"line":524,"column":26}},"type":"Literal","value":null,"raw":"null"}}}]}}}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[18330,18387],"loc":{"start":{"line":527,"column":6},"end":{"line":529,"column":7}},"type":"Property","key":{"range":[18330,18333],"loc":{"start":{"line":527,"column":6},"end":{"line":527,"column":9}},"type":"Identifier","name":"hex"},"computed":false,"value":{"range":[18335,18387],"loc":{"start":{"line":527,"column":11},"end":{"line":529,"column":7}},"type":"FunctionExpression","id":null,"params":[{"range":[18344,18345],"loc":{"start":{"line":527,"column":20},"end":{"line":527,"column":21}},"type":"Identifier","name":"x"}],"defaults":[],"body":{"range":[18347,18387],"loc":{"start":{"line":527,"column":23},"end":{"line":529,"column":7}},"type":"BlockStatement","body":[{"range":[18357,18379],"loc":{"start":{"line":528,"column":8},"end":{"line":528,"column":30}},"type":"ReturnStatement","argument":{"range":[18364,18378],"loc":{"start":{"line":528,"column":15},"end":{"line":528,"column":29}},"type":"CallExpression","callee":{"range":[18364,18374],"loc":{"start":{"line":528,"column":15},"end":{"line":528,"column":25}},"type":"MemberExpression","computed":false,"object":{"range":[18364,18365],"loc":{"start":{"line":528,"column":15},"end":{"line":528,"column":16}},"type":"Identifier","name":"x"},"property":{"range":[18366,18374],"loc":{"start":{"line":528,"column":17},"end":{"line":528,"column":25}},"type":"Identifier","name":"toString"}},"arguments":[{"range":[18375,18377],"loc":{"start":{"line":528,"column":26},"end":{"line":528,"column":28}},"type":"Literal","value":16,"raw":"16"}]}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[18395,18450],"loc":{"start":{"line":530,"column":6},"end":{"line":532,"column":7}},"type":"Property","key":{"range":[18395,18398],"loc":{"start":{"line":530,"column":6},"end":{"line":530,"column":9}},"type":"Identifier","name":"int"},"computed":false,"value":{"range":[18400,18450],"loc":{"start":{"line":530,"column":11},"end":{"line":532,"column":7}},"type":"FunctionExpression","id":null,"params":[{"range":[18410,18411],"loc":{"start":{"line":530,"column":21},"end":{"line":530,"column":22}},"type":"Identifier","name":"s"}],"defaults":[],"body":{"range":[18413,18450],"loc":{"start":{"line":530,"column":24},"end":{"line":532,"column":7}},"type":"BlockStatement","body":[{"range":[18423,18442],"loc":{"start":{"line":531,"column":8},"end":{"line":531,"column":27}},"type":"ReturnStatement","argument":{"range":[18430,18441],"loc":{"start":{"line":531,"column":15},"end":{"line":531,"column":26}},"type":"CallExpression","callee":{"range":[18430,18438],"loc":{"start":{"line":531,"column":15},"end":{"line":531,"column":23}},"type":"Identifier","name":"parseInt"},"arguments":[{"range":[18439,18440],"loc":{"start":{"line":531,"column":24},"end":{"line":531,"column":25}},"type":"Identifier","name":"s"}]}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[18458,18510],"loc":{"start":{"line":533,"column":6},"end":{"line":535,"column":7}},"type":"Property","key":{"range":[18458,18461],"loc":{"start":{"line":533,"column":6},"end":{"line":533,"column":9}},"type":"Identifier","name":"len"},"computed":false,"value":{"range":[18463,18510],"loc":{"start":{"line":533,"column":11},"end":{"line":535,"column":7}},"type":"FunctionExpression","id":null,"params":[{"range":[18473,18474],"loc":{"start":{"line":533,"column":21},"end":{"line":533,"column":22}},"type":"Identifier","name":"o"}],"defaults":[],"body":{"range":[18476,18510],"loc":{"start":{"line":533,"column":24},"end":{"line":535,"column":7}},"type":"BlockStatement","body":[{"range":[18486,18502],"loc":{"start":{"line":534,"column":8},"end":{"line":534,"column":24}},"type":"ReturnStatement","argument":{"range":[18493,18501],"loc":{"start":{"line":534,"column":15},"end":{"line":534,"column":23}},"type":"MemberExpression","computed":false,"object":{"range":[18493,18494],"loc":{"start":{"line":534,"column":15},"end":{"line":534,"column":16}},"type":"Identifier","name":"o"},"property":{"range":[18495,18501],"loc":{"start":{"line":534,"column":17},"end":{"line":534,"column":23}},"type":"Identifier","name":"length"}}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[18518,18935],"loc":{"start":{"line":536,"column":6},"end":{"line":543,"column":7}},"type":"Property","key":{"range":[18518,18522],"loc":{"start":{"line":536,"column":6},"end":{"line":536,"column":10}},"type":"Identifier","name":"list"},"computed":false,"value":{"range":[18524,18935],"loc":{"start":{"line":536,"column":12},"end":{"line":543,"column":7}},"type":"FunctionExpression","id":null,"params":[{"range":[18534,18542],"loc":{"start":{"line":536,"column":22},"end":{"line":536,"column":30}},"type":"Identifier","name":"iterable"}],"defaults":[],"body":{"range":[18544,18935],"loc":{"start":{"line":536,"column":32},"end":{"line":543,"column":7}},"type":"BlockStatement","body":[{"range":[18554,18597],"loc":{"start":{"line":537,"column":8},"end":{"line":537,"column":51}},"type":"VariableDeclaration","declarations":[{"range":[18558,18596],"loc":{"start":{"line":537,"column":12},"end":{"line":537,"column":50}},"type":"VariableDeclarator","id":{"range":[18558,18561],"loc":{"start":{"line":537,"column":12},"end":{"line":537,"column":15}},"type":"Identifier","name":"ret"},"init":{"range":[18564,18596],"loc":{"start":{"line":537,"column":18},"end":{"line":537,"column":50}},"type":"NewExpression","callee":{"range":[18568,18594],"loc":{"start":{"line":537,"column":22},"end":{"line":537,"column":48}},"type":"MemberExpression","computed":false,"object":{"range":[18568,18589],"loc":{"start":{"line":537,"column":22},"end":{"line":537,"column":43}},"type":"MemberExpression","computed":false,"object":{"range":[18568,18581],"loc":{"start":{"line":537,"column":22},"end":{"line":537,"column":35}},"type":"Identifier","name":"pythonRuntime"},"property":{"range":[18582,18589],"loc":{"start":{"line":537,"column":36},"end":{"line":537,"column":43}},"type":"Identifier","name":"objects"}},"property":{"range":[18590,18594],"loc":{"start":{"line":537,"column":44},"end":{"line":537,"column":48}},"type":"Identifier","name":"list"}},"arguments":[]}}],"kind":"var"},{"range":[18606,18646],"loc":{"start":{"line":538,"column":8},"end":{"line":538,"column":48}},"type":"IfStatement","test":{"range":[18611,18632],"loc":{"start":{"line":538,"column":13},"end":{"line":538,"column":34}},"type":"BinaryExpression","operator":"==","left":{"range":[18611,18627],"loc":{"start":{"line":538,"column":13},"end":{"line":538,"column":29}},"type":"MemberExpression","computed":false,"object":{"range":[18611,18620],"loc":{"start":{"line":538,"column":13},"end":{"line":538,"column":22}},"type":"Identifier","name":"arguments"},"property":{"range":[18621,18627],"loc":{"start":{"line":538,"column":23},"end":{"line":538,"column":29}},"type":"Identifier","name":"length"}},"right":{"range":[18631,18632],"loc":{"start":{"line":538,"column":33},"end":{"line":538,"column":34}},"type":"Literal","value":0,"raw":"0"}},"consequent":{"range":[18635,18646],"loc":{"start":{"line":538,"column":37},"end":{"line":538,"column":48}},"type":"ReturnStatement","argument":{"range":[18642,18645],"loc":{"start":{"line":538,"column":44},"end":{"line":538,"column":47}},"type":"Identifier","name":"ret"}},"alternate":null},{"range":[18655,18771],"loc":{"start":{"line":539,"column":8},"end":{"line":539,"column":124}},"type":"IfStatement","test":{"range":[18660,18680],"loc":{"start":{"line":539,"column":13},"end":{"line":539,"column":33}},"type":"BinaryExpression","operator":">","left":{"range":[18660,18676],"loc":{"start":{"line":539,"column":13},"end":{"line":539,"column":29}},"type":"MemberExpression","computed":false,"object":{"range":[18660,18669],"loc":{"start":{"line":539,"column":13},"end":{"line":539,"column":22}},"type":"Identifier","name":"arguments"},"property":{"range":[18670,18676],"loc":{"start":{"line":539,"column":23},"end":{"line":539,"column":29}},"type":"Identifier","name":"length"}},"right":{"range":[18679,18680],"loc":{"start":{"line":539,"column":32},"end":{"line":539,"column":33}},"type":"Literal","value":1,"raw":"1"}},"consequent":{"range":[18683,18771],"loc":{"start":{"line":539,"column":36},"end":{"line":539,"column":124}},"type":"ThrowStatement","argument":{"range":[18689,18770],"loc":{"start":{"line":539,"column":42},"end":{"line":539,"column":123}},"type":"NewExpression","callee":{"range":[18693,18702],"loc":{"start":{"line":539,"column":46},"end":{"line":539,"column":55}},"type":"Identifier","name":"TypeError"},"arguments":[{"range":[18703,18769],"loc":{"start":{"line":539,"column":56},"end":{"line":539,"column":122}},"type":"BinaryExpression","operator":"+","left":{"range":[18703,18757],"loc":{"start":{"line":539,"column":56},"end":{"line":539,"column":110}},"type":"BinaryExpression","operator":"+","left":{"range":[18703,18738],"loc":{"start":{"line":539,"column":56},"end":{"line":539,"column":91}},"type":"Literal","value":"list() takes at most 1 argument (","raw":"'list() takes at most 1 argument ('"},"right":{"range":[18741,18757],"loc":{"start":{"line":539,"column":94},"end":{"line":539,"column":110}},"type":"MemberExpression","computed":false,"object":{"range":[18741,18750],"loc":{"start":{"line":539,"column":94},"end":{"line":539,"column":103}},"type":"Identifier","name":"arguments"},"property":{"range":[18751,18757],"loc":{"start":{"line":539,"column":104},"end":{"line":539,"column":110}},"type":"Identifier","name":"length"}}},"right":{"range":[18760,18769],"loc":{"start":{"line":539,"column":113},"end":{"line":539,"column":122}},"type":"Literal","value":" given)","raw":"' given)'"}}]}},"alternate":null},{"range":[18780,18907],"loc":{"start":{"line":540,"column":8},"end":{"line":541,"column":49}},"type":"IfStatement","test":{"range":[18784,18809],"loc":{"start":{"line":540,"column":12},"end":{"line":540,"column":37}},"type":"BinaryExpression","operator":"instanceof","left":{"range":[18784,18792],"loc":{"start":{"line":540,"column":12},"end":{"line":540,"column":20}},"type":"Identifier","name":"iterable"},"right":{"range":[18804,18809],"loc":{"start":{"line":540,"column":32},"end":{"line":540,"column":37}},"type":"Identifier","name":"Array"}},"consequent":{"range":[18811,18857],"loc":{"start":{"line":540,"column":39},"end":{"line":540,"column":85}},"type":"ForInStatement","left":{"range":[18816,18821],"loc":{"start":{"line":540,"column":44},"end":{"line":540,"column":49}},"type":"VariableDeclaration","declarations":[{"range":[18820,18821],"loc":{"start":{"line":540,"column":48},"end":{"line":540,"column":49}},"type":"VariableDeclarator","id":{"range":[18820,18821],"loc":{"start":{"line":540,"column":48},"end":{"line":540,"column":49}},"type":"Identifier","name":"i"},"init":null}],"kind":"var"},"right":{"range":[18825,18833],"loc":{"start":{"line":540,"column":53},"end":{"line":540,"column":61}},"type":"Identifier","name":"iterable"},"body":{"range":[18835,18857],"loc":{"start":{"line":540,"column":63},"end":{"line":540,"column":85}},"type":"ExpressionStatement","expression":{"range":[18835,18856],"loc":{"start":{"line":540,"column":63},"end":{"line":540,"column":84}},"type":"CallExpression","callee":{"range":[18835,18843],"loc":{"start":{"line":540,"column":63},"end":{"line":540,"column":71}},"type":"MemberExpression","computed":false,"object":{"range":[18835,18838],"loc":{"start":{"line":540,"column":63},"end":{"line":540,"column":66}},"type":"Identifier","name":"ret"},"property":{"range":[18839,18843],"loc":{"start":{"line":540,"column":67},"end":{"line":540,"column":71}},"type":"Identifier","name":"push"}},"arguments":[{"range":[18844,18855],"loc":{"start":{"line":540,"column":72},"end":{"line":540,"column":83}},"type":"MemberExpression","computed":true,"object":{"range":[18844,18852],"loc":{"start":{"line":540,"column":72},"end":{"line":540,"column":80}},"type":"Identifier","name":"iterable"},"property":{"range":[18853,18854],"loc":{"start":{"line":540,"column":81},"end":{"line":540,"column":82}},"type":"Identifier","name":"i"}}]}},"each":false},"alternate":{"range":[18871,18907],"loc":{"start":{"line":541,"column":13},"end":{"line":541,"column":49}},"type":"ForInStatement","left":{"range":[18876,18881],"loc":{"start":{"line":541,"column":18},"end":{"line":541,"column":23}},"type":"VariableDeclaration","declarations":[{"range":[18880,18881],"loc":{"start":{"line":541,"column":22},"end":{"line":541,"column":23}},"type":"VariableDeclarator","id":{"range":[18880,18881],"loc":{"start":{"line":541,"column":22},"end":{"line":541,"column":23}},"type":"Identifier","name":"i"},"init":null}],"kind":"var"},"right":{"range":[18885,18893],"loc":{"start":{"line":541,"column":27},"end":{"line":541,"column":35}},"type":"Identifier","name":"iterable"},"body":{"range":[18895,18907],"loc":{"start":{"line":541,"column":37},"end":{"line":541,"column":49}},"type":"ExpressionStatement","expression":{"range":[18895,18906],"loc":{"start":{"line":541,"column":37},"end":{"line":541,"column":48}},"type":"CallExpression","callee":{"range":[18895,18903],"loc":{"start":{"line":541,"column":37},"end":{"line":541,"column":45}},"type":"MemberExpression","computed":false,"object":{"range":[18895,18898],"loc":{"start":{"line":541,"column":37},"end":{"line":541,"column":40}},"type":"Identifier","name":"ret"},"property":{"range":[18899,18903],"loc":{"start":{"line":541,"column":41},"end":{"line":541,"column":45}},"type":"Identifier","name":"push"}},"arguments":[{"range":[18904,18905],"loc":{"start":{"line":541,"column":46},"end":{"line":541,"column":47}},"type":"Identifier","name":"i"}]}},"each":false}},{"range":[18916,18927],"loc":{"start":{"line":542,"column":8},"end":{"line":542,"column":19}},"type":"ReturnStatement","argument":{"range":[18923,18926],"loc":{"start":{"line":542,"column":15},"end":{"line":542,"column":18}},"type":"Identifier","name":"ret"}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[18943,19164],"loc":{"start":{"line":544,"column":6},"end":{"line":549,"column":7}},"type":"Property","key":{"range":[18943,18946],"loc":{"start":{"line":544,"column":6},"end":{"line":544,"column":9}},"type":"Identifier","name":"map"},"computed":false,"value":{"range":[18948,19164],"loc":{"start":{"line":544,"column":11},"end":{"line":549,"column":7}},"type":"FunctionExpression","id":null,"params":[{"range":[18957,18959],"loc":{"start":{"line":544,"column":20},"end":{"line":544,"column":22}},"type":"Identifier","name":"fn"},{"range":[18961,18969],"loc":{"start":{"line":544,"column":24},"end":{"line":544,"column":32}},"type":"Identifier","name":"iterable"}],"defaults":[],"body":{"range":[18971,19164],"loc":{"start":{"line":544,"column":34},"end":{"line":549,"column":7}},"type":"BlockStatement","body":[{"range":[19034,19077],"loc":{"start":{"line":546,"column":8},"end":{"line":546,"column":51}},"type":"VariableDeclaration","declarations":[{"range":[19038,19076],"loc":{"start":{"line":546,"column":12},"end":{"line":546,"column":50}},"type":"VariableDeclarator","id":{"range":[19038,19041],"loc":{"start":{"line":546,"column":12},"end":{"line":546,"column":15}},"type":"Identifier","name":"ret"},"init":{"range":[19044,19076],"loc":{"start":{"line":546,"column":18},"end":{"line":546,"column":50}},"type":"NewExpression","callee":{"range":[19048,19074],"loc":{"start":{"line":546,"column":22},"end":{"line":546,"column":48}},"type":"MemberExpression","computed":false,"object":{"range":[19048,19069],"loc":{"start":{"line":546,"column":22},"end":{"line":546,"column":43}},"type":"MemberExpression","computed":false,"object":{"range":[19048,19061],"loc":{"start":{"line":546,"column":22},"end":{"line":546,"column":35}},"type":"Identifier","name":"pythonRuntime"},"property":{"range":[19062,19069],"loc":{"start":{"line":546,"column":36},"end":{"line":546,"column":43}},"type":"Identifier","name":"objects"}},"property":{"range":[19070,19074],"loc":{"start":{"line":546,"column":44},"end":{"line":546,"column":48}},"type":"Identifier","name":"list"}},"arguments":[]}}],"kind":"var"},{"range":[19086,19136],"loc":{"start":{"line":547,"column":8},"end":{"line":547,"column":58}},"type":"ForInStatement","left":{"range":[19091,19096],"loc":{"start":{"line":547,"column":13},"end":{"line":547,"column":18}},"type":"VariableDeclaration","declarations":[{"range":[19095,19096],"loc":{"start":{"line":547,"column":17},"end":{"line":547,"column":18}},"type":"VariableDeclarator","id":{"range":[19095,19096],"loc":{"start":{"line":547,"column":17},"end":{"line":547,"column":18}},"type":"Identifier","name":"i"},"init":null}],"kind":"var"},"right":{"range":[19100,19108],"loc":{"start":{"line":547,"column":22},"end":{"line":547,"column":30}},"type":"Identifier","name":"iterable"},"body":{"range":[19110,19136],"loc":{"start":{"line":547,"column":32},"end":{"line":547,"column":58}},"type":"ExpressionStatement","expression":{"range":[19110,19135],"loc":{"start":{"line":547,"column":32},"end":{"line":547,"column":57}},"type":"CallExpression","callee":{"range":[19110,19118],"loc":{"start":{"line":547,"column":32},"end":{"line":547,"column":40}},"type":"MemberExpression","computed":false,"object":{"range":[19110,19113],"loc":{"start":{"line":547,"column":32},"end":{"line":547,"column":35}},"type":"Identifier","name":"ret"},"property":{"range":[19114,19118],"loc":{"start":{"line":547,"column":36},"end":{"line":547,"column":40}},"type":"Identifier","name":"push"}},"arguments":[{"range":[19119,19134],"loc":{"start":{"line":547,"column":41},"end":{"line":547,"column":56}},"type":"CallExpression","callee":{"range":[19119,19121],"loc":{"start":{"line":547,"column":41},"end":{"line":547,"column":43}},"type":"Identifier","name":"fn"},"arguments":[{"range":[19122,19133],"loc":{"start":{"line":547,"column":44},"end":{"line":547,"column":55}},"type":"MemberExpression","computed":true,"object":{"range":[19122,19130],"loc":{"start":{"line":547,"column":44},"end":{"line":547,"column":52}},"type":"Identifier","name":"iterable"},"property":{"range":[19131,19132],"loc":{"start":{"line":547,"column":53},"end":{"line":547,"column":54}},"type":"Identifier","name":"i"}}]}]}},"each":false},{"range":[19145,19156],"loc":{"start":{"line":548,"column":8},"end":{"line":548,"column":19}},"type":"ReturnStatement","argument":{"range":[19152,19155],"loc":{"start":{"line":548,"column":15},"end":{"line":548,"column":18}},"type":"Identifier","name":"ret"}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[19172,19532],"loc":{"start":{"line":550,"column":6},"end":{"line":558,"column":7}},"type":"Property","key":{"range":[19172,19175],"loc":{"start":{"line":550,"column":6},"end":{"line":550,"column":9}},"type":"Identifier","name":"max"},"computed":false,"value":{"range":[19177,19532],"loc":{"start":{"line":550,"column":11},"end":{"line":558,"column":7}},"type":"FunctionExpression","id":null,"params":[{"range":[19186,19190],"loc":{"start":{"line":550,"column":20},"end":{"line":550,"column":24}},"type":"Identifier","name":"arg1"},{"range":[19192,19196],"loc":{"start":{"line":550,"column":26},"end":{"line":550,"column":30}},"type":"Identifier","name":"arg2"}],"defaults":[],"body":{"range":[19198,19532],"loc":{"start":{"line":550,"column":32},"end":{"line":558,"column":7}},"type":"BlockStatement","body":[{"range":[19322,19524],"loc":{"start":{"line":553,"column":8},"end":{"line":557,"column":49}},"type":"IfStatement","test":{"range":[19326,19331],"loc":{"start":{"line":553,"column":12},"end":{"line":553,"column":17}},"type":"UnaryExpression","operator":"!","argument":{"range":[19327,19331],"loc":{"start":{"line":553,"column":13},"end":{"line":553,"column":17}},"type":"Identifier","name":"arg2"},"prefix":true},"consequent":{"range":[19333,19484],"loc":{"start":{"line":553,"column":19},"end":{"line":557,"column":9}},"type":"BlockStatement","body":[{"range":[19357,19372],"loc":{"start":{"line":554,"column":10},"end":{"line":554,"column":25}},"type":"VariableDeclaration","declarations":[{"range":[19361,19371],"loc":{"start":{"line":554,"column":14},"end":{"line":554,"column":24}},"type":"VariableDeclarator","id":{"range":[19361,19364],"loc":{"start":{"line":554,"column":14},"end":{"line":554,"column":17}},"type":"Identifier","name":"max"},"init":{"range":[19367,19371],"loc":{"start":{"line":554,"column":20},"end":{"line":554,"column":24}},"type":"Literal","value":null,"raw":"null"}}],"kind":"var"},{"range":[19383,19452],"loc":{"start":{"line":555,"column":10},"end":{"line":555,"column":79}},"type":"ForInStatement","left":{"range":[19388,19393],"loc":{"start":{"line":555,"column":15},"end":{"line":555,"column":20}},"type":"VariableDeclaration","declarations":[{"range":[19392,19393],"loc":{"start":{"line":555,"column":19},"end":{"line":555,"column":20}},"type":"VariableDeclarator","id":{"range":[19392,19393],"loc":{"start":{"line":555,"column":19},"end":{"line":555,"column":20}},"type":"Identifier","name":"i"},"init":null}],"kind":"var"},"right":{"range":[19397,19401],"loc":{"start":{"line":555,"column":24},"end":{"line":555,"column":28}},"type":"Identifier","name":"arg1"},"body":{"range":[19403,19452],"loc":{"start":{"line":555,"column":30},"end":{"line":555,"column":79}},"type":"IfStatement","test":{"range":[19407,19436],"loc":{"start":{"line":555,"column":34},"end":{"line":555,"column":63}},"type":"LogicalExpression","operator":"||","left":{"range":[19407,19419],"loc":{"start":{"line":555,"column":34},"end":{"line":555,"column":46}},"type":"BinaryExpression","operator":"===","left":{"range":[19407,19410],"loc":{"start":{"line":555,"column":34},"end":{"line":555,"column":37}},"type":"Identifier","name":"max"},"right":{"range":[19415,19419],"loc":{"start":{"line":555,"column":42},"end":{"line":555,"column":46}},"type":"Literal","value":null,"raw":"null"}},"right":{"range":[19423,19436],"loc":{"start":{"line":555,"column":50},"end":{"line":555,"column":63}},"type":"BinaryExpression","operator":">","left":{"range":[19423,19430],"loc":{"start":{"line":555,"column":50},"end":{"line":555,"column":57}},"type":"MemberExpression","computed":true,"object":{"range":[19423,19427],"loc":{"start":{"line":555,"column":50},"end":{"line":555,"column":54}},"type":"Identifier","name":"arg1"},"property":{"range":[19428,19429],"loc":{"start":{"line":555,"column":55},"end":{"line":555,"column":56}},"type":"Identifier","name":"i"}},"right":{"range":[19433,19436],"loc":{"start":{"line":555,"column":60},"end":{"line":555,"column":63}},"type":"Identifier","name":"max"}}},"consequent":{"range":[19438,19452],"loc":{"start":{"line":555,"column":65},"end":{"line":555,"column":79}},"type":"ExpressionStatement","expression":{"range":[19438,19451],"loc":{"start":{"line":555,"column":65},"end":{"line":555,"column":78}},"type":"AssignmentExpression","operator":"=","left":{"range":[19438,19441],"loc":{"start":{"line":555,"column":65},"end":{"line":555,"column":68}},"type":"Identifier","name":"max"},"right":{"range":[19444,19451],"loc":{"start":{"line":555,"column":71},"end":{"line":555,"column":78}},"type":"MemberExpression","computed":true,"object":{"range":[19444,19448],"loc":{"start":{"line":555,"column":71},"end":{"line":555,"column":75}},"type":"Identifier","name":"arg1"},"property":{"range":[19449,19450],"loc":{"start":{"line":555,"column":76},"end":{"line":555,"column":77}},"type":"Identifier","name":"i"}}}},"alternate":null},"each":false},{"range":[19463,19474],"loc":{"start":{"line":556,"column":10},"end":{"line":556,"column":21}},"type":"ReturnStatement","argument":{"range":[19470,19473],"loc":{"start":{"line":556,"column":17},"end":{"line":556,"column":20}},"type":"Identifier","name":"max"}}]},"alternate":{"range":[19490,19524],"loc":{"start":{"line":557,"column":15},"end":{"line":557,"column":49}},"type":"ReturnStatement","argument":{"range":[19497,19523],"loc":{"start":{"line":557,"column":22},"end":{"line":557,"column":48}},"type":"ConditionalExpression","test":{"range":[19497,19509],"loc":{"start":{"line":557,"column":22},"end":{"line":557,"column":34}},"type":"BinaryExpression","operator":">=","left":{"range":[19497,19501],"loc":{"start":{"line":557,"column":22},"end":{"line":557,"column":26}},"type":"Identifier","name":"arg1"},"right":{"range":[19505,19509],"loc":{"start":{"line":557,"column":30},"end":{"line":557,"column":34}},"type":"Identifier","name":"arg2"}},"consequent":{"range":[19512,19516],"loc":{"start":{"line":557,"column":37},"end":{"line":557,"column":41}},"type":"Identifier","name":"arg1"},"alternate":{"range":[19519,19523],"loc":{"start":{"line":557,"column":44},"end":{"line":557,"column":48}},"type":"Identifier","name":"arg2"}}}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[19540,19900],"loc":{"start":{"line":559,"column":6},"end":{"line":567,"column":7}},"type":"Property","key":{"range":[19540,19543],"loc":{"start":{"line":559,"column":6},"end":{"line":559,"column":9}},"type":"Identifier","name":"min"},"computed":false,"value":{"range":[19545,19900],"loc":{"start":{"line":559,"column":11},"end":{"line":567,"column":7}},"type":"FunctionExpression","id":null,"params":[{"range":[19554,19558],"loc":{"start":{"line":559,"column":20},"end":{"line":559,"column":24}},"type":"Identifier","name":"arg1"},{"range":[19560,19564],"loc":{"start":{"line":559,"column":26},"end":{"line":559,"column":30}},"type":"Identifier","name":"arg2"}],"defaults":[],"body":{"range":[19566,19900],"loc":{"start":{"line":559,"column":32},"end":{"line":567,"column":7}},"type":"BlockStatement","body":[{"range":[19690,19892],"loc":{"start":{"line":562,"column":8},"end":{"line":566,"column":49}},"type":"IfStatement","test":{"range":[19694,19699],"loc":{"start":{"line":562,"column":12},"end":{"line":562,"column":17}},"type":"UnaryExpression","operator":"!","argument":{"range":[19695,19699],"loc":{"start":{"line":562,"column":13},"end":{"line":562,"column":17}},"type":"Identifier","name":"arg2"},"prefix":true},"consequent":{"range":[19701,19852],"loc":{"start":{"line":562,"column":19},"end":{"line":566,"column":9}},"type":"BlockStatement","body":[{"range":[19725,19740],"loc":{"start":{"line":563,"column":10},"end":{"line":563,"column":25}},"type":"VariableDeclaration","declarations":[{"range":[19729,19739],"loc":{"start":{"line":563,"column":14},"end":{"line":563,"column":24}},"type":"VariableDeclarator","id":{"range":[19729,19732],"loc":{"start":{"line":563,"column":14},"end":{"line":563,"column":17}},"type":"Identifier","name":"max"},"init":{"range":[19735,19739],"loc":{"start":{"line":563,"column":20},"end":{"line":563,"column":24}},"type":"Literal","value":null,"raw":"null"}}],"kind":"var"},{"range":[19751,19820],"loc":{"start":{"line":564,"column":10},"end":{"line":564,"column":79}},"type":"ForInStatement","left":{"range":[19756,19761],"loc":{"start":{"line":564,"column":15},"end":{"line":564,"column":20}},"type":"VariableDeclaration","declarations":[{"range":[19760,19761],"loc":{"start":{"line":564,"column":19},"end":{"line":564,"column":20}},"type":"VariableDeclarator","id":{"range":[19760,19761],"loc":{"start":{"line":564,"column":19},"end":{"line":564,"column":20}},"type":"Identifier","name":"i"},"init":null}],"kind":"var"},"right":{"range":[19765,19769],"loc":{"start":{"line":564,"column":24},"end":{"line":564,"column":28}},"type":"Identifier","name":"arg1"},"body":{"range":[19771,19820],"loc":{"start":{"line":564,"column":30},"end":{"line":564,"column":79}},"type":"IfStatement","test":{"range":[19775,19804],"loc":{"start":{"line":564,"column":34},"end":{"line":564,"column":63}},"type":"LogicalExpression","operator":"||","left":{"range":[19775,19787],"loc":{"start":{"line":564,"column":34},"end":{"line":564,"column":46}},"type":"BinaryExpression","operator":"===","left":{"range":[19775,19778],"loc":{"start":{"line":564,"column":34},"end":{"line":564,"column":37}},"type":"Identifier","name":"max"},"right":{"range":[19783,19787],"loc":{"start":{"line":564,"column":42},"end":{"line":564,"column":46}},"type":"Literal","value":null,"raw":"null"}},"right":{"range":[19791,19804],"loc":{"start":{"line":564,"column":50},"end":{"line":564,"column":63}},"type":"BinaryExpression","operator":"<","left":{"range":[19791,19798],"loc":{"start":{"line":564,"column":50},"end":{"line":564,"column":57}},"type":"MemberExpression","computed":true,"object":{"range":[19791,19795],"loc":{"start":{"line":564,"column":50},"end":{"line":564,"column":54}},"type":"Identifier","name":"arg1"},"property":{"range":[19796,19797],"loc":{"start":{"line":564,"column":55},"end":{"line":564,"column":56}},"type":"Identifier","name":"i"}},"right":{"range":[19801,19804],"loc":{"start":{"line":564,"column":60},"end":{"line":564,"column":63}},"type":"Identifier","name":"max"}}},"consequent":{"range":[19806,19820],"loc":{"start":{"line":564,"column":65},"end":{"line":564,"column":79}},"type":"ExpressionStatement","expression":{"range":[19806,19819],"loc":{"start":{"line":564,"column":65},"end":{"line":564,"column":78}},"type":"AssignmentExpression","operator":"=","left":{"range":[19806,19809],"loc":{"start":{"line":564,"column":65},"end":{"line":564,"column":68}},"type":"Identifier","name":"max"},"right":{"range":[19812,19819],"loc":{"start":{"line":564,"column":71},"end":{"line":564,"column":78}},"type":"MemberExpression","computed":true,"object":{"range":[19812,19816],"loc":{"start":{"line":564,"column":71},"end":{"line":564,"column":75}},"type":"Identifier","name":"arg1"},"property":{"range":[19817,19818],"loc":{"start":{"line":564,"column":76},"end":{"line":564,"column":77}},"type":"Identifier","name":"i"}}}},"alternate":null},"each":false},{"range":[19831,19842],"loc":{"start":{"line":565,"column":10},"end":{"line":565,"column":21}},"type":"ReturnStatement","argument":{"range":[19838,19841],"loc":{"start":{"line":565,"column":17},"end":{"line":565,"column":20}},"type":"Identifier","name":"max"}}]},"alternate":{"range":[19858,19892],"loc":{"start":{"line":566,"column":15},"end":{"line":566,"column":49}},"type":"ReturnStatement","argument":{"range":[19865,19891],"loc":{"start":{"line":566,"column":22},"end":{"line":566,"column":48}},"type":"ConditionalExpression","test":{"range":[19865,19877],"loc":{"start":{"line":566,"column":22},"end":{"line":566,"column":34}},"type":"BinaryExpression","operator":"<=","left":{"range":[19865,19869],"loc":{"start":{"line":566,"column":22},"end":{"line":566,"column":26}},"type":"Identifier","name":"arg1"},"right":{"range":[19873,19877],"loc":{"start":{"line":566,"column":30},"end":{"line":566,"column":34}},"type":"Identifier","name":"arg2"}},"consequent":{"range":[19880,19884],"loc":{"start":{"line":566,"column":37},"end":{"line":566,"column":41}},"type":"Identifier","name":"arg1"},"alternate":{"range":[19887,19891],"loc":{"start":{"line":566,"column":44},"end":{"line":566,"column":48}},"type":"Identifier","name":"arg2"}}}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[19908,19964],"loc":{"start":{"line":568,"column":6},"end":{"line":570,"column":7}},"type":"Property","key":{"range":[19908,19911],"loc":{"start":{"line":568,"column":6},"end":{"line":568,"column":9}},"type":"Identifier","name":"oct"},"computed":false,"value":{"range":[19913,19964],"loc":{"start":{"line":568,"column":11},"end":{"line":570,"column":7}},"type":"FunctionExpression","id":null,"params":[{"range":[19922,19923],"loc":{"start":{"line":568,"column":20},"end":{"line":568,"column":21}},"type":"Identifier","name":"x"}],"defaults":[],"body":{"range":[19925,19964],"loc":{"start":{"line":568,"column":23},"end":{"line":570,"column":7}},"type":"BlockStatement","body":[{"range":[19935,19956],"loc":{"start":{"line":569,"column":8},"end":{"line":569,"column":29}},"type":"ReturnStatement","argument":{"range":[19942,19955],"loc":{"start":{"line":569,"column":15},"end":{"line":569,"column":28}},"type":"CallExpression","callee":{"range":[19942,19952],"loc":{"start":{"line":569,"column":15},"end":{"line":569,"column":25}},"type":"MemberExpression","computed":false,"object":{"range":[19942,19943],"loc":{"start":{"line":569,"column":15},"end":{"line":569,"column":16}},"type":"Identifier","name":"x"},"property":{"range":[19944,19952],"loc":{"start":{"line":569,"column":17},"end":{"line":569,"column":25}},"type":"Identifier","name":"toString"}},"arguments":[{"range":[19953,19954],"loc":{"start":{"line":569,"column":26},"end":{"line":569,"column":27}},"type":"Literal","value":8,"raw":"8"}]}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[19972,20030],"loc":{"start":{"line":571,"column":6},"end":{"line":573,"column":7}},"type":"Property","key":{"range":[19972,19975],"loc":{"start":{"line":571,"column":6},"end":{"line":571,"column":9}},"type":"Identifier","name":"ord"},"computed":false,"value":{"range":[19977,20030],"loc":{"start":{"line":571,"column":11},"end":{"line":573,"column":7}},"type":"FunctionExpression","id":null,"params":[{"range":[19986,19987],"loc":{"start":{"line":571,"column":20},"end":{"line":571,"column":21}},"type":"Identifier","name":"c"}],"defaults":[],"body":{"range":[19989,20030],"loc":{"start":{"line":571,"column":23},"end":{"line":573,"column":7}},"type":"BlockStatement","body":[{"range":[19999,20022],"loc":{"start":{"line":572,"column":8},"end":{"line":572,"column":31}},"type":"ReturnStatement","argument":{"range":[20006,20021],"loc":{"start":{"line":572,"column":15},"end":{"line":572,"column":30}},"type":"CallExpression","callee":{"range":[20006,20018],"loc":{"start":{"line":572,"column":15},"end":{"line":572,"column":27}},"type":"MemberExpression","computed":false,"object":{"range":[20006,20007],"loc":{"start":{"line":572,"column":15},"end":{"line":572,"column":16}},"type":"Identifier","name":"c"},"property":{"range":[20008,20018],"loc":{"start":{"line":572,"column":17},"end":{"line":572,"column":27}},"type":"Identifier","name":"charCodeAt"}},"arguments":[{"range":[20019,20020],"loc":{"start":{"line":572,"column":28},"end":{"line":572,"column":29}},"type":"Literal","value":0,"raw":"0"}]}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[20038,20126],"loc":{"start":{"line":574,"column":6},"end":{"line":576,"column":7}},"type":"Property","key":{"range":[20038,20041],"loc":{"start":{"line":574,"column":6},"end":{"line":574,"column":9}},"type":"Identifier","name":"pow"},"computed":false,"value":{"range":[20043,20126],"loc":{"start":{"line":574,"column":11},"end":{"line":576,"column":7}},"type":"FunctionExpression","id":null,"params":[{"range":[20052,20053],"loc":{"start":{"line":574,"column":20},"end":{"line":574,"column":21}},"type":"Identifier","name":"x"},{"range":[20055,20056],"loc":{"start":{"line":574,"column":23},"end":{"line":574,"column":24}},"type":"Identifier","name":"y"},{"range":[20058,20059],"loc":{"start":{"line":574,"column":26},"end":{"line":574,"column":27}},"type":"Identifier","name":"z"}],"defaults":[],"body":{"range":[20061,20126],"loc":{"start":{"line":574,"column":29},"end":{"line":576,"column":7}},"type":"BlockStatement","body":[{"range":[20071,20118],"loc":{"start":{"line":575,"column":8},"end":{"line":575,"column":55}},"type":"ReturnStatement","argument":{"range":[20078,20117],"loc":{"start":{"line":575,"column":15},"end":{"line":575,"column":54}},"type":"ConditionalExpression","test":{"range":[20078,20079],"loc":{"start":{"line":575,"column":15},"end":{"line":575,"column":16}},"type":"Identifier","name":"z"},"consequent":{"range":[20082,20100],"loc":{"start":{"line":575,"column":19},"end":{"line":575,"column":37}},"type":"BinaryExpression","operator":"%","left":{"range":[20082,20096],"loc":{"start":{"line":575,"column":19},"end":{"line":575,"column":33}},"type":"CallExpression","callee":{"range":[20082,20090],"loc":{"start":{"line":575,"column":19},"end":{"line":575,"column":27}},"type":"MemberExpression","computed":false,"object":{"range":[20082,20086],"loc":{"start":{"line":575,"column":19},"end":{"line":575,"column":23}},"type":"Identifier","name":"Math"},"property":{"range":[20087,20090],"loc":{"start":{"line":575,"column":24},"end":{"line":575,"column":27}},"type":"Identifier","name":"pow"}},"arguments":[{"range":[20091,20092],"loc":{"start":{"line":575,"column":28},"end":{"line":575,"column":29}},"type":"Identifier","name":"x"},{"range":[20094,20095],"loc":{"start":{"line":575,"column":31},"end":{"line":575,"column":32}},"type":"Identifier","name":"y"}]},"right":{"range":[20099,20100],"loc":{"start":{"line":575,"column":36},"end":{"line":575,"column":37}},"type":"Identifier","name":"z"}},"alternate":{"range":[20103,20117],"loc":{"start":{"line":575,"column":40},"end":{"line":575,"column":54}},"type":"CallExpression","callee":{"range":[20103,20111],"loc":{"start":{"line":575,"column":40},"end":{"line":575,"column":48}},"type":"MemberExpression","computed":false,"object":{"range":[20103,20107],"loc":{"start":{"line":575,"column":40},"end":{"line":575,"column":44}},"type":"Identifier","name":"Math"},"property":{"range":[20108,20111],"loc":{"start":{"line":575,"column":45},"end":{"line":575,"column":48}},"type":"Identifier","name":"pow"}},"arguments":[{"range":[20112,20113],"loc":{"start":{"line":575,"column":49},"end":{"line":575,"column":50}},"type":"Identifier","name":"x"},{"range":[20115,20116],"loc":{"start":{"line":575,"column":52},"end":{"line":575,"column":53}},"type":"Identifier","name":"y"}]}}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[20134,20317],"loc":{"start":{"line":577,"column":6},"end":{"line":582,"column":7}},"type":"Property","key":{"range":[20134,20139],"loc":{"start":{"line":577,"column":6},"end":{"line":577,"column":11}},"type":"Identifier","name":"print"},"computed":false,"value":{"range":[20141,20317],"loc":{"start":{"line":577,"column":13},"end":{"line":582,"column":7}},"type":"FunctionExpression","id":null,"params":[],"defaults":[],"body":{"range":[20153,20317],"loc":{"start":{"line":577,"column":25},"end":{"line":582,"column":7}},"type":"BlockStatement","body":[{"range":[20163,20174],"loc":{"start":{"line":578,"column":8},"end":{"line":578,"column":19}},"type":"VariableDeclaration","declarations":[{"range":[20167,20173],"loc":{"start":{"line":578,"column":12},"end":{"line":578,"column":18}},"type":"VariableDeclarator","id":{"range":[20167,20168],"loc":{"start":{"line":578,"column":12},"end":{"line":578,"column":13}},"type":"Identifier","name":"s"},"init":{"range":[20171,20173],"loc":{"start":{"line":578,"column":16},"end":{"line":578,"column":18}},"type":"Literal","value":"","raw":"\"\""}}],"kind":"var"},{"range":[20183,20285],"loc":{"start":{"line":579,"column":8},"end":{"line":580,"column":59}},"type":"ForStatement","init":{"range":[20188,20197],"loc":{"start":{"line":579,"column":13},"end":{"line":579,"column":22}},"type":"VariableDeclaration","declarations":[{"range":[20192,20197],"loc":{"start":{"line":579,"column":17},"end":{"line":579,"column":22}},"type":"VariableDeclarator","id":{"range":[20192,20193],"loc":{"start":{"line":579,"column":17},"end":{"line":579,"column":18}},"type":"Identifier","name":"i"},"init":{"range":[20196,20197],"loc":{"start":{"line":579,"column":21},"end":{"line":579,"column":22}},"type":"Literal","value":0,"raw":"0"}}],"kind":"var"},"test":{"range":[20199,20219],"loc":{"start":{"line":579,"column":24},"end":{"line":579,"column":44}},"type":"BinaryExpression","operator":"<","left":{"range":[20199,20200],"loc":{"start":{"line":579,"column":24},"end":{"line":579,"column":25}},"type":"Identifier","name":"i"},"right":{"range":[20203,20219],"loc":{"start":{"line":579,"column":28},"end":{"line":579,"column":44}},"type":"MemberExpression","computed":false,"object":{"range":[20203,20212],"loc":{"start":{"line":579,"column":28},"end":{"line":579,"column":37}},"type":"Identifier","name":"arguments"},"property":{"range":[20213,20219],"loc":{"start":{"line":579,"column":38},"end":{"line":579,"column":44}},"type":"Identifier","name":"length"}}},"update":{"range":[20221,20224],"loc":{"start":{"line":579,"column":46},"end":{"line":579,"column":49}},"type":"UpdateExpression","operator":"++","argument":{"range":[20221,20222],"loc":{"start":{"line":579,"column":46},"end":{"line":579,"column":47}},"type":"Identifier","name":"i"},"prefix":false},"body":{"range":[20236,20285],"loc":{"start":{"line":580,"column":10},"end":{"line":580,"column":59}},"type":"ExpressionStatement","expression":{"range":[20236,20284],"loc":{"start":{"line":580,"column":10},"end":{"line":580,"column":58}},"type":"AssignmentExpression","operator":"+=","left":{"range":[20236,20237],"loc":{"start":{"line":580,"column":10},"end":{"line":580,"column":11}},"type":"Identifier","name":"s"},"right":{"range":[20241,20284],"loc":{"start":{"line":580,"column":15},"end":{"line":580,"column":58}},"type":"ConditionalExpression","test":{"range":[20241,20248],"loc":{"start":{"line":580,"column":15},"end":{"line":580,"column":22}},"type":"BinaryExpression","operator":"===","left":{"range":[20241,20242],"loc":{"start":{"line":580,"column":15},"end":{"line":580,"column":16}},"type":"Identifier","name":"i"},"right":{"range":[20247,20248],"loc":{"start":{"line":580,"column":21},"end":{"line":580,"column":22}},"type":"Literal","value":0,"raw":"0"}},"consequent":{"range":[20251,20263],"loc":{"start":{"line":580,"column":25},"end":{"line":580,"column":37}},"type":"MemberExpression","computed":true,"object":{"range":[20251,20260],"loc":{"start":{"line":580,"column":25},"end":{"line":580,"column":34}},"type":"Identifier","name":"arguments"},"property":{"range":[20261,20262],"loc":{"start":{"line":580,"column":35},"end":{"line":580,"column":36}},"type":"Identifier","name":"i"}},"alternate":{"range":[20266,20284],"loc":{"start":{"line":580,"column":40},"end":{"line":580,"column":58}},"type":"BinaryExpression","operator":"+","left":{"range":[20266,20269],"loc":{"start":{"line":580,"column":40},"end":{"line":580,"column":43}},"type":"Literal","value":" ","raw":"\" \""},"right":{"range":[20272,20284],"loc":{"start":{"line":580,"column":46},"end":{"line":580,"column":58}},"type":"MemberExpression","computed":true,"object":{"range":[20272,20281],"loc":{"start":{"line":580,"column":46},"end":{"line":580,"column":55}},"type":"Identifier","name":"arguments"},"property":{"range":[20282,20283],"loc":{"start":{"line":580,"column":56},"end":{"line":580,"column":57}},"type":"Identifier","name":"i"}}}}}}},{"range":[20294,20309],"loc":{"start":{"line":581,"column":8},"end":{"line":581,"column":23}},"type":"ExpressionStatement","expression":{"range":[20294,20308],"loc":{"start":{"line":581,"column":8},"end":{"line":581,"column":22}},"type":"CallExpression","callee":{"range":[20294,20305],"loc":{"start":{"line":581,"column":8},"end":{"line":581,"column":19}},"type":"MemberExpression","computed":false,"object":{"range":[20294,20301],"loc":{"start":{"line":581,"column":8},"end":{"line":581,"column":15}},"type":"Identifier","name":"console"},"property":{"range":[20302,20305],"loc":{"start":{"line":581,"column":16},"end":{"line":581,"column":19}},"type":"Identifier","name":"log"}},"arguments":[{"range":[20306,20307],"loc":{"start":{"line":581,"column":20},"end":{"line":581,"column":21}},"type":"Identifier","name":"s"}]}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[20325,20929],"loc":{"start":{"line":583,"column":6},"end":{"line":603,"column":7}},"type":"Property","key":{"range":[20325,20330],"loc":{"start":{"line":583,"column":6},"end":{"line":583,"column":11}},"type":"Identifier","name":"range"},"computed":false,"value":{"range":[20332,20929],"loc":{"start":{"line":583,"column":13},"end":{"line":603,"column":7}},"type":"FunctionExpression","id":null,"params":[{"range":[20342,20347],"loc":{"start":{"line":583,"column":23},"end":{"line":583,"column":28}},"type":"Identifier","name":"start"},{"range":[20349,20353],"loc":{"start":{"line":583,"column":30},"end":{"line":583,"column":34}},"type":"Identifier","name":"stop"},{"range":[20355,20359],"loc":{"start":{"line":583,"column":36},"end":{"line":583,"column":40}},"type":"Identifier","name":"step"}],"defaults":[],"body":{"range":[20361,20929],"loc":{"start":{"line":583,"column":42},"end":{"line":603,"column":7}},"type":"BlockStatement","body":[{"range":[20371,20518],"loc":{"start":{"line":584,"column":8},"end":{"line":589,"column":46}},"type":"IfStatement","test":{"range":[20375,20393],"loc":{"start":{"line":584,"column":12},"end":{"line":584,"column":30}},"type":"BinaryExpression","operator":"===","left":{"range":[20375,20379],"loc":{"start":{"line":584,"column":12},"end":{"line":584,"column":16}},"type":"Identifier","name":"stop"},"right":{"range":[20384,20393],"loc":{"start":{"line":584,"column":21},"end":{"line":584,"column":30}},"type":"Identifier","name":"undefined"}},"consequent":{"range":[20395,20471],"loc":{"start":{"line":584,"column":32},"end":{"line":588,"column":9}},"type":"BlockStatement","body":[{"range":[20407,20420],"loc":{"start":{"line":585,"column":10},"end":{"line":585,"column":23}},"type":"ExpressionStatement","expression":{"range":[20407,20419],"loc":{"start":{"line":585,"column":10},"end":{"line":585,"column":22}},"type":"AssignmentExpression","operator":"=","left":{"range":[20407,20411],"loc":{"start":{"line":585,"column":10},"end":{"line":585,"column":14}},"type":"Identifier","name":"stop"},"right":{"range":[20414,20419],"loc":{"start":{"line":585,"column":17},"end":{"line":585,"column":22}},"type":"Identifier","name":"start"}}},{"range":[20431,20441],"loc":{"start":{"line":586,"column":10},"end":{"line":586,"column":20}},"type":"ExpressionStatement","expression":{"range":[20431,20440],"loc":{"start":{"line":586,"column":10},"end":{"line":586,"column":19}},"type":"AssignmentExpression","operator":"=","left":{"range":[20431,20436],"loc":{"start":{"line":586,"column":10},"end":{"line":586,"column":15}},"type":"Identifier","name":"start"},"right":{"range":[20439,20440],"loc":{"start":{"line":586,"column":18},"end":{"line":586,"column":19}},"type":"Literal","value":0,"raw":"0"}}},{"range":[20452,20461],"loc":{"start":{"line":587,"column":10},"end":{"line":587,"column":19}},"type":"ExpressionStatement","expression":{"range":[20452,20460],"loc":{"start":{"line":587,"column":10},"end":{"line":587,"column":18}},"type":"AssignmentExpression","operator":"=","left":{"range":[20452,20456],"loc":{"start":{"line":587,"column":10},"end":{"line":587,"column":14}},"type":"Identifier","name":"step"},"right":{"range":[20459,20460],"loc":{"start":{"line":587,"column":17},"end":{"line":587,"column":18}},"type":"Literal","value":1,"raw":"1"}}}]},"alternate":{"range":[20485,20518],"loc":{"start":{"line":589,"column":13},"end":{"line":589,"column":46}},"type":"IfStatement","test":{"range":[20489,20507],"loc":{"start":{"line":589,"column":17},"end":{"line":589,"column":35}},"type":"BinaryExpression","operator":"===","left":{"range":[20489,20493],"loc":{"start":{"line":589,"column":17},"end":{"line":589,"column":21}},"type":"Identifier","name":"step"},"right":{"range":[20498,20507],"loc":{"start":{"line":589,"column":26},"end":{"line":589,"column":35}},"type":"Identifier","name":"undefined"}},"consequent":{"range":[20509,20518],"loc":{"start":{"line":589,"column":37},"end":{"line":589,"column":46}},"type":"ExpressionStatement","expression":{"range":[20509,20517],"loc":{"start":{"line":589,"column":37},"end":{"line":589,"column":45}},"type":"AssignmentExpression","operator":"=","left":{"range":[20509,20513],"loc":{"start":{"line":589,"column":37},"end":{"line":589,"column":41}},"type":"Identifier","name":"step"},"right":{"range":[20516,20517],"loc":{"start":{"line":589,"column":44},"end":{"line":589,"column":45}},"type":"Literal","value":1,"raw":"1"}}},"alternate":null}},{"range":[20527,20563],"loc":{"start":{"line":590,"column":8},"end":{"line":590,"column":44}},"type":"VariableDeclaration","declarations":[{"range":[20531,20562],"loc":{"start":{"line":590,"column":12},"end":{"line":590,"column":43}},"type":"VariableDeclarator","id":{"range":[20531,20534],"loc":{"start":{"line":590,"column":12},"end":{"line":590,"column":15}},"type":"Identifier","name":"len"},"init":{"range":[20537,20562],"loc":{"start":{"line":590,"column":18},"end":{"line":590,"column":43}},"type":"UnaryExpression","operator":"~","argument":{"range":[20538,20562],"loc":{"start":{"line":590,"column":19},"end":{"line":590,"column":43}},"type":"UnaryExpression","operator":"~","argument":{"range":[20540,20561],"loc":{"start":{"line":590,"column":21},"end":{"line":590,"column":42}},"type":"BinaryExpression","operator":"/","left":{"range":[20541,20553],"loc":{"start":{"line":590,"column":22},"end":{"line":590,"column":34}},"type":"BinaryExpression","operator":"-","left":{"range":[20541,20545],"loc":{"start":{"line":590,"column":22},"end":{"line":590,"column":26}},"type":"Identifier","name":"stop"},"right":{"range":[20548,20553],"loc":{"start":{"line":590,"column":29},"end":{"line":590,"column":34}},"type":"Identifier","name":"start"}},"right":{"range":[20557,20561],"loc":{"start":{"line":590,"column":38},"end":{"line":590,"column":42}},"type":"Identifier","name":"step"}},"prefix":true},"prefix":true}}],"kind":"var"},{"range":[20593,20653],"loc":{"start":{"line":591,"column":8},"end":{"line":591,"column":68}},"type":"IfStatement","test":{"range":[20598,20605],"loc":{"start":{"line":591,"column":13},"end":{"line":591,"column":20}},"type":"BinaryExpression","operator":"<","left":{"range":[20598,20601],"loc":{"start":{"line":591,"column":13},"end":{"line":591,"column":16}},"type":"Identifier","name":"len"},"right":{"range":[20604,20605],"loc":{"start":{"line":591,"column":19},"end":{"line":591,"column":20}},"type":"Literal","value":0,"raw":"0"}},"consequent":{"range":[20608,20653],"loc":{"start":{"line":591,"column":23},"end":{"line":591,"column":68}},"type":"ReturnStatement","argument":{"range":[20615,20652],"loc":{"start":{"line":591,"column":30},"end":{"line":591,"column":67}},"type":"CallExpression","callee":{"range":[20615,20648],"loc":{"start":{"line":591,"column":30},"end":{"line":591,"column":63}},"type":"MemberExpression","computed":false,"object":{"range":[20615,20634],"loc":{"start":{"line":591,"column":30},"end":{"line":591,"column":49}},"type":"MemberExpression","computed":false,"object":{"range":[20615,20628],"loc":{"start":{"line":591,"column":30},"end":{"line":591,"column":43}},"type":"Identifier","name":"pythonRuntime"},"property":{"range":[20629,20634],"loc":{"start":{"line":591,"column":44},"end":{"line":591,"column":49}},"type":"Identifier","name":"utils"}},"property":{"range":[20635,20648],"loc":{"start":{"line":591,"column":50},"end":{"line":591,"column":63}},"type":"Identifier","name":"convertToList"}},"arguments":[{"range":[20649,20651],"loc":{"start":{"line":591,"column":64},"end":{"line":591,"column":66}},"type":"ArrayExpression","elements":[]}]}},"alternate":null},{"range":[20662,20685],"loc":{"start":{"line":592,"column":8},"end":{"line":592,"column":31}},"type":"VariableDeclaration","declarations":[{"range":[20666,20684],"loc":{"start":{"line":592,"column":12},"end":{"line":592,"column":30}},"type":"VariableDeclarator","id":{"range":[20666,20667],"loc":{"start":{"line":592,"column":12},"end":{"line":592,"column":13}},"type":"Identifier","name":"r"},"init":{"range":[20670,20684],"loc":{"start":{"line":592,"column":16},"end":{"line":592,"column":30}},"type":"NewExpression","callee":{"range":[20674,20679],"loc":{"start":{"line":592,"column":20},"end":{"line":592,"column":25}},"type":"Identifier","name":"Array"},"arguments":[{"range":[20680,20683],"loc":{"start":{"line":592,"column":26},"end":{"line":592,"column":29}},"type":"Identifier","name":"len"}]}}],"kind":"var"},{"range":[20694,20710],"loc":{"start":{"line":593,"column":8},"end":{"line":593,"column":24}},"type":"VariableDeclaration","declarations":[{"range":[20698,20709],"loc":{"start":{"line":593,"column":12},"end":{"line":593,"column":23}},"type":"VariableDeclarator","id":{"range":[20698,20705],"loc":{"start":{"line":593,"column":12},"end":{"line":593,"column":19}},"type":"Identifier","name":"element"},"init":{"range":[20708,20709],"loc":{"start":{"line":593,"column":22},"end":{"line":593,"column":23}},"type":"Literal","value":0,"raw":"0"}}],"kind":"var"},{"range":[20720,20734],"loc":{"start":{"line":595,"column":8},"end":{"line":595,"column":22}},"type":"VariableDeclaration","declarations":[{"range":[20724,20733],"loc":{"start":{"line":595,"column":12},"end":{"line":595,"column":21}},"type":"VariableDeclarator","id":{"range":[20724,20725],"loc":{"start":{"line":595,"column":12},"end":{"line":595,"column":13}},"type":"Identifier","name":"i"},"init":{"range":[20728,20733],"loc":{"start":{"line":595,"column":16},"end":{"line":595,"column":21}},"type":"Identifier","name":"start"}}],"kind":"var"},{"range":[20743,20856],"loc":{"start":{"line":596,"column":8},"end":{"line":599,"column":9}},"type":"WhileStatement","test":{"range":[20750,20794],"loc":{"start":{"line":596,"column":15},"end":{"line":596,"column":59}},"type":"LogicalExpression","operator":"||","left":{"range":[20750,20770],"loc":{"start":{"line":596,"column":15},"end":{"line":596,"column":35}},"type":"LogicalExpression","operator":"&&","left":{"range":[20750,20758],"loc":{"start":{"line":596,"column":15},"end":{"line":596,"column":23}},"type":"BinaryExpression","operator":"<","left":{"range":[20750,20751],"loc":{"start":{"line":596,"column":15},"end":{"line":596,"column":16}},"type":"Identifier","name":"i"},"right":{"range":[20754,20758],"loc":{"start":{"line":596,"column":19},"end":{"line":596,"column":23}},"type":"Identifier","name":"stop"}},"right":{"range":[20762,20770],"loc":{"start":{"line":596,"column":27},"end":{"line":596,"column":35}},"type":"BinaryExpression","operator":">","left":{"range":[20762,20766],"loc":{"start":{"line":596,"column":27},"end":{"line":596,"column":31}},"type":"Identifier","name":"step"},"right":{"range":[20769,20770],"loc":{"start":{"line":596,"column":34},"end":{"line":596,"column":35}},"type":"Literal","value":0,"raw":"0"}}},"right":{"range":[20774,20794],"loc":{"start":{"line":596,"column":39},"end":{"line":596,"column":59}},"type":"LogicalExpression","operator":"&&","left":{"range":[20774,20782],"loc":{"start":{"line":596,"column":39},"end":{"line":596,"column":47}},"type":"BinaryExpression","operator":">","left":{"range":[20774,20775],"loc":{"start":{"line":596,"column":39},"end":{"line":596,"column":40}},"type":"Identifier","name":"i"},"right":{"range":[20778,20782],"loc":{"start":{"line":596,"column":43},"end":{"line":596,"column":47}},"type":"Identifier","name":"stop"}},"right":{"range":[20786,20794],"loc":{"start":{"line":596,"column":51},"end":{"line":596,"column":59}},"type":"BinaryExpression","operator":"<","left":{"range":[20786,20790],"loc":{"start":{"line":596,"column":51},"end":{"line":596,"column":55}},"type":"Identifier","name":"step"},"right":{"range":[20793,20794],"loc":{"start":{"line":596,"column":58},"end":{"line":596,"column":59}},"type":"Literal","value":0,"raw":"0"}}}},"body":{"range":[20796,20856],"loc":{"start":{"line":596,"column":61},"end":{"line":599,"column":9}},"type":"BlockStatement","body":[{"range":[20808,20825],"loc":{"start":{"line":597,"column":10},"end":{"line":597,"column":27}},"type":"ExpressionStatement","expression":{"range":[20808,20824],"loc":{"start":{"line":597,"column":10},"end":{"line":597,"column":26}},"type":"AssignmentExpression","operator":"=","left":{"range":[20808,20820],"loc":{"start":{"line":597,"column":10},"end":{"line":597,"column":22}},"type":"MemberExpression","computed":true,"object":{"range":[20808,20809],"loc":{"start":{"line":597,"column":10},"end":{"line":597,"column":11}},"type":"Identifier","name":"r"},"property":{"range":[20810,20819],"loc":{"start":{"line":597,"column":12},"end":{"line":597,"column":21}},"type":"UpdateExpression","operator":"++","argument":{"range":[20810,20817],"loc":{"start":{"line":597,"column":12},"end":{"line":597,"column":19}},"type":"Identifier","name":"element"},"prefix":false}},"right":{"range":[20823,20824],"loc":{"start":{"line":597,"column":25},"end":{"line":597,"column":26}},"type":"Identifier","name":"i"}}},{"range":[20836,20846],"loc":{"start":{"line":598,"column":10},"end":{"line":598,"column":20}},"type":"ExpressionStatement","expression":{"range":[20836,20845],"loc":{"start":{"line":598,"column":10},"end":{"line":598,"column":19}},"type":"AssignmentExpression","operator":"+=","left":{"range":[20836,20837],"loc":{"start":{"line":598,"column":10},"end":{"line":598,"column":11}},"type":"Identifier","name":"i"},"right":{"range":[20841,20845],"loc":{"start":{"line":598,"column":15},"end":{"line":598,"column":19}},"type":"Identifier","name":"step"}}}]}},{"range":[20866,20903],"loc":{"start":{"line":601,"column":8},"end":{"line":601,"column":45}},"type":"ExpressionStatement","expression":{"range":[20866,20902],"loc":{"start":{"line":601,"column":8},"end":{"line":601,"column":44}},"type":"CallExpression","callee":{"range":[20866,20899],"loc":{"start":{"line":601,"column":8},"end":{"line":601,"column":41}},"type":"MemberExpression","computed":false,"object":{"range":[20866,20885],"loc":{"start":{"line":601,"column":8},"end":{"line":601,"column":27}},"type":"MemberExpression","computed":false,"object":{"range":[20866,20879],"loc":{"start":{"line":601,"column":8},"end":{"line":601,"column":21}},"type":"Identifier","name":"pythonRuntime"},"property":{"range":[20880,20885],"loc":{"start":{"line":601,"column":22},"end":{"line":601,"column":27}},"type":"Identifier","name":"utils"}},"property":{"range":[20886,20899],"loc":{"start":{"line":601,"column":28},"end":{"line":601,"column":41}},"type":"Identifier","name":"convertToList"}},"arguments":[{"range":[20900,20901],"loc":{"start":{"line":601,"column":42},"end":{"line":601,"column":43}},"type":"Identifier","name":"r"}]}},{"range":[20912,20921],"loc":{"start":{"line":602,"column":8},"end":{"line":602,"column":17}},"type":"ReturnStatement","argument":{"range":[20919,20920],"loc":{"start":{"line":602,"column":15},"end":{"line":602,"column":16}},"type":"Identifier","name":"r"}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[20937,21448],"loc":{"start":{"line":604,"column":6},"end":{"line":610,"column":7}},"type":"Property","key":{"range":[20937,20941],"loc":{"start":{"line":604,"column":6},"end":{"line":604,"column":10}},"type":"Identifier","name":"repr"},"computed":false,"value":{"range":[20943,21448],"loc":{"start":{"line":604,"column":12},"end":{"line":610,"column":7}},"type":"FunctionExpression","id":null,"params":[{"range":[20953,20956],"loc":{"start":{"line":604,"column":22},"end":{"line":604,"column":25}},"type":"Identifier","name":"obj"}],"defaults":[],"body":{"range":[20958,21448],"loc":{"start":{"line":604,"column":27},"end":{"line":610,"column":7}},"type":"BlockStatement","body":[{"range":[20968,21020],"loc":{"start":{"line":605,"column":8},"end":{"line":605,"column":60}},"type":"IfStatement","test":{"range":[20972,20995],"loc":{"start":{"line":605,"column":12},"end":{"line":605,"column":35}},"type":"BinaryExpression","operator":"===","left":{"range":[20972,20982],"loc":{"start":{"line":605,"column":12},"end":{"line":605,"column":22}},"type":"UnaryExpression","operator":"typeof","argument":{"range":[20979,20982],"loc":{"start":{"line":605,"column":19},"end":{"line":605,"column":22}},"type":"Identifier","name":"obj"},"prefix":true},"right":{"range":[20987,20995],"loc":{"start":{"line":605,"column":27},"end":{"line":605,"column":35}},"type":"Literal","value":"string","raw":"'string'"}},"consequent":{"range":[20997,21020],"loc":{"start":{"line":605,"column":37},"end":{"line":605,"column":60}},"type":"ReturnStatement","argument":{"range":[21004,21019],"loc":{"start":{"line":605,"column":44},"end":{"line":605,"column":59}},"type":"BinaryExpression","operator":"+","left":{"range":[21004,21013],"loc":{"start":{"line":605,"column":44},"end":{"line":605,"column":53}},"type":"BinaryExpression","operator":"+","left":{"range":[21004,21007],"loc":{"start":{"line":605,"column":44},"end":{"line":605,"column":47}},"type":"Literal","value":"'","raw":"\"'\""},"right":{"range":[21010,21013],"loc":{"start":{"line":605,"column":50},"end":{"line":605,"column":53}},"type":"Identifier","name":"obj"}},"right":{"range":[21016,21019],"loc":{"start":{"line":605,"column":56},"end":{"line":605,"column":59}},"type":"Literal","value":"'","raw":"\"'\""}}},"alternate":null},{"range":[21071,21360],"loc":{"start":{"line":606,"column":8},"end":{"line":609,"column":37}},"type":"IfStatement","test":{"range":[21075,21101],"loc":{"start":{"line":606,"column":12},"end":{"line":606,"column":38}},"type":"BinaryExpression","operator":"!==","left":{"range":[21075,21087],"loc":{"start":{"line":606,"column":12},"end":{"line":606,"column":24}},"type":"MemberExpression","computed":false,"object":{"range":[21075,21078],"loc":{"start":{"line":606,"column":12},"end":{"line":606,"column":15}},"type":"Identifier","name":"obj"},"property":{"range":[21079,21087],"loc":{"start":{"line":606,"column":16},"end":{"line":606,"column":24}},"type":"Identifier","name":"__repr__"}},"right":{"range":[21092,21101],"loc":{"start":{"line":606,"column":29},"end":{"line":606,"column":38}},"type":"Identifier","name":"undefined"}},"consequent":{"range":[21103,21125],"loc":{"start":{"line":606,"column":40},"end":{"line":606,"column":62}},"type":"ReturnStatement","argument":{"range":[21110,21124],"loc":{"start":{"line":606,"column":47},"end":{"line":606,"column":61}},"type":"CallExpression","callee":{"range":[21110,21122],"loc":{"start":{"line":606,"column":47},"end":{"line":606,"column":59}},"type":"MemberExpression","computed":false,"object":{"range":[21110,21113],"loc":{"start":{"line":606,"column":47},"end":{"line":606,"column":50}},"type":"Identifier","name":"obj"},"property":{"range":[21114,21122],"loc":{"start":{"line":606,"column":51},"end":{"line":606,"column":59}},"type":"Identifier","name":"__repr__"}},"arguments":[]}},"alternate":{"range":[21139,21360],"loc":{"start":{"line":607,"column":13},"end":{"line":609,"column":37}},"type":"IfStatement","test":{"range":[21143,21234],"loc":{"start":{"line":607,"column":17},"end":{"line":607,"column":108}},"type":"LogicalExpression","operator":"&&","left":{"range":[21143,21208],"loc":{"start":{"line":607,"column":17},"end":{"line":607,"column":82}},"type":"LogicalExpression","operator":"&&","left":{"range":[21143,21170],"loc":{"start":{"line":607,"column":17},"end":{"line":607,"column":44}},"type":"BinaryExpression","operator":"!==","left":{"range":[21143,21156],"loc":{"start":{"line":607,"column":17},"end":{"line":607,"column":30}},"type":"MemberExpression","computed":false,"object":{"range":[21143,21146],"loc":{"start":{"line":607,"column":17},"end":{"line":607,"column":20}},"type":"Identifier","name":"obj"},"property":{"range":[21147,21156],"loc":{"start":{"line":607,"column":21},"end":{"line":607,"column":30}},"type":"Identifier","name":"__class__"}},"right":{"range":[21161,21170],"loc":{"start":{"line":607,"column":35},"end":{"line":607,"column":44}},"type":"Identifier","name":"undefined"}},"right":{"range":[21174,21208],"loc":{"start":{"line":607,"column":48},"end":{"line":607,"column":82}},"type":"BinaryExpression","operator":"!==","left":{"range":[21174,21194],"loc":{"start":{"line":607,"column":48},"end":{"line":607,"column":68}},"type":"MemberExpression","computed":false,"object":{"range":[21174,21187],"loc":{"start":{"line":607,"column":48},"end":{"line":607,"column":61}},"type":"MemberExpression","computed":false,"object":{"range":[21174,21177],"loc":{"start":{"line":607,"column":48},"end":{"line":607,"column":51}},"type":"Identifier","name":"obj"},"property":{"range":[21178,21187],"loc":{"start":{"line":607,"column":52},"end":{"line":607,"column":61}},"type":"Identifier","name":"__class__"}},"property":{"range":[21188,21194],"loc":{"start":{"line":607,"column":62},"end":{"line":607,"column":68}},"type":"Identifier","name":"module"}},"right":{"range":[21199,21208],"loc":{"start":{"line":607,"column":73},"end":{"line":607,"column":82}},"type":"Identifier","name":"undefined"}}},"right":{"range":[21212,21234],"loc":{"start":{"line":607,"column":86},"end":{"line":607,"column":108}},"type":"MemberExpression","computed":false,"object":{"range":[21212,21225],"loc":{"start":{"line":607,"column":86},"end":{"line":607,"column":99}},"type":"MemberExpression","computed":false,"object":{"range":[21212,21215],"loc":{"start":{"line":607,"column":86},"end":{"line":607,"column":89}},"type":"Identifier","name":"obj"},"property":{"range":[21216,21225],"loc":{"start":{"line":607,"column":90},"end":{"line":607,"column":99}},"type":"Identifier","name":"__class__"}},"property":{"range":[21226,21234],"loc":{"start":{"line":607,"column":100},"end":{"line":607,"column":108}},"type":"Identifier","name":"__name__"}}},"consequent":{"range":[21236,21332],"loc":{"start":{"line":607,"column":110},"end":{"line":609,"column":9}},"type":"BlockStatement","body":[{"range":[21248,21322],"loc":{"start":{"line":608,"column":10},"end":{"line":608,"column":84}},"type":"ReturnStatement","argument":{"range":[21255,21321],"loc":{"start":{"line":608,"column":17},"end":{"line":608,"column":83}},"type":"BinaryExpression","operator":"+","left":{"range":[21255,21310],"loc":{"start":{"line":608,"column":17},"end":{"line":608,"column":72}},"type":"BinaryExpression","operator":"+","left":{"range":[21255,21287],"loc":{"start":{"line":608,"column":17},"end":{"line":608,"column":49}},"type":"BinaryExpression","operator":"+","left":{"range":[21255,21283],"loc":{"start":{"line":608,"column":17},"end":{"line":608,"column":45}},"type":"BinaryExpression","operator":"+","left":{"range":[21255,21258],"loc":{"start":{"line":608,"column":17},"end":{"line":608,"column":20}},"type":"Literal","value":"<","raw":"'<'"},"right":{"range":[21259,21283],"loc":{"start":{"line":608,"column":21},"end":{"line":608,"column":45}},"type":"MemberExpression","computed":false,"object":{"range":[21259,21272],"loc":{"start":{"line":608,"column":21},"end":{"line":608,"column":34}},"type":"MemberExpression","computed":false,"object":{"range":[21259,21262],"loc":{"start":{"line":608,"column":21},"end":{"line":608,"column":24}},"type":"Identifier","name":"obj"},"property":{"range":[21263,21272],"loc":{"start":{"line":608,"column":25},"end":{"line":608,"column":34}},"type":"Identifier","name":"__class__"}},"property":{"range":[21273,21283],"loc":{"start":{"line":608,"column":35},"end":{"line":608,"column":45}},"type":"Identifier","name":"__module__"}}},"right":{"range":[21284,21287],"loc":{"start":{"line":608,"column":46},"end":{"line":608,"column":49}},"type":"Literal","value":".","raw":"'.'"}},"right":{"range":[21288,21310],"loc":{"start":{"line":608,"column":50},"end":{"line":608,"column":72}},"type":"MemberExpression","computed":false,"object":{"range":[21288,21301],"loc":{"start":{"line":608,"column":50},"end":{"line":608,"column":63}},"type":"MemberExpression","computed":false,"object":{"range":[21288,21291],"loc":{"start":{"line":608,"column":50},"end":{"line":608,"column":53}},"type":"Identifier","name":"obj"},"property":{"range":[21292,21301],"loc":{"start":{"line":608,"column":54},"end":{"line":608,"column":63}},"type":"Identifier","name":"__class__"}},"property":{"range":[21302,21310],"loc":{"start":{"line":608,"column":64},"end":{"line":608,"column":72}},"type":"Identifier","name":"__name__"}}},"right":{"range":[21311,21321],"loc":{"start":{"line":608,"column":73},"end":{"line":608,"column":83}},"type":"Literal","value":" object>","raw":"' object>'"}}}]},"alternate":{"range":[21338,21360],"loc":{"start":{"line":609,"column":15},"end":{"line":609,"column":37}},"type":"ReturnStatement","argument":{"range":[21345,21359],"loc":{"start":{"line":609,"column":22},"end":{"line":609,"column":36}},"type":"CallExpression","callee":{"range":[21345,21357],"loc":{"start":{"line":609,"column":22},"end":{"line":609,"column":34}},"type":"MemberExpression","computed":false,"object":{"range":[21345,21348],"loc":{"start":{"line":609,"column":22},"end":{"line":609,"column":25}},"type":"Identifier","name":"obj"},"property":{"range":[21349,21357],"loc":{"start":{"line":609,"column":26},"end":{"line":609,"column":34}},"type":"Identifier","name":"toString"}},"arguments":[]}}}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[21456,21617],"loc":{"start":{"line":611,"column":6},"end":{"line":615,"column":7}},"type":"Property","key":{"range":[21456,21464],"loc":{"start":{"line":611,"column":6},"end":{"line":611,"column":14}},"type":"Identifier","name":"reversed"},"computed":false,"value":{"range":[21466,21617],"loc":{"start":{"line":611,"column":16},"end":{"line":615,"column":7}},"type":"FunctionExpression","id":null,"params":[{"range":[21476,21479],"loc":{"start":{"line":611,"column":26},"end":{"line":611,"column":29}},"type":"Identifier","name":"seq"}],"defaults":[],"body":{"range":[21481,21617],"loc":{"start":{"line":611,"column":31},"end":{"line":615,"column":7}},"type":"BlockStatement","body":[{"range":[21491,21534],"loc":{"start":{"line":612,"column":8},"end":{"line":612,"column":51}},"type":"VariableDeclaration","declarations":[{"range":[21495,21533],"loc":{"start":{"line":612,"column":12},"end":{"line":612,"column":50}},"type":"VariableDeclarator","id":{"range":[21495,21498],"loc":{"start":{"line":612,"column":12},"end":{"line":612,"column":15}},"type":"Identifier","name":"ret"},"init":{"range":[21501,21533],"loc":{"start":{"line":612,"column":18},"end":{"line":612,"column":50}},"type":"NewExpression","callee":{"range":[21505,21531],"loc":{"start":{"line":612,"column":22},"end":{"line":612,"column":48}},"type":"MemberExpression","computed":false,"object":{"range":[21505,21526],"loc":{"start":{"line":612,"column":22},"end":{"line":612,"column":43}},"type":"MemberExpression","computed":false,"object":{"range":[21505,21518],"loc":{"start":{"line":612,"column":22},"end":{"line":612,"column":35}},"type":"Identifier","name":"pythonRuntime"},"property":{"range":[21519,21526],"loc":{"start":{"line":612,"column":36},"end":{"line":612,"column":43}},"type":"Identifier","name":"objects"}},"property":{"range":[21527,21531],"loc":{"start":{"line":612,"column":44},"end":{"line":612,"column":48}},"type":"Identifier","name":"list"}},"arguments":[]}}],"kind":"var"},{"range":[21543,21579],"loc":{"start":{"line":613,"column":8},"end":{"line":613,"column":44}},"type":"ForInStatement","left":{"range":[21548,21553],"loc":{"start":{"line":613,"column":13},"end":{"line":613,"column":18}},"type":"VariableDeclaration","declarations":[{"range":[21552,21553],"loc":{"start":{"line":613,"column":17},"end":{"line":613,"column":18}},"type":"VariableDeclarator","id":{"range":[21552,21553],"loc":{"start":{"line":613,"column":17},"end":{"line":613,"column":18}},"type":"Identifier","name":"i"},"init":null}],"kind":"var"},"right":{"range":[21557,21560],"loc":{"start":{"line":613,"column":22},"end":{"line":613,"column":25}},"type":"Identifier","name":"seq"},"body":{"range":[21562,21579],"loc":{"start":{"line":613,"column":27},"end":{"line":613,"column":44}},"type":"ExpressionStatement","expression":{"range":[21562,21578],"loc":{"start":{"line":613,"column":27},"end":{"line":613,"column":43}},"type":"CallExpression","callee":{"range":[21562,21570],"loc":{"start":{"line":613,"column":27},"end":{"line":613,"column":35}},"type":"MemberExpression","computed":false,"object":{"range":[21562,21565],"loc":{"start":{"line":613,"column":27},"end":{"line":613,"column":30}},"type":"Identifier","name":"ret"},"property":{"range":[21566,21570],"loc":{"start":{"line":613,"column":31},"end":{"line":613,"column":35}},"type":"Identifier","name":"push"}},"arguments":[{"range":[21571,21577],"loc":{"start":{"line":613,"column":36},"end":{"line":613,"column":42}},"type":"MemberExpression","computed":true,"object":{"range":[21571,21574],"loc":{"start":{"line":613,"column":36},"end":{"line":613,"column":39}},"type":"Identifier","name":"seq"},"property":{"range":[21575,21576],"loc":{"start":{"line":613,"column":40},"end":{"line":613,"column":41}},"type":"Identifier","name":"i"}}]}},"each":false},{"range":[21588,21609],"loc":{"start":{"line":614,"column":8},"end":{"line":614,"column":29}},"type":"ReturnStatement","argument":{"range":[21595,21608],"loc":{"start":{"line":614,"column":15},"end":{"line":614,"column":28}},"type":"CallExpression","callee":{"range":[21595,21606],"loc":{"start":{"line":614,"column":15},"end":{"line":614,"column":26}},"type":"MemberExpression","computed":false,"object":{"range":[21595,21598],"loc":{"start":{"line":614,"column":15},"end":{"line":614,"column":18}},"type":"Identifier","name":"ret"},"property":{"range":[21599,21606],"loc":{"start":{"line":614,"column":19},"end":{"line":614,"column":26}},"type":"Identifier","name":"reverse"}},"arguments":[]}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[21625,21825],"loc":{"start":{"line":616,"column":6},"end":{"line":622,"column":7}},"type":"Property","key":{"range":[21625,21630],"loc":{"start":{"line":616,"column":6},"end":{"line":616,"column":11}},"type":"Identifier","name":"round"},"computed":false,"value":{"range":[21632,21825],"loc":{"start":{"line":616,"column":13},"end":{"line":622,"column":7}},"type":"FunctionExpression","id":null,"params":[{"range":[21642,21645],"loc":{"start":{"line":616,"column":23},"end":{"line":616,"column":26}},"type":"Identifier","name":"num"},{"range":[21647,21654],"loc":{"start":{"line":616,"column":28},"end":{"line":616,"column":35}},"type":"Identifier","name":"ndigits"}],"defaults":[],"body":{"range":[21656,21825],"loc":{"start":{"line":616,"column":37},"end":{"line":622,"column":7}},"type":"BlockStatement","body":[{"range":[21666,21785],"loc":{"start":{"line":617,"column":8},"end":{"line":620,"column":9}},"type":"IfStatement","test":{"range":[21670,21677],"loc":{"start":{"line":617,"column":12},"end":{"line":617,"column":19}},"type":"Identifier","name":"ndigits"},"consequent":{"range":[21679,21785],"loc":{"start":{"line":617,"column":21},"end":{"line":620,"column":9}},"type":"BlockStatement","body":[{"range":[21691,21725],"loc":{"start":{"line":618,"column":10},"end":{"line":618,"column":44}},"type":"VariableDeclaration","declarations":[{"range":[21695,21724],"loc":{"start":{"line":618,"column":14},"end":{"line":618,"column":43}},"type":"VariableDeclarator","id":{"range":[21695,21700],"loc":{"start":{"line":618,"column":14},"end":{"line":618,"column":19}},"type":"Identifier","name":"scale"},"init":{"range":[21703,21724],"loc":{"start":{"line":618,"column":22},"end":{"line":618,"column":43}},"type":"CallExpression","callee":{"range":[21703,21711],"loc":{"start":{"line":618,"column":22},"end":{"line":618,"column":30}},"type":"MemberExpression","computed":false,"object":{"range":[21703,21707],"loc":{"start":{"line":618,"column":22},"end":{"line":618,"column":26}},"type":"Identifier","name":"Math"},"property":{"range":[21708,21711],"loc":{"start":{"line":618,"column":27},"end":{"line":618,"column":30}},"type":"Identifier","name":"pow"}},"arguments":[{"range":[21712,21714],"loc":{"start":{"line":618,"column":31},"end":{"line":618,"column":33}},"type":"Literal","value":10,"raw":"10"},{"range":[21716,21723],"loc":{"start":{"line":618,"column":35},"end":{"line":618,"column":42}},"type":"Identifier","name":"ndigits"}]}}],"kind":"var"},{"range":[21736,21775],"loc":{"start":{"line":619,"column":10},"end":{"line":619,"column":49}},"type":"ReturnStatement","argument":{"range":[21743,21774],"loc":{"start":{"line":619,"column":17},"end":{"line":619,"column":48}},"type":"BinaryExpression","operator":"/","left":{"range":[21743,21766],"loc":{"start":{"line":619,"column":17},"end":{"line":619,"column":40}},"type":"CallExpression","callee":{"range":[21743,21753],"loc":{"start":{"line":619,"column":17},"end":{"line":619,"column":27}},"type":"MemberExpression","computed":false,"object":{"range":[21743,21747],"loc":{"start":{"line":619,"column":17},"end":{"line":619,"column":21}},"type":"Identifier","name":"Math"},"property":{"range":[21748,21753],"loc":{"start":{"line":619,"column":22},"end":{"line":619,"column":27}},"type":"Identifier","name":"round"}},"arguments":[{"range":[21754,21765],"loc":{"start":{"line":619,"column":28},"end":{"line":619,"column":39}},"type":"BinaryExpression","operator":"*","left":{"range":[21754,21757],"loc":{"start":{"line":619,"column":28},"end":{"line":619,"column":31}},"type":"Identifier","name":"num"},"right":{"range":[21760,21765],"loc":{"start":{"line":619,"column":34},"end":{"line":619,"column":39}},"type":"Identifier","name":"scale"}}]},"right":{"range":[21769,21774],"loc":{"start":{"line":619,"column":43},"end":{"line":619,"column":48}},"type":"Identifier","name":"scale"}}}]},"alternate":null},{"range":[21794,21817],"loc":{"start":{"line":621,"column":8},"end":{"line":621,"column":31}},"type":"ReturnStatement","argument":{"range":[21801,21816],"loc":{"start":{"line":621,"column":15},"end":{"line":621,"column":30}},"type":"CallExpression","callee":{"range":[21801,21811],"loc":{"start":{"line":621,"column":15},"end":{"line":621,"column":25}},"type":"MemberExpression","computed":false,"object":{"range":[21801,21805],"loc":{"start":{"line":621,"column":15},"end":{"line":621,"column":19}},"type":"Identifier","name":"Math"},"property":{"range":[21806,21811],"loc":{"start":{"line":621,"column":20},"end":{"line":621,"column":25}},"type":"Identifier","name":"round"}},"arguments":[{"range":[21812,21815],"loc":{"start":{"line":621,"column":26},"end":{"line":621,"column":29}},"type":"Identifier","name":"num"}]}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[21833,22095],"loc":{"start":{"line":623,"column":6},"end":{"line":629,"column":7}},"type":"Property","key":{"range":[21833,21839],"loc":{"start":{"line":623,"column":6},"end":{"line":623,"column":12}},"type":"Identifier","name":"sorted"},"computed":false,"value":{"range":[21841,22095],"loc":{"start":{"line":623,"column":14},"end":{"line":629,"column":7}},"type":"FunctionExpression","id":null,"params":[{"range":[21851,21859],"loc":{"start":{"line":623,"column":24},"end":{"line":623,"column":32}},"type":"Identifier","name":"iterable"},{"range":[21861,21864],"loc":{"start":{"line":623,"column":34},"end":{"line":623,"column":37}},"type":"Identifier","name":"key"},{"range":[21866,21873],"loc":{"start":{"line":623,"column":39},"end":{"line":623,"column":46}},"type":"Identifier","name":"reverse"}],"defaults":[],"body":{"range":[21875,22095],"loc":{"start":{"line":623,"column":48},"end":{"line":629,"column":7}},"type":"BlockStatement","body":[{"range":[21885,21928],"loc":{"start":{"line":624,"column":8},"end":{"line":624,"column":51}},"type":"VariableDeclaration","declarations":[{"range":[21889,21927],"loc":{"start":{"line":624,"column":12},"end":{"line":624,"column":50}},"type":"VariableDeclarator","id":{"range":[21889,21892],"loc":{"start":{"line":624,"column":12},"end":{"line":624,"column":15}},"type":"Identifier","name":"ret"},"init":{"range":[21895,21927],"loc":{"start":{"line":624,"column":18},"end":{"line":624,"column":50}},"type":"NewExpression","callee":{"range":[21899,21925],"loc":{"start":{"line":624,"column":22},"end":{"line":624,"column":48}},"type":"MemberExpression","computed":false,"object":{"range":[21899,21920],"loc":{"start":{"line":624,"column":22},"end":{"line":624,"column":43}},"type":"MemberExpression","computed":false,"object":{"range":[21899,21912],"loc":{"start":{"line":624,"column":22},"end":{"line":624,"column":35}},"type":"Identifier","name":"pythonRuntime"},"property":{"range":[21913,21920],"loc":{"start":{"line":624,"column":36},"end":{"line":624,"column":43}},"type":"Identifier","name":"objects"}},"property":{"range":[21921,21925],"loc":{"start":{"line":624,"column":44},"end":{"line":624,"column":48}},"type":"Identifier","name":"list"}},"arguments":[]}}],"kind":"var"},{"range":[21937,21983],"loc":{"start":{"line":625,"column":8},"end":{"line":625,"column":54}},"type":"ForInStatement","left":{"range":[21942,21947],"loc":{"start":{"line":625,"column":13},"end":{"line":625,"column":18}},"type":"VariableDeclaration","declarations":[{"range":[21946,21947],"loc":{"start":{"line":625,"column":17},"end":{"line":625,"column":18}},"type":"VariableDeclarator","id":{"range":[21946,21947],"loc":{"start":{"line":625,"column":17},"end":{"line":625,"column":18}},"type":"Identifier","name":"i"},"init":null}],"kind":"var"},"right":{"range":[21951,21959],"loc":{"start":{"line":625,"column":22},"end":{"line":625,"column":30}},"type":"Identifier","name":"iterable"},"body":{"range":[21961,21983],"loc":{"start":{"line":625,"column":32},"end":{"line":625,"column":54}},"type":"ExpressionStatement","expression":{"range":[21961,21982],"loc":{"start":{"line":625,"column":32},"end":{"line":625,"column":53}},"type":"CallExpression","callee":{"range":[21961,21969],"loc":{"start":{"line":625,"column":32},"end":{"line":625,"column":40}},"type":"MemberExpression","computed":false,"object":{"range":[21961,21964],"loc":{"start":{"line":625,"column":32},"end":{"line":625,"column":35}},"type":"Identifier","name":"ret"},"property":{"range":[21965,21969],"loc":{"start":{"line":625,"column":36},"end":{"line":625,"column":40}},"type":"Identifier","name":"push"}},"arguments":[{"range":[21970,21981],"loc":{"start":{"line":625,"column":41},"end":{"line":625,"column":52}},"type":"MemberExpression","computed":true,"object":{"range":[21970,21978],"loc":{"start":{"line":625,"column":41},"end":{"line":625,"column":49}},"type":"Identifier","name":"iterable"},"property":{"range":[21979,21980],"loc":{"start":{"line":625,"column":50},"end":{"line":625,"column":51}},"type":"Identifier","name":"i"}}]}},"each":false},{"range":[21992,22031],"loc":{"start":{"line":626,"column":8},"end":{"line":626,"column":47}},"type":"IfStatement","test":{"range":[21995,21998],"loc":{"start":{"line":626,"column":11},"end":{"line":626,"column":14}},"type":"Identifier","name":"key"},"consequent":{"range":[22000,22014],"loc":{"start":{"line":626,"column":16},"end":{"line":626,"column":30}},"type":"ExpressionStatement","expression":{"range":[22000,22013],"loc":{"start":{"line":626,"column":16},"end":{"line":626,"column":29}},"type":"CallExpression","callee":{"range":[22000,22008],"loc":{"start":{"line":626,"column":16},"end":{"line":626,"column":24}},"type":"MemberExpression","computed":false,"object":{"range":[22000,22003],"loc":{"start":{"line":626,"column":16},"end":{"line":626,"column":19}},"type":"Identifier","name":"ret"},"property":{"range":[22004,22008],"loc":{"start":{"line":626,"column":20},"end":{"line":626,"column":24}},"type":"Identifier","name":"sort"}},"arguments":[{"range":[22009,22012],"loc":{"start":{"line":626,"column":25},"end":{"line":626,"column":28}},"type":"Identifier","name":"key"}]}},"alternate":{"range":[22020,22031],"loc":{"start":{"line":626,"column":36},"end":{"line":626,"column":47}},"type":"ExpressionStatement","expression":{"range":[22020,22030],"loc":{"start":{"line":626,"column":36},"end":{"line":626,"column":46}},"type":"CallExpression","callee":{"range":[22020,22028],"loc":{"start":{"line":626,"column":36},"end":{"line":626,"column":44}},"type":"MemberExpression","computed":false,"object":{"range":[22020,22023],"loc":{"start":{"line":626,"column":36},"end":{"line":626,"column":39}},"type":"Identifier","name":"ret"},"property":{"range":[22024,22028],"loc":{"start":{"line":626,"column":40},"end":{"line":626,"column":44}},"type":"Identifier","name":"sort"}},"arguments":[]}}},{"range":[22040,22067],"loc":{"start":{"line":627,"column":8},"end":{"line":627,"column":35}},"type":"IfStatement","test":{"range":[22044,22051],"loc":{"start":{"line":627,"column":12},"end":{"line":627,"column":19}},"type":"Identifier","name":"reverse"},"consequent":{"range":[22053,22067],"loc":{"start":{"line":627,"column":21},"end":{"line":627,"column":35}},"type":"ExpressionStatement","expression":{"range":[22053,22066],"loc":{"start":{"line":627,"column":21},"end":{"line":627,"column":34}},"type":"CallExpression","callee":{"range":[22053,22064],"loc":{"start":{"line":627,"column":21},"end":{"line":627,"column":32}},"type":"MemberExpression","computed":false,"object":{"range":[22053,22056],"loc":{"start":{"line":627,"column":21},"end":{"line":627,"column":24}},"type":"Identifier","name":"ret"},"property":{"range":[22057,22064],"loc":{"start":{"line":627,"column":25},"end":{"line":627,"column":32}},"type":"Identifier","name":"reverse"}},"arguments":[]}},"alternate":null},{"range":[22076,22087],"loc":{"start":{"line":628,"column":8},"end":{"line":628,"column":19}},"type":"ReturnStatement","argument":{"range":[22083,22086],"loc":{"start":{"line":628,"column":15},"end":{"line":628,"column":18}},"type":"Identifier","name":"ret"}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[22103,22163],"loc":{"start":{"line":630,"column":6},"end":{"line":632,"column":7}},"type":"Property","key":{"range":[22103,22106],"loc":{"start":{"line":630,"column":6},"end":{"line":630,"column":9}},"type":"Identifier","name":"str"},"computed":false,"value":{"range":[22108,22163],"loc":{"start":{"line":630,"column":11},"end":{"line":632,"column":7}},"type":"FunctionExpression","id":null,"params":[{"range":[22118,22121],"loc":{"start":{"line":630,"column":21},"end":{"line":630,"column":24}},"type":"Identifier","name":"obj"}],"defaults":[],"body":{"range":[22123,22163],"loc":{"start":{"line":630,"column":26},"end":{"line":632,"column":7}},"type":"BlockStatement","body":[{"range":[22133,22155],"loc":{"start":{"line":631,"column":8},"end":{"line":631,"column":30}},"type":"ReturnStatement","argument":{"range":[22140,22154],"loc":{"start":{"line":631,"column":15},"end":{"line":631,"column":29}},"type":"CallExpression","callee":{"range":[22140,22152],"loc":{"start":{"line":631,"column":15},"end":{"line":631,"column":27}},"type":"MemberExpression","computed":false,"object":{"range":[22140,22143],"loc":{"start":{"line":631,"column":15},"end":{"line":631,"column":18}},"type":"Identifier","name":"obj"},"property":{"range":[22144,22152],"loc":{"start":{"line":631,"column":19},"end":{"line":631,"column":27}},"type":"Identifier","name":"toString"}},"arguments":[]}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[22171,22355],"loc":{"start":{"line":633,"column":6},"end":{"line":638,"column":7}},"type":"Property","key":{"range":[22171,22174],"loc":{"start":{"line":633,"column":6},"end":{"line":633,"column":9}},"type":"Identifier","name":"sum"},"computed":false,"value":{"range":[22176,22355],"loc":{"start":{"line":633,"column":11},"end":{"line":638,"column":7}},"type":"FunctionExpression","id":null,"params":[{"range":[22186,22194],"loc":{"start":{"line":633,"column":21},"end":{"line":633,"column":29}},"type":"Identifier","name":"iterable"},{"range":[22196,22201],"loc":{"start":{"line":633,"column":31},"end":{"line":633,"column":36}},"type":"Identifier","name":"start"}],"defaults":[],"body":{"range":[22203,22355],"loc":{"start":{"line":633,"column":38},"end":{"line":638,"column":7}},"type":"BlockStatement","body":[{"range":[22254,22275],"loc":{"start":{"line":635,"column":8},"end":{"line":635,"column":29}},"type":"VariableDeclaration","declarations":[{"range":[22258,22274],"loc":{"start":{"line":635,"column":12},"end":{"line":635,"column":28}},"type":"VariableDeclarator","id":{"range":[22258,22261],"loc":{"start":{"line":635,"column":12},"end":{"line":635,"column":15}},"type":"Identifier","name":"ret"},"init":{"range":[22264,22274],"loc":{"start":{"line":635,"column":18},"end":{"line":635,"column":28}},"type":"LogicalExpression","operator":"||","left":{"range":[22264,22269],"loc":{"start":{"line":635,"column":18},"end":{"line":635,"column":23}},"type":"Identifier","name":"start"},"right":{"range":[22273,22274],"loc":{"start":{"line":635,"column":27},"end":{"line":635,"column":28}},"type":"Literal","value":0,"raw":"0"}}}],"kind":"var"},{"range":[22284,22327],"loc":{"start":{"line":636,"column":8},"end":{"line":636,"column":51}},"type":"ForInStatement","left":{"range":[22289,22294],"loc":{"start":{"line":636,"column":13},"end":{"line":636,"column":18}},"type":"VariableDeclaration","declarations":[{"range":[22293,22294],"loc":{"start":{"line":636,"column":17},"end":{"line":636,"column":18}},"type":"VariableDeclarator","id":{"range":[22293,22294],"loc":{"start":{"line":636,"column":17},"end":{"line":636,"column":18}},"type":"Identifier","name":"i"},"init":null}],"kind":"var"},"right":{"range":[22298,22306],"loc":{"start":{"line":636,"column":22},"end":{"line":636,"column":30}},"type":"Identifier","name":"iterable"},"body":{"range":[22308,22327],"loc":{"start":{"line":636,"column":32},"end":{"line":636,"column":51}},"type":"ExpressionStatement","expression":{"range":[22308,22326],"loc":{"start":{"line":636,"column":32},"end":{"line":636,"column":50}},"type":"AssignmentExpression","operator":"+=","left":{"range":[22308,22311],"loc":{"start":{"line":636,"column":32},"end":{"line":636,"column":35}},"type":"Identifier","name":"ret"},"right":{"range":[22315,22326],"loc":{"start":{"line":636,"column":39},"end":{"line":636,"column":50}},"type":"MemberExpression","computed":true,"object":{"range":[22315,22323],"loc":{"start":{"line":636,"column":39},"end":{"line":636,"column":47}},"type":"Identifier","name":"iterable"},"property":{"range":[22324,22325],"loc":{"start":{"line":636,"column":48},"end":{"line":636,"column":49}},"type":"Identifier","name":"i"}}}},"each":false},{"range":[22336,22347],"loc":{"start":{"line":637,"column":8},"end":{"line":637,"column":19}},"type":"ReturnStatement","argument":{"range":[22343,22346],"loc":{"start":{"line":637,"column":15},"end":{"line":637,"column":18}},"type":"Identifier","name":"ret"}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false},{"range":[22363,22527],"loc":{"start":{"line":639,"column":6},"end":{"line":643,"column":7}},"type":"Property","key":{"range":[22363,22368],"loc":{"start":{"line":639,"column":6},"end":{"line":639,"column":11}},"type":"Identifier","name":"tuple"},"computed":false,"value":{"range":[22370,22527],"loc":{"start":{"line":639,"column":13},"end":{"line":643,"column":7}},"type":"FunctionExpression","id":null,"params":[{"range":[22380,22388],"loc":{"start":{"line":639,"column":23},"end":{"line":639,"column":31}},"type":"Identifier","name":"iterable"}],"defaults":[],"body":{"range":[22390,22527],"loc":{"start":{"line":639,"column":33},"end":{"line":643,"column":7}},"type":"BlockStatement","body":[{"range":[22400,22444],"loc":{"start":{"line":640,"column":8},"end":{"line":640,"column":52}},"type":"VariableDeclaration","declarations":[{"range":[22404,22443],"loc":{"start":{"line":640,"column":12},"end":{"line":640,"column":51}},"type":"VariableDeclarator","id":{"range":[22404,22407],"loc":{"start":{"line":640,"column":12},"end":{"line":640,"column":15}},"type":"Identifier","name":"ret"},"init":{"range":[22410,22443],"loc":{"start":{"line":640,"column":18},"end":{"line":640,"column":51}},"type":"NewExpression","callee":{"range":[22414,22441],"loc":{"start":{"line":640,"column":22},"end":{"line":640,"column":49}},"type":"MemberExpression","computed":false,"object":{"range":[22414,22435],"loc":{"start":{"line":640,"column":22},"end":{"line":640,"column":43}},"type":"MemberExpression","computed":false,"object":{"range":[22414,22427],"loc":{"start":{"line":640,"column":22},"end":{"line":640,"column":35}},"type":"Identifier","name":"pythonRuntime"},"property":{"range":[22428,22435],"loc":{"start":{"line":640,"column":36},"end":{"line":640,"column":43}},"type":"Identifier","name":"objects"}},"property":{"range":[22436,22441],"loc":{"start":{"line":640,"column":44},"end":{"line":640,"column":49}},"type":"Identifier","name":"tuple"}},"arguments":[]}}],"kind":"var"},{"range":[22453,22499],"loc":{"start":{"line":641,"column":8},"end":{"line":641,"column":54}},"type":"ForInStatement","left":{"range":[22458,22463],"loc":{"start":{"line":641,"column":13},"end":{"line":641,"column":18}},"type":"VariableDeclaration","declarations":[{"range":[22462,22463],"loc":{"start":{"line":641,"column":17},"end":{"line":641,"column":18}},"type":"VariableDeclarator","id":{"range":[22462,22463],"loc":{"start":{"line":641,"column":17},"end":{"line":641,"column":18}},"type":"Identifier","name":"i"},"init":null}],"kind":"var"},"right":{"range":[22467,22475],"loc":{"start":{"line":641,"column":22},"end":{"line":641,"column":30}},"type":"Identifier","name":"iterable"},"body":{"range":[22477,22499],"loc":{"start":{"line":641,"column":32},"end":{"line":641,"column":54}},"type":"ExpressionStatement","expression":{"range":[22477,22498],"loc":{"start":{"line":641,"column":32},"end":{"line":641,"column":53}},"type":"CallExpression","callee":{"range":[22477,22485],"loc":{"start":{"line":641,"column":32},"end":{"line":641,"column":40}},"type":"MemberExpression","computed":false,"object":{"range":[22477,22480],"loc":{"start":{"line":641,"column":32},"end":{"line":641,"column":35}},"type":"Identifier","name":"ret"},"property":{"range":[22481,22485],"loc":{"start":{"line":641,"column":36},"end":{"line":641,"column":40}},"type":"Identifier","name":"push"}},"arguments":[{"range":[22486,22497],"loc":{"start":{"line":641,"column":41},"end":{"line":641,"column":52}},"type":"MemberExpression","computed":true,"object":{"range":[22486,22494],"loc":{"start":{"line":641,"column":41},"end":{"line":641,"column":49}},"type":"Identifier","name":"iterable"},"property":{"range":[22495,22496],"loc":{"start":{"line":641,"column":50},"end":{"line":641,"column":51}},"type":"Identifier","name":"i"}}]}},"each":false},{"range":[22508,22519],"loc":{"start":{"line":642,"column":8},"end":{"line":642,"column":19}},"type":"ReturnStatement","argument":{"range":[22515,22518],"loc":{"start":{"line":642,"column":15},"end":{"line":642,"column":18}},"type":"Identifier","name":"ret"}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false}]},"kind":"init","method":false,"shorthand":false},{"range":[22595,22689],"loc":{"start":{"line":649,"column":4},"end":{"line":653,"column":5}},"type":"Property","key":{"range":[22595,22602],"loc":{"start":{"line":649,"column":4},"end":{"line":649,"column":11}},"type":"Identifier","name":"imports"},"computed":false,"value":{"range":[22604,22689],"loc":{"start":{"line":649,"column":13},"end":{"line":653,"column":5}},"type":"ObjectExpression","properties":[{"range":[22612,22683],"loc":{"start":{"line":650,"column":6},"end":{"line":652,"column":7}},"type":"Property","key":{"range":[22612,22618],"loc":{"start":{"line":650,"column":6},"end":{"line":650,"column":12}},"type":"Identifier","name":"random"},"computed":false,"value":{"range":[22620,22683],"loc":{"start":{"line":650,"column":14},"end":{"line":652,"column":7}},"type":"ObjectExpression","properties":[{"range":[22630,22675],"loc":{"start":{"line":651,"column":8},"end":{"line":651,"column":53}},"type":"Property","key":{"range":[22630,22636],"loc":{"start":{"line":651,"column":8},"end":{"line":651,"column":14}},"type":"Identifier","name":"random"},"computed":false,"value":{"range":[22638,22675],"loc":{"start":{"line":651,"column":16},"end":{"line":651,"column":53}},"type":"FunctionExpression","id":null,"params":[],"defaults":[],"body":{"range":[22650,22675],"loc":{"start":{"line":651,"column":28},"end":{"line":651,"column":53}},"type":"BlockStatement","body":[{"range":[22652,22673],"loc":{"start":{"line":651,"column":30},"end":{"line":651,"column":51}},"type":"ReturnStatement","argument":{"range":[22659,22672],"loc":{"start":{"line":651,"column":37},"end":{"line":651,"column":50}},"type":"CallExpression","callee":{"range":[22659,22670],"loc":{"start":{"line":651,"column":37},"end":{"line":651,"column":48}},"type":"MemberExpression","computed":false,"object":{"range":[22659,22663],"loc":{"start":{"line":651,"column":37},"end":{"line":651,"column":41}},"type":"Identifier","name":"Math"},"property":{"range":[22664,22670],"loc":{"start":{"line":651,"column":42},"end":{"line":651,"column":48}},"type":"Identifier","name":"random"}},"arguments":[]}}]},"generator":false,"expression":false},"kind":"init","method":false,"shorthand":false}]},"kind":"init","method":false,"shorthand":false}]},"kind":"init","method":false,"shorthand":false}]}}],"kind":"var"},{"range":[22698,22726],"loc":{"start":{"line":656,"column":2},"end":{"line":658,"column":3}},"type":"FunctionDeclaration","id":{"range":[22707,22717],"loc":{"start":{"line":656,"column":11},"end":{"line":656,"column":21}},"type":"Identifier","name":"PythonDict"},"params":[],"defaults":[],"body":{"range":[22720,22726],"loc":{"start":{"line":656,"column":24},"end":{"line":658,"column":3}},"type":"BlockStatement","body":[]},"generator":false,"expression":false},{"range":[22730,22820],"loc":{"start":{"line":660,"column":2},"end":{"line":660,"column":92}},"type":"ExpressionStatement","expression":{"range":[22730,22819],"loc":{"start":{"line":660,"column":2},"end":{"line":660,"column":91}},"type":"CallExpression","callee":{"range":[22730,22753],"loc":{"start":{"line":660,"column":2},"end":{"line":660,"column":25}},"type":"MemberExpression","computed":false,"object":{"range":[22730,22736],"loc":{"start":{"line":660,"column":2},"end":{"line":660,"column":8}},"type":"Identifier","name":"Object"},"property":{"range":[22737,22753],"loc":{"start":{"line":660,"column":9},"end":{"line":660,"column":25}},"type":"Identifier","name":"defineProperties"}},"arguments":[{"range":[22754,22774],"loc":{"start":{"line":660,"column":26},"end":{"line":660,"column":46}},"type":"MemberExpression","computed":false,"object":{"range":[22754,22764],"loc":{"start":{"line":660,"column":26},"end":{"line":660,"column":36}},"type":"Identifier","name":"PythonDict"},"property":{"range":[22765,22774],"loc":{"start":{"line":660,"column":37},"end":{"line":660,"column":46}},"type":"Identifier","name":"prototype"}},{"range":[22776,22818],"loc":{"start":{"line":660,"column":48},"end":{"line":660,"column":90}},"type":"MemberExpression","computed":false,"object":{"range":[22776,22795],"loc":{"start":{"line":660,"column":48},"end":{"line":660,"column":67}},"type":"MemberExpression","computed":false,"object":{"range":[22776,22789],"loc":{"start":{"line":660,"column":48},"end":{"line":660,"column":61}},"type":"Identifier","name":"pythonRuntime"},"property":{"range":[22790,22795],"loc":{"start":{"line":660,"column":62},"end":{"line":660,"column":67}},"type":"Identifier","name":"utils"}},"property":{"range":[22796,22818],"loc":{"start":{"line":660,"column":68},"end":{"line":660,"column":90}},"type":"Identifier","name":"dictPropertyDescriptor"}}]}},{"range":[22823,22844],"loc":{"start":{"line":661,"column":2},"end":{"line":661,"column":23}},"type":"ReturnStatement","argument":{"range":[22830,22843],"loc":{"start":{"line":661,"column":9},"end":{"line":661,"column":22}},"type":"Identifier","name":"pythonRuntime"}}]},"generator":false,"expression":false}]}}],"sourceType":"script"}

},{}],23:[function(require,module,exports){
(function (global){
/*
  Copyright (C) 2012-2013 Yusuke Suzuki <utatane.tea@gmail.com>
  Copyright (C) 2012-2013 Michael Ficarra <escodegen.copyright@michael.ficarra.me>
  Copyright (C) 2012-2013 Mathias Bynens <mathias@qiwi.be>
  Copyright (C) 2013 Irakli Gozalishvili <rfobic@gmail.com>
  Copyright (C) 2012 Robert Gust-Bardon <donate@robert.gust-bardon.org>
  Copyright (C) 2012 John Freeman <jfreeman08@gmail.com>
  Copyright (C) 2011-2012 Ariya Hidayat <ariya.hidayat@gmail.com>
  Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>
  Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>
  Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/*global exports:true, generateStatement:true, generateExpression:true, require:true, global:true*/
(function () {
    'use strict';

    var Syntax,
        Precedence,
        BinaryPrecedence,
        SourceNode,
        estraverse,
        esutils,
        isArray,
        base,
        indent,
        json,
        renumber,
        hexadecimal,
        quotes,
        escapeless,
        newline,
        space,
        parentheses,
        semicolons,
        safeConcatenation,
        directive,
        extra,
        parse,
        sourceMap,
        FORMAT_MINIFY,
        FORMAT_DEFAULTS;

    estraverse = require('estraverse');
    esutils = require('esutils');

    Syntax = {
        AssignmentExpression: 'AssignmentExpression',
        ArrayExpression: 'ArrayExpression',
        ArrayPattern: 'ArrayPattern',
        ArrowFunctionExpression: 'ArrowFunctionExpression',
        BlockStatement: 'BlockStatement',
        BinaryExpression: 'BinaryExpression',
        BreakStatement: 'BreakStatement',
        CallExpression: 'CallExpression',
        CatchClause: 'CatchClause',
        ComprehensionBlock: 'ComprehensionBlock',
        ComprehensionExpression: 'ComprehensionExpression',
        ConditionalExpression: 'ConditionalExpression',
        ContinueStatement: 'ContinueStatement',
        DirectiveStatement: 'DirectiveStatement',
        DoWhileStatement: 'DoWhileStatement',
        DebuggerStatement: 'DebuggerStatement',
        EmptyStatement: 'EmptyStatement',
        ExportDeclaration: 'ExportDeclaration',
        ExpressionStatement: 'ExpressionStatement',
        ForStatement: 'ForStatement',
        ForInStatement: 'ForInStatement',
        ForOfStatement: 'ForOfStatement',
        FunctionDeclaration: 'FunctionDeclaration',
        FunctionExpression: 'FunctionExpression',
        GeneratorExpression: 'GeneratorExpression',
        Identifier: 'Identifier',
        IfStatement: 'IfStatement',
        ImportDeclaration: 'ImportDeclaration',
        Literal: 'Literal',
        LabeledStatement: 'LabeledStatement',
        LogicalExpression: 'LogicalExpression',
        MemberExpression: 'MemberExpression',
        NewExpression: 'NewExpression',
        ObjectExpression: 'ObjectExpression',
        ObjectPattern: 'ObjectPattern',
        Program: 'Program',
        Property: 'Property',
        ReturnStatement: 'ReturnStatement',
        SequenceExpression: 'SequenceExpression',
        SwitchStatement: 'SwitchStatement',
        SwitchCase: 'SwitchCase',
        ThisExpression: 'ThisExpression',
        ThrowStatement: 'ThrowStatement',
        TryStatement: 'TryStatement',
        UnaryExpression: 'UnaryExpression',
        UpdateExpression: 'UpdateExpression',
        VariableDeclaration: 'VariableDeclaration',
        VariableDeclarator: 'VariableDeclarator',
        WhileStatement: 'WhileStatement',
        WithStatement: 'WithStatement',
        YieldExpression: 'YieldExpression'
    };

    Precedence = {
        Sequence: 0,
        Yield: 1,
        Assignment: 1,
        Conditional: 2,
        ArrowFunction: 2,
        LogicalOR: 3,
        LogicalAND: 4,
        BitwiseOR: 5,
        BitwiseXOR: 6,
        BitwiseAND: 7,
        Equality: 8,
        Relational: 9,
        BitwiseSHIFT: 10,
        Additive: 11,
        Multiplicative: 12,
        Unary: 13,
        Postfix: 14,
        Call: 15,
        New: 16,
        Member: 17,
        Primary: 18
    };

    BinaryPrecedence = {
        '||': Precedence.LogicalOR,
        '&&': Precedence.LogicalAND,
        '|': Precedence.BitwiseOR,
        '^': Precedence.BitwiseXOR,
        '&': Precedence.BitwiseAND,
        '==': Precedence.Equality,
        '!=': Precedence.Equality,
        '===': Precedence.Equality,
        '!==': Precedence.Equality,
        'is': Precedence.Equality,
        'isnt': Precedence.Equality,
        '<': Precedence.Relational,
        '>': Precedence.Relational,
        '<=': Precedence.Relational,
        '>=': Precedence.Relational,
        'in': Precedence.Relational,
        'instanceof': Precedence.Relational,
        '<<': Precedence.BitwiseSHIFT,
        '>>': Precedence.BitwiseSHIFT,
        '>>>': Precedence.BitwiseSHIFT,
        '+': Precedence.Additive,
        '-': Precedence.Additive,
        '*': Precedence.Multiplicative,
        '%': Precedence.Multiplicative,
        '/': Precedence.Multiplicative
    };

    function getDefaultOptions() {
        // default options
        return {
            indent: null,
            base: null,
            parse: null,
            comment: false,
            format: {
                indent: {
                    style: '    ',
                    base: 0,
                    adjustMultilineComment: false
                },
                newline: '\n',
                space: ' ',
                json: false,
                renumber: false,
                hexadecimal: false,
                quotes: 'single',
                escapeless: false,
                compact: false,
                parentheses: true,
                semicolons: true,
                safeConcatenation: false
            },
            moz: {
                comprehensionExpressionStartsWithAssignment: false,
                starlessGenerator: false,
                parenthesizedComprehensionBlock: false
            },
            sourceMap: null,
            sourceMapRoot: null,
            sourceMapWithCode: false,
            directive: false,
            raw: true,
            verbatim: null
        };
    }

    function stringRepeat(str, num) {
        var result = '';

        for (num |= 0; num > 0; num >>>= 1, str += str) {
            if (num & 1) {
                result += str;
            }
        }

        return result;
    }

    isArray = Array.isArray;
    if (!isArray) {
        isArray = function isArray(array) {
            return Object.prototype.toString.call(array) === '[object Array]';
        };
    }

    function hasLineTerminator(str) {
        return (/[\r\n]/g).test(str);
    }

    function endsWithLineTerminator(str) {
        var len = str.length;
        return len && esutils.code.isLineTerminator(str.charCodeAt(len - 1));
    }

    function updateDeeply(target, override) {
        var key, val;

        function isHashObject(target) {
            return typeof target === 'object' && target instanceof Object && !(target instanceof RegExp);
        }

        for (key in override) {
            if (override.hasOwnProperty(key)) {
                val = override[key];
                if (isHashObject(val)) {
                    if (isHashObject(target[key])) {
                        updateDeeply(target[key], val);
                    } else {
                        target[key] = updateDeeply({}, val);
                    }
                } else {
                    target[key] = val;
                }
            }
        }
        return target;
    }

    function generateNumber(value) {
        var result, point, temp, exponent, pos;

        if (value !== value) {
            throw new Error('Numeric literal whose value is NaN');
        }
        if (value < 0 || (value === 0 && 1 / value < 0)) {
            throw new Error('Numeric literal whose value is negative');
        }

        if (value === 1 / 0) {
            return json ? 'null' : renumber ? '1e400' : '1e+400';
        }

        result = '' + value;
        if (!renumber || result.length < 3) {
            return result;
        }

        point = result.indexOf('.');
        if (!json && result.charCodeAt(0) === 0x30  /* 0 */ && point === 1) {
            point = 0;
            result = result.slice(1);
        }
        temp = result;
        result = result.replace('e+', 'e');
        exponent = 0;
        if ((pos = temp.indexOf('e')) > 0) {
            exponent = +temp.slice(pos + 1);
            temp = temp.slice(0, pos);
        }
        if (point >= 0) {
            exponent -= temp.length - point - 1;
            temp = +(temp.slice(0, point) + temp.slice(point + 1)) + '';
        }
        pos = 0;
        while (temp.charCodeAt(temp.length + pos - 1) === 0x30  /* 0 */) {
            --pos;
        }
        if (pos !== 0) {
            exponent -= pos;
            temp = temp.slice(0, pos);
        }
        if (exponent !== 0) {
            temp += 'e' + exponent;
        }
        if ((temp.length < result.length ||
                    (hexadecimal && value > 1e12 && Math.floor(value) === value && (temp = '0x' + value.toString(16)).length < result.length)) &&
                +temp === value) {
            result = temp;
        }

        return result;
    }

    // Generate valid RegExp expression.
    // This function is based on https://github.com/Constellation/iv Engine

    function escapeRegExpCharacter(ch, previousIsBackslash) {
        // not handling '\' and handling \u2028 or \u2029 to unicode escape sequence
        if ((ch & ~1) === 0x2028) {
            return (previousIsBackslash ? 'u' : '\\u') + ((ch === 0x2028) ? '2028' : '2029');
        } else if (ch === 10 || ch === 13) {  // \n, \r
            return (previousIsBackslash ? '' : '\\') + ((ch === 10) ? 'n' : 'r');
        }
        return String.fromCharCode(ch);
    }

    function generateRegExp(reg) {
        var match, result, flags, i, iz, ch, characterInBrack, previousIsBackslash;

        result = reg.toString();

        if (reg.source) {
            // extract flag from toString result
            match = result.match(/\/([^/]*)$/);
            if (!match) {
                return result;
            }

            flags = match[1];
            result = '';

            characterInBrack = false;
            previousIsBackslash = false;
            for (i = 0, iz = reg.source.length; i < iz; ++i) {
                ch = reg.source.charCodeAt(i);

                if (!previousIsBackslash) {
                    if (characterInBrack) {
                        if (ch === 93) {  // ]
                            characterInBrack = false;
                        }
                    } else {
                        if (ch === 47) {  // /
                            result += '\\';
                        } else if (ch === 91) {  // [
                            characterInBrack = true;
                        }
                    }
                    result += escapeRegExpCharacter(ch, previousIsBackslash);
                    previousIsBackslash = ch === 92;  // \
                } else {
                    // if new RegExp("\\\n') is provided, create /\n/
                    result += escapeRegExpCharacter(ch, previousIsBackslash);
                    // prevent like /\\[/]/
                    previousIsBackslash = false;
                }
            }

            return '/' + result + '/' + flags;
        }

        return result;
    }

    function escapeAllowedCharacter(code, next) {
        var hex, result = '\\';

        switch (code) {
        case 0x08  /* \b */:
            result += 'b';
            break;
        case 0x0C  /* \f */:
            result += 'f';
            break;
        case 0x09  /* \t */:
            result += 't';
            break;
        default:
            hex = code.toString(16).toUpperCase();
            if (json || code > 0xFF) {
                result += 'u' + '0000'.slice(hex.length) + hex;
            } else if (code === 0x0000 && !esutils.code.isDecimalDigit(next)) {
                result += '0';
            } else if (code === 0x000B  /* \v */) { // '\v'
                result += 'x0B';
            } else {
                result += 'x' + '00'.slice(hex.length) + hex;
            }
            break;
        }

        return result;
    }

    function escapeDisallowedCharacter(code) {
        var result = '\\';
        switch (code) {
        case 0x5C  /* \ */:
            result += '\\';
            break;
        case 0x0A  /* \n */:
            result += 'n';
            break;
        case 0x0D  /* \r */:
            result += 'r';
            break;
        case 0x2028:
            result += 'u2028';
            break;
        case 0x2029:
            result += 'u2029';
            break;
        default:
            throw new Error('Incorrectly classified character');
        }

        return result;
    }

    function escapeDirective(str) {
        var i, iz, code, quote;

        quote = quotes === 'double' ? '"' : '\'';
        for (i = 0, iz = str.length; i < iz; ++i) {
            code = str.charCodeAt(i);
            if (code === 0x27  /* ' */) {
                quote = '"';
                break;
            } else if (code === 0x22  /* " */) {
                quote = '\'';
                break;
            } else if (code === 0x5C  /* \ */) {
                ++i;
            }
        }

        return quote + str + quote;
    }

    function escapeString(str) {
        var result = '', i, len, code, singleQuotes = 0, doubleQuotes = 0, single, quote;

        for (i = 0, len = str.length; i < len; ++i) {
            code = str.charCodeAt(i);
            if (code === 0x27  /* ' */) {
                ++singleQuotes;
            } else if (code === 0x22  /* " */) {
                ++doubleQuotes;
            } else if (code === 0x2F  /* / */ && json) {
                result += '\\';
            } else if (esutils.code.isLineTerminator(code) || code === 0x5C  /* \ */) {
                result += escapeDisallowedCharacter(code);
                continue;
            } else if ((json && code < 0x20  /* SP */) || !(json || escapeless || (code >= 0x20  /* SP */ && code <= 0x7E  /* ~ */))) {
                result += escapeAllowedCharacter(code, str.charCodeAt(i + 1));
                continue;
            }
            result += String.fromCharCode(code);
        }

        single = !(quotes === 'double' || (quotes === 'auto' && doubleQuotes < singleQuotes));
        quote = single ? '\'' : '"';

        if (!(single ? singleQuotes : doubleQuotes)) {
            return quote + result + quote;
        }

        str = result;
        result = quote;

        for (i = 0, len = str.length; i < len; ++i) {
            code = str.charCodeAt(i);
            if ((code === 0x27  /* ' */ && single) || (code === 0x22  /* " */ && !single)) {
                result += '\\';
            }
            result += String.fromCharCode(code);
        }

        return result + quote;
    }

    /**
     * flatten an array to a string, where the array can contain
     * either strings or nested arrays
     */
    function flattenToString(arr) {
        var i, iz, elem, result = '';
        for (i = 0, iz = arr.length; i < iz; ++i) {
            elem = arr[i];
            result += isArray(elem) ? flattenToString(elem) : elem;
        }
        return result;
    }

    /**
     * convert generated to a SourceNode when source maps are enabled.
     */
    function toSourceNodeWhenNeeded(generated, node) {
        if (!sourceMap) {
            // with no source maps, generated is either an
            // array or a string.  if an array, flatten it.
            // if a string, just return it
            if (isArray(generated)) {
                return flattenToString(generated);
            } else {
                return generated;
            }
        }
        if (node == null) {
            if (generated instanceof SourceNode) {
                return generated;
            } else {
                node = {};
            }
        }
        if (node.loc == null) {
            return new SourceNode(null, null, sourceMap, generated, node.name || null);
        }
        return new SourceNode(node.loc.start.line, node.loc.start.column, (sourceMap === true ? node.loc.source || null : sourceMap), generated, node.name || null);
    }

    function noEmptySpace() {
        return (space) ? space : ' ';
    }

    function join(left, right) {
        var leftSource = toSourceNodeWhenNeeded(left).toString(),
            rightSource = toSourceNodeWhenNeeded(right).toString(),
            leftCharCode = leftSource.charCodeAt(leftSource.length - 1),
            rightCharCode = rightSource.charCodeAt(0);

        if ((leftCharCode === 0x2B  /* + */ || leftCharCode === 0x2D  /* - */) && leftCharCode === rightCharCode ||
        esutils.code.isIdentifierPart(leftCharCode) && esutils.code.isIdentifierPart(rightCharCode) ||
        leftCharCode === 0x2F  /* / */ && rightCharCode === 0x69  /* i */) { // infix word operators all start with `i`
            return [left, noEmptySpace(), right];
        } else if (esutils.code.isWhiteSpace(leftCharCode) || esutils.code.isLineTerminator(leftCharCode) ||
                esutils.code.isWhiteSpace(rightCharCode) || esutils.code.isLineTerminator(rightCharCode)) {
            return [left, right];
        }
        return [left, space, right];
    }

    function addIndent(stmt) {
        return [base, stmt];
    }

    function withIndent(fn) {
        var previousBase, result;
        previousBase = base;
        base += indent;
        result = fn.call(this, base);
        base = previousBase;
        return result;
    }

    function calculateSpaces(str) {
        var i;
        for (i = str.length - 1; i >= 0; --i) {
            if (esutils.code.isLineTerminator(str.charCodeAt(i))) {
                break;
            }
        }
        return (str.length - 1) - i;
    }

    function adjustMultilineComment(value, specialBase) {
        var array, i, len, line, j, spaces, previousBase, sn;

        array = value.split(/\r\n|[\r\n]/);
        spaces = Number.MAX_VALUE;

        // first line doesn't have indentation
        for (i = 1, len = array.length; i < len; ++i) {
            line = array[i];
            j = 0;
            while (j < line.length && esutils.code.isWhiteSpace(line.charCodeAt(j))) {
                ++j;
            }
            if (spaces > j) {
                spaces = j;
            }
        }

        if (typeof specialBase !== 'undefined') {
            // pattern like
            // {
            //   var t = 20;  /*
            //                 * this is comment
            //                 */
            // }
            previousBase = base;
            if (array[1][spaces] === '*') {
                specialBase += ' ';
            }
            base = specialBase;
        } else {
            if (spaces & 1) {
                // /*
                //  *
                //  */
                // If spaces are odd number, above pattern is considered.
                // We waste 1 space.
                --spaces;
            }
            previousBase = base;
        }

        for (i = 1, len = array.length; i < len; ++i) {
            sn = toSourceNodeWhenNeeded(addIndent(array[i].slice(spaces)));
            array[i] = sourceMap ? sn.join('') : sn;
        }

        base = previousBase;

        return array.join('\n');
    }

    function generateComment(comment, specialBase) {
        if (comment.type === 'Line') {
            if (endsWithLineTerminator(comment.value)) {
                return '//' + comment.value;
            } else {
                // Always use LineTerminator
                return '//' + comment.value + '\n';
            }
        }
        if (extra.format.indent.adjustMultilineComment && /[\n\r]/.test(comment.value)) {
            return adjustMultilineComment('/*' + comment.value + '*/', specialBase);
        }
        return '/*' + comment.value + '*/';
    }

    function addComments(stmt, result) {
        var i, len, comment, save, tailingToStatement, specialBase, fragment;

        if (stmt.leadingComments && stmt.leadingComments.length > 0) {
            save = result;

            comment = stmt.leadingComments[0];
            result = [];
            if (safeConcatenation && stmt.type === Syntax.Program && stmt.body.length === 0) {
                result.push('\n');
            }
            result.push(generateComment(comment));
            if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
                result.push('\n');
            }

            for (i = 1, len = stmt.leadingComments.length; i < len; ++i) {
                comment = stmt.leadingComments[i];
                fragment = [generateComment(comment)];
                if (!endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {
                    fragment.push('\n');
                }
                result.push(addIndent(fragment));
            }

            result.push(addIndent(save));
        }

        if (stmt.trailingComments) {
            tailingToStatement = !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString());
            specialBase = stringRepeat(' ', calculateSpaces(toSourceNodeWhenNeeded([base, result, indent]).toString()));
            for (i = 0, len = stmt.trailingComments.length; i < len; ++i) {
                comment = stmt.trailingComments[i];
                if (tailingToStatement) {
                    // We assume target like following script
                    //
                    // var t = 20;  /**
                    //               * This is comment of t
                    //               */
                    if (i === 0) {
                        // first case
                        result = [result, indent];
                    } else {
                        result = [result, specialBase];
                    }
                    result.push(generateComment(comment, specialBase));
                } else {
                    result = [result, addIndent(generateComment(comment))];
                }
                if (i !== len - 1 && !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
                    result = [result, '\n'];
                }
            }
        }

        return result;
    }

    function parenthesize(text, current, should) {
        if (current < should) {
            return ['(', text, ')'];
        }
        return text;
    }

    function maybeBlock(stmt, semicolonOptional, functionBody) {
        var result, noLeadingComment;

        noLeadingComment = !extra.comment || !stmt.leadingComments;

        if (stmt.type === Syntax.BlockStatement && noLeadingComment) {
            return [space, generateStatement(stmt, { functionBody: functionBody })];
        }

        if (stmt.type === Syntax.EmptyStatement && noLeadingComment) {
            return ';';
        }

        withIndent(function () {
            result = [newline, addIndent(generateStatement(stmt, { semicolonOptional: semicolonOptional, functionBody: functionBody }))];
        });

        return result;
    }

    function maybeBlockSuffix(stmt, result) {
        var ends = endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString());
        if (stmt.type === Syntax.BlockStatement && (!extra.comment || !stmt.leadingComments) && !ends) {
            return [result, space];
        }
        if (ends) {
            return [result, base];
        }
        return [result, newline, base];
    }

    function generateVerbatimString(string) {
        var i, iz, result;
        result = string.split(/\r\n|\n/);
        for (i = 1, iz = result.length; i < iz; i++) {
            result[i] = newline + base + result[i];
        }
        return result;
    }

    function generateVerbatim(expr, option) {
        var verbatim, result, prec;
        verbatim = expr[extra.verbatim];

        if (typeof verbatim === 'string') {
            result = parenthesize(generateVerbatimString(verbatim), Precedence.Sequence, option.precedence);
        } else {
            // verbatim is object
            result = generateVerbatimString(verbatim.content);
            prec = (verbatim.precedence != null) ? verbatim.precedence : Precedence.Sequence;
            result = parenthesize(result, prec, option.precedence);
        }

        return toSourceNodeWhenNeeded(result, expr);
    }

    function generateIdentifier(node) {
        return toSourceNodeWhenNeeded(node.name, node);
    }

    function generatePattern(node, options) {
        var result;

        if (node.type === Syntax.Identifier) {
            result = generateIdentifier(node);
        } else {
            result = generateExpression(node, {
                precedence: options.precedence,
                allowIn: options.allowIn,
                allowCall: true
            });
        }

        return result;
    }

    function generateFunctionBody(node) {
        var result, i, len, expr, arrow;

        arrow = node.type === Syntax.ArrowFunctionExpression;

        if (arrow && node.params.length === 1 && node.params[0].type === Syntax.Identifier) {
            // arg => { } case
            result = [generateIdentifier(node.params[0])];
        } else {
            result = ['('];
            for (i = 0, len = node.params.length; i < len; ++i) {
                result.push(generatePattern(node.params[i], {
                    precedence: Precedence.Assignment,
                    allowIn: true
                }));
                if (i + 1 < len) {
                    result.push(',' + space);
                }
            }
            result.push(')');
        }

        if (arrow) {
            result.push(space);
            result.push('=>');
        }

        if (node.expression) {
            result.push(space);
            expr = generateExpression(node.body, {
                precedence: Precedence.Assignment,
                allowIn: true,
                allowCall: true
            });
            if (expr.toString().charAt(0) === '{') {
                expr = ['(', expr, ')'];
            }
            result.push(expr);
        } else {
            result.push(maybeBlock(node.body, false, true));
        }
        return result;
    }

    function generateIterationForStatement(operator, stmt, semicolonIsNotNeeded) {
        var result = ['for' + space + '('];
        withIndent(function () {
            if (stmt.left.type === Syntax.VariableDeclaration) {
                withIndent(function () {
                    result.push(stmt.left.kind + noEmptySpace());
                    result.push(generateStatement(stmt.left.declarations[0], {
                        allowIn: false
                    }));
                });
            } else {
                result.push(generateExpression(stmt.left, {
                    precedence: Precedence.Call,
                    allowIn: true,
                    allowCall: true
                }));
            }

            result = join(result, operator);
            result = [join(
                result,
                generateExpression(stmt.right, {
                    precedence: Precedence.Sequence,
                    allowIn: true,
                    allowCall: true
                })
            ), ')'];
        });
        result.push(maybeBlock(stmt.body, semicolonIsNotNeeded));
        return result;
    }

    function generateLiteral(expr) {
        var raw;
        if (expr.hasOwnProperty('raw') && parse && extra.raw) {
            try {
                raw = parse(expr.raw).body[0].expression;
                if (raw.type === Syntax.Literal) {
                    if (raw.value === expr.value) {
                        return expr.raw;
                    }
                }
            } catch (e) {
                // not use raw property
            }
        }

        if (expr.value === null) {
            return 'null';
        }

        if (typeof expr.value === 'string') {
            return escapeString(expr.value);
        }

        if (typeof expr.value === 'number') {
            return generateNumber(expr.value);
        }

        if (typeof expr.value === 'boolean') {
            return expr.value ? 'true' : 'false';
        }

        return generateRegExp(expr.value);
    }

    function generateExpression(expr, option) {
        var result,
            precedence,
            type,
            currentPrecedence,
            i,
            len,
            fragment,
            multiline,
            leftCharCode,
            leftSource,
            rightCharCode,
            allowIn,
            allowCall,
            allowUnparenthesizedNew,
            property,
            isGenerator;

        precedence = option.precedence;
        allowIn = option.allowIn;
        allowCall = option.allowCall;
        type = expr.type || option.type;

        if (extra.verbatim && expr.hasOwnProperty(extra.verbatim)) {
            return generateVerbatim(expr, option);
        }

        switch (type) {
        case Syntax.SequenceExpression:
            result = [];
            allowIn |= (Precedence.Sequence < precedence);
            for (i = 0, len = expr.expressions.length; i < len; ++i) {
                result.push(generateExpression(expr.expressions[i], {
                    precedence: Precedence.Assignment,
                    allowIn: allowIn,
                    allowCall: true
                }));
                if (i + 1 < len) {
                    result.push(',' + space);
                }
            }
            result = parenthesize(result, Precedence.Sequence, precedence);
            break;

        case Syntax.AssignmentExpression:
            allowIn |= (Precedence.Assignment < precedence);
            result = parenthesize(
                [
                    generateExpression(expr.left, {
                        precedence: Precedence.Call,
                        allowIn: allowIn,
                        allowCall: true
                    }),
                    space + expr.operator + space,
                    generateExpression(expr.right, {
                        precedence: Precedence.Assignment,
                        allowIn: allowIn,
                        allowCall: true
                    })
                ],
                Precedence.Assignment,
                precedence
            );
            break;

        case Syntax.ArrowFunctionExpression:
            allowIn |= (Precedence.ArrowFunction < precedence);
            result = parenthesize(generateFunctionBody(expr), Precedence.ArrowFunction, precedence);
            break;

        case Syntax.ConditionalExpression:
            allowIn |= (Precedence.Conditional < precedence);
            result = parenthesize(
                [
                    generateExpression(expr.test, {
                        precedence: Precedence.LogicalOR,
                        allowIn: allowIn,
                        allowCall: true
                    }),
                    space + '?' + space,
                    generateExpression(expr.consequent, {
                        precedence: Precedence.Assignment,
                        allowIn: allowIn,
                        allowCall: true
                    }),
                    space + ':' + space,
                    generateExpression(expr.alternate, {
                        precedence: Precedence.Assignment,
                        allowIn: allowIn,
                        allowCall: true
                    })
                ],
                Precedence.Conditional,
                precedence
            );
            break;

        case Syntax.LogicalExpression:
        case Syntax.BinaryExpression:
            currentPrecedence = BinaryPrecedence[expr.operator];

            allowIn |= (currentPrecedence < precedence);

            fragment = generateExpression(expr.left, {
                precedence: currentPrecedence,
                allowIn: allowIn,
                allowCall: true
            });

            leftSource = fragment.toString();

            if (leftSource.charCodeAt(leftSource.length - 1) === 0x2F /* / */ && esutils.code.isIdentifierPart(expr.operator.charCodeAt(0))) {
                result = [fragment, noEmptySpace(), expr.operator];
            } else {
                result = join(fragment, expr.operator);
            }

            fragment = generateExpression(expr.right, {
                precedence: currentPrecedence + 1,
                allowIn: allowIn,
                allowCall: true
            });

            if (expr.operator === '/' && fragment.toString().charAt(0) === '/' ||
            expr.operator.slice(-1) === '<' && fragment.toString().slice(0, 3) === '!--') {
                // If '/' concats with '/' or `<` concats with `!--`, it is interpreted as comment start
                result.push(noEmptySpace());
                result.push(fragment);
            } else {
                result = join(result, fragment);
            }

            if (expr.operator === 'in' && !allowIn) {
                result = ['(', result, ')'];
            } else {
                result = parenthesize(result, currentPrecedence, precedence);
            }

            break;

        case Syntax.CallExpression:
            result = [generateExpression(expr.callee, {
                precedence: Precedence.Call,
                allowIn: true,
                allowCall: true,
                allowUnparenthesizedNew: false
            })];

            result.push('(');
            for (i = 0, len = expr['arguments'].length; i < len; ++i) {
                result.push(generateExpression(expr['arguments'][i], {
                    precedence: Precedence.Assignment,
                    allowIn: true,
                    allowCall: true
                }));
                if (i + 1 < len) {
                    result.push(',' + space);
                }
            }
            result.push(')');

            if (!allowCall) {
                result = ['(', result, ')'];
            } else {
                result = parenthesize(result, Precedence.Call, precedence);
            }
            break;

        case Syntax.NewExpression:
            len = expr['arguments'].length;
            allowUnparenthesizedNew = option.allowUnparenthesizedNew === undefined || option.allowUnparenthesizedNew;

            result = join(
                'new',
                generateExpression(expr.callee, {
                    precedence: Precedence.New,
                    allowIn: true,
                    allowCall: false,
                    allowUnparenthesizedNew: allowUnparenthesizedNew && !parentheses && len === 0
                })
            );

            if (!allowUnparenthesizedNew || parentheses || len > 0) {
                result.push('(');
                for (i = 0; i < len; ++i) {
                    result.push(generateExpression(expr['arguments'][i], {
                        precedence: Precedence.Assignment,
                        allowIn: true,
                        allowCall: true
                    }));
                    if (i + 1 < len) {
                        result.push(',' + space);
                    }
                }
                result.push(')');
            }

            result = parenthesize(result, Precedence.New, precedence);
            break;

        case Syntax.MemberExpression:
            result = [generateExpression(expr.object, {
                precedence: Precedence.Call,
                allowIn: true,
                allowCall: allowCall,
                allowUnparenthesizedNew: false
            })];

            if (expr.computed) {
                result.push('[');
                result.push(generateExpression(expr.property, {
                    precedence: Precedence.Sequence,
                    allowIn: true,
                    allowCall: allowCall
                }));
                result.push(']');
            } else {
                if (expr.object.type === Syntax.Literal && typeof expr.object.value === 'number') {
                    fragment = toSourceNodeWhenNeeded(result).toString();
                    // When the following conditions are all true,
                    //   1. No floating point
                    //   2. Don't have exponents
                    //   3. The last character is a decimal digit
                    //   4. Not hexadecimal OR octal number literal
                    // we should add a floating point.
                    if (
                            fragment.indexOf('.') < 0 &&
                            !/[eExX]/.test(fragment) &&
                            esutils.code.isDecimalDigit(fragment.charCodeAt(fragment.length - 1)) &&
                            !(fragment.length >= 2 && fragment.charCodeAt(0) === 48)  // '0'
                            ) {
                        result.push('.');
                    }
                }
                result.push('.');
                result.push(generateIdentifier(expr.property));
            }

            result = parenthesize(result, Precedence.Member, precedence);
            break;

        case Syntax.UnaryExpression:
            fragment = generateExpression(expr.argument, {
                precedence: Precedence.Unary,
                allowIn: true,
                allowCall: true
            });

            if (space === '') {
                result = join(expr.operator, fragment);
            } else {
                result = [expr.operator];
                if (expr.operator.length > 2) {
                    // delete, void, typeof
                    // get `typeof []`, not `typeof[]`
                    result = join(result, fragment);
                } else {
                    // Prevent inserting spaces between operator and argument if it is unnecessary
                    // like, `!cond`
                    leftSource = toSourceNodeWhenNeeded(result).toString();
                    leftCharCode = leftSource.charCodeAt(leftSource.length - 1);
                    rightCharCode = fragment.toString().charCodeAt(0);

                    if (((leftCharCode === 0x2B  /* + */ || leftCharCode === 0x2D  /* - */) && leftCharCode === rightCharCode) ||
                            (esutils.code.isIdentifierPart(leftCharCode) && esutils.code.isIdentifierPart(rightCharCode))) {
                        result.push(noEmptySpace());
                        result.push(fragment);
                    } else {
                        result.push(fragment);
                    }
                }
            }
            result = parenthesize(result, Precedence.Unary, precedence);
            break;

        case Syntax.YieldExpression:
            if (expr.delegate) {
                result = 'yield*';
            } else {
                result = 'yield';
            }
            if (expr.argument) {
                result = join(
                    result,
                    generateExpression(expr.argument, {
                        precedence: Precedence.Yield,
                        allowIn: true,
                        allowCall: true
                    })
                );
            }
            result = parenthesize(result, Precedence.Yield, precedence);
            break;

        case Syntax.UpdateExpression:
            if (expr.prefix) {
                result = parenthesize(
                    [
                        expr.operator,
                        generateExpression(expr.argument, {
                            precedence: Precedence.Unary,
                            allowIn: true,
                            allowCall: true
                        })
                    ],
                    Precedence.Unary,
                    precedence
                );
            } else {
                result = parenthesize(
                    [
                        generateExpression(expr.argument, {
                            precedence: Precedence.Postfix,
                            allowIn: true,
                            allowCall: true
                        }),
                        expr.operator
                    ],
                    Precedence.Postfix,
                    precedence
                );
            }
            break;

        case Syntax.FunctionExpression:
            isGenerator = expr.generator && !extra.moz.starlessGenerator;
            result = isGenerator ? 'function*' : 'function';

            if (expr.id) {
                result = [result, (isGenerator) ? space : noEmptySpace(),
                          generateIdentifier(expr.id),
                          generateFunctionBody(expr)];
            } else {
                result = [result + space, generateFunctionBody(expr)];
            }

            break;

        case Syntax.ArrayPattern:
        case Syntax.ArrayExpression:
            if (!expr.elements.length) {
                result = '[]';
                break;
            }
            multiline = expr.elements.length > 1;
            result = ['[', multiline ? newline : ''];
            withIndent(function (indent) {
                for (i = 0, len = expr.elements.length; i < len; ++i) {
                    if (!expr.elements[i]) {
                        if (multiline) {
                            result.push(indent);
                        }
                        if (i + 1 === len) {
                            result.push(',');
                        }
                    } else {
                        result.push(multiline ? indent : '');
                        result.push(generateExpression(expr.elements[i], {
                            precedence: Precedence.Assignment,
                            allowIn: true,
                            allowCall: true
                        }));
                    }
                    if (i + 1 < len) {
                        result.push(',' + (multiline ? newline : space));
                    }
                }
            });
            if (multiline && !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
                result.push(newline);
            }
            result.push(multiline ? base : '');
            result.push(']');
            break;

        case Syntax.Property:
            if (expr.kind === 'get' || expr.kind === 'set') {
                result = [
                    expr.kind, noEmptySpace(),
                    generateExpression(expr.key, {
                        precedence: Precedence.Sequence,
                        allowIn: true,
                        allowCall: true
                    }),
                    generateFunctionBody(expr.value)
                ];
            } else {
                if (expr.shorthand) {
                    result = generateExpression(expr.key, {
                        precedence: Precedence.Sequence,
                        allowIn: true,
                        allowCall: true
                    });
                } else if (expr.method) {
                    result = [];
                    if (expr.value.generator) {
                        result.push('*');
                    }
                    result.push(generateExpression(expr.key, {
                        precedence: Precedence.Sequence,
                        allowIn: true,
                        allowCall: true
                    }));
                    result.push(generateFunctionBody(expr.value));
                } else {
                    result = [
                        generateExpression(expr.key, {
                            precedence: Precedence.Sequence,
                            allowIn: true,
                            allowCall: true
                        }),
                        ':' + space,
                        generateExpression(expr.value, {
                            precedence: Precedence.Assignment,
                            allowIn: true,
                            allowCall: true
                        })
                    ];
                }
            }
            break;

        case Syntax.ObjectExpression:
            if (!expr.properties.length) {
                result = '{}';
                break;
            }
            multiline = expr.properties.length > 1;

            withIndent(function () {
                fragment = generateExpression(expr.properties[0], {
                    precedence: Precedence.Sequence,
                    allowIn: true,
                    allowCall: true,
                    type: Syntax.Property
                });
            });

            if (!multiline) {
                // issues 4
                // Do not transform from
                //   dejavu.Class.declare({
                //       method2: function () {}
                //   });
                // to
                //   dejavu.Class.declare({method2: function () {
                //       }});
                if (!hasLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {
                    result = [ '{', space, fragment, space, '}' ];
                    break;
                }
            }

            withIndent(function (indent) {
                result = [ '{', newline, indent, fragment ];

                if (multiline) {
                    result.push(',' + newline);
                    for (i = 1, len = expr.properties.length; i < len; ++i) {
                        result.push(indent);
                        result.push(generateExpression(expr.properties[i], {
                            precedence: Precedence.Sequence,
                            allowIn: true,
                            allowCall: true,
                            type: Syntax.Property
                        }));
                        if (i + 1 < len) {
                            result.push(',' + newline);
                        }
                    }
                }
            });

            if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
                result.push(newline);
            }
            result.push(base);
            result.push('}');
            break;

        case Syntax.ObjectPattern:
            if (!expr.properties.length) {
                result = '{}';
                break;
            }

            multiline = false;
            if (expr.properties.length === 1) {
                property = expr.properties[0];
                if (property.value.type !== Syntax.Identifier) {
                    multiline = true;
                }
            } else {
                for (i = 0, len = expr.properties.length; i < len; ++i) {
                    property = expr.properties[i];
                    if (!property.shorthand) {
                        multiline = true;
                        break;
                    }
                }
            }
            result = ['{', multiline ? newline : '' ];

            withIndent(function (indent) {
                for (i = 0, len = expr.properties.length; i < len; ++i) {
                    result.push(multiline ? indent : '');
                    result.push(generateExpression(expr.properties[i], {
                        precedence: Precedence.Sequence,
                        allowIn: true,
                        allowCall: true
                    }));
                    if (i + 1 < len) {
                        result.push(',' + (multiline ? newline : space));
                    }
                }
            });

            if (multiline && !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
                result.push(newline);
            }
            result.push(multiline ? base : '');
            result.push('}');
            break;

        case Syntax.ThisExpression:
            result = 'this';
            break;

        case Syntax.Identifier:
            result = generateIdentifier(expr);
            break;

        case Syntax.Literal:
            result = generateLiteral(expr);
            break;

        case Syntax.GeneratorExpression:
        case Syntax.ComprehensionExpression:
            // GeneratorExpression should be parenthesized with (...), ComprehensionExpression with [...]
            // Due to https://bugzilla.mozilla.org/show_bug.cgi?id=883468 position of expr.body can differ in Spidermonkey and ES6
            result = (type === Syntax.GeneratorExpression) ? ['('] : ['['];

            if (extra.moz.comprehensionExpressionStartsWithAssignment) {
                fragment = generateExpression(expr.body, {
                    precedence: Precedence.Assignment,
                    allowIn: true,
                    allowCall: true
                });

                result.push(fragment);
            }

            if (expr.blocks) {
                withIndent(function () {
                    for (i = 0, len = expr.blocks.length; i < len; ++i) {
                        fragment = generateExpression(expr.blocks[i], {
                            precedence: Precedence.Sequence,
                            allowIn: true,
                            allowCall: true
                        });

                        if (i > 0 || extra.moz.comprehensionExpressionStartsWithAssignment) {
                            result = join(result, fragment);
                        } else {
                            result.push(fragment);
                        }
                    }
                });
            }

            if (expr.filter) {
                result = join(result, 'if' + space);
                fragment = generateExpression(expr.filter, {
                    precedence: Precedence.Sequence,
                    allowIn: true,
                    allowCall: true
                });
                if (extra.moz.parenthesizedComprehensionBlock) {
                    result = join(result, [ '(', fragment, ')' ]);
                } else {
                    result = join(result, fragment);
                }
            }

            if (!extra.moz.comprehensionExpressionStartsWithAssignment) {
                fragment = generateExpression(expr.body, {
                    precedence: Precedence.Assignment,
                    allowIn: true,
                    allowCall: true
                });

                result = join(result, fragment);
            }

            result.push((type === Syntax.GeneratorExpression) ? ')' : ']');
            break;

        case Syntax.ComprehensionBlock:
            if (expr.left.type === Syntax.VariableDeclaration) {
                fragment = [
                    expr.left.kind, noEmptySpace(),
                    generateStatement(expr.left.declarations[0], {
                        allowIn: false
                    })
                ];
            } else {
                fragment = generateExpression(expr.left, {
                    precedence: Precedence.Call,
                    allowIn: true,
                    allowCall: true
                });
            }

            fragment = join(fragment, expr.of ? 'of' : 'in');
            fragment = join(fragment, generateExpression(expr.right, {
                precedence: Precedence.Sequence,
                allowIn: true,
                allowCall: true
            }));

            if (extra.moz.parenthesizedComprehensionBlock) {
                result = [ 'for' + space + '(', fragment, ')' ];
            } else {
                result = join('for' + space, fragment);
            }
            break;

        default:
            throw new Error('Unknown expression type: ' + expr.type);
        }

        if (extra.comment) {
            result = addComments(expr,result);
        }
        return toSourceNodeWhenNeeded(result, expr);
    }

    function generateStatement(stmt, option) {
        var i,
            len,
            result,
            node,
            specifier,
            allowIn,
            functionBody,
            directiveContext,
            fragment,
            semicolon,
            isGenerator;

        allowIn = true;
        semicolon = ';';
        functionBody = false;
        directiveContext = false;
        if (option) {
            allowIn = option.allowIn === undefined || option.allowIn;
            if (!semicolons && option.semicolonOptional === true) {
                semicolon = '';
            }
            functionBody = option.functionBody;
            directiveContext = option.directiveContext;
        }

        switch (stmt.type) {
        case Syntax.BlockStatement:
            result = ['{', newline];

            withIndent(function () {
                for (i = 0, len = stmt.body.length; i < len; ++i) {
                    fragment = addIndent(generateStatement(stmt.body[i], {
                        semicolonOptional: i === len - 1,
                        directiveContext: functionBody
                    }));
                    result.push(fragment);
                    if (!endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {
                        result.push(newline);
                    }
                }
            });

            result.push(addIndent('}'));
            break;

        case Syntax.BreakStatement:
            if (stmt.label) {
                result = 'break ' + stmt.label.name + semicolon;
            } else {
                result = 'break' + semicolon;
            }
            break;

        case Syntax.ContinueStatement:
            if (stmt.label) {
                result = 'continue ' + stmt.label.name + semicolon;
            } else {
                result = 'continue' + semicolon;
            }
            break;

        case Syntax.DirectiveStatement:
            if (extra.raw && stmt.raw) {
                result = stmt.raw + semicolon;
            } else {
                result = escapeDirective(stmt.directive) + semicolon;
            }
            break;

        case Syntax.DoWhileStatement:
            // Because `do 42 while (cond)` is Syntax Error. We need semicolon.
            result = join('do', maybeBlock(stmt.body));
            result = maybeBlockSuffix(stmt.body, result);
            result = join(result, [
                'while' + space + '(',
                generateExpression(stmt.test, {
                    precedence: Precedence.Sequence,
                    allowIn: true,
                    allowCall: true
                }),
                ')' + semicolon
            ]);
            break;

        case Syntax.CatchClause:
            withIndent(function () {
                var guard;

                result = [
                    'catch' + space + '(',
                    generateExpression(stmt.param, {
                        precedence: Precedence.Sequence,
                        allowIn: true,
                        allowCall: true
                    }),
                    ')'
                ];

                if (stmt.guard) {
                    guard = generateExpression(stmt.guard, {
                        precedence: Precedence.Sequence,
                        allowIn: true,
                        allowCall: true
                    });

                    result.splice(2, 0, ' if ', guard);
                }
            });
            result.push(maybeBlock(stmt.body));
            break;

        case Syntax.DebuggerStatement:
            result = 'debugger' + semicolon;
            break;

        case Syntax.EmptyStatement:
            result = ';';
            break;

        case Syntax.ExportDeclaration:
            result = 'export ';
            if (stmt.declaration) {
                // FunctionDeclaration or VariableDeclaration
                result = [result, generateStatement(stmt.declaration, { semicolonOptional: semicolon === '' })];
                break;
            }
            break;

        case Syntax.ExpressionStatement:
            result = [generateExpression(stmt.expression, {
                precedence: Precedence.Sequence,
                allowIn: true,
                allowCall: true
            })];
            // 12.4 '{', 'function' is not allowed in this position.
            // wrap expression with parentheses
            fragment = toSourceNodeWhenNeeded(result).toString();
            if (fragment.charAt(0) === '{' ||  // ObjectExpression
                    (fragment.slice(0, 8) === 'function' && '* ('.indexOf(fragment.charAt(8)) >= 0) ||  // function or generator
                    (directive && directiveContext && stmt.expression.type === Syntax.Literal && typeof stmt.expression.value === 'string')) {
                result = ['(', result, ')' + semicolon];
            } else {
                result.push(semicolon);
            }
            break;

        case Syntax.ImportDeclaration:
            // ES6: 15.2.1 valid import declarations:
            //     - import ImportClause FromClause ;
            //     - import ModuleSpecifier ;
            // If no ImportClause is present,
            // this should be `import ModuleSpecifier` so skip `from`
            //
            // ModuleSpecifier is StringLiteral.
            if (stmt.specifiers.length === 0) {
                // import ModuleSpecifier ;
                result = [
                    'import',
                    space,
                    generateLiteral(stmt.source)
                ];
            } else {
                // import ImportClause FromClause ;
                if (stmt.kind === 'default') {
                    // import ... from "...";
                    result = [
                        'import',
                        noEmptySpace(),
                        stmt.specifiers[0].id.name,
                        noEmptySpace()
                    ];
                } else {
                    // stmt.kind === 'named'
                    result = [
                        'import',
                        space,
                        '{',
                    ];

                    if (stmt.specifiers.length === 1) {
                        // import { ... } from "...";
                        specifier = stmt.specifiers[0];
                        result.push(space + specifier.id.name);
                        if (specifier.name) {
                            result.push(noEmptySpace() + 'as' + noEmptySpace() + specifier.name.name);
                        }
                        result.push(space + '}' + space);
                    } else {
                        // import {
                        //    ...,
                        //    ...,
                        // } from "...";
                        withIndent(function (indent) {
                            var i, iz;
                            result.push(newline);
                            for (i = 0, iz = stmt.specifiers.length; i < iz; ++i) {
                                specifier = stmt.specifiers[i];
                                result.push(indent + specifier.id.name);
                                if (specifier.name) {
                                    result.push(noEmptySpace() + 'as' + noEmptySpace() + specifier.name.name);
                                }

                                if (i + 1 < iz) {
                                    result.push(',' + newline);
                                }
                            }
                        });
                        if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
                            result.push(newline);
                        }
                        result.push(base + '}' + space);
                    }
                }

                result.push('from' + space);
                result.push(generateLiteral(stmt.source));
            }
            result.push(semicolon);
            break;

        case Syntax.VariableDeclarator:
            if (stmt.init) {
                result = [
                    generateExpression(stmt.id, {
                        precedence: Precedence.Assignment,
                        allowIn: allowIn,
                        allowCall: true
                    }),
                    space,
                    '=',
                    space,
                    generateExpression(stmt.init, {
                        precedence: Precedence.Assignment,
                        allowIn: allowIn,
                        allowCall: true
                    })
                ];
            } else {
                result = generatePattern(stmt.id, {
                    precedence: Precedence.Assignment,
                    allowIn: allowIn
                });
            }
            break;

        case Syntax.VariableDeclaration:
            result = [stmt.kind];
            // special path for
            // var x = function () {
            // };
            if (stmt.declarations.length === 1 && stmt.declarations[0].init &&
                    stmt.declarations[0].init.type === Syntax.FunctionExpression) {
                result.push(noEmptySpace());
                result.push(generateStatement(stmt.declarations[0], {
                    allowIn: allowIn
                }));
            } else {
                // VariableDeclarator is typed as Statement,
                // but joined with comma (not LineTerminator).
                // So if comment is attached to target node, we should specialize.
                withIndent(function () {
                    node = stmt.declarations[0];
                    if (extra.comment && node.leadingComments) {
                        result.push('\n');
                        result.push(addIndent(generateStatement(node, {
                            allowIn: allowIn
                        })));
                    } else {
                        result.push(noEmptySpace());
                        result.push(generateStatement(node, {
                            allowIn: allowIn
                        }));
                    }

                    for (i = 1, len = stmt.declarations.length; i < len; ++i) {
                        node = stmt.declarations[i];
                        if (extra.comment && node.leadingComments) {
                            result.push(',' + newline);
                            result.push(addIndent(generateStatement(node, {
                                allowIn: allowIn
                            })));
                        } else {
                            result.push(',' + space);
                            result.push(generateStatement(node, {
                                allowIn: allowIn
                            }));
                        }
                    }
                });
            }
            result.push(semicolon);
            break;

        case Syntax.ThrowStatement:
            result = [join(
                'throw',
                generateExpression(stmt.argument, {
                    precedence: Precedence.Sequence,
                    allowIn: true,
                    allowCall: true
                })
            ), semicolon];
            break;

        case Syntax.TryStatement:
            result = ['try', maybeBlock(stmt.block)];
            result = maybeBlockSuffix(stmt.block, result);

            if (stmt.handlers) {
                // old interface
                for (i = 0, len = stmt.handlers.length; i < len; ++i) {
                    result = join(result, generateStatement(stmt.handlers[i]));
                    if (stmt.finalizer || i + 1 !== len) {
                        result = maybeBlockSuffix(stmt.handlers[i].body, result);
                    }
                }
            } else {
                stmt.guardedHandlers = stmt.guardedHandlers || [];

                for (i = 0, len = stmt.guardedHandlers.length; i < len; ++i) {
                    result = join(result, generateStatement(stmt.guardedHandlers[i]));
                    if (stmt.finalizer || i + 1 !== len) {
                        result = maybeBlockSuffix(stmt.guardedHandlers[i].body, result);
                    }
                }

                // new interface
                if (stmt.handler) {
                    if (isArray(stmt.handler)) {
                        for (i = 0, len = stmt.handler.length; i < len; ++i) {
                            result = join(result, generateStatement(stmt.handler[i]));
                            if (stmt.finalizer || i + 1 !== len) {
                                result = maybeBlockSuffix(stmt.handler[i].body, result);
                            }
                        }
                    } else {
                        result = join(result, generateStatement(stmt.handler));
                        if (stmt.finalizer) {
                            result = maybeBlockSuffix(stmt.handler.body, result);
                        }
                    }
                }
            }
            if (stmt.finalizer) {
                result = join(result, ['finally', maybeBlock(stmt.finalizer)]);
            }
            break;

        case Syntax.SwitchStatement:
            withIndent(function () {
                result = [
                    'switch' + space + '(',
                    generateExpression(stmt.discriminant, {
                        precedence: Precedence.Sequence,
                        allowIn: true,
                        allowCall: true
                    }),
                    ')' + space + '{' + newline
                ];
            });
            if (stmt.cases) {
                for (i = 0, len = stmt.cases.length; i < len; ++i) {
                    fragment = addIndent(generateStatement(stmt.cases[i], {semicolonOptional: i === len - 1}));
                    result.push(fragment);
                    if (!endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {
                        result.push(newline);
                    }
                }
            }
            result.push(addIndent('}'));
            break;

        case Syntax.SwitchCase:
            withIndent(function () {
                if (stmt.test) {
                    result = [
                        join('case', generateExpression(stmt.test, {
                            precedence: Precedence.Sequence,
                            allowIn: true,
                            allowCall: true
                        })),
                        ':'
                    ];
                } else {
                    result = ['default:'];
                }

                i = 0;
                len = stmt.consequent.length;
                if (len && stmt.consequent[0].type === Syntax.BlockStatement) {
                    fragment = maybeBlock(stmt.consequent[0]);
                    result.push(fragment);
                    i = 1;
                }

                if (i !== len && !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
                    result.push(newline);
                }

                for (; i < len; ++i) {
                    fragment = addIndent(generateStatement(stmt.consequent[i], {semicolonOptional: i === len - 1 && semicolon === ''}));
                    result.push(fragment);
                    if (i + 1 !== len && !endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {
                        result.push(newline);
                    }
                }
            });
            break;

        case Syntax.IfStatement:
            withIndent(function () {
                result = [
                    'if' + space + '(',
                    generateExpression(stmt.test, {
                        precedence: Precedence.Sequence,
                        allowIn: true,
                        allowCall: true
                    }),
                    ')'
                ];
            });
            if (stmt.alternate) {
                result.push(maybeBlock(stmt.consequent));
                result = maybeBlockSuffix(stmt.consequent, result);
                if (stmt.alternate.type === Syntax.IfStatement) {
                    result = join(result, ['else ', generateStatement(stmt.alternate, {semicolonOptional: semicolon === ''})]);
                } else {
                    result = join(result, join('else', maybeBlock(stmt.alternate, semicolon === '')));
                }
            } else {
                result.push(maybeBlock(stmt.consequent, semicolon === ''));
            }
            break;

        case Syntax.ForStatement:
            withIndent(function () {
                result = ['for' + space + '('];
                if (stmt.init) {
                    if (stmt.init.type === Syntax.VariableDeclaration) {
                        result.push(generateStatement(stmt.init, {allowIn: false}));
                    } else {
                        result.push(generateExpression(stmt.init, {
                            precedence: Precedence.Sequence,
                            allowIn: false,
                            allowCall: true
                        }));
                        result.push(';');
                    }
                } else {
                    result.push(';');
                }

                if (stmt.test) {
                    result.push(space);
                    result.push(generateExpression(stmt.test, {
                        precedence: Precedence.Sequence,
                        allowIn: true,
                        allowCall: true
                    }));
                    result.push(';');
                } else {
                    result.push(';');
                }

                if (stmt.update) {
                    result.push(space);
                    result.push(generateExpression(stmt.update, {
                        precedence: Precedence.Sequence,
                        allowIn: true,
                        allowCall: true
                    }));
                    result.push(')');
                } else {
                    result.push(')');
                }
            });

            result.push(maybeBlock(stmt.body, semicolon === ''));
            break;

        case Syntax.ForInStatement:
            result = generateIterationForStatement('in', stmt, semicolon === '');
            break;

        case Syntax.ForOfStatement:
            result = generateIterationForStatement('of', stmt, semicolon === '');
            break;

        case Syntax.LabeledStatement:
            result = [stmt.label.name + ':', maybeBlock(stmt.body, semicolon === '')];
            break;

        case Syntax.Program:
            len = stmt.body.length;
            result = [safeConcatenation && len > 0 ? '\n' : ''];
            for (i = 0; i < len; ++i) {
                fragment = addIndent(
                    generateStatement(stmt.body[i], {
                        semicolonOptional: !safeConcatenation && i === len - 1,
                        directiveContext: true
                    })
                );
                result.push(fragment);
                if (i + 1 < len && !endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {
                    result.push(newline);
                }
            }
            break;

        case Syntax.FunctionDeclaration:
            isGenerator = stmt.generator && !extra.moz.starlessGenerator;
            result = [
                (isGenerator ? 'function*' : 'function'),
                (isGenerator ? space : noEmptySpace()),
                generateIdentifier(stmt.id),
                generateFunctionBody(stmt)
            ];
            break;

        case Syntax.ReturnStatement:
            if (stmt.argument) {
                result = [join(
                    'return',
                    generateExpression(stmt.argument, {
                        precedence: Precedence.Sequence,
                        allowIn: true,
                        allowCall: true
                    })
                ), semicolon];
            } else {
                result = ['return' + semicolon];
            }
            break;

        case Syntax.WhileStatement:
            withIndent(function () {
                result = [
                    'while' + space + '(',
                    generateExpression(stmt.test, {
                        precedence: Precedence.Sequence,
                        allowIn: true,
                        allowCall: true
                    }),
                    ')'
                ];
            });
            result.push(maybeBlock(stmt.body, semicolon === ''));
            break;

        case Syntax.WithStatement:
            withIndent(function () {
                result = [
                    'with' + space + '(',
                    generateExpression(stmt.object, {
                        precedence: Precedence.Sequence,
                        allowIn: true,
                        allowCall: true
                    }),
                    ')'
                ];
            });
            result.push(maybeBlock(stmt.body, semicolon === ''));
            break;

        default:
            throw new Error('Unknown statement type: ' + stmt.type);
        }

        // Attach comments

        if (extra.comment) {
            result = addComments(stmt, result);
        }

        fragment = toSourceNodeWhenNeeded(result).toString();
        if (stmt.type === Syntax.Program && !safeConcatenation && newline === '' &&  fragment.charAt(fragment.length - 1) === '\n') {
            result = sourceMap ? toSourceNodeWhenNeeded(result).replaceRight(/\s+$/, '') : fragment.replace(/\s+$/, '');
        }

        return toSourceNodeWhenNeeded(result, stmt);
    }

    function generate(node, options) {
        var defaultOptions = getDefaultOptions(), result, pair;

        if (options != null) {
            // Obsolete options
            //
            //   `options.indent`
            //   `options.base`
            //
            // Instead of them, we can use `option.format.indent`.
            if (typeof options.indent === 'string') {
                defaultOptions.format.indent.style = options.indent;
            }
            if (typeof options.base === 'number') {
                defaultOptions.format.indent.base = options.base;
            }
            options = updateDeeply(defaultOptions, options);
            indent = options.format.indent.style;
            if (typeof options.base === 'string') {
                base = options.base;
            } else {
                base = stringRepeat(indent, options.format.indent.base);
            }
        } else {
            options = defaultOptions;
            indent = options.format.indent.style;
            base = stringRepeat(indent, options.format.indent.base);
        }
        json = options.format.json;
        renumber = options.format.renumber;
        hexadecimal = json ? false : options.format.hexadecimal;
        quotes = json ? 'double' : options.format.quotes;
        escapeless = options.format.escapeless;
        newline = options.format.newline;
        space = options.format.space;
        if (options.format.compact) {
            newline = space = indent = base = '';
        }
        parentheses = options.format.parentheses;
        semicolons = options.format.semicolons;
        safeConcatenation = options.format.safeConcatenation;
        directive = options.directive;
        parse = json ? null : options.parse;
        sourceMap = options.sourceMap;
        extra = options;

        if (sourceMap) {
            if (!exports.browser) {
                // We assume environment is node.js
                // And prevent from including source-map by browserify
                SourceNode = require('source-map').SourceNode;
            } else {
                SourceNode = global.sourceMap.SourceNode;
            }
        }

        switch (node.type) {
        case Syntax.BlockStatement:
        case Syntax.BreakStatement:
        case Syntax.CatchClause:
        case Syntax.ContinueStatement:
        case Syntax.DirectiveStatement:
        case Syntax.DoWhileStatement:
        case Syntax.DebuggerStatement:
        case Syntax.EmptyStatement:
        case Syntax.ExpressionStatement:
        case Syntax.ForStatement:
        case Syntax.ForInStatement:
        case Syntax.ForOfStatement:
        case Syntax.FunctionDeclaration:
        case Syntax.IfStatement:
        case Syntax.LabeledStatement:
        case Syntax.Program:
        case Syntax.ReturnStatement:
        case Syntax.SwitchStatement:
        case Syntax.SwitchCase:
        case Syntax.ThrowStatement:
        case Syntax.TryStatement:
        case Syntax.VariableDeclaration:
        case Syntax.VariableDeclarator:
        case Syntax.WhileStatement:
        case Syntax.WithStatement:
            result = generateStatement(node);
            break;

        case Syntax.AssignmentExpression:
        case Syntax.ArrayExpression:
        case Syntax.ArrayPattern:
        case Syntax.BinaryExpression:
        case Syntax.CallExpression:
        case Syntax.ConditionalExpression:
        case Syntax.FunctionExpression:
        case Syntax.Identifier:
        case Syntax.Literal:
        case Syntax.LogicalExpression:
        case Syntax.MemberExpression:
        case Syntax.NewExpression:
        case Syntax.ObjectExpression:
        case Syntax.ObjectPattern:
        case Syntax.Property:
        case Syntax.SequenceExpression:
        case Syntax.ThisExpression:
        case Syntax.UnaryExpression:
        case Syntax.UpdateExpression:
        case Syntax.YieldExpression:

            result = generateExpression(node, {
                precedence: Precedence.Sequence,
                allowIn: true,
                allowCall: true
            });
            break;

        default:
            throw new Error('Unknown node type: ' + node.type);
        }

        if (!sourceMap) {
            pair = {code: result.toString(), map: null};
            return options.sourceMapWithCode ? pair : pair.code;
        }


        pair = result.toStringWithSourceMap({
            file: options.file,
            sourceRoot: options.sourceMapRoot
        });

        if (options.sourceContent) {
            pair.map.setSourceContent(options.sourceMap,
                                      options.sourceContent);
        }

        if (options.sourceMapWithCode) {
            return pair;
        }

        return pair.map.toString();
    }

    FORMAT_MINIFY = {
        indent: {
            style: '',
            base: 0
        },
        renumber: true,
        hexadecimal: true,
        quotes: 'auto',
        escapeless: true,
        compact: true,
        parentheses: false,
        semicolons: false
    };

    FORMAT_DEFAULTS = getDefaultOptions().format;

    exports.version = require('./package.json').version;
    exports.generate = generate;
    exports.attachComments = estraverse.attachComments;
    exports.Precedence = updateDeeply({}, Precedence);
    exports.browser = false;
    exports.FORMAT_MINIFY = FORMAT_MINIFY;
    exports.FORMAT_DEFAULTS = FORMAT_DEFAULTS;
}());
/* vim: set sw=4 ts=4 et tw=80 : */

}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./package.json":38,"estraverse":40,"esutils":26,"source-map":27}],24:[function(require,module,exports){
/*
  Copyright (C) 2013 Yusuke Suzuki <utatane.tea@gmail.com>

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

(function () {
    'use strict';

    var Regex;

    // See also tools/generate-unicode-regex.py.
    Regex = {
        NonAsciiIdentifierStart: new RegExp('[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0\u08A2-\u08AC\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097F\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F0\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191C\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA697\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA793\uA7A0-\uA7AA\uA7F8-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA80-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]'),
        NonAsciiIdentifierPart: new RegExp('[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u0527\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0\u08A2-\u08AC\u08E4-\u08FE\u0900-\u0963\u0966-\u096F\u0971-\u0977\u0979-\u097F\u0981-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C01-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58\u0C59\u0C60-\u0C63\u0C66-\u0C6F\u0C82\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D02\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D60-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F0\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191C\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1D00-\u1DE6\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA697\uA69F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA793\uA7A0-\uA7AA\uA7F8-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A\uAA7B\uAA80-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE26\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]')
    };

    function isDecimalDigit(ch) {
        return (ch >= 48 && ch <= 57);   // 0..9
    }

    function isHexDigit(ch) {
        return isDecimalDigit(ch) || (97 <= ch && ch <= 102) || (65 <= ch && ch <= 70);
    }

    function isOctalDigit(ch) {
        return (ch >= 48 && ch <= 55);   // 0..7
    }

    // 7.2 White Space

    function isWhiteSpace(ch) {
        return (ch === 0x20) || (ch === 0x09) || (ch === 0x0B) || (ch === 0x0C) || (ch === 0xA0) ||
            (ch >= 0x1680 && [0x1680, 0x180E, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(ch) >= 0);
    }

    // 7.3 Line Terminators

    function isLineTerminator(ch) {
        return (ch === 0x0A) || (ch === 0x0D) || (ch === 0x2028) || (ch === 0x2029);
    }

    // 7.6 Identifier Names and Identifiers

    function isIdentifierStart(ch) {
        return (ch === 36) || (ch === 95) ||  // $ (dollar) and _ (underscore)
            (ch >= 65 && ch <= 90) ||         // A..Z
            (ch >= 97 && ch <= 122) ||        // a..z
            (ch === 92) ||                    // \ (backslash)
            ((ch >= 0x80) && Regex.NonAsciiIdentifierStart.test(String.fromCharCode(ch)));
    }

    function isIdentifierPart(ch) {
        return (ch === 36) || (ch === 95) ||  // $ (dollar) and _ (underscore)
            (ch >= 65 && ch <= 90) ||         // A..Z
            (ch >= 97 && ch <= 122) ||        // a..z
            (ch >= 48 && ch <= 57) ||         // 0..9
            (ch === 92) ||                    // \ (backslash)
            ((ch >= 0x80) && Regex.NonAsciiIdentifierPart.test(String.fromCharCode(ch)));
    }

    module.exports = {
        isDecimalDigit: isDecimalDigit,
        isHexDigit: isHexDigit,
        isOctalDigit: isOctalDigit,
        isWhiteSpace: isWhiteSpace,
        isLineTerminator: isLineTerminator,
        isIdentifierStart: isIdentifierStart,
        isIdentifierPart: isIdentifierPart
    };
}());
/* vim: set sw=4 ts=4 et tw=80 : */

},{}],25:[function(require,module,exports){
/*
  Copyright (C) 2013 Yusuke Suzuki <utatane.tea@gmail.com>

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

(function () {
    'use strict';

    var code = require('./code');

    function isStrictModeReservedWordES6(id) {
        switch (id) {
        case 'implements':
        case 'interface':
        case 'package':
        case 'private':
        case 'protected':
        case 'public':
        case 'static':
        case 'let':
            return true;
        default:
            return false;
        }
    }

    function isKeywordES5(id, strict) {
        // yield should not be treated as keyword under non-strict mode.
        if (!strict && id === 'yield') {
            return false;
        }
        return isKeywordES6(id, strict);
    }

    function isKeywordES6(id, strict) {
        if (strict && isStrictModeReservedWordES6(id)) {
            return true;
        }

        switch (id.length) {
        case 2:
            return (id === 'if') || (id === 'in') || (id === 'do');
        case 3:
            return (id === 'var') || (id === 'for') || (id === 'new') || (id === 'try');
        case 4:
            return (id === 'this') || (id === 'else') || (id === 'case') ||
                (id === 'void') || (id === 'with') || (id === 'enum');
        case 5:
            return (id === 'while') || (id === 'break') || (id === 'catch') ||
                (id === 'throw') || (id === 'const') || (id === 'yield') ||
                (id === 'class') || (id === 'super');
        case 6:
            return (id === 'return') || (id === 'typeof') || (id === 'delete') ||
                (id === 'switch') || (id === 'export') || (id === 'import');
        case 7:
            return (id === 'default') || (id === 'finally') || (id === 'extends');
        case 8:
            return (id === 'function') || (id === 'continue') || (id === 'debugger');
        case 10:
            return (id === 'instanceof');
        default:
            return false;
        }
    }

    function isRestrictedWord(id) {
        return id === 'eval' || id === 'arguments';
    }

    function isIdentifierName(id) {
        var i, iz, ch;

        if (id.length === 0) {
            return false;
        }

        ch = id.charCodeAt(0);
        if (!code.isIdentifierStart(ch) || ch === 92) {  // \ (backslash)
            return false;
        }

        for (i = 1, iz = id.length; i < iz; ++i) {
            ch = id.charCodeAt(i);
            if (!code.isIdentifierPart(ch) || ch === 92) {  // \ (backslash)
                return false;
            }
        }
        return true;
    }

    module.exports = {
        isKeywordES5: isKeywordES5,
        isKeywordES6: isKeywordES6,
        isRestrictedWord: isRestrictedWord,
        isIdentifierName: isIdentifierName
    };
}());
/* vim: set sw=4 ts=4 et tw=80 : */

},{"./code":24}],26:[function(require,module,exports){
/*
  Copyright (C) 2013 Yusuke Suzuki <utatane.tea@gmail.com>

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/


(function () {
    'use strict';

    exports.code = require('./code');
    exports.keyword = require('./keyword');
}());
/* vim: set sw=4 ts=4 et tw=80 : */

},{"./code":24,"./keyword":25}],27:[function(require,module,exports){
/*
 * Copyright 2009-2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE.txt or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
exports.SourceMapGenerator = require('./source-map/source-map-generator').SourceMapGenerator;
exports.SourceMapConsumer = require('./source-map/source-map-consumer').SourceMapConsumer;
exports.SourceNode = require('./source-map/source-node').SourceNode;

},{"./source-map/source-map-consumer":33,"./source-map/source-map-generator":34,"./source-map/source-node":35}],28:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
if (typeof define !== 'function') {
    var define = require('amdefine')(module, require);
}
define(function (require, exports, module) {

  var util = require('./util');

  /**
   * A data structure which is a combination of an array and a set. Adding a new
   * member is O(1), testing for membership is O(1), and finding the index of an
   * element is O(1). Removing elements from the set is not supported. Only
   * strings are supported for membership.
   */
  function ArraySet() {
    this._array = [];
    this._set = {};
  }

  /**
   * Static method for creating ArraySet instances from an existing array.
   */
  ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
    var set = new ArraySet();
    for (var i = 0, len = aArray.length; i < len; i++) {
      set.add(aArray[i], aAllowDuplicates);
    }
    return set;
  };

  /**
   * Add the given string to this set.
   *
   * @param String aStr
   */
  ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
    var isDuplicate = this.has(aStr);
    var idx = this._array.length;
    if (!isDuplicate || aAllowDuplicates) {
      this._array.push(aStr);
    }
    if (!isDuplicate) {
      this._set[util.toSetString(aStr)] = idx;
    }
  };

  /**
   * Is the given string a member of this set?
   *
   * @param String aStr
   */
  ArraySet.prototype.has = function ArraySet_has(aStr) {
    return Object.prototype.hasOwnProperty.call(this._set,
                                                util.toSetString(aStr));
  };

  /**
   * What is the index of the given string in the array?
   *
   * @param String aStr
   */
  ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {
    if (this.has(aStr)) {
      return this._set[util.toSetString(aStr)];
    }
    throw new Error('"' + aStr + '" is not in the set.');
  };

  /**
   * What is the element at the given index?
   *
   * @param Number aIdx
   */
  ArraySet.prototype.at = function ArraySet_at(aIdx) {
    if (aIdx >= 0 && aIdx < this._array.length) {
      return this._array[aIdx];
    }
    throw new Error('No element indexed by ' + aIdx);
  };

  /**
   * Returns the array representation of this set (which has the proper indices
   * indicated by indexOf). Note that this is a copy of the internal array used
   * for storing the members so that no one can mess with internal state.
   */
  ArraySet.prototype.toArray = function ArraySet_toArray() {
    return this._array.slice();
  };

  exports.ArraySet = ArraySet;

});

},{"./util":36,"amdefine":37}],29:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 *
 * Based on the Base 64 VLQ implementation in Closure Compiler:
 * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java
 *
 * Copyright 2011 The Closure Compiler Authors. All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *  * Neither the name of Google Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
if (typeof define !== 'function') {
    var define = require('amdefine')(module, require);
}
define(function (require, exports, module) {

  var base64 = require('./base64');

  // A single base 64 digit can contain 6 bits of data. For the base 64 variable
  // length quantities we use in the source map spec, the first bit is the sign,
  // the next four bits are the actual value, and the 6th bit is the
  // continuation bit. The continuation bit tells us whether there are more
  // digits in this value following this digit.
  //
  //   Continuation
  //   |    Sign
  //   |    |
  //   V    V
  //   101011

  var VLQ_BASE_SHIFT = 5;

  // binary: 100000
  var VLQ_BASE = 1 << VLQ_BASE_SHIFT;

  // binary: 011111
  var VLQ_BASE_MASK = VLQ_BASE - 1;

  // binary: 100000
  var VLQ_CONTINUATION_BIT = VLQ_BASE;

  /**
   * Converts from a two-complement value to a value where the sign bit is
   * placed in the least significant bit.  For example, as decimals:
   *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)
   *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)
   */
  function toVLQSigned(aValue) {
    return aValue < 0
      ? ((-aValue) << 1) + 1
      : (aValue << 1) + 0;
  }

  /**
   * Converts to a two-complement value from a value where the sign bit is
   * placed in the least significant bit.  For example, as decimals:
   *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1
   *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2
   */
  function fromVLQSigned(aValue) {
    var isNegative = (aValue & 1) === 1;
    var shifted = aValue >> 1;
    return isNegative
      ? -shifted
      : shifted;
  }

  /**
   * Returns the base 64 VLQ encoded value.
   */
  exports.encode = function base64VLQ_encode(aValue) {
    var encoded = "";
    var digit;

    var vlq = toVLQSigned(aValue);

    do {
      digit = vlq & VLQ_BASE_MASK;
      vlq >>>= VLQ_BASE_SHIFT;
      if (vlq > 0) {
        // There are still more digits in this value, so we must make sure the
        // continuation bit is marked.
        digit |= VLQ_CONTINUATION_BIT;
      }
      encoded += base64.encode(digit);
    } while (vlq > 0);

    return encoded;
  };

  /**
   * Decodes the next base 64 VLQ value from the given string and returns the
   * value and the rest of the string via the out parameter.
   */
  exports.decode = function base64VLQ_decode(aStr, aOutParam) {
    var i = 0;
    var strLen = aStr.length;
    var result = 0;
    var shift = 0;
    var continuation, digit;

    do {
      if (i >= strLen) {
        throw new Error("Expected more digits in base 64 VLQ value.");
      }
      digit = base64.decode(aStr.charAt(i++));
      continuation = !!(digit & VLQ_CONTINUATION_BIT);
      digit &= VLQ_BASE_MASK;
      result = result + (digit << shift);
      shift += VLQ_BASE_SHIFT;
    } while (continuation);

    aOutParam.value = fromVLQSigned(result);
    aOutParam.rest = aStr.slice(i);
  };

});

},{"./base64":30,"amdefine":37}],30:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
if (typeof define !== 'function') {
    var define = require('amdefine')(module, require);
}
define(function (require, exports, module) {

  var charToIntMap = {};
  var intToCharMap = {};

  'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
    .split('')
    .forEach(function (ch, index) {
      charToIntMap[ch] = index;
      intToCharMap[index] = ch;
    });

  /**
   * Encode an integer in the range of 0 to 63 to a single base 64 digit.
   */
  exports.encode = function base64_encode(aNumber) {
    if (aNumber in intToCharMap) {
      return intToCharMap[aNumber];
    }
    throw new TypeError("Must be between 0 and 63: " + aNumber);
  };

  /**
   * Decode a single base 64 digit to an integer.
   */
  exports.decode = function base64_decode(aChar) {
    if (aChar in charToIntMap) {
      return charToIntMap[aChar];
    }
    throw new TypeError("Not a valid base 64 digit: " + aChar);
  };

});

},{"amdefine":37}],31:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
if (typeof define !== 'function') {
    var define = require('amdefine')(module, require);
}
define(function (require, exports, module) {

  /**
   * Recursive implementation of binary search.
   *
   * @param aLow Indices here and lower do not contain the needle.
   * @param aHigh Indices here and higher do not contain the needle.
   * @param aNeedle The element being searched for.
   * @param aHaystack The non-empty array being searched.
   * @param aCompare Function which takes two elements and returns -1, 0, or 1.
   */
  function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare) {
    // This function terminates when one of the following is true:
    //
    //   1. We find the exact element we are looking for.
    //
    //   2. We did not find the exact element, but we can return the index of
    //      the next closest element that is less than that element.
    //
    //   3. We did not find the exact element, and there is no next-closest
    //      element which is less than the one we are searching for, so we
    //      return -1.
    var mid = Math.floor((aHigh - aLow) / 2) + aLow;
    var cmp = aCompare(aNeedle, aHaystack[mid], true);
    if (cmp === 0) {
      // Found the element we are looking for.
      return mid;
    }
    else if (cmp > 0) {
      // aHaystack[mid] is greater than our needle.
      if (aHigh - mid > 1) {
        // The element is in the upper half.
        return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare);
      }
      // We did not find an exact match, return the next closest one
      // (termination case 2).
      return mid;
    }
    else {
      // aHaystack[mid] is less than our needle.
      if (mid - aLow > 1) {
        // The element is in the lower half.
        return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare);
      }
      // The exact needle element was not found in this haystack. Determine if
      // we are in termination case (2) or (3) and return the appropriate thing.
      return aLow < 0 ? -1 : aLow;
    }
  }

  /**
   * This is an implementation of binary search which will always try and return
   * the index of next lowest value checked if there is no exact hit. This is
   * because mappings between original and generated line/col pairs are single
   * points, and there is an implicit region between each of them, so a miss
   * just means that you aren't on the very start of a region.
   *
   * @param aNeedle The element you are looking for.
   * @param aHaystack The array that is being searched.
   * @param aCompare A function which takes the needle and an element in the
   *     array and returns -1, 0, or 1 depending on whether the needle is less
   *     than, equal to, or greater than the element, respectively.
   */
  exports.search = function search(aNeedle, aHaystack, aCompare) {
    if (aHaystack.length === 0) {
      return -1;
    }
    return recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack, aCompare)
  };

});

},{"amdefine":37}],32:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2014 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
if (typeof define !== 'function') {
    var define = require('amdefine')(module, require);
}
define(function (require, exports, module) {

  var util = require('./util');

  /**
   * Determine whether mappingB is after mappingA with respect to generated
   * position.
   */
  function generatedPositionAfter(mappingA, mappingB) {
    // Optimized for most common case
    var lineA = mappingA.generatedLine;
    var lineB = mappingB.generatedLine;
    var columnA = mappingA.generatedColumn;
    var columnB = mappingB.generatedColumn;
    return lineB > lineA || lineB == lineA && columnB >= columnA ||
           util.compareByGeneratedPositions(mappingA, mappingB) <= 0;
  }

  /**
   * A data structure to provide a sorted view of accumulated mappings in a
   * performance conscious manner. It trades a neglibable overhead in general
   * case for a large speedup in case of mappings being added in order.
   */
  function MappingList() {
    this._array = [];
    this._sorted = true;
    // Serves as infimum
    this._last = {generatedLine: -1, generatedColumn: 0};
  }

  /**
   * Iterate through internal items. This method takes the same arguments that
   * `Array.prototype.forEach` takes.
   *
   * NOTE: The order of the mappings is NOT guaranteed.
   */
  MappingList.prototype.unsortedForEach =
    function MappingList_forEach(aCallback, aThisArg) {
      this._array.forEach(aCallback, aThisArg);
    };

  /**
   * Add the given source mapping.
   *
   * @param Object aMapping
   */
  MappingList.prototype.add = function MappingList_add(aMapping) {
    var mapping;
    if (generatedPositionAfter(this._last, aMapping)) {
      this._last = aMapping;
      this._array.push(aMapping);
    } else {
      this._sorted = false;
      this._array.push(aMapping);
    }
  };

  /**
   * Returns the flat, sorted array of mappings. The mappings are sorted by
   * generated position.
   *
   * WARNING: This method returns internal data without copying, for
   * performance. The return value must NOT be mutated, and should be treated as
   * an immutable borrow. If you want to take ownership, you must make your own
   * copy.
   */
  MappingList.prototype.toArray = function MappingList_toArray() {
    if (!this._sorted) {
      this._array.sort(util.compareByGeneratedPositions);
      this._sorted = true;
    }
    return this._array;
  };

  exports.MappingList = MappingList;

});

},{"./util":36,"amdefine":37}],33:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
if (typeof define !== 'function') {
    var define = require('amdefine')(module, require);
}
define(function (require, exports, module) {

  var util = require('./util');
  var binarySearch = require('./binary-search');
  var ArraySet = require('./array-set').ArraySet;
  var base64VLQ = require('./base64-vlq');

  /**
   * A SourceMapConsumer instance represents a parsed source map which we can
   * query for information about the original file positions by giving it a file
   * position in the generated source.
   *
   * The only parameter is the raw source map (either as a JSON string, or
   * already parsed to an object). According to the spec, source maps have the
   * following attributes:
   *
   *   - version: Which version of the source map spec this map is following.
   *   - sources: An array of URLs to the original source files.
   *   - names: An array of identifiers which can be referrenced by individual mappings.
   *   - sourceRoot: Optional. The URL root from which all sources are relative.
   *   - sourcesContent: Optional. An array of contents of the original source files.
   *   - mappings: A string of base64 VLQs which contain the actual mappings.
   *   - file: Optional. The generated file this source map is associated with.
   *
   * Here is an example source map, taken from the source map spec[0]:
   *
   *     {
   *       version : 3,
   *       file: "out.js",
   *       sourceRoot : "",
   *       sources: ["foo.js", "bar.js"],
   *       names: ["src", "maps", "are", "fun"],
   *       mappings: "AA,AB;;ABCDE;"
   *     }
   *
   * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#
   */
  function SourceMapConsumer(aSourceMap) {
    var sourceMap = aSourceMap;
    if (typeof aSourceMap === 'string') {
      sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
    }

    var version = util.getArg(sourceMap, 'version');
    var sources = util.getArg(sourceMap, 'sources');
    // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which
    // requires the array) to play nice here.
    var names = util.getArg(sourceMap, 'names', []);
    var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);
    var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);
    var mappings = util.getArg(sourceMap, 'mappings');
    var file = util.getArg(sourceMap, 'file', null);

    // Once again, Sass deviates from the spec and supplies the version as a
    // string rather than a number, so we use loose equality checking here.
    if (version != this._version) {
      throw new Error('Unsupported version: ' + version);
    }

    // Some source maps produce relative source paths like "./foo.js" instead of
    // "foo.js".  Normalize these first so that future comparisons will succeed.
    // See bugzil.la/1090768.
    sources = sources.map(util.normalize);

    // Pass `true` below to allow duplicate names and sources. While source maps
    // are intended to be compressed and deduplicated, the TypeScript compiler
    // sometimes generates source maps with duplicates in them. See Github issue
    // #72 and bugzil.la/889492.
    this._names = ArraySet.fromArray(names, true);
    this._sources = ArraySet.fromArray(sources, true);

    this.sourceRoot = sourceRoot;
    this.sourcesContent = sourcesContent;
    this._mappings = mappings;
    this.file = file;
  }

  /**
   * Create a SourceMapConsumer from a SourceMapGenerator.
   *
   * @param SourceMapGenerator aSourceMap
   *        The source map that will be consumed.
   * @returns SourceMapConsumer
   */
  SourceMapConsumer.fromSourceMap =
    function SourceMapConsumer_fromSourceMap(aSourceMap) {
      var smc = Object.create(SourceMapConsumer.prototype);

      smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);
      smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);
      smc.sourceRoot = aSourceMap._sourceRoot;
      smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),
                                                              smc.sourceRoot);
      smc.file = aSourceMap._file;

      smc.__generatedMappings = aSourceMap._mappings.toArray().slice();
      smc.__originalMappings = aSourceMap._mappings.toArray().slice()
        .sort(util.compareByOriginalPositions);

      return smc;
    };

  /**
   * The version of the source mapping spec that we are consuming.
   */
  SourceMapConsumer.prototype._version = 3;

  /**
   * The list of original sources.
   */
  Object.defineProperty(SourceMapConsumer.prototype, 'sources', {
    get: function () {
      return this._sources.toArray().map(function (s) {
        return this.sourceRoot != null ? util.join(this.sourceRoot, s) : s;
      }, this);
    }
  });

  // `__generatedMappings` and `__originalMappings` are arrays that hold the
  // parsed mapping coordinates from the source map's "mappings" attribute. They
  // are lazily instantiated, accessed via the `_generatedMappings` and
  // `_originalMappings` getters respectively, and we only parse the mappings
  // and create these arrays once queried for a source location. We jump through
  // these hoops because there can be many thousands of mappings, and parsing
  // them is expensive, so we only want to do it if we must.
  //
  // Each object in the arrays is of the form:
  //
  //     {
  //       generatedLine: The line number in the generated code,
  //       generatedColumn: The column number in the generated code,
  //       source: The path to the original source file that generated this
  //               chunk of code,
  //       originalLine: The line number in the original source that
  //                     corresponds to this chunk of generated code,
  //       originalColumn: The column number in the original source that
  //                       corresponds to this chunk of generated code,
  //       name: The name of the original symbol which generated this chunk of
  //             code.
  //     }
  //
  // All properties except for `generatedLine` and `generatedColumn` can be
  // `null`.
  //
  // `_generatedMappings` is ordered by the generated positions.
  //
  // `_originalMappings` is ordered by the original positions.

  SourceMapConsumer.prototype.__generatedMappings = null;
  Object.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {
    get: function () {
      if (!this.__generatedMappings) {
        this.__generatedMappings = [];
        this.__originalMappings = [];
        this._parseMappings(this._mappings, this.sourceRoot);
      }

      return this.__generatedMappings;
    }
  });

  SourceMapConsumer.prototype.__originalMappings = null;
  Object.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {
    get: function () {
      if (!this.__originalMappings) {
        this.__generatedMappings = [];
        this.__originalMappings = [];
        this._parseMappings(this._mappings, this.sourceRoot);
      }

      return this.__originalMappings;
    }
  });

  SourceMapConsumer.prototype._nextCharIsMappingSeparator =
    function SourceMapConsumer_nextCharIsMappingSeparator(aStr) {
      var c = aStr.charAt(0);
      return c === ";" || c === ",";
    };

  /**
   * Parse the mappings in a string in to a data structure which we can easily
   * query (the ordered arrays in the `this.__generatedMappings` and
   * `this.__originalMappings` properties).
   */
  SourceMapConsumer.prototype._parseMappings =
    function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
      var generatedLine = 1;
      var previousGeneratedColumn = 0;
      var previousOriginalLine = 0;
      var previousOriginalColumn = 0;
      var previousSource = 0;
      var previousName = 0;
      var str = aStr;
      var temp = {};
      var mapping;

      while (str.length > 0) {
        if (str.charAt(0) === ';') {
          generatedLine++;
          str = str.slice(1);
          previousGeneratedColumn = 0;
        }
        else if (str.charAt(0) === ',') {
          str = str.slice(1);
        }
        else {
          mapping = {};
          mapping.generatedLine = generatedLine;

          // Generated column.
          base64VLQ.decode(str, temp);
          mapping.generatedColumn = previousGeneratedColumn + temp.value;
          previousGeneratedColumn = mapping.generatedColumn;
          str = temp.rest;

          if (str.length > 0 && !this._nextCharIsMappingSeparator(str)) {
            // Original source.
            base64VLQ.decode(str, temp);
            mapping.source = this._sources.at(previousSource + temp.value);
            previousSource += temp.value;
            str = temp.rest;
            if (str.length === 0 || this._nextCharIsMappingSeparator(str)) {
              throw new Error('Found a source, but no line and column');
            }

            // Original line.
            base64VLQ.decode(str, temp);
            mapping.originalLine = previousOriginalLine + temp.value;
            previousOriginalLine = mapping.originalLine;
            // Lines are stored 0-based
            mapping.originalLine += 1;
            str = temp.rest;
            if (str.length === 0 || this._nextCharIsMappingSeparator(str)) {
              throw new Error('Found a source and line, but no column');
            }

            // Original column.
            base64VLQ.decode(str, temp);
            mapping.originalColumn = previousOriginalColumn + temp.value;
            previousOriginalColumn = mapping.originalColumn;
            str = temp.rest;

            if (str.length > 0 && !this._nextCharIsMappingSeparator(str)) {
              // Original name.
              base64VLQ.decode(str, temp);
              mapping.name = this._names.at(previousName + temp.value);
              previousName += temp.value;
              str = temp.rest;
            }
          }

          this.__generatedMappings.push(mapping);
          if (typeof mapping.originalLine === 'number') {
            this.__originalMappings.push(mapping);
          }
        }
      }

      this.__generatedMappings.sort(util.compareByGeneratedPositions);
      this.__originalMappings.sort(util.compareByOriginalPositions);
    };

  /**
   * Find the mapping that best matches the hypothetical "needle" mapping that
   * we are searching for in the given "haystack" of mappings.
   */
  SourceMapConsumer.prototype._findMapping =
    function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,
                                           aColumnName, aComparator) {
      // To return the position we are searching for, we must first find the
      // mapping for the given position and then return the opposite position it
      // points to. Because the mappings are sorted, we can use binary search to
      // find the best mapping.

      if (aNeedle[aLineName] <= 0) {
        throw new TypeError('Line must be greater than or equal to 1, got '
                            + aNeedle[aLineName]);
      }
      if (aNeedle[aColumnName] < 0) {
        throw new TypeError('Column must be greater than or equal to 0, got '
                            + aNeedle[aColumnName]);
      }

      return binarySearch.search(aNeedle, aMappings, aComparator);
    };

  /**
   * Compute the last column for each generated mapping. The last column is
   * inclusive.
   */
  SourceMapConsumer.prototype.computeColumnSpans =
    function SourceMapConsumer_computeColumnSpans() {
      for (var index = 0; index < this._generatedMappings.length; ++index) {
        var mapping = this._generatedMappings[index];

        // Mappings do not contain a field for the last generated columnt. We
        // can come up with an optimistic estimate, however, by assuming that
        // mappings are contiguous (i.e. given two consecutive mappings, the
        // first mapping ends where the second one starts).
        if (index + 1 < this._generatedMappings.length) {
          var nextMapping = this._generatedMappings[index + 1];

          if (mapping.generatedLine === nextMapping.generatedLine) {
            mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
            continue;
          }
        }

        // The last mapping for each line spans the entire line.
        mapping.lastGeneratedColumn = Infinity;
      }
    };

  /**
   * Returns the original source, line, and column information for the generated
   * source's line and column positions provided. The only argument is an object
   * with the following properties:
   *
   *   - line: The line number in the generated source.
   *   - column: The column number in the generated source.
   *
   * and an object is returned with the following properties:
   *
   *   - source: The original source file, or null.
   *   - line: The line number in the original source, or null.
   *   - column: The column number in the original source, or null.
   *   - name: The original identifier, or null.
   */
  SourceMapConsumer.prototype.originalPositionFor =
    function SourceMapConsumer_originalPositionFor(aArgs) {
      var needle = {
        generatedLine: util.getArg(aArgs, 'line'),
        generatedColumn: util.getArg(aArgs, 'column')
      };

      var index = this._findMapping(needle,
                                    this._generatedMappings,
                                    "generatedLine",
                                    "generatedColumn",
                                    util.compareByGeneratedPositions);

      if (index >= 0) {
        var mapping = this._generatedMappings[index];

        if (mapping.generatedLine === needle.generatedLine) {
          var source = util.getArg(mapping, 'source', null);
          if (source != null && this.sourceRoot != null) {
            source = util.join(this.sourceRoot, source);
          }
          return {
            source: source,
            line: util.getArg(mapping, 'originalLine', null),
            column: util.getArg(mapping, 'originalColumn', null),
            name: util.getArg(mapping, 'name', null)
          };
        }
      }

      return {
        source: null,
        line: null,
        column: null,
        name: null
      };
    };

  /**
   * Returns the original source content. The only argument is the url of the
   * original source file. Returns null if no original source content is
   * availible.
   */
  SourceMapConsumer.prototype.sourceContentFor =
    function SourceMapConsumer_sourceContentFor(aSource) {
      if (!this.sourcesContent) {
        return null;
      }

      if (this.sourceRoot != null) {
        aSource = util.relative(this.sourceRoot, aSource);
      }

      if (this._sources.has(aSource)) {
        return this.sourcesContent[this._sources.indexOf(aSource)];
      }

      var url;
      if (this.sourceRoot != null
          && (url = util.urlParse(this.sourceRoot))) {
        // XXX: file:// URIs and absolute paths lead to unexpected behavior for
        // many users. We can help them out when they expect file:// URIs to
        // behave like it would if they were running a local HTTP server. See
        // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.
        var fileUriAbsPath = aSource.replace(/^file:\/\//, "");
        if (url.scheme == "file"
            && this._sources.has(fileUriAbsPath)) {
          return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]
        }

        if ((!url.path || url.path == "/")
            && this._sources.has("/" + aSource)) {
          return this.sourcesContent[this._sources.indexOf("/" + aSource)];
        }
      }

      throw new Error('"' + aSource + '" is not in the SourceMap.');
    };

  /**
   * Returns the generated line and column information for the original source,
   * line, and column positions provided. The only argument is an object with
   * the following properties:
   *
   *   - source: The filename of the original source.
   *   - line: The line number in the original source.
   *   - column: The column number in the original source.
   *
   * and an object is returned with the following properties:
   *
   *   - line: The line number in the generated source, or null.
   *   - column: The column number in the generated source, or null.
   */
  SourceMapConsumer.prototype.generatedPositionFor =
    function SourceMapConsumer_generatedPositionFor(aArgs) {
      var needle = {
        source: util.getArg(aArgs, 'source'),
        originalLine: util.getArg(aArgs, 'line'),
        originalColumn: util.getArg(aArgs, 'column')
      };

      if (this.sourceRoot != null) {
        needle.source = util.relative(this.sourceRoot, needle.source);
      }

      var index = this._findMapping(needle,
                                    this._originalMappings,
                                    "originalLine",
                                    "originalColumn",
                                    util.compareByOriginalPositions);

      if (index >= 0) {
        var mapping = this._originalMappings[index];

        return {
          line: util.getArg(mapping, 'generatedLine', null),
          column: util.getArg(mapping, 'generatedColumn', null),
          lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
        };
      }

      return {
        line: null,
        column: null,
        lastColumn: null
      };
    };

  /**
   * Returns all generated line and column information for the original source
   * and line provided. The only argument is an object with the following
   * properties:
   *
   *   - source: The filename of the original source.
   *   - line: The line number in the original source.
   *
   * and an array of objects is returned, each with the following properties:
   *
   *   - line: The line number in the generated source, or null.
   *   - column: The column number in the generated source, or null.
   */
  SourceMapConsumer.prototype.allGeneratedPositionsFor =
    function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
      // When there is no exact match, SourceMapConsumer.prototype._findMapping
      // returns the index of the closest mapping less than the needle. By
      // setting needle.originalColumn to Infinity, we thus find the last
      // mapping for the given line, provided such a mapping exists.
      var needle = {
        source: util.getArg(aArgs, 'source'),
        originalLine: util.getArg(aArgs, 'line'),
        originalColumn: Infinity
      };

      if (this.sourceRoot != null) {
        needle.source = util.relative(this.sourceRoot, needle.source);
      }

      var mappings = [];

      var index = this._findMapping(needle,
                                    this._originalMappings,
                                    "originalLine",
                                    "originalColumn",
                                    util.compareByOriginalPositions);
      if (index >= 0) {
        var mapping = this._originalMappings[index];

        while (mapping && mapping.originalLine === needle.originalLine) {
          mappings.push({
            line: util.getArg(mapping, 'generatedLine', null),
            column: util.getArg(mapping, 'generatedColumn', null),
            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
          });

          mapping = this._originalMappings[--index];
        }
      }

      return mappings.reverse();
    };

  SourceMapConsumer.GENERATED_ORDER = 1;
  SourceMapConsumer.ORIGINAL_ORDER = 2;

  /**
   * Iterate over each mapping between an original source/line/column and a
   * generated line/column in this source map.
   *
   * @param Function aCallback
   *        The function that is called with each mapping.
   * @param Object aContext
   *        Optional. If specified, this object will be the value of `this` every
   *        time that `aCallback` is called.
   * @param aOrder
   *        Either `SourceMapConsumer.GENERATED_ORDER` or
   *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to
   *        iterate over the mappings sorted by the generated file's line/column
   *        order or the original's source/line/column order, respectively. Defaults to
   *        `SourceMapConsumer.GENERATED_ORDER`.
   */
  SourceMapConsumer.prototype.eachMapping =
    function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
      var context = aContext || null;
      var order = aOrder || SourceMapConsumer.GENERATED_ORDER;

      var mappings;
      switch (order) {
      case SourceMapConsumer.GENERATED_ORDER:
        mappings = this._generatedMappings;
        break;
      case SourceMapConsumer.ORIGINAL_ORDER:
        mappings = this._originalMappings;
        break;
      default:
        throw new Error("Unknown order of iteration.");
      }

      var sourceRoot = this.sourceRoot;
      mappings.map(function (mapping) {
        var source = mapping.source;
        if (source != null && sourceRoot != null) {
          source = util.join(sourceRoot, source);
        }
        return {
          source: source,
          generatedLine: mapping.generatedLine,
          generatedColumn: mapping.generatedColumn,
          originalLine: mapping.originalLine,
          originalColumn: mapping.originalColumn,
          name: mapping.name
        };
      }).forEach(aCallback, context);
    };

  exports.SourceMapConsumer = SourceMapConsumer;

});

},{"./array-set":28,"./base64-vlq":29,"./binary-search":31,"./util":36,"amdefine":37}],34:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
if (typeof define !== 'function') {
    var define = require('amdefine')(module, require);
}
define(function (require, exports, module) {

  var base64VLQ = require('./base64-vlq');
  var util = require('./util');
  var ArraySet = require('./array-set').ArraySet;
  var MappingList = require('./mapping-list').MappingList;

  /**
   * An instance of the SourceMapGenerator represents a source map which is
   * being built incrementally. You may pass an object with the following
   * properties:
   *
   *   - file: The filename of the generated source.
   *   - sourceRoot: A root for all relative URLs in this source map.
   */
  function SourceMapGenerator(aArgs) {
    if (!aArgs) {
      aArgs = {};
    }
    this._file = util.getArg(aArgs, 'file', null);
    this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);
    this._skipValidation = util.getArg(aArgs, 'skipValidation', false);
    this._sources = new ArraySet();
    this._names = new ArraySet();
    this._mappings = new MappingList();
    this._sourcesContents = null;
  }

  SourceMapGenerator.prototype._version = 3;

  /**
   * Creates a new SourceMapGenerator based on a SourceMapConsumer
   *
   * @param aSourceMapConsumer The SourceMap.
   */
  SourceMapGenerator.fromSourceMap =
    function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
      var sourceRoot = aSourceMapConsumer.sourceRoot;
      var generator = new SourceMapGenerator({
        file: aSourceMapConsumer.file,
        sourceRoot: sourceRoot
      });
      aSourceMapConsumer.eachMapping(function (mapping) {
        var newMapping = {
          generated: {
            line: mapping.generatedLine,
            column: mapping.generatedColumn
          }
        };

        if (mapping.source != null) {
          newMapping.source = mapping.source;
          if (sourceRoot != null) {
            newMapping.source = util.relative(sourceRoot, newMapping.source);
          }

          newMapping.original = {
            line: mapping.originalLine,
            column: mapping.originalColumn
          };

          if (mapping.name != null) {
            newMapping.name = mapping.name;
          }
        }

        generator.addMapping(newMapping);
      });
      aSourceMapConsumer.sources.forEach(function (sourceFile) {
        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
        if (content != null) {
          generator.setSourceContent(sourceFile, content);
        }
      });
      return generator;
    };

  /**
   * Add a single mapping from original source line and column to the generated
   * source's line and column for this source map being created. The mapping
   * object should have the following properties:
   *
   *   - generated: An object with the generated line and column positions.
   *   - original: An object with the original line and column positions.
   *   - source: The original source file (relative to the sourceRoot).
   *   - name: An optional original token name for this mapping.
   */
  SourceMapGenerator.prototype.addMapping =
    function SourceMapGenerator_addMapping(aArgs) {
      var generated = util.getArg(aArgs, 'generated');
      var original = util.getArg(aArgs, 'original', null);
      var source = util.getArg(aArgs, 'source', null);
      var name = util.getArg(aArgs, 'name', null);

      if (!this._skipValidation) {
        this._validateMapping(generated, original, source, name);
      }

      if (source != null && !this._sources.has(source)) {
        this._sources.add(source);
      }

      if (name != null && !this._names.has(name)) {
        this._names.add(name);
      }

      this._mappings.add({
        generatedLine: generated.line,
        generatedColumn: generated.column,
        originalLine: original != null && original.line,
        originalColumn: original != null && original.column,
        source: source,
        name: name
      });
    };

  /**
   * Set the source content for a source file.
   */
  SourceMapGenerator.prototype.setSourceContent =
    function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
      var source = aSourceFile;
      if (this._sourceRoot != null) {
        source = util.relative(this._sourceRoot, source);
      }

      if (aSourceContent != null) {
        // Add the source content to the _sourcesContents map.
        // Create a new _sourcesContents map if the property is null.
        if (!this._sourcesContents) {
          this._sourcesContents = {};
        }
        this._sourcesContents[util.toSetString(source)] = aSourceContent;
      } else if (this._sourcesContents) {
        // Remove the source file from the _sourcesContents map.
        // If the _sourcesContents map is empty, set the property to null.
        delete this._sourcesContents[util.toSetString(source)];
        if (Object.keys(this._sourcesContents).length === 0) {
          this._sourcesContents = null;
        }
      }
    };

  /**
   * Applies the mappings of a sub-source-map for a specific source file to the
   * source map being generated. Each mapping to the supplied source file is
   * rewritten using the supplied source map. Note: The resolution for the
   * resulting mappings is the minimium of this map and the supplied map.
   *
   * @param aSourceMapConsumer The source map to be applied.
   * @param aSourceFile Optional. The filename of the source file.
   *        If omitted, SourceMapConsumer's file property will be used.
   * @param aSourceMapPath Optional. The dirname of the path to the source map
   *        to be applied. If relative, it is relative to the SourceMapConsumer.
   *        This parameter is needed when the two source maps aren't in the same
   *        directory, and the source map to be applied contains relative source
   *        paths. If so, those relative source paths need to be rewritten
   *        relative to the SourceMapGenerator.
   */
  SourceMapGenerator.prototype.applySourceMap =
    function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
      var sourceFile = aSourceFile;
      // If aSourceFile is omitted, we will use the file property of the SourceMap
      if (aSourceFile == null) {
        if (aSourceMapConsumer.file == null) {
          throw new Error(
            'SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' +
            'or the source map\'s "file" property. Both were omitted.'
          );
        }
        sourceFile = aSourceMapConsumer.file;
      }
      var sourceRoot = this._sourceRoot;
      // Make "sourceFile" relative if an absolute Url is passed.
      if (sourceRoot != null) {
        sourceFile = util.relative(sourceRoot, sourceFile);
      }
      // Applying the SourceMap can add and remove items from the sources and
      // the names array.
      var newSources = new ArraySet();
      var newNames = new ArraySet();

      // Find mappings for the "sourceFile"
      this._mappings.unsortedForEach(function (mapping) {
        if (mapping.source === sourceFile && mapping.originalLine != null) {
          // Check if it can be mapped by the source map, then update the mapping.
          var original = aSourceMapConsumer.originalPositionFor({
            line: mapping.originalLine,
            column: mapping.originalColumn
          });
          if (original.source != null) {
            // Copy mapping
            mapping.source = original.source;
            if (aSourceMapPath != null) {
              mapping.source = util.join(aSourceMapPath, mapping.source)
            }
            if (sourceRoot != null) {
              mapping.source = util.relative(sourceRoot, mapping.source);
            }
            mapping.originalLine = original.line;
            mapping.originalColumn = original.column;
            if (original.name != null) {
              mapping.name = original.name;
            }
          }
        }

        var source = mapping.source;
        if (source != null && !newSources.has(source)) {
          newSources.add(source);
        }

        var name = mapping.name;
        if (name != null && !newNames.has(name)) {
          newNames.add(name);
        }

      }, this);
      this._sources = newSources;
      this._names = newNames;

      // Copy sourcesContents of applied map.
      aSourceMapConsumer.sources.forEach(function (sourceFile) {
        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
        if (content != null) {
          if (aSourceMapPath != null) {
            sourceFile = util.join(aSourceMapPath, sourceFile);
          }
          if (sourceRoot != null) {
            sourceFile = util.relative(sourceRoot, sourceFile);
          }
          this.setSourceContent(sourceFile, content);
        }
      }, this);
    };

  /**
   * A mapping can have one of the three levels of data:
   *
   *   1. Just the generated position.
   *   2. The Generated position, original position, and original source.
   *   3. Generated and original position, original source, as well as a name
   *      token.
   *
   * To maintain consistency, we validate that any new mapping being added falls
   * in to one of these categories.
   */
  SourceMapGenerator.prototype._validateMapping =
    function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource,
                                                aName) {
      if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
          && aGenerated.line > 0 && aGenerated.column >= 0
          && !aOriginal && !aSource && !aName) {
        // Case 1.
        return;
      }
      else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
               && aOriginal && 'line' in aOriginal && 'column' in aOriginal
               && aGenerated.line > 0 && aGenerated.column >= 0
               && aOriginal.line > 0 && aOriginal.column >= 0
               && aSource) {
        // Cases 2 and 3.
        return;
      }
      else {
        throw new Error('Invalid mapping: ' + JSON.stringify({
          generated: aGenerated,
          source: aSource,
          original: aOriginal,
          name: aName
        }));
      }
    };

  /**
   * Serialize the accumulated mappings in to the stream of base 64 VLQs
   * specified by the source map format.
   */
  SourceMapGenerator.prototype._serializeMappings =
    function SourceMapGenerator_serializeMappings() {
      var previousGeneratedColumn = 0;
      var previousGeneratedLine = 1;
      var previousOriginalColumn = 0;
      var previousOriginalLine = 0;
      var previousName = 0;
      var previousSource = 0;
      var result = '';
      var mapping;

      var mappings = this._mappings.toArray();

      for (var i = 0, len = mappings.length; i < len; i++) {
        mapping = mappings[i];

        if (mapping.generatedLine !== previousGeneratedLine) {
          previousGeneratedColumn = 0;
          while (mapping.generatedLine !== previousGeneratedLine) {
            result += ';';
            previousGeneratedLine++;
          }
        }
        else {
          if (i > 0) {
            if (!util.compareByGeneratedPositions(mapping, mappings[i - 1])) {
              continue;
            }
            result += ',';
          }
        }

        result += base64VLQ.encode(mapping.generatedColumn
                                   - previousGeneratedColumn);
        previousGeneratedColumn = mapping.generatedColumn;

        if (mapping.source != null) {
          result += base64VLQ.encode(this._sources.indexOf(mapping.source)
                                     - previousSource);
          previousSource = this._sources.indexOf(mapping.source);

          // lines are stored 0-based in SourceMap spec version 3
          result += base64VLQ.encode(mapping.originalLine - 1
                                     - previousOriginalLine);
          previousOriginalLine = mapping.originalLine - 1;

          result += base64VLQ.encode(mapping.originalColumn
                                     - previousOriginalColumn);
          previousOriginalColumn = mapping.originalColumn;

          if (mapping.name != null) {
            result += base64VLQ.encode(this._names.indexOf(mapping.name)
                                       - previousName);
            previousName = this._names.indexOf(mapping.name);
          }
        }
      }

      return result;
    };

  SourceMapGenerator.prototype._generateSourcesContent =
    function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
      return aSources.map(function (source) {
        if (!this._sourcesContents) {
          return null;
        }
        if (aSourceRoot != null) {
          source = util.relative(aSourceRoot, source);
        }
        var key = util.toSetString(source);
        return Object.prototype.hasOwnProperty.call(this._sourcesContents,
                                                    key)
          ? this._sourcesContents[key]
          : null;
      }, this);
    };

  /**
   * Externalize the source map.
   */
  SourceMapGenerator.prototype.toJSON =
    function SourceMapGenerator_toJSON() {
      var map = {
        version: this._version,
        sources: this._sources.toArray(),
        names: this._names.toArray(),
        mappings: this._serializeMappings()
      };
      if (this._file != null) {
        map.file = this._file;
      }
      if (this._sourceRoot != null) {
        map.sourceRoot = this._sourceRoot;
      }
      if (this._sourcesContents) {
        map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
      }

      return map;
    };

  /**
   * Render the source map being generated to a string.
   */
  SourceMapGenerator.prototype.toString =
    function SourceMapGenerator_toString() {
      return JSON.stringify(this);
    };

  exports.SourceMapGenerator = SourceMapGenerator;

});

},{"./array-set":28,"./base64-vlq":29,"./mapping-list":32,"./util":36,"amdefine":37}],35:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
if (typeof define !== 'function') {
    var define = require('amdefine')(module, require);
}
define(function (require, exports, module) {

  var SourceMapGenerator = require('./source-map-generator').SourceMapGenerator;
  var util = require('./util');

  // Matches a Windows-style `\r\n` newline or a `\n` newline used by all other
  // operating systems these days (capturing the result).
  var REGEX_NEWLINE = /(\r?\n)/;

  // Newline character code for charCodeAt() comparisons
  var NEWLINE_CODE = 10;

  // Private symbol for identifying `SourceNode`s when multiple versions of
  // the source-map library are loaded. This MUST NOT CHANGE across
  // versions!
  var isSourceNode = "$$$isSourceNode$$$";

  /**
   * SourceNodes provide a way to abstract over interpolating/concatenating
   * snippets of generated JavaScript source code while maintaining the line and
   * column information associated with the original source code.
   *
   * @param aLine The original line number.
   * @param aColumn The original column number.
   * @param aSource The original source's filename.
   * @param aChunks Optional. An array of strings which are snippets of
   *        generated JS, or other SourceNodes.
   * @param aName The original identifier.
   */
  function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
    this.children = [];
    this.sourceContents = {};
    this.line = aLine == null ? null : aLine;
    this.column = aColumn == null ? null : aColumn;
    this.source = aSource == null ? null : aSource;
    this.name = aName == null ? null : aName;
    this[isSourceNode] = true;
    if (aChunks != null) this.add(aChunks);
  }

  /**
   * Creates a SourceNode from generated code and a SourceMapConsumer.
   *
   * @param aGeneratedCode The generated code
   * @param aSourceMapConsumer The SourceMap for the generated code
   * @param aRelativePath Optional. The path that relative sources in the
   *        SourceMapConsumer should be relative to.
   */
  SourceNode.fromStringWithSourceMap =
    function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
      // The SourceNode we want to fill with the generated code
      // and the SourceMap
      var node = new SourceNode();

      // All even indices of this array are one line of the generated code,
      // while all odd indices are the newlines between two adjacent lines
      // (since `REGEX_NEWLINE` captures its match).
      // Processed fragments are removed from this array, by calling `shiftNextLine`.
      var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
      var shiftNextLine = function() {
        var lineContents = remainingLines.shift();
        // The last line of a file might not have a newline.
        var newLine = remainingLines.shift() || "";
        return lineContents + newLine;
      };

      // We need to remember the position of "remainingLines"
      var lastGeneratedLine = 1, lastGeneratedColumn = 0;

      // The generate SourceNodes we need a code range.
      // To extract it current and last mapping is used.
      // Here we store the last mapping.
      var lastMapping = null;

      aSourceMapConsumer.eachMapping(function (mapping) {
        if (lastMapping !== null) {
          // We add the code from "lastMapping" to "mapping":
          // First check if there is a new line in between.
          if (lastGeneratedLine < mapping.generatedLine) {
            var code = "";
            // Associate first line with "lastMapping"
            addMappingWithCode(lastMapping, shiftNextLine());
            lastGeneratedLine++;
            lastGeneratedColumn = 0;
            // The remaining code is added without mapping
          } else {
            // There is no new line in between.
            // Associate the code between "lastGeneratedColumn" and
            // "mapping.generatedColumn" with "lastMapping"
            var nextLine = remainingLines[0];
            var code = nextLine.substr(0, mapping.generatedColumn -
                                          lastGeneratedColumn);
            remainingLines[0] = nextLine.substr(mapping.generatedColumn -
                                                lastGeneratedColumn);
            lastGeneratedColumn = mapping.generatedColumn;
            addMappingWithCode(lastMapping, code);
            // No more remaining code, continue
            lastMapping = mapping;
            return;
          }
        }
        // We add the generated code until the first mapping
        // to the SourceNode without any mapping.
        // Each line is added as separate string.
        while (lastGeneratedLine < mapping.generatedLine) {
          node.add(shiftNextLine());
          lastGeneratedLine++;
        }
        if (lastGeneratedColumn < mapping.generatedColumn) {
          var nextLine = remainingLines[0];
          node.add(nextLine.substr(0, mapping.generatedColumn));
          remainingLines[0] = nextLine.substr(mapping.generatedColumn);
          lastGeneratedColumn = mapping.generatedColumn;
        }
        lastMapping = mapping;
      }, this);
      // We have processed all mappings.
      if (remainingLines.length > 0) {
        if (lastMapping) {
          // Associate the remaining code in the current line with "lastMapping"
          addMappingWithCode(lastMapping, shiftNextLine());
        }
        // and add the remaining lines without any mapping
        node.add(remainingLines.join(""));
      }

      // Copy sourcesContent into SourceNode
      aSourceMapConsumer.sources.forEach(function (sourceFile) {
        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
        if (content != null) {
          if (aRelativePath != null) {
            sourceFile = util.join(aRelativePath, sourceFile);
          }
          node.setSourceContent(sourceFile, content);
        }
      });

      return node;

      function addMappingWithCode(mapping, code) {
        if (mapping === null || mapping.source === undefined) {
          node.add(code);
        } else {
          var source = aRelativePath
            ? util.join(aRelativePath, mapping.source)
            : mapping.source;
          node.add(new SourceNode(mapping.originalLine,
                                  mapping.originalColumn,
                                  source,
                                  code,
                                  mapping.name));
        }
      }
    };

  /**
   * Add a chunk of generated JS to this source node.
   *
   * @param aChunk A string snippet of generated JS code, another instance of
   *        SourceNode, or an array where each member is one of those things.
   */
  SourceNode.prototype.add = function SourceNode_add(aChunk) {
    if (Array.isArray(aChunk)) {
      aChunk.forEach(function (chunk) {
        this.add(chunk);
      }, this);
    }
    else if (aChunk[isSourceNode] || typeof aChunk === "string") {
      if (aChunk) {
        this.children.push(aChunk);
      }
    }
    else {
      throw new TypeError(
        "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
      );
    }
    return this;
  };

  /**
   * Add a chunk of generated JS to the beginning of this source node.
   *
   * @param aChunk A string snippet of generated JS code, another instance of
   *        SourceNode, or an array where each member is one of those things.
   */
  SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
    if (Array.isArray(aChunk)) {
      for (var i = aChunk.length-1; i >= 0; i--) {
        this.prepend(aChunk[i]);
      }
    }
    else if (aChunk[isSourceNode] || typeof aChunk === "string") {
      this.children.unshift(aChunk);
    }
    else {
      throw new TypeError(
        "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
      );
    }
    return this;
  };

  /**
   * Walk over the tree of JS snippets in this node and its children. The
   * walking function is called once for each snippet of JS and is passed that
   * snippet and the its original associated source's line/column location.
   *
   * @param aFn The traversal function.
   */
  SourceNode.prototype.walk = function SourceNode_walk(aFn) {
    var chunk;
    for (var i = 0, len = this.children.length; i < len; i++) {
      chunk = this.children[i];
      if (chunk[isSourceNode]) {
        chunk.walk(aFn);
      }
      else {
        if (chunk !== '') {
          aFn(chunk, { source: this.source,
                       line: this.line,
                       column: this.column,
                       name: this.name });
        }
      }
    }
  };

  /**
   * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between
   * each of `this.children`.
   *
   * @param aSep The separator.
   */
  SourceNode.prototype.join = function SourceNode_join(aSep) {
    var newChildren;
    var i;
    var len = this.children.length;
    if (len > 0) {
      newChildren = [];
      for (i = 0; i < len-1; i++) {
        newChildren.push(this.children[i]);
        newChildren.push(aSep);
      }
      newChildren.push(this.children[i]);
      this.children = newChildren;
    }
    return this;
  };

  /**
   * Call String.prototype.replace on the very right-most source snippet. Useful
   * for trimming whitespace from the end of a source node, etc.
   *
   * @param aPattern The pattern to replace.
   * @param aReplacement The thing to replace the pattern with.
   */
  SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
    var lastChild = this.children[this.children.length - 1];
    if (lastChild[isSourceNode]) {
      lastChild.replaceRight(aPattern, aReplacement);
    }
    else if (typeof lastChild === 'string') {
      this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
    }
    else {
      this.children.push(''.replace(aPattern, aReplacement));
    }
    return this;
  };

  /**
   * Set the source content for a source file. This will be added to the SourceMapGenerator
   * in the sourcesContent field.
   *
   * @param aSourceFile The filename of the source file
   * @param aSourceContent The content of the source file
   */
  SourceNode.prototype.setSourceContent =
    function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
      this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;
    };

  /**
   * Walk over the tree of SourceNodes. The walking function is called for each
   * source file content and is passed the filename and source content.
   *
   * @param aFn The traversal function.
   */
  SourceNode.prototype.walkSourceContents =
    function SourceNode_walkSourceContents(aFn) {
      for (var i = 0, len = this.children.length; i < len; i++) {
        if (this.children[i][isSourceNode]) {
          this.children[i].walkSourceContents(aFn);
        }
      }

      var sources = Object.keys(this.sourceContents);
      for (var i = 0, len = sources.length; i < len; i++) {
        aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);
      }
    };

  /**
   * Return the string representation of this source node. Walks over the tree
   * and concatenates all the various snippets together to one string.
   */
  SourceNode.prototype.toString = function SourceNode_toString() {
    var str = "";
    this.walk(function (chunk) {
      str += chunk;
    });
    return str;
  };

  /**
   * Returns the string representation of this source node along with a source
   * map.
   */
  SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
    var generated = {
      code: "",
      line: 1,
      column: 0
    };
    var map = new SourceMapGenerator(aArgs);
    var sourceMappingActive = false;
    var lastOriginalSource = null;
    var lastOriginalLine = null;
    var lastOriginalColumn = null;
    var lastOriginalName = null;
    this.walk(function (chunk, original) {
      generated.code += chunk;
      if (original.source !== null
          && original.line !== null
          && original.column !== null) {
        if(lastOriginalSource !== original.source
           || lastOriginalLine !== original.line
           || lastOriginalColumn !== original.column
           || lastOriginalName !== original.name) {
          map.addMapping({
            source: original.source,
            original: {
              line: original.line,
              column: original.column
            },
            generated: {
              line: generated.line,
              column: generated.column
            },
            name: original.name
          });
        }
        lastOriginalSource = original.source;
        lastOriginalLine = original.line;
        lastOriginalColumn = original.column;
        lastOriginalName = original.name;
        sourceMappingActive = true;
      } else if (sourceMappingActive) {
        map.addMapping({
          generated: {
            line: generated.line,
            column: generated.column
          }
        });
        lastOriginalSource = null;
        sourceMappingActive = false;
      }
      for (var idx = 0, length = chunk.length; idx < length; idx++) {
        if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
          generated.line++;
          generated.column = 0;
          // Mappings end at eol
          if (idx + 1 === length) {
            lastOriginalSource = null;
            sourceMappingActive = false;
          } else if (sourceMappingActive) {
            map.addMapping({
              source: original.source,
              original: {
                line: original.line,
                column: original.column
              },
              generated: {
                line: generated.line,
                column: generated.column
              },
              name: original.name
            });
          }
        } else {
          generated.column++;
        }
      }
    });
    this.walkSourceContents(function (sourceFile, sourceContent) {
      map.setSourceContent(sourceFile, sourceContent);
    });

    return { code: generated.code, map: map };
  };

  exports.SourceNode = SourceNode;

});

},{"./source-map-generator":34,"./util":36,"amdefine":37}],36:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
if (typeof define !== 'function') {
    var define = require('amdefine')(module, require);
}
define(function (require, exports, module) {

  /**
   * This is a helper function for getting values from parameter/options
   * objects.
   *
   * @param args The object we are extracting values from
   * @param name The name of the property we are getting.
   * @param defaultValue An optional value to return if the property is missing
   * from the object. If this is not specified and the property is missing, an
   * error will be thrown.
   */
  function getArg(aArgs, aName, aDefaultValue) {
    if (aName in aArgs) {
      return aArgs[aName];
    } else if (arguments.length === 3) {
      return aDefaultValue;
    } else {
      throw new Error('"' + aName + '" is a required argument.');
    }
  }
  exports.getArg = getArg;

  var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.]*)(?::(\d+))?(\S*)$/;
  var dataUrlRegexp = /^data:.+\,.+$/;

  function urlParse(aUrl) {
    var match = aUrl.match(urlRegexp);
    if (!match) {
      return null;
    }
    return {
      scheme: match[1],
      auth: match[2],
      host: match[3],
      port: match[4],
      path: match[5]
    };
  }
  exports.urlParse = urlParse;

  function urlGenerate(aParsedUrl) {
    var url = '';
    if (aParsedUrl.scheme) {
      url += aParsedUrl.scheme + ':';
    }
    url += '//';
    if (aParsedUrl.auth) {
      url += aParsedUrl.auth + '@';
    }
    if (aParsedUrl.host) {
      url += aParsedUrl.host;
    }
    if (aParsedUrl.port) {
      url += ":" + aParsedUrl.port
    }
    if (aParsedUrl.path) {
      url += aParsedUrl.path;
    }
    return url;
  }
  exports.urlGenerate = urlGenerate;

  /**
   * Normalizes a path, or the path portion of a URL:
   *
   * - Replaces consequtive slashes with one slash.
   * - Removes unnecessary '.' parts.
   * - Removes unnecessary '<dir>/..' parts.
   *
   * Based on code in the Node.js 'path' core module.
   *
   * @param aPath The path or url to normalize.
   */
  function normalize(aPath) {
    var path = aPath;
    var url = urlParse(aPath);
    if (url) {
      if (!url.path) {
        return aPath;
      }
      path = url.path;
    }
    var isAbsolute = (path.charAt(0) === '/');

    var parts = path.split(/\/+/);
    for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
      part = parts[i];
      if (part === '.') {
        parts.splice(i, 1);
      } else if (part === '..') {
        up++;
      } else if (up > 0) {
        if (part === '') {
          // The first part is blank if the path is absolute. Trying to go
          // above the root is a no-op. Therefore we can remove all '..' parts
          // directly after the root.
          parts.splice(i + 1, up);
          up = 0;
        } else {
          parts.splice(i, 2);
          up--;
        }
      }
    }
    path = parts.join('/');

    if (path === '') {
      path = isAbsolute ? '/' : '.';
    }

    if (url) {
      url.path = path;
      return urlGenerate(url);
    }
    return path;
  }
  exports.normalize = normalize;

  /**
   * Joins two paths/URLs.
   *
   * @param aRoot The root path or URL.
   * @param aPath The path or URL to be joined with the root.
   *
   * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a
   *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended
   *   first.
   * - Otherwise aPath is a path. If aRoot is a URL, then its path portion
   *   is updated with the result and aRoot is returned. Otherwise the result
   *   is returned.
   *   - If aPath is absolute, the result is aPath.
   *   - Otherwise the two paths are joined with a slash.
   * - Joining for example 'http://' and 'www.example.com' is also supported.
   */
  function join(aRoot, aPath) {
    if (aRoot === "") {
      aRoot = ".";
    }
    if (aPath === "") {
      aPath = ".";
    }
    var aPathUrl = urlParse(aPath);
    var aRootUrl = urlParse(aRoot);
    if (aRootUrl) {
      aRoot = aRootUrl.path || '/';
    }

    // `join(foo, '//www.example.org')`
    if (aPathUrl && !aPathUrl.scheme) {
      if (aRootUrl) {
        aPathUrl.scheme = aRootUrl.scheme;
      }
      return urlGenerate(aPathUrl);
    }

    if (aPathUrl || aPath.match(dataUrlRegexp)) {
      return aPath;
    }

    // `join('http://', 'www.example.com')`
    if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
      aRootUrl.host = aPath;
      return urlGenerate(aRootUrl);
    }

    var joined = aPath.charAt(0) === '/'
      ? aPath
      : normalize(aRoot.replace(/\/+$/, '') + '/' + aPath);

    if (aRootUrl) {
      aRootUrl.path = joined;
      return urlGenerate(aRootUrl);
    }
    return joined;
  }
  exports.join = join;

  /**
   * Make a path relative to a URL or another path.
   *
   * @param aRoot The root path or URL.
   * @param aPath The path or URL to be made relative to aRoot.
   */
  function relative(aRoot, aPath) {
    if (aRoot === "") {
      aRoot = ".";
    }

    aRoot = aRoot.replace(/\/$/, '');

    // XXX: It is possible to remove this block, and the tests still pass!
    var url = urlParse(aRoot);
    if (aPath.charAt(0) == "/" && url && url.path == "/") {
      return aPath.slice(1);
    }

    return aPath.indexOf(aRoot + '/') === 0
      ? aPath.substr(aRoot.length + 1)
      : aPath;
  }
  exports.relative = relative;

  /**
   * Because behavior goes wacky when you set `__proto__` on objects, we
   * have to prefix all the strings in our set with an arbitrary character.
   *
   * See https://github.com/mozilla/source-map/pull/31 and
   * https://github.com/mozilla/source-map/issues/30
   *
   * @param String aStr
   */
  function toSetString(aStr) {
    return '$' + aStr;
  }
  exports.toSetString = toSetString;

  function fromSetString(aStr) {
    return aStr.substr(1);
  }
  exports.fromSetString = fromSetString;

  function strcmp(aStr1, aStr2) {
    var s1 = aStr1 || "";
    var s2 = aStr2 || "";
    return (s1 > s2) - (s1 < s2);
  }

  /**
   * Comparator between two mappings where the original positions are compared.
   *
   * Optionally pass in `true` as `onlyCompareGenerated` to consider two
   * mappings with the same original source/line/column, but different generated
   * line and column the same. Useful when searching for a mapping with a
   * stubbed out mapping.
   */
  function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
    var cmp;

    cmp = strcmp(mappingA.source, mappingB.source);
    if (cmp) {
      return cmp;
    }

    cmp = mappingA.originalLine - mappingB.originalLine;
    if (cmp) {
      return cmp;
    }

    cmp = mappingA.originalColumn - mappingB.originalColumn;
    if (cmp || onlyCompareOriginal) {
      return cmp;
    }

    cmp = strcmp(mappingA.name, mappingB.name);
    if (cmp) {
      return cmp;
    }

    cmp = mappingA.generatedLine - mappingB.generatedLine;
    if (cmp) {
      return cmp;
    }

    return mappingA.generatedColumn - mappingB.generatedColumn;
  };
  exports.compareByOriginalPositions = compareByOriginalPositions;

  /**
   * Comparator between two mappings where the generated positions are
   * compared.
   *
   * Optionally pass in `true` as `onlyCompareGenerated` to consider two
   * mappings with the same generated line and column, but different
   * source/name/original line and column the same. Useful when searching for a
   * mapping with a stubbed out mapping.
   */
  function compareByGeneratedPositions(mappingA, mappingB, onlyCompareGenerated) {
    var cmp;

    cmp = mappingA.generatedLine - mappingB.generatedLine;
    if (cmp) {
      return cmp;
    }

    cmp = mappingA.generatedColumn - mappingB.generatedColumn;
    if (cmp || onlyCompareGenerated) {
      return cmp;
    }

    cmp = strcmp(mappingA.source, mappingB.source);
    if (cmp) {
      return cmp;
    }

    cmp = mappingA.originalLine - mappingB.originalLine;
    if (cmp) {
      return cmp;
    }

    cmp = mappingA.originalColumn - mappingB.originalColumn;
    if (cmp) {
      return cmp;
    }

    return strcmp(mappingA.name, mappingB.name);
  };
  exports.compareByGeneratedPositions = compareByGeneratedPositions;

});

},{"amdefine":37}],37:[function(require,module,exports){
(function (process,__filename){
/** vim: et:ts=4:sw=4:sts=4
 * @license amdefine 1.0.1 Copyright (c) 2011-2016, The Dojo Foundation All Rights Reserved.
 * Available via the MIT or new BSD license.
 * see: http://github.com/jrburke/amdefine for details
 */

/*jslint node: true */
/*global module, process */
'use strict';

/**
 * Creates a define for node.
 * @param {Object} module the "module" object that is defined by Node for the
 * current module.
 * @param {Function} [requireFn]. Node's require function for the current module.
 * It only needs to be passed in Node versions before 0.5, when module.require
 * did not exist.
 * @returns {Function} a define function that is usable for the current node
 * module.
 */
function amdefine(module, requireFn) {
    'use strict';
    var defineCache = {},
        loaderCache = {},
        alreadyCalled = false,
        path = require('path'),
        makeRequire, stringRequire;

    /**
     * Trims the . and .. from an array of path segments.
     * It will keep a leading path segment if a .. will become
     * the first path segment, to help with module name lookups,
     * which act like paths, but can be remapped. But the end result,
     * all paths that use this function should look normalized.
     * NOTE: this method MODIFIES the input array.
     * @param {Array} ary the array of path segments.
     */
    function trimDots(ary) {
        var i, part;
        for (i = 0; ary[i]; i+= 1) {
            part = ary[i];
            if (part === '.') {
                ary.splice(i, 1);
                i -= 1;
            } else if (part === '..') {
                if (i === 1 && (ary[2] === '..' || ary[0] === '..')) {
                    //End of the line. Keep at least one non-dot
                    //path segment at the front so it can be mapped
                    //correctly to disk. Otherwise, there is likely
                    //no path mapping for a path starting with '..'.
                    //This can still fail, but catches the most reasonable
                    //uses of ..
                    break;
                } else if (i > 0) {
                    ary.splice(i - 1, 2);
                    i -= 2;
                }
            }
        }
    }

    function normalize(name, baseName) {
        var baseParts;

        //Adjust any relative paths.
        if (name && name.charAt(0) === '.') {
            //If have a base name, try to normalize against it,
            //otherwise, assume it is a top-level require that will
            //be relative to baseUrl in the end.
            if (baseName) {
                baseParts = baseName.split('/');
                baseParts = baseParts.slice(0, baseParts.length - 1);
                baseParts = baseParts.concat(name.split('/'));
                trimDots(baseParts);
                name = baseParts.join('/');
            }
        }

        return name;
    }

    /**
     * Create the normalize() function passed to a loader plugin's
     * normalize method.
     */
    function makeNormalize(relName) {
        return function (name) {
            return normalize(name, relName);
        };
    }

    function makeLoad(id) {
        function load(value) {
            loaderCache[id] = value;
        }

        load.fromText = function (id, text) {
            //This one is difficult because the text can/probably uses
            //define, and any relative paths and requires should be relative
            //to that id was it would be found on disk. But this would require
            //bootstrapping a module/require fairly deeply from node core.
            //Not sure how best to go about that yet.
            throw new Error('amdefine does not implement load.fromText');
        };

        return load;
    }

    makeRequire = function (systemRequire, exports, module, relId) {
        function amdRequire(deps, callback) {
            if (typeof deps === 'string') {
                //Synchronous, single module require('')
                return stringRequire(systemRequire, exports, module, deps, relId);
            } else {
                //Array of dependencies with a callback.

                //Convert the dependencies to modules.
                deps = deps.map(function (depName) {
                    return stringRequire(systemRequire, exports, module, depName, relId);
                });

                //Wait for next tick to call back the require call.
                if (callback) {
                    process.nextTick(function () {
                        callback.apply(null, deps);
                    });
                }
            }
        }

        amdRequire.toUrl = function (filePath) {
            if (filePath.indexOf('.') === 0) {
                return normalize(filePath, path.dirname(module.filename));
            } else {
                return filePath;
            }
        };

        return amdRequire;
    };

    //Favor explicit value, passed in if the module wants to support Node 0.4.
    requireFn = requireFn || function req() {
        return module.require.apply(module, arguments);
    };

    function runFactory(id, deps, factory) {
        var r, e, m, result;

        if (id) {
            e = loaderCache[id] = {};
            m = {
                id: id,
                uri: __filename,
                exports: e
            };
            r = makeRequire(requireFn, e, m, id);
        } else {
            //Only support one define call per file
            if (alreadyCalled) {
                throw new Error('amdefine with no module ID cannot be called more than once per file.');
            }
            alreadyCalled = true;

            //Use the real variables from node
            //Use module.exports for exports, since
            //the exports in here is amdefine exports.
            e = module.exports;
            m = module;
            r = makeRequire(requireFn, e, m, module.id);
        }

        //If there are dependencies, they are strings, so need
        //to convert them to dependency values.
        if (deps) {
            deps = deps.map(function (depName) {
                return r(depName);
            });
        }

        //Call the factory with the right dependencies.
        if (typeof factory === 'function') {
            result = factory.apply(m.exports, deps);
        } else {
            result = factory;
        }

        if (result !== undefined) {
            m.exports = result;
            if (id) {
                loaderCache[id] = m.exports;
            }
        }
    }

    stringRequire = function (systemRequire, exports, module, id, relId) {
        //Split the ID by a ! so that
        var index = id.indexOf('!'),
            originalId = id,
            prefix, plugin;

        if (index === -1) {
            id = normalize(id, relId);

            //Straight module lookup. If it is one of the special dependencies,
            //deal with it, otherwise, delegate to node.
            if (id === 'require') {
                return makeRequire(systemRequire, exports, module, relId);
            } else if (id === 'exports') {
                return exports;
            } else if (id === 'module') {
                return module;
            } else if (loaderCache.hasOwnProperty(id)) {
                return loaderCache[id];
            } else if (defineCache[id]) {
                runFactory.apply(null, defineCache[id]);
                return loaderCache[id];
            } else {
                if(systemRequire) {
                    return systemRequire(originalId);
                } else {
                    throw new Error('No module with ID: ' + id);
                }
            }
        } else {
            //There is a plugin in play.
            prefix = id.substring(0, index);
            id = id.substring(index + 1, id.length);

            plugin = stringRequire(systemRequire, exports, module, prefix, relId);

            if (plugin.normalize) {
                id = plugin.normalize(id, makeNormalize(relId));
            } else {
                //Normalize the ID normally.
                id = normalize(id, relId);
            }

            if (loaderCache[id]) {
                return loaderCache[id];
            } else {
                plugin.load(id, makeRequire(systemRequire, exports, module, relId), makeLoad(id), {});

                return loaderCache[id];
            }
        }
    };

    //Create a define function specific to the module asking for amdefine.
    function define(id, deps, factory) {
        if (Array.isArray(id)) {
            factory = deps;
            deps = id;
            id = undefined;
        } else if (typeof id !== 'string') {
            factory = id;
            id = deps = undefined;
        }

        if (deps && !Array.isArray(deps)) {
            factory = deps;
            deps = undefined;
        }

        if (!deps) {
            deps = ['require', 'exports', 'module'];
        }

        //Set up properties for this module. If an ID, then use
        //internal cache. If no ID, then use the external variables
        //for this node module.
        if (id) {
            //Put the module in deep freeze until there is a
            //require call for it.
            defineCache[id] = [id, deps, factory];
        } else {
            runFactory(id, deps, factory);
        }
    }

    //define.require, which has access to all the values in the
    //cache. Useful for AMD modules that all have IDs in the file,
    //but need to finally export a value to node based on one of those
    //IDs.
    define.require = function (id) {
        if (loaderCache[id]) {
            return loaderCache[id];
        }

        if (defineCache[id]) {
            runFactory.apply(null, defineCache[id]);
            return loaderCache[id];
        }
    };

    define.amd = {};

    return define;
}

module.exports = amdefine;

}).call(this,require("JkpR2F"),"/../node_modules/escodegen/node_modules/source-map/node_modules/amdefine/amdefine.js")
},{"JkpR2F":43,"path":42}],38:[function(require,module,exports){
module.exports={
  "name": "escodegen",
  "description": "ECMAScript code generator",
  "homepage": "http://github.com/Constellation/escodegen",
  "main": "escodegen.js",
  "bin": {
    "esgenerate": "./bin/esgenerate.js",
    "escodegen": "./bin/escodegen.js"
  },
  "version": "1.3.3",
  "engines": {
    "node": ">=0.10.0"
  },
  "maintainers": [
    {
      "name": "constellation",
      "email": "utatane.tea@gmail.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/Constellation/escodegen.git"
  },
  "dependencies": {
    "esutils": "~1.0.0",
    "estraverse": "~1.5.0",
    "esprima": "~1.1.1",
    "source-map": "~0.1.33"
  },
  "optionalDependencies": {
    "source-map": "~0.1.33"
  },
  "devDependencies": {
    "esprima-moz": "*",
    "semver": "*",
    "chai": "~1.7.2",
    "gulp": "~3.5.0",
    "gulp-mocha": "~0.4.1",
    "gulp-eslint": "~0.1.2",
    "jshint-stylish": "~0.1.5",
    "gulp-jshint": "~1.4.0",
    "commonjs-everywhere": "~0.9.6",
    "bluebird": "~1.2.0",
    "bower-registry-client": "~0.2.0"
  },
  "licenses": [
    {
      "type": "BSD",
      "url": "http://github.com/Constellation/escodegen/raw/master/LICENSE.BSD"
    }
  ],
  "scripts": {
    "test": "gulp travis",
    "unit-test": "gulp test",
    "lint": "gulp lint",
    "release": "node tools/release.js",
    "build-min": "cjsify -ma path: tools/entry-point.js > escodegen.browser.min.js",
    "build": "cjsify -a path: tools/entry-point.js > escodegen.browser.js"
  },
  "bugs": {
    "url": "https://github.com/Constellation/escodegen/issues"
  },
  "_id": "escodegen@1.3.3",
  "dist": {
    "shasum": "f024016f5a88e046fd12005055e939802e6c5f23",
    "tarball": "http://registry.npmjs.org/escodegen/-/escodegen-1.3.3.tgz"
  },
  "_from": "escodegen@>=1.3.0 <1.4.0",
  "_npmVersion": "1.4.3",
  "_npmUser": {
    "name": "constellation",
    "email": "utatane.tea@gmail.com"
  },
  "directories": {},
  "_shasum": "f024016f5a88e046fd12005055e939802e6c5f23",
  "_resolved": "https://registry.npmjs.org/escodegen/-/escodegen-1.3.3.tgz",
  "readme": "ERROR: No README data found!"
}

},{}],39:[function(require,module,exports){
/*
  Copyright (c) jQuery Foundation, Inc. and Contributors, All Rights Reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

(function (root, factory) {
    'use strict';

    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js,
    // Rhino, and plain browser loading.

    /* istanbul ignore next */
    if (typeof define === 'function' && define.amd) {
        define(['exports'], factory);
    } else if (typeof exports !== 'undefined') {
        factory(exports);
    } else {
        factory((root.esprima = {}));
    }
}(this, function (exports) {
    'use strict';

    var Token,
        TokenName,
        FnExprTokens,
        Syntax,
        PlaceHolders,
        Messages,
        Regex,
        source,
        strict,
        index,
        lineNumber,
        lineStart,
        hasLineTerminator,
        lastIndex,
        lastLineNumber,
        lastLineStart,
        startIndex,
        startLineNumber,
        startLineStart,
        scanning,
        length,
        lookahead,
        state,
        extra,
        isBindingElement,
        isAssignmentTarget,
        firstCoverInitializedNameError;

    Token = {
        BooleanLiteral: 1,
        EOF: 2,
        Identifier: 3,
        Keyword: 4,
        NullLiteral: 5,
        NumericLiteral: 6,
        Punctuator: 7,
        StringLiteral: 8,
        RegularExpression: 9,
        Template: 10
    };

    TokenName = {};
    TokenName[Token.BooleanLiteral] = 'Boolean';
    TokenName[Token.EOF] = '<end>';
    TokenName[Token.Identifier] = 'Identifier';
    TokenName[Token.Keyword] = 'Keyword';
    TokenName[Token.NullLiteral] = 'Null';
    TokenName[Token.NumericLiteral] = 'Numeric';
    TokenName[Token.Punctuator] = 'Punctuator';
    TokenName[Token.StringLiteral] = 'String';
    TokenName[Token.RegularExpression] = 'RegularExpression';
    TokenName[Token.Template] = 'Template';

    // A function following one of those tokens is an expression.
    FnExprTokens = ['(', '{', '[', 'in', 'typeof', 'instanceof', 'new',
                    'return', 'case', 'delete', 'throw', 'void',
                    // assignment operators
                    '=', '+=', '-=', '*=', '/=', '%=', '<<=', '>>=', '>>>=',
                    '&=', '|=', '^=', ',',
                    // binary/unary operators
                    '+', '-', '*', '/', '%', '++', '--', '<<', '>>', '>>>', '&',
                    '|', '^', '!', '~', '&&', '||', '?', ':', '===', '==', '>=',
                    '<=', '<', '>', '!=', '!=='];

    Syntax = {
        AssignmentExpression: 'AssignmentExpression',
        AssignmentPattern: 'AssignmentPattern',
        ArrayExpression: 'ArrayExpression',
        ArrayPattern: 'ArrayPattern',
        ArrowFunctionExpression: 'ArrowFunctionExpression',
        BlockStatement: 'BlockStatement',
        BinaryExpression: 'BinaryExpression',
        BreakStatement: 'BreakStatement',
        CallExpression: 'CallExpression',
        CatchClause: 'CatchClause',
        ClassBody: 'ClassBody',
        ClassDeclaration: 'ClassDeclaration',
        ClassExpression: 'ClassExpression',
        ConditionalExpression: 'ConditionalExpression',
        ContinueStatement: 'ContinueStatement',
        DoWhileStatement: 'DoWhileStatement',
        DebuggerStatement: 'DebuggerStatement',
        EmptyStatement: 'EmptyStatement',
        ExportAllDeclaration: 'ExportAllDeclaration',
        ExportDefaultDeclaration: 'ExportDefaultDeclaration',
        ExportNamedDeclaration: 'ExportNamedDeclaration',
        ExportSpecifier: 'ExportSpecifier',
        ExpressionStatement: 'ExpressionStatement',
        ForStatement: 'ForStatement',
        ForOfStatement: 'ForOfStatement',
        ForInStatement: 'ForInStatement',
        FunctionDeclaration: 'FunctionDeclaration',
        FunctionExpression: 'FunctionExpression',
        Identifier: 'Identifier',
        IfStatement: 'IfStatement',
        ImportDeclaration: 'ImportDeclaration',
        ImportDefaultSpecifier: 'ImportDefaultSpecifier',
        ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',
        ImportSpecifier: 'ImportSpecifier',
        Literal: 'Literal',
        LabeledStatement: 'LabeledStatement',
        LogicalExpression: 'LogicalExpression',
        MemberExpression: 'MemberExpression',
        MetaProperty: 'MetaProperty',
        MethodDefinition: 'MethodDefinition',
        NewExpression: 'NewExpression',
        ObjectExpression: 'ObjectExpression',
        ObjectPattern: 'ObjectPattern',
        Program: 'Program',
        Property: 'Property',
        RestElement: 'RestElement',
        ReturnStatement: 'ReturnStatement',
        SequenceExpression: 'SequenceExpression',
        SpreadElement: 'SpreadElement',
        Super: 'Super',
        SwitchCase: 'SwitchCase',
        SwitchStatement: 'SwitchStatement',
        TaggedTemplateExpression: 'TaggedTemplateExpression',
        TemplateElement: 'TemplateElement',
        TemplateLiteral: 'TemplateLiteral',
        ThisExpression: 'ThisExpression',
        ThrowStatement: 'ThrowStatement',
        TryStatement: 'TryStatement',
        UnaryExpression: 'UnaryExpression',
        UpdateExpression: 'UpdateExpression',
        VariableDeclaration: 'VariableDeclaration',
        VariableDeclarator: 'VariableDeclarator',
        WhileStatement: 'WhileStatement',
        WithStatement: 'WithStatement',
        YieldExpression: 'YieldExpression'
    };

    PlaceHolders = {
        ArrowParameterPlaceHolder: 'ArrowParameterPlaceHolder'
    };

    // Error messages should be identical to V8.
    Messages = {
        UnexpectedToken: 'Unexpected token %0',
        UnexpectedNumber: 'Unexpected number',
        UnexpectedString: 'Unexpected string',
        UnexpectedIdentifier: 'Unexpected identifier',
        UnexpectedReserved: 'Unexpected reserved word',
        UnexpectedTemplate: 'Unexpected quasi %0',
        UnexpectedEOS: 'Unexpected end of input',
        NewlineAfterThrow: 'Illegal newline after throw',
        InvalidRegExp: 'Invalid regular expression',
        UnterminatedRegExp: 'Invalid regular expression: missing /',
        InvalidLHSInAssignment: 'Invalid left-hand side in assignment',
        InvalidLHSInForIn: 'Invalid left-hand side in for-in',
        InvalidLHSInForLoop: 'Invalid left-hand side in for-loop',
        MultipleDefaultsInSwitch: 'More than one default clause in switch statement',
        NoCatchOrFinally: 'Missing catch or finally after try',
        UnknownLabel: 'Undefined label \'%0\'',
        Redeclaration: '%0 \'%1\' has already been declared',
        IllegalContinue: 'Illegal continue statement',
        IllegalBreak: 'Illegal break statement',
        IllegalReturn: 'Illegal return statement',
        StrictModeWith: 'Strict mode code may not include a with statement',
        StrictCatchVariable: 'Catch variable may not be eval or arguments in strict mode',
        StrictVarName: 'Variable name may not be eval or arguments in strict mode',
        StrictParamName: 'Parameter name eval or arguments is not allowed in strict mode',
        StrictParamDupe: 'Strict mode function may not have duplicate parameter names',
        StrictFunctionName: 'Function name may not be eval or arguments in strict mode',
        StrictOctalLiteral: 'Octal literals are not allowed in strict mode.',
        StrictDelete: 'Delete of an unqualified identifier in strict mode.',
        StrictLHSAssignment: 'Assignment to eval or arguments is not allowed in strict mode',
        StrictLHSPostfix: 'Postfix increment/decrement may not have eval or arguments operand in strict mode',
        StrictLHSPrefix: 'Prefix increment/decrement may not have eval or arguments operand in strict mode',
        StrictReservedWord: 'Use of future reserved word in strict mode',
        TemplateOctalLiteral: 'Octal literals are not allowed in template strings.',
        ParameterAfterRestParameter: 'Rest parameter must be last formal parameter',
        DefaultRestParameter: 'Unexpected token =',
        ObjectPatternAsRestParameter: 'Unexpected token {',
        DuplicateProtoProperty: 'Duplicate __proto__ fields are not allowed in object literals',
        ConstructorSpecialMethod: 'Class constructor may not be an accessor',
        DuplicateConstructor: 'A class may only have one constructor',
        StaticPrototype: 'Classes may not have static property named prototype',
        MissingFromClause: 'Unexpected token',
        NoAsAfterImportNamespace: 'Unexpected token',
        InvalidModuleSpecifier: 'Unexpected token',
        IllegalImportDeclaration: 'Unexpected token',
        IllegalExportDeclaration: 'Unexpected token',
        DuplicateBinding: 'Duplicate binding %0'
    };

    // See also tools/generate-unicode-regex.js.
    Regex = {
        // ECMAScript 6/Unicode v7.0.0 NonAsciiIdentifierStart:
        NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B2\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDE00-\uDE11\uDE13-\uDE2B\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF5D-\uDF61]|\uD805[\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDE00-\uDE2F\uDE44\uDE80-\uDEAA]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF98]|\uD809[\uDC00-\uDC6E]|[\uD80C\uD840-\uD868\uD86A-\uD86C][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D]|\uD87E[\uDC00-\uDE1D]/,

        // ECMAScript 6/Unicode v7.0.0 NonAsciiIdentifierPart:
        NonAsciiIdentifierPart: /[\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B2\u08E4-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58\u0C59\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D60-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA69D\uA69F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2D\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDD0-\uDDDA\uDE00-\uDE11\uDE13-\uDE37\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF01-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF98]|\uD809[\uDC00-\uDC6E]|[\uD80C\uD840-\uD868\uD86A-\uD86C][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/
    };

    // Ensure the condition is true, otherwise throw an error.
    // This is only to have a better contract semantic, i.e. another safety net
    // to catch a logic error. The condition shall be fulfilled in normal case.
    // Do NOT use this to enforce a certain condition on any user input.

    function assert(condition, message) {
        /* istanbul ignore if */
        if (!condition) {
            throw new Error('ASSERT: ' + message);
        }
    }

    function isDecimalDigit(ch) {
        return (ch >= 0x30 && ch <= 0x39);   // 0..9
    }

    function isHexDigit(ch) {
        return '0123456789abcdefABCDEF'.indexOf(ch) >= 0;
    }

    function isOctalDigit(ch) {
        return '01234567'.indexOf(ch) >= 0;
    }

    function octalToDecimal(ch) {
        // \0 is not octal escape sequence
        var octal = (ch !== '0'), code = '01234567'.indexOf(ch);

        if (index < length && isOctalDigit(source[index])) {
            octal = true;
            code = code * 8 + '01234567'.indexOf(source[index++]);

            // 3 digits are only allowed when string starts
            // with 0, 1, 2, 3
            if ('0123'.indexOf(ch) >= 0 &&
                    index < length &&
                    isOctalDigit(source[index])) {
                code = code * 8 + '01234567'.indexOf(source[index++]);
            }
        }

        return {
            code: code,
            octal: octal
        };
    }

    // ECMA-262 11.2 White Space

    function isWhiteSpace(ch) {
        return (ch === 0x20) || (ch === 0x09) || (ch === 0x0B) || (ch === 0x0C) || (ch === 0xA0) ||
            (ch >= 0x1680 && [0x1680, 0x180E, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(ch) >= 0);
    }

    // ECMA-262 11.3 Line Terminators

    function isLineTerminator(ch) {
        return (ch === 0x0A) || (ch === 0x0D) || (ch === 0x2028) || (ch === 0x2029);
    }

    // ECMA-262 11.6 Identifier Names and Identifiers

    function fromCodePoint(cp) {
        return (cp < 0x10000) ? String.fromCharCode(cp) :
            String.fromCharCode(0xD800 + ((cp - 0x10000) >> 10)) +
            String.fromCharCode(0xDC00 + ((cp - 0x10000) & 1023));
    }

    function isIdentifierStart(ch) {
        return (ch === 0x24) || (ch === 0x5F) ||  // $ (dollar) and _ (underscore)
            (ch >= 0x41 && ch <= 0x5A) ||         // A..Z
            (ch >= 0x61 && ch <= 0x7A) ||         // a..z
            (ch === 0x5C) ||                      // \ (backslash)
            ((ch >= 0x80) && Regex.NonAsciiIdentifierStart.test(fromCodePoint(ch)));
    }

    function isIdentifierPart(ch) {
        return (ch === 0x24) || (ch === 0x5F) ||  // $ (dollar) and _ (underscore)
            (ch >= 0x41 && ch <= 0x5A) ||         // A..Z
            (ch >= 0x61 && ch <= 0x7A) ||         // a..z
            (ch >= 0x30 && ch <= 0x39) ||         // 0..9
            (ch === 0x5C) ||                      // \ (backslash)
            ((ch >= 0x80) && Regex.NonAsciiIdentifierPart.test(fromCodePoint(ch)));
    }

    // ECMA-262 11.6.2.2 Future Reserved Words

    function isFutureReservedWord(id) {
        switch (id) {
        case 'enum':
        case 'export':
        case 'import':
        case 'super':
            return true;
        default:
            return false;
        }
    }

    function isStrictModeReservedWord(id) {
        switch (id) {
        case 'implements':
        case 'interface':
        case 'package':
        case 'private':
        case 'protected':
        case 'public':
        case 'static':
        case 'yield':
        case 'let':
            return true;
        default:
            return false;
        }
    }

    function isRestrictedWord(id) {
        return id === 'eval' || id === 'arguments';
    }

    // ECMA-262 11.6.2.1 Keywords

    function isKeyword(id) {
        switch (id.length) {
        case 2:
            return (id === 'if') || (id === 'in') || (id === 'do');
        case 3:
            return (id === 'var') || (id === 'for') || (id === 'new') ||
                (id === 'try') || (id === 'let');
        case 4:
            return (id === 'this') || (id === 'else') || (id === 'case') ||
                (id === 'void') || (id === 'with') || (id === 'enum');
        case 5:
            return (id === 'while') || (id === 'break') || (id === 'catch') ||
                (id === 'throw') || (id === 'const') || (id === 'yield') ||
                (id === 'class') || (id === 'super');
        case 6:
            return (id === 'return') || (id === 'typeof') || (id === 'delete') ||
                (id === 'switch') || (id === 'export') || (id === 'import');
        case 7:
            return (id === 'default') || (id === 'finally') || (id === 'extends');
        case 8:
            return (id === 'function') || (id === 'continue') || (id === 'debugger');
        case 10:
            return (id === 'instanceof');
        default:
            return false;
        }
    }

    // ECMA-262 11.4 Comments

    function addComment(type, value, start, end, loc) {
        var comment;

        assert(typeof start === 'number', 'Comment must have valid position');

        state.lastCommentStart = start;

        comment = {
            type: type,
            value: value
        };
        if (extra.range) {
            comment.range = [start, end];
        }
        if (extra.loc) {
            comment.loc = loc;
        }
        extra.comments.push(comment);
        if (extra.attachComment) {
            extra.leadingComments.push(comment);
            extra.trailingComments.push(comment);
        }
        if (extra.tokenize) {
            comment.type = comment.type + 'Comment';
            if (extra.delegate) {
                comment = extra.delegate(comment);
            }
            extra.tokens.push(comment);
        }
    }

    function skipSingleLineComment(offset) {
        var start, loc, ch, comment;

        start = index - offset;
        loc = {
            start: {
                line: lineNumber,
                column: index - lineStart - offset
            }
        };

        while (index < length) {
            ch = source.charCodeAt(index);
            ++index;
            if (isLineTerminator(ch)) {
                hasLineTerminator = true;
                if (extra.comments) {
                    comment = source.slice(start + offset, index - 1);
                    loc.end = {
                        line: lineNumber,
                        column: index - lineStart - 1
                    };
                    addComment('Line', comment, start, index - 1, loc);
                }
                if (ch === 13 && source.charCodeAt(index) === 10) {
                    ++index;
                }
                ++lineNumber;
                lineStart = index;
                return;
            }
        }

        if (extra.comments) {
            comment = source.slice(start + offset, index);
            loc.end = {
                line: lineNumber,
                column: index - lineStart
            };
            addComment('Line', comment, start, index, loc);
        }
    }

    function skipMultiLineComment() {
        var start, loc, ch, comment;

        if (extra.comments) {
            start = index - 2;
            loc = {
                start: {
                    line: lineNumber,
                    column: index - lineStart - 2
                }
            };
        }

        while (index < length) {
            ch = source.charCodeAt(index);
            if (isLineTerminator(ch)) {
                if (ch === 0x0D && source.charCodeAt(index + 1) === 0x0A) {
                    ++index;
                }
                hasLineTerminator = true;
                ++lineNumber;
                ++index;
                lineStart = index;
            } else if (ch === 0x2A) {
                // Block comment ends with '*/'.
                if (source.charCodeAt(index + 1) === 0x2F) {
                    ++index;
                    ++index;
                    if (extra.comments) {
                        comment = source.slice(start + 2, index - 2);
                        loc.end = {
                            line: lineNumber,
                            column: index - lineStart
                        };
                        addComment('Block', comment, start, index, loc);
                    }
                    return;
                }
                ++index;
            } else {
                ++index;
            }
        }

        // Ran off the end of the file - the whole thing is a comment
        if (extra.comments) {
            loc.end = {
                line: lineNumber,
                column: index - lineStart
            };
            comment = source.slice(start + 2, index);
            addComment('Block', comment, start, index, loc);
        }
        tolerateUnexpectedToken();
    }

    function skipComment() {
        var ch, start;
        hasLineTerminator = false;

        start = (index === 0);
        while (index < length) {
            ch = source.charCodeAt(index);

            if (isWhiteSpace(ch)) {
                ++index;
            } else if (isLineTerminator(ch)) {
                hasLineTerminator = true;
                ++index;
                if (ch === 0x0D && source.charCodeAt(index) === 0x0A) {
                    ++index;
                }
                ++lineNumber;
                lineStart = index;
                start = true;
            } else if (ch === 0x2F) { // U+002F is '/'
                ch = source.charCodeAt(index + 1);
                if (ch === 0x2F) {
                    ++index;
                    ++index;
                    skipSingleLineComment(2);
                    start = true;
                } else if (ch === 0x2A) {  // U+002A is '*'
                    ++index;
                    ++index;
                    skipMultiLineComment();
                } else {
                    break;
                }
            } else if (start && ch === 0x2D) { // U+002D is '-'
                // U+003E is '>'
                if ((source.charCodeAt(index + 1) === 0x2D) && (source.charCodeAt(index + 2) === 0x3E)) {
                    // '-->' is a single-line comment
                    index += 3;
                    skipSingleLineComment(3);
                } else {
                    break;
                }
            } else if (ch === 0x3C) { // U+003C is '<'
                if (source.slice(index + 1, index + 4) === '!--') {
                    ++index; // `<`
                    ++index; // `!`
                    ++index; // `-`
                    ++index; // `-`
                    skipSingleLineComment(4);
                } else {
                    break;
                }
            } else {
                break;
            }
        }
    }

    function scanHexEscape(prefix) {
        var i, len, ch, code = 0;

        len = (prefix === 'u') ? 4 : 2;
        for (i = 0; i < len; ++i) {
            if (index < length && isHexDigit(source[index])) {
                ch = source[index++];
                code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());
            } else {
                return '';
            }
        }
        return String.fromCharCode(code);
    }

    function scanUnicodeCodePointEscape() {
        var ch, code;

        ch = source[index];
        code = 0;

        // At least, one hex digit is required.
        if (ch === '}') {
            throwUnexpectedToken();
        }

        while (index < length) {
            ch = source[index++];
            if (!isHexDigit(ch)) {
                break;
            }
            code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());
        }

        if (code > 0x10FFFF || ch !== '}') {
            throwUnexpectedToken();
        }

        return fromCodePoint(code);
    }

    function codePointAt(i) {
        var cp, first, second;

        cp = source.charCodeAt(i);
        if (cp >= 0xD800 && cp <= 0xDBFF) {
            second = source.charCodeAt(i + 1);
            if (second >= 0xDC00 && second <= 0xDFFF) {
                first = cp;
                cp = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
            }
        }

        return cp;
    }

    function getComplexIdentifier() {
        var cp, ch, id;

        cp = codePointAt(index);
        id = fromCodePoint(cp);
        index += id.length;

        // '\u' (U+005C, U+0075) denotes an escaped character.
        if (cp === 0x5C) {
            if (source.charCodeAt(index) !== 0x75) {
                throwUnexpectedToken();
            }
            ++index;
            if (source[index] === '{') {
                ++index;
                ch = scanUnicodeCodePointEscape();
            } else {
                ch = scanHexEscape('u');
                cp = ch.charCodeAt(0);
                if (!ch || ch === '\\' || !isIdentifierStart(cp)) {
                    throwUnexpectedToken();
                }
            }
            id = ch;
        }

        while (index < length) {
            cp = codePointAt(index);
            if (!isIdentifierPart(cp)) {
                break;
            }
            ch = fromCodePoint(cp);
            id += ch;
            index += ch.length;

            // '\u' (U+005C, U+0075) denotes an escaped character.
            if (cp === 0x5C) {
                id = id.substr(0, id.length - 1);
                if (source.charCodeAt(index) !== 0x75) {
                    throwUnexpectedToken();
                }
                ++index;
                if (source[index] === '{') {
                    ++index;
                    ch = scanUnicodeCodePointEscape();
                } else {
                    ch = scanHexEscape('u');
                    cp = ch.charCodeAt(0);
                    if (!ch || ch === '\\' || !isIdentifierPart(cp)) {
                        throwUnexpectedToken();
                    }
                }
                id += ch;
            }
        }

        return id;
    }

    function getIdentifier() {
        var start, ch;

        start = index++;
        while (index < length) {
            ch = source.charCodeAt(index);
            if (ch === 0x5C) {
                // Blackslash (U+005C) marks Unicode escape sequence.
                index = start;
                return getComplexIdentifier();
            } else if (ch >= 0xD800 && ch < 0xDFFF) {
                // Need to handle surrogate pairs.
                index = start;
                return getComplexIdentifier();
            }
            if (isIdentifierPart(ch)) {
                ++index;
            } else {
                break;
            }
        }

        return source.slice(start, index);
    }

    function scanIdentifier() {
        var start, id, type;

        start = index;

        // Backslash (U+005C) starts an escaped character.
        id = (source.charCodeAt(index) === 0x5C) ? getComplexIdentifier() : getIdentifier();

        // There is no keyword or literal with only one character.
        // Thus, it must be an identifier.
        if (id.length === 1) {
            type = Token.Identifier;
        } else if (isKeyword(id)) {
            type = Token.Keyword;
        } else if (id === 'null') {
            type = Token.NullLiteral;
        } else if (id === 'true' || id === 'false') {
            type = Token.BooleanLiteral;
        } else {
            type = Token.Identifier;
        }

        return {
            type: type,
            value: id,
            lineNumber: lineNumber,
            lineStart: lineStart,
            start: start,
            end: index
        };
    }


    // ECMA-262 11.7 Punctuators

    function scanPunctuator() {
        var token, str;

        token = {
            type: Token.Punctuator,
            value: '',
            lineNumber: lineNumber,
            lineStart: lineStart,
            start: index,
            end: index
        };

        // Check for most common single-character punctuators.
        str = source[index];
        switch (str) {

        case '(':
            if (extra.tokenize) {
                extra.openParenToken = extra.tokenValues.length;
            }
            ++index;
            break;

        case '{':
            if (extra.tokenize) {
                extra.openCurlyToken = extra.tokenValues.length;
            }
            state.curlyStack.push('{');
            ++index;
            break;

        case '.':
            ++index;
            if (source[index] === '.' && source[index + 1] === '.') {
                // Spread operator: ...
                index += 2;
                str = '...';
            }
            break;

        case '}':
            ++index;
            state.curlyStack.pop();
            break;
        case ')':
        case ';':
        case ',':
        case '[':
        case ']':
        case ':':
        case '?':
        case '~':
            ++index;
            break;

        default:
            // 4-character punctuator.
            str = source.substr(index, 4);
            if (str === '>>>=') {
                index += 4;
            } else {

                // 3-character punctuators.
                str = str.substr(0, 3);
                if (str === '===' || str === '!==' || str === '>>>' ||
                    str === '<<=' || str === '>>=') {
                    index += 3;
                } else {

                    // 2-character punctuators.
                    str = str.substr(0, 2);
                    if (str === '&&' || str === '||' || str === '==' || str === '!=' ||
                        str === '+=' || str === '-=' || str === '*=' || str === '/=' ||
                        str === '++' || str === '--' || str === '<<' || str === '>>' ||
                        str === '&=' || str === '|=' || str === '^=' || str === '%=' ||
                        str === '<=' || str === '>=' || str === '=>') {
                        index += 2;
                    } else {

                        // 1-character punctuators.
                        str = source[index];
                        if ('<>=!+-*%&|^/'.indexOf(str) >= 0) {
                            ++index;
                        }
                    }
                }
            }
        }

        if (index === token.start) {
            throwUnexpectedToken();
        }

        token.end = index;
        token.value = str;
        return token;
    }

    // ECMA-262 11.8.3 Numeric Literals

    function scanHexLiteral(start) {
        var number = '';

        while (index < length) {
            if (!isHexDigit(source[index])) {
                break;
            }
            number += source[index++];
        }

        if (number.length === 0) {
            throwUnexpectedToken();
        }

        if (isIdentifierStart(source.charCodeAt(index))) {
            throwUnexpectedToken();
        }

        return {
            type: Token.NumericLiteral,
            value: parseInt('0x' + number, 16),
            lineNumber: lineNumber,
            lineStart: lineStart,
            start: start,
            end: index
        };
    }

    function scanBinaryLiteral(start) {
        var ch, number;

        number = '';

        while (index < length) {
            ch = source[index];
            if (ch !== '0' && ch !== '1') {
                break;
            }
            number += source[index++];
        }

        if (number.length === 0) {
            // only 0b or 0B
            throwUnexpectedToken();
        }

        if (index < length) {
            ch = source.charCodeAt(index);
            /* istanbul ignore else */
            if (isIdentifierStart(ch) || isDecimalDigit(ch)) {
                throwUnexpectedToken();
            }
        }

        return {
            type: Token.NumericLiteral,
            value: parseInt(number, 2),
            lineNumber: lineNumber,
            lineStart: lineStart,
            start: start,
            end: index
        };
    }

    function scanOctalLiteral(prefix, start) {
        var number, octal;

        if (isOctalDigit(prefix)) {
            octal = true;
            number = '0' + source[index++];
        } else {
            octal = false;
            ++index;
            number = '';
        }

        while (index < length) {
            if (!isOctalDigit(source[index])) {
                break;
            }
            number += source[index++];
        }

        if (!octal && number.length === 0) {
            // only 0o or 0O
            throwUnexpectedToken();
        }

        if (isIdentifierStart(source.charCodeAt(index)) || isDecimalDigit(source.charCodeAt(index))) {
            throwUnexpectedToken();
        }

        return {
            type: Token.NumericLiteral,
            value: parseInt(number, 8),
            octal: octal,
            lineNumber: lineNumber,
            lineStart: lineStart,
            start: start,
            end: index
        };
    }

    function isImplicitOctalLiteral() {
        var i, ch;

        // Implicit octal, unless there is a non-octal digit.
        // (Annex B.1.1 on Numeric Literals)
        for (i = index + 1; i < length; ++i) {
            ch = source[i];
            if (ch === '8' || ch === '9') {
                return false;
            }
            if (!isOctalDigit(ch)) {
                return true;
            }
        }

        return true;
    }

    function scanNumericLiteral() {
        var number, start, ch;

        ch = source[index];
        assert(isDecimalDigit(ch.charCodeAt(0)) || (ch === '.'),
            'Numeric literal must start with a decimal digit or a decimal point');

        start = index;
        number = '';
        if (ch !== '.') {
            number = source[index++];
            ch = source[index];

            // Hex number starts with '0x'.
            // Octal number starts with '0'.
            // Octal number in ES6 starts with '0o'.
            // Binary number in ES6 starts with '0b'.
            if (number === '0') {
                if (ch === 'x' || ch === 'X') {
                    ++index;
                    return scanHexLiteral(start);
                }
                if (ch === 'b' || ch === 'B') {
                    ++index;
                    return scanBinaryLiteral(start);
                }
                if (ch === 'o' || ch === 'O') {
                    return scanOctalLiteral(ch, start);
                }

                if (isOctalDigit(ch)) {
                    if (isImplicitOctalLiteral()) {
                        return scanOctalLiteral(ch, start);
                    }
                }
            }

            while (isDecimalDigit(source.charCodeAt(index))) {
                number += source[index++];
            }
            ch = source[index];
        }

        if (ch === '.') {
            number += source[index++];
            while (isDecimalDigit(source.charCodeAt(index))) {
                number += source[index++];
            }
            ch = source[index];
        }

        if (ch === 'e' || ch === 'E') {
            number += source[index++];

            ch = source[index];
            if (ch === '+' || ch === '-') {
                number += source[index++];
            }
            if (isDecimalDigit(source.charCodeAt(index))) {
                while (isDecimalDigit(source.charCodeAt(index))) {
                    number += source[index++];
                }
            } else {
                throwUnexpectedToken();
            }
        }

        if (isIdentifierStart(source.charCodeAt(index))) {
            throwUnexpectedToken();
        }

        return {
            type: Token.NumericLiteral,
            value: parseFloat(number),
            lineNumber: lineNumber,
            lineStart: lineStart,
            start: start,
            end: index
        };
    }

    // ECMA-262 11.8.4 String Literals

    function scanStringLiteral() {
        var str = '', quote, start, ch, unescaped, octToDec, octal = false;

        quote = source[index];
        assert((quote === '\'' || quote === '"'),
            'String literal must starts with a quote');

        start = index;
        ++index;

        while (index < length) {
            ch = source[index++];

            if (ch === quote) {
                quote = '';
                break;
            } else if (ch === '\\') {
                ch = source[index++];
                if (!ch || !isLineTerminator(ch.charCodeAt(0))) {
                    switch (ch) {
                    case 'u':
                    case 'x':
                        if (source[index] === '{') {
                            ++index;
                            str += scanUnicodeCodePointEscape();
                        } else {
                            unescaped = scanHexEscape(ch);
                            if (!unescaped) {
                                throw throwUnexpectedToken();
                            }
                            str += unescaped;
                        }
                        break;
                    case 'n':
                        str += '\n';
                        break;
                    case 'r':
                        str += '\r';
                        break;
                    case 't':
                        str += '\t';
                        break;
                    case 'b':
                        str += '\b';
                        break;
                    case 'f':
                        str += '\f';
                        break;
                    case 'v':
                        str += '\x0B';
                        break;
                    case '8':
                    case '9':
                        str += ch;
                        tolerateUnexpectedToken();
                        break;

                    default:
                        if (isOctalDigit(ch)) {
                            octToDec = octalToDecimal(ch);

                            octal = octToDec.octal || octal;
                            str += String.fromCharCode(octToDec.code);
                        } else {
                            str += ch;
                        }
                        break;
                    }
                } else {
                    ++lineNumber;
                    if (ch === '\r' && source[index] === '\n') {
                        ++index;
                    }
                    lineStart = index;
                }
            } else if (isLineTerminator(ch.charCodeAt(0))) {
                break;
            } else {
                str += ch;
            }
        }

        if (quote !== '') {
            index = start;
            throwUnexpectedToken();
        }

        return {
            type: Token.StringLiteral,
            value: str,
            octal: octal,
            lineNumber: startLineNumber,
            lineStart: startLineStart,
            start: start,
            end: index
        };
    }

    // ECMA-262 11.8.6 Template Literal Lexical Components

    function scanTemplate() {
        var cooked = '', ch, start, rawOffset, terminated, head, tail, restore, unescaped;

        terminated = false;
        tail = false;
        start = index;
        head = (source[index] === '`');
        rawOffset = 2;

        ++index;

        while (index < length) {
            ch = source[index++];
            if (ch === '`') {
                rawOffset = 1;
                tail = true;
                terminated = true;
                break;
            } else if (ch === '$') {
                if (source[index] === '{') {
                    state.curlyStack.push('${');
                    ++index;
                    terminated = true;
                    break;
                }
                cooked += ch;
            } else if (ch === '\\') {
                ch = source[index++];
                if (!isLineTerminator(ch.charCodeAt(0))) {
                    switch (ch) {
                    case 'n':
                        cooked += '\n';
                        break;
                    case 'r':
                        cooked += '\r';
                        break;
                    case 't':
                        cooked += '\t';
                        break;
                    case 'u':
                    case 'x':
                        if (source[index] === '{') {
                            ++index;
                            cooked += scanUnicodeCodePointEscape();
                        } else {
                            restore = index;
                            unescaped = scanHexEscape(ch);
                            if (unescaped) {
                                cooked += unescaped;
                            } else {
                                index = restore;
                                cooked += ch;
                            }
                        }
                        break;
                    case 'b':
                        cooked += '\b';
                        break;
                    case 'f':
                        cooked += '\f';
                        break;
                    case 'v':
                        cooked += '\v';
                        break;

                    default:
                        if (ch === '0') {
                            if (isDecimalDigit(source.charCodeAt(index))) {
                                // Illegal: \01 \02 and so on
                                throwError(Messages.TemplateOctalLiteral);
                            }
                            cooked += '\0';
                        } else if (isOctalDigit(ch)) {
                            // Illegal: \1 \2
                            throwError(Messages.TemplateOctalLiteral);
                        } else {
                            cooked += ch;
                        }
                        break;
                    }
                } else {
                    ++lineNumber;
                    if (ch === '\r' && source[index] === '\n') {
                        ++index;
                    }
                    lineStart = index;
                }
            } else if (isLineTerminator(ch.charCodeAt(0))) {
                ++lineNumber;
                if (ch === '\r' && source[index] === '\n') {
                    ++index;
                }
                lineStart = index;
                cooked += '\n';
            } else {
                cooked += ch;
            }
        }

        if (!terminated) {
            throwUnexpectedToken();
        }

        if (!head) {
            state.curlyStack.pop();
        }

        return {
            type: Token.Template,
            value: {
                cooked: cooked,
                raw: source.slice(start + 1, index - rawOffset)
            },
            head: head,
            tail: tail,
            lineNumber: lineNumber,
            lineStart: lineStart,
            start: start,
            end: index
        };
    }

    // ECMA-262 11.8.5 Regular Expression Literals

    function testRegExp(pattern, flags) {
        // The BMP character to use as a replacement for astral symbols when
        // translating an ES6 "u"-flagged pattern to an ES5-compatible
        // approximation.
        // Note: replacing with '\uFFFF' enables false positives in unlikely
        // scenarios. For example, `[\u{1044f}-\u{10440}]` is an invalid
        // pattern that would not be detected by this substitution.
        var astralSubstitute = '\uFFFF',
            tmp = pattern;

        if (flags.indexOf('u') >= 0) {
            tmp = tmp
                // Replace every Unicode escape sequence with the equivalent
                // BMP character or a constant ASCII code point in the case of
                // astral symbols. (See the above note on `astralSubstitute`
                // for more information.)
                .replace(/\\u\{([0-9a-fA-F]+)\}|\\u([a-fA-F0-9]{4})/g, function ($0, $1, $2) {
                    var codePoint = parseInt($1 || $2, 16);
                    if (codePoint > 0x10FFFF) {
                        throwUnexpectedToken(null, Messages.InvalidRegExp);
                    }
                    if (codePoint <= 0xFFFF) {
                        return String.fromCharCode(codePoint);
                    }
                    return astralSubstitute;
                })
                // Replace each paired surrogate with a single ASCII symbol to
                // avoid throwing on regular expressions that are only valid in
                // combination with the "u" flag.
                .replace(
                    /[\uD800-\uDBFF][\uDC00-\uDFFF]/g,
                    astralSubstitute
                );
        }

        // First, detect invalid regular expressions.
        try {
            RegExp(tmp);
        } catch (e) {
            throwUnexpectedToken(null, Messages.InvalidRegExp);
        }

        // Return a regular expression object for this pattern-flag pair, or
        // `null` in case the current environment doesn't support the flags it
        // uses.
        try {
            return new RegExp(pattern, flags);
        } catch (exception) {
            /* istanbul ignore next */
            return null;
        }
    }

    function scanRegExpBody() {
        var ch, str, classMarker, terminated, body;

        ch = source[index];
        assert(ch === '/', 'Regular expression literal must start with a slash');
        str = source[index++];

        classMarker = false;
        terminated = false;
        while (index < length) {
            ch = source[index++];
            str += ch;
            if (ch === '\\') {
                ch = source[index++];
                // ECMA-262 7.8.5
                if (isLineTerminator(ch.charCodeAt(0))) {
                    throwUnexpectedToken(null, Messages.UnterminatedRegExp);
                }
                str += ch;
            } else if (isLineTerminator(ch.charCodeAt(0))) {
                throwUnexpectedToken(null, Messages.UnterminatedRegExp);
            } else if (classMarker) {
                if (ch === ']') {
                    classMarker = false;
                }
            } else {
                if (ch === '/') {
                    terminated = true;
                    break;
                } else if (ch === '[') {
                    classMarker = true;
                }
            }
        }

        if (!terminated) {
            throwUnexpectedToken(null, Messages.UnterminatedRegExp);
        }

        // Exclude leading and trailing slash.
        body = str.substr(1, str.length - 2);
        return {
            value: body,
            literal: str
        };
    }

    function scanRegExpFlags() {
        var ch, str, flags, restore;

        str = '';
        flags = '';
        while (index < length) {
            ch = source[index];
            if (!isIdentifierPart(ch.charCodeAt(0))) {
                break;
            }

            ++index;
            if (ch === '\\' && index < length) {
                ch = source[index];
                if (ch === 'u') {
                    ++index;
                    restore = index;
                    ch = scanHexEscape('u');
                    if (ch) {
                        flags += ch;
                        for (str += '\\u'; restore < index; ++restore) {
                            str += source[restore];
                        }
                    } else {
                        index = restore;
                        flags += 'u';
                        str += '\\u';
                    }
                    tolerateUnexpectedToken();
                } else {
                    str += '\\';
                    tolerateUnexpectedToken();
                }
            } else {
                flags += ch;
                str += ch;
            }
        }

        return {
            value: flags,
            literal: str
        };
    }

    function scanRegExp() {
        var start, body, flags, value;
        scanning = true;

        lookahead = null;
        skipComment();
        start = index;

        body = scanRegExpBody();
        flags = scanRegExpFlags();
        value = testRegExp(body.value, flags.value);
        scanning = false;
        if (extra.tokenize) {
            return {
                type: Token.RegularExpression,
                value: value,
                regex: {
                    pattern: body.value,
                    flags: flags.value
                },
                lineNumber: lineNumber,
                lineStart: lineStart,
                start: start,
                end: index
            };
        }

        return {
            literal: body.literal + flags.literal,
            value: value,
            regex: {
                pattern: body.value,
                flags: flags.value
            },
            start: start,
            end: index
        };
    }

    function collectRegex() {
        var pos, loc, regex, token;

        skipComment();

        pos = index;
        loc = {
            start: {
                line: lineNumber,
                column: index - lineStart
            }
        };

        regex = scanRegExp();

        loc.end = {
            line: lineNumber,
            column: index - lineStart
        };

        /* istanbul ignore next */
        if (!extra.tokenize) {
            // Pop the previous token, which is likely '/' or '/='
            if (extra.tokens.length > 0) {
                token = extra.tokens[extra.tokens.length - 1];
                if (token.range[0] === pos && token.type === 'Punctuator') {
                    if (token.value === '/' || token.value === '/=') {
                        extra.tokens.pop();
                    }
                }
            }

            extra.tokens.push({
                type: 'RegularExpression',
                value: regex.literal,
                regex: regex.regex,
                range: [pos, index],
                loc: loc
            });
        }

        return regex;
    }

    function isIdentifierName(token) {
        return token.type === Token.Identifier ||
            token.type === Token.Keyword ||
            token.type === Token.BooleanLiteral ||
            token.type === Token.NullLiteral;
    }

    // Using the following algorithm:
    // https://github.com/mozilla/sweet.js/wiki/design

    function advanceSlash() {
        var regex, previous, check;

        function testKeyword(value) {
            return value && (value.length > 1) && (value[0] >= 'a') && (value[0] <= 'z');
        }

        previous = extra.tokenValues[extra.tokenValues.length - 1];
        regex = (previous !== null);

        switch (previous) {
        case 'this':
        case ']':
            regex = false;
            break;

        case ')':
            check = extra.tokenValues[extra.openParenToken - 1];
            regex = (check === 'if' || check === 'while' || check === 'for' || check === 'with');
            break;

        case '}':
            // Dividing a function by anything makes little sense,
            // but we have to check for that.
            regex = false;
            if (testKeyword(extra.tokenValues[extra.openCurlyToken - 3])) {
                // Anonymous function, e.g. function(){} /42
                check = extra.tokenValues[extra.openCurlyToken - 4];
                regex = check ? (FnExprTokens.indexOf(check) < 0) : false;
            } else if (testKeyword(extra.tokenValues[extra.openCurlyToken - 4])) {
                // Named function, e.g. function f(){} /42/
                check = extra.tokenValues[extra.openCurlyToken - 5];
                regex = check ? (FnExprTokens.indexOf(check) < 0) : true;
            }
        }

        return regex ? collectRegex() : scanPunctuator();
    }

    function advance() {
        var cp, token;

        if (index >= length) {
            return {
                type: Token.EOF,
                lineNumber: lineNumber,
                lineStart: lineStart,
                start: index,
                end: index
            };
        }

        cp = source.charCodeAt(index);

        if (isIdentifierStart(cp)) {
            token = scanIdentifier();
            if (strict && isStrictModeReservedWord(token.value)) {
                token.type = Token.Keyword;
            }
            return token;
        }

        // Very common: ( and ) and ;
        if (cp === 0x28 || cp === 0x29 || cp === 0x3B) {
            return scanPunctuator();
        }

        // String literal starts with single quote (U+0027) or double quote (U+0022).
        if (cp === 0x27 || cp === 0x22) {
            return scanStringLiteral();
        }

        // Dot (.) U+002E can also start a floating-point number, hence the need
        // to check the next character.
        if (cp === 0x2E) {
            if (isDecimalDigit(source.charCodeAt(index + 1))) {
                return scanNumericLiteral();
            }
            return scanPunctuator();
        }

        if (isDecimalDigit(cp)) {
            return scanNumericLiteral();
        }

        // Slash (/) U+002F can also start a regex.
        if (extra.tokenize && cp === 0x2F) {
            return advanceSlash();
        }

        // Template literals start with ` (U+0060) for template head
        // or } (U+007D) for template middle or template tail.
        if (cp === 0x60 || (cp === 0x7D && state.curlyStack[state.curlyStack.length - 1] === '${')) {
            return scanTemplate();
        }

        // Possible identifier start in a surrogate pair.
        if (cp >= 0xD800 && cp < 0xDFFF) {
            cp = codePointAt(index);
            if (isIdentifierStart(cp)) {
                return scanIdentifier();
            }
        }

        return scanPunctuator();
    }

    function collectToken() {
        var loc, token, value, entry;

        loc = {
            start: {
                line: lineNumber,
                column: index - lineStart
            }
        };

        token = advance();
        loc.end = {
            line: lineNumber,
            column: index - lineStart
        };

        if (token.type !== Token.EOF) {
            value = source.slice(token.start, token.end);
            entry = {
                type: TokenName[token.type],
                value: value,
                range: [token.start, token.end],
                loc: loc
            };
            if (token.regex) {
                entry.regex = {
                    pattern: token.regex.pattern,
                    flags: token.regex.flags
                };
            }
            if (extra.tokenValues) {
                extra.tokenValues.push((entry.type === 'Punctuator' || entry.type === 'Keyword') ? entry.value : null);
            }
            if (extra.tokenize) {
                if (!extra.range) {
                    delete entry.range;
                }
                if (!extra.loc) {
                    delete entry.loc;
                }
                if (extra.delegate) {
                    entry = extra.delegate(entry);
                }
            }
            extra.tokens.push(entry);
        }

        return token;
    }

    function lex() {
        var token;
        scanning = true;

        lastIndex = index;
        lastLineNumber = lineNumber;
        lastLineStart = lineStart;

        skipComment();

        token = lookahead;

        startIndex = index;
        startLineNumber = lineNumber;
        startLineStart = lineStart;

        lookahead = (typeof extra.tokens !== 'undefined') ? collectToken() : advance();
        scanning = false;
        return token;
    }

    function peek() {
        scanning = true;

        skipComment();

        lastIndex = index;
        lastLineNumber = lineNumber;
        lastLineStart = lineStart;

        startIndex = index;
        startLineNumber = lineNumber;
        startLineStart = lineStart;

        lookahead = (typeof extra.tokens !== 'undefined') ? collectToken() : advance();
        scanning = false;
    }

    function Position() {
        this.line = startLineNumber;
        this.column = startIndex - startLineStart;
    }

    function SourceLocation() {
        this.start = new Position();
        this.end = null;
    }

    function WrappingSourceLocation(startToken) {
        this.start = {
            line: startToken.lineNumber,
            column: startToken.start - startToken.lineStart
        };
        this.end = null;
    }

    function Node() {
        if (extra.range) {
            this.range = [startIndex, 0];
        }
        if (extra.loc) {
            this.loc = new SourceLocation();
        }
    }

    function WrappingNode(startToken) {
        if (extra.range) {
            this.range = [startToken.start, 0];
        }
        if (extra.loc) {
            this.loc = new WrappingSourceLocation(startToken);
        }
    }

    WrappingNode.prototype = Node.prototype = {

        processComment: function () {
            var lastChild,
                innerComments,
                leadingComments,
                trailingComments,
                bottomRight = extra.bottomRightStack,
                i,
                comment,
                last = bottomRight[bottomRight.length - 1];

            if (this.type === Syntax.Program) {
                if (this.body.length > 0) {
                    return;
                }
            }
            /**
             * patch innnerComments for properties empty block
             * `function a() {/** comments **\/}`
             */

            if (this.type === Syntax.BlockStatement && this.body.length === 0) {
                innerComments = [];
                for (i = extra.leadingComments.length - 1; i >= 0; --i) {
                    comment = extra.leadingComments[i];
                    if (this.range[1] >= comment.range[1]) {
                        innerComments.unshift(comment);
                        extra.leadingComments.splice(i, 1);
                        extra.trailingComments.splice(i, 1);
                    }
                }
                if (innerComments.length) {
                    this.innerComments = innerComments;
                    //bottomRight.push(this);
                    return;
                }
            }

            if (extra.trailingComments.length > 0) {
                trailingComments = [];
                for (i = extra.trailingComments.length - 1; i >= 0; --i) {
                    comment = extra.trailingComments[i];
                    if (comment.range[0] >= this.range[1]) {
                        trailingComments.unshift(comment);
                        extra.trailingComments.splice(i, 1);
                    }
                }
                extra.trailingComments = [];
            } else {
                if (last && last.trailingComments && last.trailingComments[0].range[0] >= this.range[1]) {
                    trailingComments = last.trailingComments;
                    delete last.trailingComments;
                }
            }

            // Eating the stack.
            while (last && last.range[0] >= this.range[0]) {
                lastChild = bottomRight.pop();
                last = bottomRight[bottomRight.length - 1];
            }

            if (lastChild) {
                if (lastChild.leadingComments) {
                    leadingComments = [];
                    for (i = lastChild.leadingComments.length - 1; i >= 0; --i) {
                        comment = lastChild.leadingComments[i];
                        if (comment.range[1] <= this.range[0]) {
                            leadingComments.unshift(comment);
                            lastChild.leadingComments.splice(i, 1);
                        }
                    }

                    if (!lastChild.leadingComments.length) {
                        lastChild.leadingComments = undefined;
                    }
                }
            } else if (extra.leadingComments.length > 0) {
                leadingComments = [];
                for (i = extra.leadingComments.length - 1; i >= 0; --i) {
                    comment = extra.leadingComments[i];
                    if (comment.range[1] <= this.range[0]) {
                        leadingComments.unshift(comment);
                        extra.leadingComments.splice(i, 1);
                    }
                }
            }


            if (leadingComments && leadingComments.length > 0) {
                this.leadingComments = leadingComments;
            }
            if (trailingComments && trailingComments.length > 0) {
                this.trailingComments = trailingComments;
            }

            bottomRight.push(this);
        },

        finish: function () {
            if (extra.range) {
                this.range[1] = lastIndex;
            }
            if (extra.loc) {
                this.loc.end = {
                    line: lastLineNumber,
                    column: lastIndex - lastLineStart
                };
                if (extra.source) {
                    this.loc.source = extra.source;
                }
            }

            if (extra.attachComment) {
                this.processComment();
            }
        },

        finishArrayExpression: function (elements) {
            this.type = Syntax.ArrayExpression;
            this.elements = elements;
            this.finish();
            return this;
        },

        finishArrayPattern: function (elements) {
            this.type = Syntax.ArrayPattern;
            this.elements = elements;
            this.finish();
            return this;
        },

        finishArrowFunctionExpression: function (params, defaults, body, expression) {
            this.type = Syntax.ArrowFunctionExpression;
            this.id = null;
            this.params = params;
            this.defaults = defaults;
            this.body = body;
            this.generator = false;
            this.expression = expression;
            this.finish();
            return this;
        },

        finishAssignmentExpression: function (operator, left, right) {
            this.type = Syntax.AssignmentExpression;
            this.operator = operator;
            this.left = left;
            this.right = right;
            this.finish();
            return this;
        },

        finishAssignmentPattern: function (left, right) {
            this.type = Syntax.AssignmentPattern;
            this.left = left;
            this.right = right;
            this.finish();
            return this;
        },

        finishBinaryExpression: function (operator, left, right) {
            this.type = (operator === '||' || operator === '&&') ? Syntax.LogicalExpression : Syntax.BinaryExpression;
            this.operator = operator;
            this.left = left;
            this.right = right;
            this.finish();
            return this;
        },

        finishBlockStatement: function (body) {
            this.type = Syntax.BlockStatement;
            this.body = body;
            this.finish();
            return this;
        },

        finishBreakStatement: function (label) {
            this.type = Syntax.BreakStatement;
            this.label = label;
            this.finish();
            return this;
        },

        finishCallExpression: function (callee, args) {
            this.type = Syntax.CallExpression;
            this.callee = callee;
            this.arguments = args;
            this.finish();
            return this;
        },

        finishCatchClause: function (param, body) {
            this.type = Syntax.CatchClause;
            this.param = param;
            this.body = body;
            this.finish();
            return this;
        },

        finishClassBody: function (body) {
            this.type = Syntax.ClassBody;
            this.body = body;
            this.finish();
            return this;
        },

        finishClassDeclaration: function (id, superClass, body) {
            this.type = Syntax.ClassDeclaration;
            this.id = id;
            this.superClass = superClass;
            this.body = body;
            this.finish();
            return this;
        },

        finishClassExpression: function (id, superClass, body) {
            this.type = Syntax.ClassExpression;
            this.id = id;
            this.superClass = superClass;
            this.body = body;
            this.finish();
            return this;
        },

        finishConditionalExpression: function (test, consequent, alternate) {
            this.type = Syntax.ConditionalExpression;
            this.test = test;
            this.consequent = consequent;
            this.alternate = alternate;
            this.finish();
            return this;
        },

        finishContinueStatement: function (label) {
            this.type = Syntax.ContinueStatement;
            this.label = label;
            this.finish();
            return this;
        },

        finishDebuggerStatement: function () {
            this.type = Syntax.DebuggerStatement;
            this.finish();
            return this;
        },

        finishDoWhileStatement: function (body, test) {
            this.type = Syntax.DoWhileStatement;
            this.body = body;
            this.test = test;
            this.finish();
            return this;
        },

        finishEmptyStatement: function () {
            this.type = Syntax.EmptyStatement;
            this.finish();
            return this;
        },

        finishExpressionStatement: function (expression) {
            this.type = Syntax.ExpressionStatement;
            this.expression = expression;
            this.finish();
            return this;
        },

        finishForStatement: function (init, test, update, body) {
            this.type = Syntax.ForStatement;
            this.init = init;
            this.test = test;
            this.update = update;
            this.body = body;
            this.finish();
            return this;
        },

        finishForOfStatement: function (left, right, body) {
            this.type = Syntax.ForOfStatement;
            this.left = left;
            this.right = right;
            this.body = body;
            this.finish();
            return this;
        },

        finishForInStatement: function (left, right, body) {
            this.type = Syntax.ForInStatement;
            this.left = left;
            this.right = right;
            this.body = body;
            this.each = false;
            this.finish();
            return this;
        },

        finishFunctionDeclaration: function (id, params, defaults, body, generator) {
            this.type = Syntax.FunctionDeclaration;
            this.id = id;
            this.params = params;
            this.defaults = defaults;
            this.body = body;
            this.generator = generator;
            this.expression = false;
            this.finish();
            return this;
        },

        finishFunctionExpression: function (id, params, defaults, body, generator) {
            this.type = Syntax.FunctionExpression;
            this.id = id;
            this.params = params;
            this.defaults = defaults;
            this.body = body;
            this.generator = generator;
            this.expression = false;
            this.finish();
            return this;
        },

        finishIdentifier: function (name) {
            this.type = Syntax.Identifier;
            this.name = name;
            this.finish();
            return this;
        },

        finishIfStatement: function (test, consequent, alternate) {
            this.type = Syntax.IfStatement;
            this.test = test;
            this.consequent = consequent;
            this.alternate = alternate;
            this.finish();
            return this;
        },

        finishLabeledStatement: function (label, body) {
            this.type = Syntax.LabeledStatement;
            this.label = label;
            this.body = body;
            this.finish();
            return this;
        },

        finishLiteral: function (token) {
            this.type = Syntax.Literal;
            this.value = token.value;
            this.raw = source.slice(token.start, token.end);
            if (token.regex) {
                this.regex = token.regex;
            }
            this.finish();
            return this;
        },

        finishMemberExpression: function (accessor, object, property) {
            this.type = Syntax.MemberExpression;
            this.computed = accessor === '[';
            this.object = object;
            this.property = property;
            this.finish();
            return this;
        },

        finishMetaProperty: function (meta, property) {
            this.type = Syntax.MetaProperty;
            this.meta = meta;
            this.property = property;
            this.finish();
            return this;
        },

        finishNewExpression: function (callee, args) {
            this.type = Syntax.NewExpression;
            this.callee = callee;
            this.arguments = args;
            this.finish();
            return this;
        },

        finishObjectExpression: function (properties) {
            this.type = Syntax.ObjectExpression;
            this.properties = properties;
            this.finish();
            return this;
        },

        finishObjectPattern: function (properties) {
            this.type = Syntax.ObjectPattern;
            this.properties = properties;
            this.finish();
            return this;
        },

        finishPostfixExpression: function (operator, argument) {
            this.type = Syntax.UpdateExpression;
            this.operator = operator;
            this.argument = argument;
            this.prefix = false;
            this.finish();
            return this;
        },

        finishProgram: function (body, sourceType) {
            this.type = Syntax.Program;
            this.body = body;
            this.sourceType = sourceType;
            this.finish();
            return this;
        },

        finishProperty: function (kind, key, computed, value, method, shorthand) {
            this.type = Syntax.Property;
            this.key = key;
            this.computed = computed;
            this.value = value;
            this.kind = kind;
            this.method = method;
            this.shorthand = shorthand;
            this.finish();
            return this;
        },

        finishRestElement: function (argument) {
            this.type = Syntax.RestElement;
            this.argument = argument;
            this.finish();
            return this;
        },

        finishReturnStatement: function (argument) {
            this.type = Syntax.ReturnStatement;
            this.argument = argument;
            this.finish();
            return this;
        },

        finishSequenceExpression: function (expressions) {
            this.type = Syntax.SequenceExpression;
            this.expressions = expressions;
            this.finish();
            return this;
        },

        finishSpreadElement: function (argument) {
            this.type = Syntax.SpreadElement;
            this.argument = argument;
            this.finish();
            return this;
        },

        finishSwitchCase: function (test, consequent) {
            this.type = Syntax.SwitchCase;
            this.test = test;
            this.consequent = consequent;
            this.finish();
            return this;
        },

        finishSuper: function () {
            this.type = Syntax.Super;
            this.finish();
            return this;
        },

        finishSwitchStatement: function (discriminant, cases) {
            this.type = Syntax.SwitchStatement;
            this.discriminant = discriminant;
            this.cases = cases;
            this.finish();
            return this;
        },

        finishTaggedTemplateExpression: function (tag, quasi) {
            this.type = Syntax.TaggedTemplateExpression;
            this.tag = tag;
            this.quasi = quasi;
            this.finish();
            return this;
        },

        finishTemplateElement: function (value, tail) {
            this.type = Syntax.TemplateElement;
            this.value = value;
            this.tail = tail;
            this.finish();
            return this;
        },

        finishTemplateLiteral: function (quasis, expressions) {
            this.type = Syntax.TemplateLiteral;
            this.quasis = quasis;
            this.expressions = expressions;
            this.finish();
            return this;
        },

        finishThisExpression: function () {
            this.type = Syntax.ThisExpression;
            this.finish();
            return this;
        },

        finishThrowStatement: function (argument) {
            this.type = Syntax.ThrowStatement;
            this.argument = argument;
            this.finish();
            return this;
        },

        finishTryStatement: function (block, handler, finalizer) {
            this.type = Syntax.TryStatement;
            this.block = block;
            this.guardedHandlers = [];
            this.handlers = handler ? [handler] : [];
            this.handler = handler;
            this.finalizer = finalizer;
            this.finish();
            return this;
        },

        finishUnaryExpression: function (operator, argument) {
            this.type = (operator === '++' || operator === '--') ? Syntax.UpdateExpression : Syntax.UnaryExpression;
            this.operator = operator;
            this.argument = argument;
            this.prefix = true;
            this.finish();
            return this;
        },

        finishVariableDeclaration: function (declarations) {
            this.type = Syntax.VariableDeclaration;
            this.declarations = declarations;
            this.kind = 'var';
            this.finish();
            return this;
        },

        finishLexicalDeclaration: function (declarations, kind) {
            this.type = Syntax.VariableDeclaration;
            this.declarations = declarations;
            this.kind = kind;
            this.finish();
            return this;
        },

        finishVariableDeclarator: function (id, init) {
            this.type = Syntax.VariableDeclarator;
            this.id = id;
            this.init = init;
            this.finish();
            return this;
        },

        finishWhileStatement: function (test, body) {
            this.type = Syntax.WhileStatement;
            this.test = test;
            this.body = body;
            this.finish();
            return this;
        },

        finishWithStatement: function (object, body) {
            this.type = Syntax.WithStatement;
            this.object = object;
            this.body = body;
            this.finish();
            return this;
        },

        finishExportSpecifier: function (local, exported) {
            this.type = Syntax.ExportSpecifier;
            this.exported = exported || local;
            this.local = local;
            this.finish();
            return this;
        },

        finishImportDefaultSpecifier: function (local) {
            this.type = Syntax.ImportDefaultSpecifier;
            this.local = local;
            this.finish();
            return this;
        },

        finishImportNamespaceSpecifier: function (local) {
            this.type = Syntax.ImportNamespaceSpecifier;
            this.local = local;
            this.finish();
            return this;
        },

        finishExportNamedDeclaration: function (declaration, specifiers, src) {
            this.type = Syntax.ExportNamedDeclaration;
            this.declaration = declaration;
            this.specifiers = specifiers;
            this.source = src;
            this.finish();
            return this;
        },

        finishExportDefaultDeclaration: function (declaration) {
            this.type = Syntax.ExportDefaultDeclaration;
            this.declaration = declaration;
            this.finish();
            return this;
        },

        finishExportAllDeclaration: function (src) {
            this.type = Syntax.ExportAllDeclaration;
            this.source = src;
            this.finish();
            return this;
        },

        finishImportSpecifier: function (local, imported) {
            this.type = Syntax.ImportSpecifier;
            this.local = local || imported;
            this.imported = imported;
            this.finish();
            return this;
        },

        finishImportDeclaration: function (specifiers, src) {
            this.type = Syntax.ImportDeclaration;
            this.specifiers = specifiers;
            this.source = src;
            this.finish();
            return this;
        },

        finishYieldExpression: function (argument, delegate) {
            this.type = Syntax.YieldExpression;
            this.argument = argument;
            this.delegate = delegate;
            this.finish();
            return this;
        }
    };


    function recordError(error) {
        var e, existing;

        for (e = 0; e < extra.errors.length; e++) {
            existing = extra.errors[e];
            // Prevent duplicated error.
            /* istanbul ignore next */
            if (existing.index === error.index && existing.message === error.message) {
                return;
            }
        }

        extra.errors.push(error);
    }

    function constructError(msg, column) {
        var error = new Error(msg);
        try {
            throw error;
        } catch (base) {
            /* istanbul ignore else */
            if (Object.create && Object.defineProperty) {
                error = Object.create(base);
                Object.defineProperty(error, 'column', { value: column });
            }
        } finally {
            return error;
        }
    }

    function createError(line, pos, description) {
        var msg, column, error;

        msg = 'Line ' + line + ': ' + description;
        column = pos - (scanning ? lineStart : lastLineStart) + 1;
        error = constructError(msg, column);
        error.lineNumber = line;
        error.description = description;
        error.index = pos;
        return error;
    }

    // Throw an exception

    function throwError(messageFormat) {
        var args, msg;

        args = Array.prototype.slice.call(arguments, 1);
        msg = messageFormat.replace(/%(\d)/g,
            function (whole, idx) {
                assert(idx < args.length, 'Message reference must be in range');
                return args[idx];
            }
        );

        throw createError(lastLineNumber, lastIndex, msg);
    }

    function tolerateError(messageFormat) {
        var args, msg, error;

        args = Array.prototype.slice.call(arguments, 1);
        /* istanbul ignore next */
        msg = messageFormat.replace(/%(\d)/g,
            function (whole, idx) {
                assert(idx < args.length, 'Message reference must be in range');
                return args[idx];
            }
        );

        error = createError(lineNumber, lastIndex, msg);
        if (extra.errors) {
            recordError(error);
        } else {
            throw error;
        }
    }

    // Throw an exception because of the token.

    function unexpectedTokenError(token, message) {
        var value, msg = message || Messages.UnexpectedToken;

        if (token) {
            if (!message) {
                msg = (token.type === Token.EOF) ? Messages.UnexpectedEOS :
                    (token.type === Token.Identifier) ? Messages.UnexpectedIdentifier :
                    (token.type === Token.NumericLiteral) ? Messages.UnexpectedNumber :
                    (token.type === Token.StringLiteral) ? Messages.UnexpectedString :
                    (token.type === Token.Template) ? Messages.UnexpectedTemplate :
                    Messages.UnexpectedToken;

                if (token.type === Token.Keyword) {
                    if (isFutureReservedWord(token.value)) {
                        msg = Messages.UnexpectedReserved;
                    } else if (strict && isStrictModeReservedWord(token.value)) {
                        msg = Messages.StrictReservedWord;
                    }
                }
            }

            value = (token.type === Token.Template) ? token.value.raw : token.value;
        } else {
            value = 'ILLEGAL';
        }

        msg = msg.replace('%0', value);

        return (token && typeof token.lineNumber === 'number') ?
            createError(token.lineNumber, token.start, msg) :
            createError(scanning ? lineNumber : lastLineNumber, scanning ? index : lastIndex, msg);
    }

    function throwUnexpectedToken(token, message) {
        throw unexpectedTokenError(token, message);
    }

    function tolerateUnexpectedToken(token, message) {
        var error = unexpectedTokenError(token, message);
        if (extra.errors) {
            recordError(error);
        } else {
            throw error;
        }
    }

    // Expect the next token to match the specified punctuator.
    // If not, an exception will be thrown.

    function expect(value) {
        var token = lex();
        if (token.type !== Token.Punctuator || token.value !== value) {
            throwUnexpectedToken(token);
        }
    }

    /**
     * @name expectCommaSeparator
     * @description Quietly expect a comma when in tolerant mode, otherwise delegates
     * to <code>expect(value)</code>
     * @since 2.0
     */
    function expectCommaSeparator() {
        var token;

        if (extra.errors) {
            token = lookahead;
            if (token.type === Token.Punctuator && token.value === ',') {
                lex();
            } else if (token.type === Token.Punctuator && token.value === ';') {
                lex();
                tolerateUnexpectedToken(token);
            } else {
                tolerateUnexpectedToken(token, Messages.UnexpectedToken);
            }
        } else {
            expect(',');
        }
    }

    // Expect the next token to match the specified keyword.
    // If not, an exception will be thrown.

    function expectKeyword(keyword) {
        var token = lex();
        if (token.type !== Token.Keyword || token.value !== keyword) {
            throwUnexpectedToken(token);
        }
    }

    // Return true if the next token matches the specified punctuator.

    function match(value) {
        return lookahead.type === Token.Punctuator && lookahead.value === value;
    }

    // Return true if the next token matches the specified keyword

    function matchKeyword(keyword) {
        return lookahead.type === Token.Keyword && lookahead.value === keyword;
    }

    // Return true if the next token matches the specified contextual keyword
    // (where an identifier is sometimes a keyword depending on the context)

    function matchContextualKeyword(keyword) {
        return lookahead.type === Token.Identifier && lookahead.value === keyword;
    }

    // Return true if the next token is an assignment operator

    function matchAssign() {
        var op;

        if (lookahead.type !== Token.Punctuator) {
            return false;
        }
        op = lookahead.value;
        return op === '=' ||
            op === '*=' ||
            op === '/=' ||
            op === '%=' ||
            op === '+=' ||
            op === '-=' ||
            op === '<<=' ||
            op === '>>=' ||
            op === '>>>=' ||
            op === '&=' ||
            op === '^=' ||
            op === '|=';
    }

    function consumeSemicolon() {
        // Catch the very common case first: immediately a semicolon (U+003B).
        if (source.charCodeAt(startIndex) === 0x3B || match(';')) {
            lex();
            return;
        }

        if (hasLineTerminator) {
            return;
        }

        // FIXME(ikarienator): this is seemingly an issue in the previous location info convention.
        lastIndex = startIndex;
        lastLineNumber = startLineNumber;
        lastLineStart = startLineStart;

        if (lookahead.type !== Token.EOF && !match('}')) {
            throwUnexpectedToken(lookahead);
        }
    }

    // Cover grammar support.
    //
    // When an assignment expression position starts with an left parenthesis, the determination of the type
    // of the syntax is to be deferred arbitrarily long until the end of the parentheses pair (plus a lookahead)
    // or the first comma. This situation also defers the determination of all the expressions nested in the pair.
    //
    // There are three productions that can be parsed in a parentheses pair that needs to be determined
    // after the outermost pair is closed. They are:
    //
    //   1. AssignmentExpression
    //   2. BindingElements
    //   3. AssignmentTargets
    //
    // In order to avoid exponential backtracking, we use two flags to denote if the production can be
    // binding element or assignment target.
    //
    // The three productions have the relationship:
    //
    //   BindingElements ⊆ AssignmentTargets ⊆ AssignmentExpression
    //
    // with a single exception that CoverInitializedName when used directly in an Expression, generates
    // an early error. Therefore, we need the third state, firstCoverInitializedNameError, to track the
    // first usage of CoverInitializedName and report it when we reached the end of the parentheses pair.
    //
    // isolateCoverGrammar function runs the given parser function with a new cover grammar context, and it does not
    // effect the current flags. This means the production the parser parses is only used as an expression. Therefore
    // the CoverInitializedName check is conducted.
    //
    // inheritCoverGrammar function runs the given parse function with a new cover grammar context, and it propagates
    // the flags outside of the parser. This means the production the parser parses is used as a part of a potential
    // pattern. The CoverInitializedName check is deferred.
    function isolateCoverGrammar(parser) {
        var oldIsBindingElement = isBindingElement,
            oldIsAssignmentTarget = isAssignmentTarget,
            oldFirstCoverInitializedNameError = firstCoverInitializedNameError,
            result;
        isBindingElement = true;
        isAssignmentTarget = true;
        firstCoverInitializedNameError = null;
        result = parser();
        if (firstCoverInitializedNameError !== null) {
            throwUnexpectedToken(firstCoverInitializedNameError);
        }
        isBindingElement = oldIsBindingElement;
        isAssignmentTarget = oldIsAssignmentTarget;
        firstCoverInitializedNameError = oldFirstCoverInitializedNameError;
        return result;
    }

    function inheritCoverGrammar(parser) {
        var oldIsBindingElement = isBindingElement,
            oldIsAssignmentTarget = isAssignmentTarget,
            oldFirstCoverInitializedNameError = firstCoverInitializedNameError,
            result;
        isBindingElement = true;
        isAssignmentTarget = true;
        firstCoverInitializedNameError = null;
        result = parser();
        isBindingElement = isBindingElement && oldIsBindingElement;
        isAssignmentTarget = isAssignmentTarget && oldIsAssignmentTarget;
        firstCoverInitializedNameError = oldFirstCoverInitializedNameError || firstCoverInitializedNameError;
        return result;
    }

    // ECMA-262 13.3.3 Destructuring Binding Patterns

    function parseArrayPattern(params, kind) {
        var node = new Node(), elements = [], rest, restNode;
        expect('[');

        while (!match(']')) {
            if (match(',')) {
                lex();
                elements.push(null);
            } else {
                if (match('...')) {
                    restNode = new Node();
                    lex();
                    params.push(lookahead);
                    rest = parseVariableIdentifier(kind);
                    elements.push(restNode.finishRestElement(rest));
                    break;
                } else {
                    elements.push(parsePatternWithDefault(params, kind));
                }
                if (!match(']')) {
                    expect(',');
                }
            }

        }

        expect(']');

        return node.finishArrayPattern(elements);
    }

    function parsePropertyPattern(params, kind) {
        var node = new Node(), key, keyToken, computed = match('['), init;
        if (lookahead.type === Token.Identifier) {
            keyToken = lookahead;
            key = parseVariableIdentifier();
            if (match('=')) {
                params.push(keyToken);
                lex();
                init = parseAssignmentExpression();

                return node.finishProperty(
                    'init', key, false,
                    new WrappingNode(keyToken).finishAssignmentPattern(key, init), false, true);
            } else if (!match(':')) {
                params.push(keyToken);
                return node.finishProperty('init', key, false, key, false, true);
            }
        } else {
            key = parseObjectPropertyKey();
        }
        expect(':');
        init = parsePatternWithDefault(params, kind);
        return node.finishProperty('init', key, computed, init, false, false);
    }

    function parseObjectPattern(params, kind) {
        var node = new Node(), properties = [];

        expect('{');

        while (!match('}')) {
            properties.push(parsePropertyPattern(params, kind));
            if (!match('}')) {
                expect(',');
            }
        }

        lex();

        return node.finishObjectPattern(properties);
    }

    function parsePattern(params, kind) {
        if (match('[')) {
            return parseArrayPattern(params, kind);
        } else if (match('{')) {
            return parseObjectPattern(params, kind);
        } else if (matchKeyword('let')) {
            if (kind === 'const' || kind === 'let') {
                tolerateUnexpectedToken(lookahead, Messages.UnexpectedToken);
            }
        }

        params.push(lookahead);
        return parseVariableIdentifier(kind);
    }

    function parsePatternWithDefault(params, kind) {
        var startToken = lookahead, pattern, previousAllowYield, right;
        pattern = parsePattern(params, kind);
        if (match('=')) {
            lex();
            previousAllowYield = state.allowYield;
            state.allowYield = true;
            right = isolateCoverGrammar(parseAssignmentExpression);
            state.allowYield = previousAllowYield;
            pattern = new WrappingNode(startToken).finishAssignmentPattern(pattern, right);
        }
        return pattern;
    }

    // ECMA-262 12.2.5 Array Initializer

    function parseArrayInitializer() {
        var elements = [], node = new Node(), restSpread;

        expect('[');

        while (!match(']')) {
            if (match(',')) {
                lex();
                elements.push(null);
            } else if (match('...')) {
                restSpread = new Node();
                lex();
                restSpread.finishSpreadElement(inheritCoverGrammar(parseAssignmentExpression));

                if (!match(']')) {
                    isAssignmentTarget = isBindingElement = false;
                    expect(',');
                }
                elements.push(restSpread);
            } else {
                elements.push(inheritCoverGrammar(parseAssignmentExpression));

                if (!match(']')) {
                    expect(',');
                }
            }
        }

        lex();

        return node.finishArrayExpression(elements);
    }

    // ECMA-262 12.2.6 Object Initializer

    function parsePropertyFunction(node, paramInfo, isGenerator) {
        var previousStrict, body;

        isAssignmentTarget = isBindingElement = false;

        previousStrict = strict;
        body = isolateCoverGrammar(parseFunctionSourceElements);

        if (strict && paramInfo.firstRestricted) {
            tolerateUnexpectedToken(paramInfo.firstRestricted, paramInfo.message);
        }
        if (strict && paramInfo.stricted) {
            tolerateUnexpectedToken(paramInfo.stricted, paramInfo.message);
        }

        strict = previousStrict;
        return node.finishFunctionExpression(null, paramInfo.params, paramInfo.defaults, body, isGenerator);
    }

    function parsePropertyMethodFunction() {
        var params, method, node = new Node(),
            previousAllowYield = state.allowYield;

        state.allowYield = false;
        params = parseParams();
        state.allowYield = previousAllowYield;

        state.allowYield = false;
        method = parsePropertyFunction(node, params, false);
        state.allowYield = previousAllowYield;

        return method;
    }

    function parseObjectPropertyKey() {
        var token, node = new Node(), expr;

        token = lex();

        // Note: This function is called only from parseObjectProperty(), where
        // EOF and Punctuator tokens are already filtered out.

        switch (token.type) {
        case Token.StringLiteral:
        case Token.NumericLiteral:
            if (strict && token.octal) {
                tolerateUnexpectedToken(token, Messages.StrictOctalLiteral);
            }
            return node.finishLiteral(token);
        case Token.Identifier:
        case Token.BooleanLiteral:
        case Token.NullLiteral:
        case Token.Keyword:
            return node.finishIdentifier(token.value);
        case Token.Punctuator:
            if (token.value === '[') {
                expr = isolateCoverGrammar(parseAssignmentExpression);
                expect(']');
                return expr;
            }
            break;
        }
        throwUnexpectedToken(token);
    }

    function lookaheadPropertyName() {
        switch (lookahead.type) {
        case Token.Identifier:
        case Token.StringLiteral:
        case Token.BooleanLiteral:
        case Token.NullLiteral:
        case Token.NumericLiteral:
        case Token.Keyword:
            return true;
        case Token.Punctuator:
            return lookahead.value === '[';
        }
        return false;
    }

    // This function is to try to parse a MethodDefinition as defined in 14.3. But in the case of object literals,
    // it might be called at a position where there is in fact a short hand identifier pattern or a data property.
    // This can only be determined after we consumed up to the left parentheses.
    //
    // In order to avoid back tracking, it returns `null` if the position is not a MethodDefinition and the caller
    // is responsible to visit other options.
    function tryParseMethodDefinition(token, key, computed, node) {
        var value, options, methodNode, params,
            previousAllowYield = state.allowYield;

        if (token.type === Token.Identifier) {
            // check for `get` and `set`;

            if (token.value === 'get' && lookaheadPropertyName()) {
                computed = match('[');
                key = parseObjectPropertyKey();
                methodNode = new Node();
                expect('(');
                expect(')');

                state.allowYield = false;
                value = parsePropertyFunction(methodNode, {
                    params: [],
                    defaults: [],
                    stricted: null,
                    firstRestricted: null,
                    message: null
                }, false);
                state.allowYield = previousAllowYield;

                return node.finishProperty('get', key, computed, value, false, false);
            } else if (token.value === 'set' && lookaheadPropertyName()) {
                computed = match('[');
                key = parseObjectPropertyKey();
                methodNode = new Node();
                expect('(');

                options = {
                    params: [],
                    defaultCount: 0,
                    defaults: [],
                    firstRestricted: null,
                    paramSet: {}
                };
                if (match(')')) {
                    tolerateUnexpectedToken(lookahead);
                } else {
                    state.allowYield = false;
                    parseParam(options);
                    state.allowYield = previousAllowYield;
                    if (options.defaultCount === 0) {
                        options.defaults = [];
                    }
                }
                expect(')');

                state.allowYield = false;
                value = parsePropertyFunction(methodNode, options, false);
                state.allowYield = previousAllowYield;

                return node.finishProperty('set', key, computed, value, false, false);
            }
        } else if (token.type === Token.Punctuator && token.value === '*' && lookaheadPropertyName()) {
            computed = match('[');
            key = parseObjectPropertyKey();
            methodNode = new Node();

            state.allowYield = true;
            params = parseParams();
            state.allowYield = previousAllowYield;

            state.allowYield = false;
            value = parsePropertyFunction(methodNode, params, true);
            state.allowYield = previousAllowYield;

            return node.finishProperty('init', key, computed, value, true, false);
        }

        if (key && match('(')) {
            value = parsePropertyMethodFunction();
            return node.finishProperty('init', key, computed, value, true, false);
        }

        // Not a MethodDefinition.
        return null;
    }

    function parseObjectProperty(hasProto) {
        var token = lookahead, node = new Node(), computed, key, maybeMethod, proto, value;

        computed = match('[');
        if (match('*')) {
            lex();
        } else {
            key = parseObjectPropertyKey();
        }
        maybeMethod = tryParseMethodDefinition(token, key, computed, node);
        if (maybeMethod) {
            return maybeMethod;
        }

        if (!key) {
            throwUnexpectedToken(lookahead);
        }

        // Check for duplicated __proto__
        if (!computed) {
            proto = (key.type === Syntax.Identifier && key.name === '__proto__') ||
                (key.type === Syntax.Literal && key.value === '__proto__');
            if (hasProto.value && proto) {
                tolerateError(Messages.DuplicateProtoProperty);
            }
            hasProto.value |= proto;
        }

        if (match(':')) {
            lex();
            value = inheritCoverGrammar(parseAssignmentExpression);
            return node.finishProperty('init', key, computed, value, false, false);
        }

        if (token.type === Token.Identifier) {
            if (match('=')) {
                firstCoverInitializedNameError = lookahead;
                lex();
                value = isolateCoverGrammar(parseAssignmentExpression);
                return node.finishProperty('init', key, computed,
                    new WrappingNode(token).finishAssignmentPattern(key, value), false, true);
            }
            return node.finishProperty('init', key, computed, key, false, true);
        }

        throwUnexpectedToken(lookahead);
    }

    function parseObjectInitializer() {
        var properties = [], hasProto = {value: false}, node = new Node();

        expect('{');

        while (!match('}')) {
            properties.push(parseObjectProperty(hasProto));

            if (!match('}')) {
                expectCommaSeparator();
            }
        }

        expect('}');

        return node.finishObjectExpression(properties);
    }

    function reinterpretExpressionAsPattern(expr) {
        var i;
        switch (expr.type) {
        case Syntax.Identifier:
        case Syntax.MemberExpression:
        case Syntax.RestElement:
        case Syntax.AssignmentPattern:
            break;
        case Syntax.SpreadElement:
            expr.type = Syntax.RestElement;
            reinterpretExpressionAsPattern(expr.argument);
            break;
        case Syntax.ArrayExpression:
            expr.type = Syntax.ArrayPattern;
            for (i = 0; i < expr.elements.length; i++) {
                if (expr.elements[i] !== null) {
                    reinterpretExpressionAsPattern(expr.elements[i]);
                }
            }
            break;
        case Syntax.ObjectExpression:
            expr.type = Syntax.ObjectPattern;
            for (i = 0; i < expr.properties.length; i++) {
                reinterpretExpressionAsPattern(expr.properties[i].value);
            }
            break;
        case Syntax.AssignmentExpression:
            expr.type = Syntax.AssignmentPattern;
            reinterpretExpressionAsPattern(expr.left);
            break;
        default:
            // Allow other node type for tolerant parsing.
            break;
        }
    }

    // ECMA-262 12.2.9 Template Literals

    function parseTemplateElement(option) {
        var node, token;

        if (lookahead.type !== Token.Template || (option.head && !lookahead.head)) {
            throwUnexpectedToken();
        }

        node = new Node();
        token = lex();

        return node.finishTemplateElement({ raw: token.value.raw, cooked: token.value.cooked }, token.tail);
    }

    function parseTemplateLiteral() {
        var quasi, quasis, expressions, node = new Node();

        quasi = parseTemplateElement({ head: true });
        quasis = [quasi];
        expressions = [];

        while (!quasi.tail) {
            expressions.push(parseExpression());
            quasi = parseTemplateElement({ head: false });
            quasis.push(quasi);
        }

        return node.finishTemplateLiteral(quasis, expressions);
    }

    // ECMA-262 12.2.10 The Grouping Operator

    function parseGroupExpression() {
        var expr, expressions, startToken, i, params = [];

        expect('(');

        if (match(')')) {
            lex();
            if (!match('=>')) {
                expect('=>');
            }
            return {
                type: PlaceHolders.ArrowParameterPlaceHolder,
                params: [],
                rawParams: []
            };
        }

        startToken = lookahead;
        if (match('...')) {
            expr = parseRestElement(params);
            expect(')');
            if (!match('=>')) {
                expect('=>');
            }
            return {
                type: PlaceHolders.ArrowParameterPlaceHolder,
                params: [expr]
            };
        }

        isBindingElement = true;
        expr = inheritCoverGrammar(parseAssignmentExpression);

        if (match(',')) {
            isAssignmentTarget = false;
            expressions = [expr];

            while (startIndex < length) {
                if (!match(',')) {
                    break;
                }
                lex();

                if (match('...')) {
                    if (!isBindingElement) {
                        throwUnexpectedToken(lookahead);
                    }
                    expressions.push(parseRestElement(params));
                    expect(')');
                    if (!match('=>')) {
                        expect('=>');
                    }
                    isBindingElement = false;
                    for (i = 0; i < expressions.length; i++) {
                        reinterpretExpressionAsPattern(expressions[i]);
                    }
                    return {
                        type: PlaceHolders.ArrowParameterPlaceHolder,
                        params: expressions
                    };
                }

                expressions.push(inheritCoverGrammar(parseAssignmentExpression));
            }

            expr = new WrappingNode(startToken).finishSequenceExpression(expressions);
        }


        expect(')');

        if (match('=>')) {
            if (expr.type === Syntax.Identifier && expr.name === 'yield') {
                return {
                    type: PlaceHolders.ArrowParameterPlaceHolder,
                    params: [expr]
                };
            }

            if (!isBindingElement) {
                throwUnexpectedToken(lookahead);
            }

            if (expr.type === Syntax.SequenceExpression) {
                for (i = 0; i < expr.expressions.length; i++) {
                    reinterpretExpressionAsPattern(expr.expressions[i]);
                }
            } else {
                reinterpretExpressionAsPattern(expr);
            }

            expr = {
                type: PlaceHolders.ArrowParameterPlaceHolder,
                params: expr.type === Syntax.SequenceExpression ? expr.expressions : [expr]
            };
        }
        isBindingElement = false;
        return expr;
    }


    // ECMA-262 12.2 Primary Expressions

    function parsePrimaryExpression() {
        var type, token, expr, node;

        if (match('(')) {
            isBindingElement = false;
            return inheritCoverGrammar(parseGroupExpression);
        }

        if (match('[')) {
            return inheritCoverGrammar(parseArrayInitializer);
        }

        if (match('{')) {
            return inheritCoverGrammar(parseObjectInitializer);
        }

        type = lookahead.type;
        node = new Node();

        if (type === Token.Identifier) {
            if (state.sourceType === 'module' && lookahead.value === 'await') {
                tolerateUnexpectedToken(lookahead);
            }
            expr = node.finishIdentifier(lex().value);
        } else if (type === Token.StringLiteral || type === Token.NumericLiteral) {
            isAssignmentTarget = isBindingElement = false;
            if (strict && lookahead.octal) {
                tolerateUnexpectedToken(lookahead, Messages.StrictOctalLiteral);
            }
            expr = node.finishLiteral(lex());
        } else if (type === Token.Keyword) {
            if (!strict && state.allowYield && matchKeyword('yield')) {
                return parseNonComputedProperty();
            }
            if (!strict && matchKeyword('let')) {
                return node.finishIdentifier(lex().value);
            }
            isAssignmentTarget = isBindingElement = false;
            if (matchKeyword('function')) {
                return parseFunctionExpression();
            }
            if (matchKeyword('this')) {
                lex();
                return node.finishThisExpression();
            }
            if (matchKeyword('class')) {
                return parseClassExpression();
            }
            throwUnexpectedToken(lex());
        } else if (type === Token.BooleanLiteral) {
            isAssignmentTarget = isBindingElement = false;
            token = lex();
            token.value = (token.value === 'true');
            expr = node.finishLiteral(token);
        } else if (type === Token.NullLiteral) {
            isAssignmentTarget = isBindingElement = false;
            token = lex();
            token.value = null;
            expr = node.finishLiteral(token);
        } else if (match('/') || match('/=')) {
            isAssignmentTarget = isBindingElement = false;
            index = startIndex;

            if (typeof extra.tokens !== 'undefined') {
                token = collectRegex();
            } else {
                token = scanRegExp();
            }
            lex();
            expr = node.finishLiteral(token);
        } else if (type === Token.Template) {
            expr = parseTemplateLiteral();
        } else {
            throwUnexpectedToken(lex());
        }

        return expr;
    }

    // ECMA-262 12.3 Left-Hand-Side Expressions

    function parseArguments() {
        var args = [], expr;

        expect('(');

        if (!match(')')) {
            while (startIndex < length) {
                if (match('...')) {
                    expr = new Node();
                    lex();
                    expr.finishSpreadElement(isolateCoverGrammar(parseAssignmentExpression));
                } else {
                    expr = isolateCoverGrammar(parseAssignmentExpression);
                }
                args.push(expr);
                if (match(')')) {
                    break;
                }
                expectCommaSeparator();
            }
        }

        expect(')');

        return args;
    }

    function parseNonComputedProperty() {
        var token, node = new Node();

        token = lex();

        if (!isIdentifierName(token)) {
            throwUnexpectedToken(token);
        }

        return node.finishIdentifier(token.value);
    }

    function parseNonComputedMember() {
        expect('.');

        return parseNonComputedProperty();
    }

    function parseComputedMember() {
        var expr;

        expect('[');

        expr = isolateCoverGrammar(parseExpression);

        expect(']');

        return expr;
    }

    // ECMA-262 12.3.3 The new Operator

    function parseNewExpression() {
        var callee, args, node = new Node();

        expectKeyword('new');

        if (match('.')) {
            lex();
            if (lookahead.type === Token.Identifier && lookahead.value === 'target') {
                if (state.inFunctionBody) {
                    lex();
                    return node.finishMetaProperty('new', 'target');
                }
            }
            throwUnexpectedToken(lookahead);
        }

        callee = isolateCoverGrammar(parseLeftHandSideExpression);
        args = match('(') ? parseArguments() : [];

        isAssignmentTarget = isBindingElement = false;

        return node.finishNewExpression(callee, args);
    }

    // ECMA-262 12.3.4 Function Calls

    function parseLeftHandSideExpressionAllowCall() {
        var quasi, expr, args, property, startToken, previousAllowIn = state.allowIn;

        startToken = lookahead;
        state.allowIn = true;

        if (matchKeyword('super') && state.inFunctionBody) {
            expr = new Node();
            lex();
            expr = expr.finishSuper();
            if (!match('(') && !match('.') && !match('[')) {
                throwUnexpectedToken(lookahead);
            }
        } else {
            expr = inheritCoverGrammar(matchKeyword('new') ? parseNewExpression : parsePrimaryExpression);
        }

        for (;;) {
            if (match('.')) {
                isBindingElement = false;
                isAssignmentTarget = true;
                property = parseNonComputedMember();
                expr = new WrappingNode(startToken).finishMemberExpression('.', expr, property);
            } else if (match('(')) {
                isBindingElement = false;
                isAssignmentTarget = false;
                args = parseArguments();
                expr = new WrappingNode(startToken).finishCallExpression(expr, args);
            } else if (match('[')) {
                isBindingElement = false;
                isAssignmentTarget = true;
                property = parseComputedMember();
                expr = new WrappingNode(startToken).finishMemberExpression('[', expr, property);
            } else if (lookahead.type === Token.Template && lookahead.head) {
                quasi = parseTemplateLiteral();
                expr = new WrappingNode(startToken).finishTaggedTemplateExpression(expr, quasi);
            } else {
                break;
            }
        }
        state.allowIn = previousAllowIn;

        return expr;
    }

    // ECMA-262 12.3 Left-Hand-Side Expressions

    function parseLeftHandSideExpression() {
        var quasi, expr, property, startToken;
        assert(state.allowIn, 'callee of new expression always allow in keyword.');

        startToken = lookahead;

        if (matchKeyword('super') && state.inFunctionBody) {
            expr = new Node();
            lex();
            expr = expr.finishSuper();
            if (!match('[') && !match('.')) {
                throwUnexpectedToken(lookahead);
            }
        } else {
            expr = inheritCoverGrammar(matchKeyword('new') ? parseNewExpression : parsePrimaryExpression);
        }

        for (;;) {
            if (match('[')) {
                isBindingElement = false;
                isAssignmentTarget = true;
                property = parseComputedMember();
                expr = new WrappingNode(startToken).finishMemberExpression('[', expr, property);
            } else if (match('.')) {
                isBindingElement = false;
                isAssignmentTarget = true;
                property = parseNonComputedMember();
                expr = new WrappingNode(startToken).finishMemberExpression('.', expr, property);
            } else if (lookahead.type === Token.Template && lookahead.head) {
                quasi = parseTemplateLiteral();
                expr = new WrappingNode(startToken).finishTaggedTemplateExpression(expr, quasi);
            } else {
                break;
            }
        }
        return expr;
    }

    // ECMA-262 12.4 Postfix Expressions

    function parsePostfixExpression() {
        var expr, token, startToken = lookahead;

        expr = inheritCoverGrammar(parseLeftHandSideExpressionAllowCall);

        if (!hasLineTerminator && lookahead.type === Token.Punctuator) {
            if (match('++') || match('--')) {
                // ECMA-262 11.3.1, 11.3.2
                if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {
                    tolerateError(Messages.StrictLHSPostfix);
                }

                if (!isAssignmentTarget) {
                    tolerateError(Messages.InvalidLHSInAssignment);
                }

                isAssignmentTarget = isBindingElement = false;

                token = lex();
                expr = new WrappingNode(startToken).finishPostfixExpression(token.value, expr);
            }
        }

        return expr;
    }

    // ECMA-262 12.5 Unary Operators

    function parseUnaryExpression() {
        var token, expr, startToken;

        if (lookahead.type !== Token.Punctuator && lookahead.type !== Token.Keyword) {
            expr = parsePostfixExpression();
        } else if (match('++') || match('--')) {
            startToken = lookahead;
            token = lex();
            expr = inheritCoverGrammar(parseUnaryExpression);
            // ECMA-262 11.4.4, 11.4.5
            if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {
                tolerateError(Messages.StrictLHSPrefix);
            }

            if (!isAssignmentTarget) {
                tolerateError(Messages.InvalidLHSInAssignment);
            }
            expr = new WrappingNode(startToken).finishUnaryExpression(token.value, expr);
            isAssignmentTarget = isBindingElement = false;
        } else if (match('+') || match('-') || match('~') || match('!')) {
            startToken = lookahead;
            token = lex();
            expr = inheritCoverGrammar(parseUnaryExpression);
            expr = new WrappingNode(startToken).finishUnaryExpression(token.value, expr);
            isAssignmentTarget = isBindingElement = false;
        } else if (matchKeyword('delete') || matchKeyword('void') || matchKeyword('typeof')) {
            startToken = lookahead;
            token = lex();
            expr = inheritCoverGrammar(parseUnaryExpression);
            expr = new WrappingNode(startToken).finishUnaryExpression(token.value, expr);
            if (strict && expr.operator === 'delete' && expr.argument.type === Syntax.Identifier) {
                tolerateError(Messages.StrictDelete);
            }
            isAssignmentTarget = isBindingElement = false;
        } else {
            expr = parsePostfixExpression();
        }

        return expr;
    }

    function binaryPrecedence(token, allowIn) {
        var prec = 0;

        if (token.type !== Token.Punctuator && token.type !== Token.Keyword) {
            return 0;
        }

        switch (token.value) {
        case '||':
            prec = 1;
            break;

        case '&&':
            prec = 2;
            break;

        case '|':
            prec = 3;
            break;

        case '^':
            prec = 4;
            break;

        case '&':
            prec = 5;
            break;

        case '==':
        case '!=':
        case '===':
        case '!==':
            prec = 6;
            break;

        case '<':
        case '>':
        case '<=':
        case '>=':
        case 'instanceof':
            prec = 7;
            break;

        case 'in':
            prec = allowIn ? 7 : 0;
            break;

        case '<<':
        case '>>':
        case '>>>':
            prec = 8;
            break;

        case '+':
        case '-':
            prec = 9;
            break;

        case '*':
        case '/':
        case '%':
            prec = 11;
            break;

        default:
            break;
        }

        return prec;
    }

    // ECMA-262 12.6 Multiplicative Operators
    // ECMA-262 12.7 Additive Operators
    // ECMA-262 12.8 Bitwise Shift Operators
    // ECMA-262 12.9 Relational Operators
    // ECMA-262 12.10 Equality Operators
    // ECMA-262 12.11 Binary Bitwise Operators
    // ECMA-262 12.12 Binary Logical Operators

    function parseBinaryExpression() {
        var marker, markers, expr, token, prec, stack, right, operator, left, i;

        marker = lookahead;
        left = inheritCoverGrammar(parseUnaryExpression);

        token = lookahead;
        prec = binaryPrecedence(token, state.allowIn);
        if (prec === 0) {
            return left;
        }
        isAssignmentTarget = isBindingElement = false;
        token.prec = prec;
        lex();

        markers = [marker, lookahead];
        right = isolateCoverGrammar(parseUnaryExpression);

        stack = [left, token, right];

        while ((prec = binaryPrecedence(lookahead, state.allowIn)) > 0) {

            // Reduce: make a binary expression from the three topmost entries.
            while ((stack.length > 2) && (prec <= stack[stack.length - 2].prec)) {
                right = stack.pop();
                operator = stack.pop().value;
                left = stack.pop();
                markers.pop();
                expr = new WrappingNode(markers[markers.length - 1]).finishBinaryExpression(operator, left, right);
                stack.push(expr);
            }

            // Shift.
            token = lex();
            token.prec = prec;
            stack.push(token);
            markers.push(lookahead);
            expr = isolateCoverGrammar(parseUnaryExpression);
            stack.push(expr);
        }

        // Final reduce to clean-up the stack.
        i = stack.length - 1;
        expr = stack[i];
        markers.pop();
        while (i > 1) {
            expr = new WrappingNode(markers.pop()).finishBinaryExpression(stack[i - 1].value, stack[i - 2], expr);
            i -= 2;
        }

        return expr;
    }


    // ECMA-262 12.13 Conditional Operator

    function parseConditionalExpression() {
        var expr, previousAllowIn, consequent, alternate, startToken;

        startToken = lookahead;

        expr = inheritCoverGrammar(parseBinaryExpression);
        if (match('?')) {
            lex();
            previousAllowIn = state.allowIn;
            state.allowIn = true;
            consequent = isolateCoverGrammar(parseAssignmentExpression);
            state.allowIn = previousAllowIn;
            expect(':');
            alternate = isolateCoverGrammar(parseAssignmentExpression);

            expr = new WrappingNode(startToken).finishConditionalExpression(expr, consequent, alternate);
            isAssignmentTarget = isBindingElement = false;
        }

        return expr;
    }

    // ECMA-262 14.2 Arrow Function Definitions

    function parseConciseBody() {
        if (match('{')) {
            return parseFunctionSourceElements();
        }
        return isolateCoverGrammar(parseAssignmentExpression);
    }

    function checkPatternParam(options, param) {
        var i;
        switch (param.type) {
        case Syntax.Identifier:
            validateParam(options, param, param.name);
            break;
        case Syntax.RestElement:
            checkPatternParam(options, param.argument);
            break;
        case Syntax.AssignmentPattern:
            checkPatternParam(options, param.left);
            break;
        case Syntax.ArrayPattern:
            for (i = 0; i < param.elements.length; i++) {
                if (param.elements[i] !== null) {
                    checkPatternParam(options, param.elements[i]);
                }
            }
            break;
        case Syntax.YieldExpression:
            break;
        default:
            assert(param.type === Syntax.ObjectPattern, 'Invalid type');
            for (i = 0; i < param.properties.length; i++) {
                checkPatternParam(options, param.properties[i].value);
            }
            break;
        }
    }
    function reinterpretAsCoverFormalsList(expr) {
        var i, len, param, params, defaults, defaultCount, options, token;

        defaults = [];
        defaultCount = 0;
        params = [expr];

        switch (expr.type) {
        case Syntax.Identifier:
            break;
        case PlaceHolders.ArrowParameterPlaceHolder:
            params = expr.params;
            break;
        default:
            return null;
        }

        options = {
            paramSet: {}
        };

        for (i = 0, len = params.length; i < len; i += 1) {
            param = params[i];
            switch (param.type) {
            case Syntax.AssignmentPattern:
                params[i] = param.left;
                if (param.right.type === Syntax.YieldExpression) {
                    if (param.right.argument) {
                        throwUnexpectedToken(lookahead);
                    }
                    param.right.type = Syntax.Identifier;
                    param.right.name = 'yield';
                    delete param.right.argument;
                    delete param.right.delegate;
                }
                defaults.push(param.right);
                ++defaultCount;
                checkPatternParam(options, param.left);
                break;
            default:
                checkPatternParam(options, param);
                params[i] = param;
                defaults.push(null);
                break;
            }
        }

        if (strict || !state.allowYield) {
            for (i = 0, len = params.length; i < len; i += 1) {
                param = params[i];
                if (param.type === Syntax.YieldExpression) {
                    throwUnexpectedToken(lookahead);
                }
            }
        }

        if (options.message === Messages.StrictParamDupe) {
            token = strict ? options.stricted : options.firstRestricted;
            throwUnexpectedToken(token, options.message);
        }

        if (defaultCount === 0) {
            defaults = [];
        }

        return {
            params: params,
            defaults: defaults,
            stricted: options.stricted,
            firstRestricted: options.firstRestricted,
            message: options.message
        };
    }

    function parseArrowFunctionExpression(options, node) {
        var previousStrict, previousAllowYield, body;

        if (hasLineTerminator) {
            tolerateUnexpectedToken(lookahead);
        }
        expect('=>');

        previousStrict = strict;
        previousAllowYield = state.allowYield;
        state.allowYield = true;

        body = parseConciseBody();

        if (strict && options.firstRestricted) {
            throwUnexpectedToken(options.firstRestricted, options.message);
        }
        if (strict && options.stricted) {
            tolerateUnexpectedToken(options.stricted, options.message);
        }

        strict = previousStrict;
        state.allowYield = previousAllowYield;

        return node.finishArrowFunctionExpression(options.params, options.defaults, body, body.type !== Syntax.BlockStatement);
    }

    // ECMA-262 14.4 Yield expression

    function parseYieldExpression() {
        var argument, expr, delegate, previousAllowYield;

        argument = null;
        expr = new Node();
        delegate = false;

        expectKeyword('yield');

        if (!hasLineTerminator) {
            previousAllowYield = state.allowYield;
            state.allowYield = false;
            delegate = match('*');
            if (delegate) {
                lex();
                argument = parseAssignmentExpression();
            } else {
                if (!match(';') && !match('}') && !match(')') && lookahead.type !== Token.EOF) {
                    argument = parseAssignmentExpression();
                }
            }
            state.allowYield = previousAllowYield;
        }

        return expr.finishYieldExpression(argument, delegate);
    }

    // ECMA-262 12.14 Assignment Operators

    function parseAssignmentExpression() {
        var token, expr, right, list, startToken;

        startToken = lookahead;
        token = lookahead;

        if (!state.allowYield && matchKeyword('yield')) {
            return parseYieldExpression();
        }

        expr = parseConditionalExpression();

        if (expr.type === PlaceHolders.ArrowParameterPlaceHolder || match('=>')) {
            isAssignmentTarget = isBindingElement = false;
            list = reinterpretAsCoverFormalsList(expr);

            if (list) {
                firstCoverInitializedNameError = null;
                return parseArrowFunctionExpression(list, new WrappingNode(startToken));
            }

            return expr;
        }

        if (matchAssign()) {
            if (!isAssignmentTarget) {
                tolerateError(Messages.InvalidLHSInAssignment);
            }

            // ECMA-262 12.1.1
            if (strict && expr.type === Syntax.Identifier) {
                if (isRestrictedWord(expr.name)) {
                    tolerateUnexpectedToken(token, Messages.StrictLHSAssignment);
                }
                if (isStrictModeReservedWord(expr.name)) {
                    tolerateUnexpectedToken(token, Messages.StrictReservedWord);
                }
            }

            if (!match('=')) {
                isAssignmentTarget = isBindingElement = false;
            } else {
                reinterpretExpressionAsPattern(expr);
            }

            token = lex();
            right = isolateCoverGrammar(parseAssignmentExpression);
            expr = new WrappingNode(startToken).finishAssignmentExpression(token.value, expr, right);
            firstCoverInitializedNameError = null;
        }

        return expr;
    }

    // ECMA-262 12.15 Comma Operator

    function parseExpression() {
        var expr, startToken = lookahead, expressions;

        expr = isolateCoverGrammar(parseAssignmentExpression);

        if (match(',')) {
            expressions = [expr];

            while (startIndex < length) {
                if (!match(',')) {
                    break;
                }
                lex();
                expressions.push(isolateCoverGrammar(parseAssignmentExpression));
            }

            expr = new WrappingNode(startToken).finishSequenceExpression(expressions);
        }

        return expr;
    }

    // ECMA-262 13.2 Block

    function parseStatementListItem() {
        if (lookahead.type === Token.Keyword) {
            switch (lookahead.value) {
            case 'export':
                if (state.sourceType !== 'module') {
                    tolerateUnexpectedToken(lookahead, Messages.IllegalExportDeclaration);
                }
                return parseExportDeclaration();
            case 'import':
                if (state.sourceType !== 'module') {
                    tolerateUnexpectedToken(lookahead, Messages.IllegalImportDeclaration);
                }
                return parseImportDeclaration();
            case 'const':
                return parseLexicalDeclaration({inFor: false});
            case 'function':
                return parseFunctionDeclaration(new Node());
            case 'class':
                return parseClassDeclaration();
            }
        }

        if (matchKeyword('let') && isLexicalDeclaration()) {
            return parseLexicalDeclaration({inFor: false});
        }

        return parseStatement();
    }

    function parseStatementList() {
        var list = [];
        while (startIndex < length) {
            if (match('}')) {
                break;
            }
            list.push(parseStatementListItem());
        }

        return list;
    }

    function parseBlock() {
        var block, node = new Node();

        expect('{');

        block = parseStatementList();

        expect('}');

        return node.finishBlockStatement(block);
    }

    // ECMA-262 13.3.2 Variable Statement

    function parseVariableIdentifier(kind) {
        var token, node = new Node();

        token = lex();

        if (token.type === Token.Keyword && token.value === 'yield') {
            if (strict) {
                tolerateUnexpectedToken(token, Messages.StrictReservedWord);
            } if (!state.allowYield) {
                throwUnexpectedToken(token);
            }
        } else if (token.type !== Token.Identifier) {
            if (strict && token.type === Token.Keyword && isStrictModeReservedWord(token.value)) {
                tolerateUnexpectedToken(token, Messages.StrictReservedWord);
            } else {
                if (strict || token.value !== 'let' || kind !== 'var') {
                    throwUnexpectedToken(token);
                }
            }
        } else if (state.sourceType === 'module' && token.type === Token.Identifier && token.value === 'await') {
            tolerateUnexpectedToken(token);
        }

        return node.finishIdentifier(token.value);
    }

    function parseVariableDeclaration(options) {
        var init = null, id, node = new Node(), params = [];

        id = parsePattern(params, 'var');

        // ECMA-262 12.2.1
        if (strict && isRestrictedWord(id.name)) {
            tolerateError(Messages.StrictVarName);
        }

        if (match('=')) {
            lex();
            init = isolateCoverGrammar(parseAssignmentExpression);
        } else if (id.type !== Syntax.Identifier && !options.inFor) {
            expect('=');
        }

        return node.finishVariableDeclarator(id, init);
    }

    function parseVariableDeclarationList(options) {
        var opt, list;

        opt = { inFor: options.inFor };
        list = [parseVariableDeclaration(opt)];

        while (match(',')) {
            lex();
            list.push(parseVariableDeclaration(opt));
        }

        return list;
    }

    function parseVariableStatement(node) {
        var declarations;

        expectKeyword('var');

        declarations = parseVariableDeclarationList({ inFor: false });

        consumeSemicolon();

        return node.finishVariableDeclaration(declarations);
    }

    // ECMA-262 13.3.1 Let and Const Declarations

    function parseLexicalBinding(kind, options) {
        var init = null, id, node = new Node(), params = [];

        id = parsePattern(params, kind);

        // ECMA-262 12.2.1
        if (strict && id.type === Syntax.Identifier && isRestrictedWord(id.name)) {
            tolerateError(Messages.StrictVarName);
        }

        if (kind === 'const') {
            if (!matchKeyword('in') && !matchContextualKeyword('of')) {
                expect('=');
                init = isolateCoverGrammar(parseAssignmentExpression);
            }
        } else if ((!options.inFor && id.type !== Syntax.Identifier) || match('=')) {
            expect('=');
            init = isolateCoverGrammar(parseAssignmentExpression);
        }

        return node.finishVariableDeclarator(id, init);
    }

    function parseBindingList(kind, options) {
        var list = [parseLexicalBinding(kind, options)];

        while (match(',')) {
            lex();
            list.push(parseLexicalBinding(kind, options));
        }

        return list;
    }


    function tokenizerState() {
        return {
            index: index,
            lineNumber: lineNumber,
            lineStart: lineStart,
            hasLineTerminator: hasLineTerminator,
            lastIndex: lastIndex,
            lastLineNumber: lastLineNumber,
            lastLineStart: lastLineStart,
            startIndex: startIndex,
            startLineNumber: startLineNumber,
            startLineStart: startLineStart,
            lookahead: lookahead,
            tokenCount: extra.tokens ? extra.tokens.length : 0
        };
    }

    function resetTokenizerState(ts) {
        index = ts.index;
        lineNumber = ts.lineNumber;
        lineStart = ts.lineStart;
        hasLineTerminator = ts.hasLineTerminator;
        lastIndex = ts.lastIndex;
        lastLineNumber = ts.lastLineNumber;
        lastLineStart = ts.lastLineStart;
        startIndex = ts.startIndex;
        startLineNumber = ts.startLineNumber;
        startLineStart = ts.startLineStart;
        lookahead = ts.lookahead;
        if (extra.tokens) {
            extra.tokens.splice(ts.tokenCount, extra.tokens.length);
        }
    }

    function isLexicalDeclaration() {
        var lexical, ts;

        ts = tokenizerState();

        lex();
        lexical = (lookahead.type === Token.Identifier) || match('[') || match('{') ||
            matchKeyword('let') || matchKeyword('yield');

        resetTokenizerState(ts);

        return lexical;
    }

    function parseLexicalDeclaration(options) {
        var kind, declarations, node = new Node();

        kind = lex().value;
        assert(kind === 'let' || kind === 'const', 'Lexical declaration must be either let or const');

        declarations = parseBindingList(kind, options);

        consumeSemicolon();

        return node.finishLexicalDeclaration(declarations, kind);
    }

    function parseRestElement(params) {
        var param, node = new Node();

        lex();

        if (match('{')) {
            throwError(Messages.ObjectPatternAsRestParameter);
        }

        params.push(lookahead);

        param = parseVariableIdentifier();

        if (match('=')) {
            throwError(Messages.DefaultRestParameter);
        }

        if (!match(')')) {
            throwError(Messages.ParameterAfterRestParameter);
        }

        return node.finishRestElement(param);
    }

    // ECMA-262 13.4 Empty Statement

    function parseEmptyStatement(node) {
        expect(';');
        return node.finishEmptyStatement();
    }

    // ECMA-262 12.4 Expression Statement

    function parseExpressionStatement(node) {
        var expr = parseExpression();
        consumeSemicolon();
        return node.finishExpressionStatement(expr);
    }

    // ECMA-262 13.6 If statement

    function parseIfStatement(node) {
        var test, consequent, alternate;

        expectKeyword('if');

        expect('(');

        test = parseExpression();

        expect(')');

        consequent = parseStatement();

        if (matchKeyword('else')) {
            lex();
            alternate = parseStatement();
        } else {
            alternate = null;
        }

        return node.finishIfStatement(test, consequent, alternate);
    }

    // ECMA-262 13.7 Iteration Statements

    function parseDoWhileStatement(node) {
        var body, test, oldInIteration;

        expectKeyword('do');

        oldInIteration = state.inIteration;
        state.inIteration = true;

        body = parseStatement();

        state.inIteration = oldInIteration;

        expectKeyword('while');

        expect('(');

        test = parseExpression();

        expect(')');

        if (match(';')) {
            lex();
        }

        return node.finishDoWhileStatement(body, test);
    }

    function parseWhileStatement(node) {
        var test, body, oldInIteration;

        expectKeyword('while');

        expect('(');

        test = parseExpression();

        expect(')');

        oldInIteration = state.inIteration;
        state.inIteration = true;

        body = parseStatement();

        state.inIteration = oldInIteration;

        return node.finishWhileStatement(test, body);
    }

    function parseForStatement(node) {
        var init, forIn, initSeq, initStartToken, test, update, left, right, kind, declarations,
            body, oldInIteration, previousAllowIn = state.allowIn;

        init = test = update = null;
        forIn = true;

        expectKeyword('for');

        expect('(');

        if (match(';')) {
            lex();
        } else {
            if (matchKeyword('var')) {
                init = new Node();
                lex();

                state.allowIn = false;
                declarations = parseVariableDeclarationList({ inFor: true });
                state.allowIn = previousAllowIn;

                if (declarations.length === 1 && matchKeyword('in')) {
                    init = init.finishVariableDeclaration(declarations);
                    lex();
                    left = init;
                    right = parseExpression();
                    init = null;
                } else if (declarations.length === 1 && declarations[0].init === null && matchContextualKeyword('of')) {
                    init = init.finishVariableDeclaration(declarations);
                    lex();
                    left = init;
                    right = parseAssignmentExpression();
                    init = null;
                    forIn = false;
                } else {
                    init = init.finishVariableDeclaration(declarations);
                    expect(';');
                }
            } else if (matchKeyword('const') || matchKeyword('let')) {
                init = new Node();
                kind = lex().value;

                if (!strict && lookahead.value === 'in') {
                    init = init.finishIdentifier(kind);
                    lex();
                    left = init;
                    right = parseExpression();
                    init = null;
                } else {
                    state.allowIn = false;
                    declarations = parseBindingList(kind, {inFor: true});
                    state.allowIn = previousAllowIn;

                    if (declarations.length === 1 && declarations[0].init === null && matchKeyword('in')) {
                        init = init.finishLexicalDeclaration(declarations, kind);
                        lex();
                        left = init;
                        right = parseExpression();
                        init = null;
                    } else if (declarations.length === 1 && declarations[0].init === null && matchContextualKeyword('of')) {
                        init = init.finishLexicalDeclaration(declarations, kind);
                        lex();
                        left = init;
                        right = parseAssignmentExpression();
                        init = null;
                        forIn = false;
                    } else {
                        consumeSemicolon();
                        init = init.finishLexicalDeclaration(declarations, kind);
                    }
                }
            } else {
                initStartToken = lookahead;
                state.allowIn = false;
                init = inheritCoverGrammar(parseAssignmentExpression);
                state.allowIn = previousAllowIn;

                if (matchKeyword('in')) {
                    if (!isAssignmentTarget) {
                        tolerateError(Messages.InvalidLHSInForIn);
                    }

                    lex();
                    reinterpretExpressionAsPattern(init);
                    left = init;
                    right = parseExpression();
                    init = null;
                } else if (matchContextualKeyword('of')) {
                    if (!isAssignmentTarget) {
                        tolerateError(Messages.InvalidLHSInForLoop);
                    }

                    lex();
                    reinterpretExpressionAsPattern(init);
                    left = init;
                    right = parseAssignmentExpression();
                    init = null;
                    forIn = false;
                } else {
                    if (match(',')) {
                        initSeq = [init];
                        while (match(',')) {
                            lex();
                            initSeq.push(isolateCoverGrammar(parseAssignmentExpression));
                        }
                        init = new WrappingNode(initStartToken).finishSequenceExpression(initSeq);
                    }
                    expect(';');
                }
            }
        }

        if (typeof left === 'undefined') {

            if (!match(';')) {
                test = parseExpression();
            }
            expect(';');

            if (!match(')')) {
                update = parseExpression();
            }
        }

        expect(')');

        oldInIteration = state.inIteration;
        state.inIteration = true;

        body = isolateCoverGrammar(parseStatement);

        state.inIteration = oldInIteration;

        return (typeof left === 'undefined') ?
                node.finishForStatement(init, test, update, body) :
                forIn ? node.finishForInStatement(left, right, body) :
                    node.finishForOfStatement(left, right, body);
    }

    // ECMA-262 13.8 The continue statement

    function parseContinueStatement(node) {
        var label = null, key;

        expectKeyword('continue');

        // Optimize the most common form: 'continue;'.
        if (source.charCodeAt(startIndex) === 0x3B) {
            lex();

            if (!state.inIteration) {
                throwError(Messages.IllegalContinue);
            }

            return node.finishContinueStatement(null);
        }

        if (hasLineTerminator) {
            if (!state.inIteration) {
                throwError(Messages.IllegalContinue);
            }

            return node.finishContinueStatement(null);
        }

        if (lookahead.type === Token.Identifier) {
            label = parseVariableIdentifier();

            key = '$' + label.name;
            if (!Object.prototype.hasOwnProperty.call(state.labelSet, key)) {
                throwError(Messages.UnknownLabel, label.name);
            }
        }

        consumeSemicolon();

        if (label === null && !state.inIteration) {
            throwError(Messages.IllegalContinue);
        }

        return node.finishContinueStatement(label);
    }

    // ECMA-262 13.9 The break statement

    function parseBreakStatement(node) {
        var label = null, key;

        expectKeyword('break');

        // Catch the very common case first: immediately a semicolon (U+003B).
        if (source.charCodeAt(lastIndex) === 0x3B) {
            lex();

            if (!(state.inIteration || state.inSwitch)) {
                throwError(Messages.IllegalBreak);
            }

            return node.finishBreakStatement(null);
        }

        if (hasLineTerminator) {
            if (!(state.inIteration || state.inSwitch)) {
                throwError(Messages.IllegalBreak);
            }
        } else if (lookahead.type === Token.Identifier) {
            label = parseVariableIdentifier();

            key = '$' + label.name;
            if (!Object.prototype.hasOwnProperty.call(state.labelSet, key)) {
                throwError(Messages.UnknownLabel, label.name);
            }
        }

        consumeSemicolon();

        if (label === null && !(state.inIteration || state.inSwitch)) {
            throwError(Messages.IllegalBreak);
        }

        return node.finishBreakStatement(label);
    }

    // ECMA-262 13.10 The return statement

    function parseReturnStatement(node) {
        var argument = null;

        expectKeyword('return');

        if (!state.inFunctionBody) {
            tolerateError(Messages.IllegalReturn);
        }

        // 'return' followed by a space and an identifier is very common.
        if (source.charCodeAt(lastIndex) === 0x20) {
            if (isIdentifierStart(source.charCodeAt(lastIndex + 1))) {
                argument = parseExpression();
                consumeSemicolon();
                return node.finishReturnStatement(argument);
            }
        }

        if (hasLineTerminator) {
            // HACK
            return node.finishReturnStatement(null);
        }

        if (!match(';')) {
            if (!match('}') && lookahead.type !== Token.EOF) {
                argument = parseExpression();
            }
        }

        consumeSemicolon();

        return node.finishReturnStatement(argument);
    }

    // ECMA-262 13.11 The with statement

    function parseWithStatement(node) {
        var object, body;

        if (strict) {
            tolerateError(Messages.StrictModeWith);
        }

        expectKeyword('with');

        expect('(');

        object = parseExpression();

        expect(')');

        body = parseStatement();

        return node.finishWithStatement(object, body);
    }

    // ECMA-262 13.12 The switch statement

    function parseSwitchCase() {
        var test, consequent = [], statement, node = new Node();

        if (matchKeyword('default')) {
            lex();
            test = null;
        } else {
            expectKeyword('case');
            test = parseExpression();
        }
        expect(':');

        while (startIndex < length) {
            if (match('}') || matchKeyword('default') || matchKeyword('case')) {
                break;
            }
            statement = parseStatementListItem();
            consequent.push(statement);
        }

        return node.finishSwitchCase(test, consequent);
    }

    function parseSwitchStatement(node) {
        var discriminant, cases, clause, oldInSwitch, defaultFound;

        expectKeyword('switch');

        expect('(');

        discriminant = parseExpression();

        expect(')');

        expect('{');

        cases = [];

        if (match('}')) {
            lex();
            return node.finishSwitchStatement(discriminant, cases);
        }

        oldInSwitch = state.inSwitch;
        state.inSwitch = true;
        defaultFound = false;

        while (startIndex < length) {
            if (match('}')) {
                break;
            }
            clause = parseSwitchCase();
            if (clause.test === null) {
                if (defaultFound) {
                    throwError(Messages.MultipleDefaultsInSwitch);
                }
                defaultFound = true;
            }
            cases.push(clause);
        }

        state.inSwitch = oldInSwitch;

        expect('}');

        return node.finishSwitchStatement(discriminant, cases);
    }

    // ECMA-262 13.14 The throw statement

    function parseThrowStatement(node) {
        var argument;

        expectKeyword('throw');

        if (hasLineTerminator) {
            throwError(Messages.NewlineAfterThrow);
        }

        argument = parseExpression();

        consumeSemicolon();

        return node.finishThrowStatement(argument);
    }

    // ECMA-262 13.15 The try statement

    function parseCatchClause() {
        var param, params = [], paramMap = {}, key, i, body, node = new Node();

        expectKeyword('catch');

        expect('(');
        if (match(')')) {
            throwUnexpectedToken(lookahead);
        }

        param = parsePattern(params);
        for (i = 0; i < params.length; i++) {
            key = '$' + params[i].value;
            if (Object.prototype.hasOwnProperty.call(paramMap, key)) {
                tolerateError(Messages.DuplicateBinding, params[i].value);
            }
            paramMap[key] = true;
        }

        // ECMA-262 12.14.1
        if (strict && isRestrictedWord(param.name)) {
            tolerateError(Messages.StrictCatchVariable);
        }

        expect(')');
        body = parseBlock();
        return node.finishCatchClause(param, body);
    }

    function parseTryStatement(node) {
        var block, handler = null, finalizer = null;

        expectKeyword('try');

        block = parseBlock();

        if (matchKeyword('catch')) {
            handler = parseCatchClause();
        }

        if (matchKeyword('finally')) {
            lex();
            finalizer = parseBlock();
        }

        if (!handler && !finalizer) {
            throwError(Messages.NoCatchOrFinally);
        }

        return node.finishTryStatement(block, handler, finalizer);
    }

    // ECMA-262 13.16 The debugger statement

    function parseDebuggerStatement(node) {
        expectKeyword('debugger');

        consumeSemicolon();

        return node.finishDebuggerStatement();
    }

    // 13 Statements

    function parseStatement() {
        var type = lookahead.type,
            expr,
            labeledBody,
            key,
            node;

        if (type === Token.EOF) {
            throwUnexpectedToken(lookahead);
        }

        if (type === Token.Punctuator && lookahead.value === '{') {
            return parseBlock();
        }
        isAssignmentTarget = isBindingElement = true;
        node = new Node();

        if (type === Token.Punctuator) {
            switch (lookahead.value) {
            case ';':
                return parseEmptyStatement(node);
            case '(':
                return parseExpressionStatement(node);
            default:
                break;
            }
        } else if (type === Token.Keyword) {
            switch (lookahead.value) {
            case 'break':
                return parseBreakStatement(node);
            case 'continue':
                return parseContinueStatement(node);
            case 'debugger':
                return parseDebuggerStatement(node);
            case 'do':
                return parseDoWhileStatement(node);
            case 'for':
                return parseForStatement(node);
            case 'function':
                return parseFunctionDeclaration(node);
            case 'if':
                return parseIfStatement(node);
            case 'return':
                return parseReturnStatement(node);
            case 'switch':
                return parseSwitchStatement(node);
            case 'throw':
                return parseThrowStatement(node);
            case 'try':
                return parseTryStatement(node);
            case 'var':
                return parseVariableStatement(node);
            case 'while':
                return parseWhileStatement(node);
            case 'with':
                return parseWithStatement(node);
            default:
                break;
            }
        }

        expr = parseExpression();

        // ECMA-262 12.12 Labelled Statements
        if ((expr.type === Syntax.Identifier) && match(':')) {
            lex();

            key = '$' + expr.name;
            if (Object.prototype.hasOwnProperty.call(state.labelSet, key)) {
                throwError(Messages.Redeclaration, 'Label', expr.name);
            }

            state.labelSet[key] = true;
            labeledBody = parseStatement();
            delete state.labelSet[key];
            return node.finishLabeledStatement(expr, labeledBody);
        }

        consumeSemicolon();

        return node.finishExpressionStatement(expr);
    }

    // ECMA-262 14.1 Function Definition

    function parseFunctionSourceElements() {
        var statement, body = [], token, directive, firstRestricted,
            oldLabelSet, oldInIteration, oldInSwitch, oldInFunctionBody,
            node = new Node();

        expect('{');

        while (startIndex < length) {
            if (lookahead.type !== Token.StringLiteral) {
                break;
            }
            token = lookahead;

            statement = parseStatementListItem();
            body.push(statement);
            if (statement.expression.type !== Syntax.Literal) {
                // this is not directive
                break;
            }
            directive = source.slice(token.start + 1, token.end - 1);
            if (directive === 'use strict') {
                strict = true;
                if (firstRestricted) {
                    tolerateUnexpectedToken(firstRestricted, Messages.StrictOctalLiteral);
                }
            } else {
                if (!firstRestricted && token.octal) {
                    firstRestricted = token;
                }
            }
        }

        oldLabelSet = state.labelSet;
        oldInIteration = state.inIteration;
        oldInSwitch = state.inSwitch;
        oldInFunctionBody = state.inFunctionBody;

        state.labelSet = {};
        state.inIteration = false;
        state.inSwitch = false;
        state.inFunctionBody = true;

        while (startIndex < length) {
            if (match('}')) {
                break;
            }
            body.push(parseStatementListItem());
        }

        expect('}');

        state.labelSet = oldLabelSet;
        state.inIteration = oldInIteration;
        state.inSwitch = oldInSwitch;
        state.inFunctionBody = oldInFunctionBody;

        return node.finishBlockStatement(body);
    }

    function validateParam(options, param, name) {
        var key = '$' + name;
        if (strict) {
            if (isRestrictedWord(name)) {
                options.stricted = param;
                options.message = Messages.StrictParamName;
            }
            if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {
                options.stricted = param;
                options.message = Messages.StrictParamDupe;
            }
        } else if (!options.firstRestricted) {
            if (isRestrictedWord(name)) {
                options.firstRestricted = param;
                options.message = Messages.StrictParamName;
            } else if (isStrictModeReservedWord(name)) {
                options.firstRestricted = param;
                options.message = Messages.StrictReservedWord;
            } else if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {
                options.stricted = param;
                options.message = Messages.StrictParamDupe;
            }
        }
        options.paramSet[key] = true;
    }

    function parseParam(options) {
        var token, param, params = [], i, def;

        token = lookahead;
        if (token.value === '...') {
            param = parseRestElement(params);
            validateParam(options, param.argument, param.argument.name);
            options.params.push(param);
            options.defaults.push(null);
            return false;
        }

        param = parsePatternWithDefault(params);
        for (i = 0; i < params.length; i++) {
            validateParam(options, params[i], params[i].value);
        }

        if (param.type === Syntax.AssignmentPattern) {
            def = param.right;
            param = param.left;
            ++options.defaultCount;
        }

        options.params.push(param);
        options.defaults.push(def);

        return !match(')');
    }

    function parseParams(firstRestricted) {
        var options;

        options = {
            params: [],
            defaultCount: 0,
            defaults: [],
            firstRestricted: firstRestricted
        };

        expect('(');

        if (!match(')')) {
            options.paramSet = {};
            while (startIndex < length) {
                if (!parseParam(options)) {
                    break;
                }
                expect(',');
            }
        }

        expect(')');

        if (options.defaultCount === 0) {
            options.defaults = [];
        }

        return {
            params: options.params,
            defaults: options.defaults,
            stricted: options.stricted,
            firstRestricted: options.firstRestricted,
            message: options.message
        };
    }

    function parseFunctionDeclaration(node, identifierIsOptional) {
        var id = null, params = [], defaults = [], body, token, stricted, tmp, firstRestricted, message, previousStrict,
            isGenerator, previousAllowYield;

        previousAllowYield = state.allowYield;

        expectKeyword('function');

        isGenerator = match('*');
        if (isGenerator) {
            lex();
        }

        if (!identifierIsOptional || !match('(')) {
            token = lookahead;
            id = parseVariableIdentifier();
            if (strict) {
                if (isRestrictedWord(token.value)) {
                    tolerateUnexpectedToken(token, Messages.StrictFunctionName);
                }
            } else {
                if (isRestrictedWord(token.value)) {
                    firstRestricted = token;
                    message = Messages.StrictFunctionName;
                } else if (isStrictModeReservedWord(token.value)) {
                    firstRestricted = token;
                    message = Messages.StrictReservedWord;
                }
            }
        }

        state.allowYield = !isGenerator;
        tmp = parseParams(firstRestricted);
        params = tmp.params;
        defaults = tmp.defaults;
        stricted = tmp.stricted;
        firstRestricted = tmp.firstRestricted;
        if (tmp.message) {
            message = tmp.message;
        }


        previousStrict = strict;
        body = parseFunctionSourceElements();
        if (strict && firstRestricted) {
            throwUnexpectedToken(firstRestricted, message);
        }
        if (strict && stricted) {
            tolerateUnexpectedToken(stricted, message);
        }

        strict = previousStrict;
        state.allowYield = previousAllowYield;

        return node.finishFunctionDeclaration(id, params, defaults, body, isGenerator);
    }

    function parseFunctionExpression() {
        var token, id = null, stricted, firstRestricted, message, tmp,
            params = [], defaults = [], body, previousStrict, node = new Node(),
            isGenerator, previousAllowYield;

        previousAllowYield = state.allowYield;

        expectKeyword('function');

        isGenerator = match('*');
        if (isGenerator) {
            lex();
        }

        state.allowYield = !isGenerator;
        if (!match('(')) {
            token = lookahead;
            id = (!strict && !isGenerator && matchKeyword('yield')) ? parseNonComputedProperty() : parseVariableIdentifier();
            if (strict) {
                if (isRestrictedWord(token.value)) {
                    tolerateUnexpectedToken(token, Messages.StrictFunctionName);
                }
            } else {
                if (isRestrictedWord(token.value)) {
                    firstRestricted = token;
                    message = Messages.StrictFunctionName;
                } else if (isStrictModeReservedWord(token.value)) {
                    firstRestricted = token;
                    message = Messages.StrictReservedWord;
                }
            }
        }

        tmp = parseParams(firstRestricted);
        params = tmp.params;
        defaults = tmp.defaults;
        stricted = tmp.stricted;
        firstRestricted = tmp.firstRestricted;
        if (tmp.message) {
            message = tmp.message;
        }

        previousStrict = strict;
        body = parseFunctionSourceElements();
        if (strict && firstRestricted) {
            throwUnexpectedToken(firstRestricted, message);
        }
        if (strict && stricted) {
            tolerateUnexpectedToken(stricted, message);
        }
        strict = previousStrict;
        state.allowYield = previousAllowYield;

        return node.finishFunctionExpression(id, params, defaults, body, isGenerator);
    }

    // ECMA-262 14.5 Class Definitions

    function parseClassBody() {
        var classBody, token, isStatic, hasConstructor = false, body, method, computed, key;

        classBody = new Node();

        expect('{');
        body = [];
        while (!match('}')) {
            if (match(';')) {
                lex();
            } else {
                method = new Node();
                token = lookahead;
                isStatic = false;
                computed = match('[');
                if (match('*')) {
                    lex();
                } else {
                    key = parseObjectPropertyKey();
                    if (key.name === 'static' && (lookaheadPropertyName() || match('*'))) {
                        token = lookahead;
                        isStatic = true;
                        computed = match('[');
                        if (match('*')) {
                            lex();
                        } else {
                            key = parseObjectPropertyKey();
                        }
                    }
                }
                method = tryParseMethodDefinition(token, key, computed, method);
                if (method) {
                    method['static'] = isStatic; // jscs:ignore requireDotNotation
                    if (method.kind === 'init') {
                        method.kind = 'method';
                    }
                    if (!isStatic) {
                        if (!method.computed && (method.key.name || method.key.value.toString()) === 'constructor') {
                            if (method.kind !== 'method' || !method.method || method.value.generator) {
                                throwUnexpectedToken(token, Messages.ConstructorSpecialMethod);
                            }
                            if (hasConstructor) {
                                throwUnexpectedToken(token, Messages.DuplicateConstructor);
                            } else {
                                hasConstructor = true;
                            }
                            method.kind = 'constructor';
                        }
                    } else {
                        if (!method.computed && (method.key.name || method.key.value.toString()) === 'prototype') {
                            throwUnexpectedToken(token, Messages.StaticPrototype);
                        }
                    }
                    method.type = Syntax.MethodDefinition;
                    delete method.method;
                    delete method.shorthand;
                    body.push(method);
                } else {
                    throwUnexpectedToken(lookahead);
                }
            }
        }
        lex();
        return classBody.finishClassBody(body);
    }

    function parseClassDeclaration(identifierIsOptional) {
        var id = null, superClass = null, classNode = new Node(), classBody, previousStrict = strict;
        strict = true;

        expectKeyword('class');

        if (!identifierIsOptional || lookahead.type === Token.Identifier) {
            id = parseVariableIdentifier();
        }

        if (matchKeyword('extends')) {
            lex();
            superClass = isolateCoverGrammar(parseLeftHandSideExpressionAllowCall);
        }
        classBody = parseClassBody();
        strict = previousStrict;

        return classNode.finishClassDeclaration(id, superClass, classBody);
    }

    function parseClassExpression() {
        var id = null, superClass = null, classNode = new Node(), classBody, previousStrict = strict;
        strict = true;

        expectKeyword('class');

        if (lookahead.type === Token.Identifier) {
            id = parseVariableIdentifier();
        }

        if (matchKeyword('extends')) {
            lex();
            superClass = isolateCoverGrammar(parseLeftHandSideExpressionAllowCall);
        }
        classBody = parseClassBody();
        strict = previousStrict;

        return classNode.finishClassExpression(id, superClass, classBody);
    }

    // ECMA-262 15.2 Modules

    function parseModuleSpecifier() {
        var node = new Node();

        if (lookahead.type !== Token.StringLiteral) {
            throwError(Messages.InvalidModuleSpecifier);
        }
        return node.finishLiteral(lex());
    }

    // ECMA-262 15.2.3 Exports

    function parseExportSpecifier() {
        var exported, local, node = new Node(), def;
        if (matchKeyword('default')) {
            // export {default} from 'something';
            def = new Node();
            lex();
            local = def.finishIdentifier('default');
        } else {
            local = parseVariableIdentifier();
        }
        if (matchContextualKeyword('as')) {
            lex();
            exported = parseNonComputedProperty();
        }
        return node.finishExportSpecifier(local, exported);
    }

    function parseExportNamedDeclaration(node) {
        var declaration = null,
            isExportFromIdentifier,
            src = null, specifiers = [];

        // non-default export
        if (lookahead.type === Token.Keyword) {
            // covers:
            // export var f = 1;
            switch (lookahead.value) {
                case 'let':
                case 'const':
                    declaration = parseLexicalDeclaration({inFor: false});
                    return node.finishExportNamedDeclaration(declaration, specifiers, null);
                case 'var':
                case 'class':
                case 'function':
                    declaration = parseStatementListItem();
                    return node.finishExportNamedDeclaration(declaration, specifiers, null);
            }
        }

        expect('{');
        while (!match('}')) {
            isExportFromIdentifier = isExportFromIdentifier || matchKeyword('default');
            specifiers.push(parseExportSpecifier());
            if (!match('}')) {
                expect(',');
                if (match('}')) {
                    break;
                }
            }
        }
        expect('}');

        if (matchContextualKeyword('from')) {
            // covering:
            // export {default} from 'foo';
            // export {foo} from 'foo';
            lex();
            src = parseModuleSpecifier();
            consumeSemicolon();
        } else if (isExportFromIdentifier) {
            // covering:
            // export {default}; // missing fromClause
            throwError(lookahead.value ?
                    Messages.UnexpectedToken : Messages.MissingFromClause, lookahead.value);
        } else {
            // cover
            // export {foo};
            consumeSemicolon();
        }
        return node.finishExportNamedDeclaration(declaration, specifiers, src);
    }

    function parseExportDefaultDeclaration(node) {
        var declaration = null,
            expression = null;

        // covers:
        // export default ...
        expectKeyword('default');

        if (matchKeyword('function')) {
            // covers:
            // export default function foo () {}
            // export default function () {}
            declaration = parseFunctionDeclaration(new Node(), true);
            return node.finishExportDefaultDeclaration(declaration);
        }
        if (matchKeyword('class')) {
            declaration = parseClassDeclaration(true);
            return node.finishExportDefaultDeclaration(declaration);
        }

        if (matchContextualKeyword('from')) {
            throwError(Messages.UnexpectedToken, lookahead.value);
        }

        // covers:
        // export default {};
        // export default [];
        // export default (1 + 2);
        if (match('{')) {
            expression = parseObjectInitializer();
        } else if (match('[')) {
            expression = parseArrayInitializer();
        } else {
            expression = parseAssignmentExpression();
        }
        consumeSemicolon();
        return node.finishExportDefaultDeclaration(expression);
    }

    function parseExportAllDeclaration(node) {
        var src;

        // covers:
        // export * from 'foo';
        expect('*');
        if (!matchContextualKeyword('from')) {
            throwError(lookahead.value ?
                    Messages.UnexpectedToken : Messages.MissingFromClause, lookahead.value);
        }
        lex();
        src = parseModuleSpecifier();
        consumeSemicolon();

        return node.finishExportAllDeclaration(src);
    }

    function parseExportDeclaration() {
        var node = new Node();
        if (state.inFunctionBody) {
            throwError(Messages.IllegalExportDeclaration);
        }

        expectKeyword('export');

        if (matchKeyword('default')) {
            return parseExportDefaultDeclaration(node);
        }
        if (match('*')) {
            return parseExportAllDeclaration(node);
        }
        return parseExportNamedDeclaration(node);
    }

    // ECMA-262 15.2.2 Imports

    function parseImportSpecifier() {
        // import {<foo as bar>} ...;
        var local, imported, node = new Node();

        imported = parseNonComputedProperty();
        if (matchContextualKeyword('as')) {
            lex();
            local = parseVariableIdentifier();
        }

        return node.finishImportSpecifier(local, imported);
    }

    function parseNamedImports() {
        var specifiers = [];
        // {foo, bar as bas}
        expect('{');
        while (!match('}')) {
            specifiers.push(parseImportSpecifier());
            if (!match('}')) {
                expect(',');
                if (match('}')) {
                    break;
                }
            }
        }
        expect('}');
        return specifiers;
    }

    function parseImportDefaultSpecifier() {
        // import <foo> ...;
        var local, node = new Node();

        local = parseNonComputedProperty();

        return node.finishImportDefaultSpecifier(local);
    }

    function parseImportNamespaceSpecifier() {
        // import <* as foo> ...;
        var local, node = new Node();

        expect('*');
        if (!matchContextualKeyword('as')) {
            throwError(Messages.NoAsAfterImportNamespace);
        }
        lex();
        local = parseNonComputedProperty();

        return node.finishImportNamespaceSpecifier(local);
    }

    function parseImportDeclaration() {
        var specifiers = [], src, node = new Node();

        if (state.inFunctionBody) {
            throwError(Messages.IllegalImportDeclaration);
        }

        expectKeyword('import');

        if (lookahead.type === Token.StringLiteral) {
            // import 'foo';
            src = parseModuleSpecifier();
        } else {

            if (match('{')) {
                // import {bar}
                specifiers = specifiers.concat(parseNamedImports());
            } else if (match('*')) {
                // import * as foo
                specifiers.push(parseImportNamespaceSpecifier());
            } else if (isIdentifierName(lookahead) && !matchKeyword('default')) {
                // import foo
                specifiers.push(parseImportDefaultSpecifier());
                if (match(',')) {
                    lex();
                    if (match('*')) {
                        // import foo, * as foo
                        specifiers.push(parseImportNamespaceSpecifier());
                    } else if (match('{')) {
                        // import foo, {bar}
                        specifiers = specifiers.concat(parseNamedImports());
                    } else {
                        throwUnexpectedToken(lookahead);
                    }
                }
            } else {
                throwUnexpectedToken(lex());
            }

            if (!matchContextualKeyword('from')) {
                throwError(lookahead.value ?
                        Messages.UnexpectedToken : Messages.MissingFromClause, lookahead.value);
            }
            lex();
            src = parseModuleSpecifier();
        }

        consumeSemicolon();
        return node.finishImportDeclaration(specifiers, src);
    }

    // ECMA-262 15.1 Scripts

    function parseScriptBody() {
        var statement, body = [], token, directive, firstRestricted;

        while (startIndex < length) {
            token = lookahead;
            if (token.type !== Token.StringLiteral) {
                break;
            }

            statement = parseStatementListItem();
            body.push(statement);
            if (statement.expression.type !== Syntax.Literal) {
                // this is not directive
                break;
            }
            directive = source.slice(token.start + 1, token.end - 1);
            if (directive === 'use strict') {
                strict = true;
                if (firstRestricted) {
                    tolerateUnexpectedToken(firstRestricted, Messages.StrictOctalLiteral);
                }
            } else {
                if (!firstRestricted && token.octal) {
                    firstRestricted = token;
                }
            }
        }

        while (startIndex < length) {
            statement = parseStatementListItem();
            /* istanbul ignore if */
            if (typeof statement === 'undefined') {
                break;
            }
            body.push(statement);
        }
        return body;
    }

    function parseProgram() {
        var body, node;

        peek();
        node = new Node();

        body = parseScriptBody();
        return node.finishProgram(body, state.sourceType);
    }

    function filterTokenLocation() {
        var i, entry, token, tokens = [];

        for (i = 0; i < extra.tokens.length; ++i) {
            entry = extra.tokens[i];
            token = {
                type: entry.type,
                value: entry.value
            };
            if (entry.regex) {
                token.regex = {
                    pattern: entry.regex.pattern,
                    flags: entry.regex.flags
                };
            }
            if (extra.range) {
                token.range = entry.range;
            }
            if (extra.loc) {
                token.loc = entry.loc;
            }
            tokens.push(token);
        }

        extra.tokens = tokens;
    }

    function tokenize(code, options, delegate) {
        var toString,
            tokens;

        toString = String;
        if (typeof code !== 'string' && !(code instanceof String)) {
            code = toString(code);
        }

        source = code;
        index = 0;
        lineNumber = (source.length > 0) ? 1 : 0;
        lineStart = 0;
        startIndex = index;
        startLineNumber = lineNumber;
        startLineStart = lineStart;
        length = source.length;
        lookahead = null;
        state = {
            allowIn: true,
            allowYield: true,
            labelSet: {},
            inFunctionBody: false,
            inIteration: false,
            inSwitch: false,
            lastCommentStart: -1,
            curlyStack: []
        };

        extra = {};

        // Options matching.
        options = options || {};

        // Of course we collect tokens here.
        options.tokens = true;
        extra.tokens = [];
        extra.tokenValues = [];
        extra.tokenize = true;
        extra.delegate = delegate;

        // The following two fields are necessary to compute the Regex tokens.
        extra.openParenToken = -1;
        extra.openCurlyToken = -1;

        extra.range = (typeof options.range === 'boolean') && options.range;
        extra.loc = (typeof options.loc === 'boolean') && options.loc;

        if (typeof options.comment === 'boolean' && options.comment) {
            extra.comments = [];
        }
        if (typeof options.tolerant === 'boolean' && options.tolerant) {
            extra.errors = [];
        }

        try {
            peek();
            if (lookahead.type === Token.EOF) {
                return extra.tokens;
            }

            lex();
            while (lookahead.type !== Token.EOF) {
                try {
                    lex();
                } catch (lexError) {
                    if (extra.errors) {
                        recordError(lexError);
                        // We have to break on the first error
                        // to avoid infinite loops.
                        break;
                    } else {
                        throw lexError;
                    }
                }
            }

            tokens = extra.tokens;
            if (typeof extra.errors !== 'undefined') {
                tokens.errors = extra.errors;
            }
        } catch (e) {
            throw e;
        } finally {
            extra = {};
        }
        return tokens;
    }

    function parse(code, options) {
        var program, toString;

        toString = String;
        if (typeof code !== 'string' && !(code instanceof String)) {
            code = toString(code);
        }

        source = code;
        index = 0;
        lineNumber = (source.length > 0) ? 1 : 0;
        lineStart = 0;
        startIndex = index;
        startLineNumber = lineNumber;
        startLineStart = lineStart;
        length = source.length;
        lookahead = null;
        state = {
            allowIn: true,
            allowYield: true,
            labelSet: {},
            inFunctionBody: false,
            inIteration: false,
            inSwitch: false,
            lastCommentStart: -1,
            curlyStack: [],
            sourceType: 'script'
        };
        strict = false;

        extra = {};
        if (typeof options !== 'undefined') {
            extra.range = (typeof options.range === 'boolean') && options.range;
            extra.loc = (typeof options.loc === 'boolean') && options.loc;
            extra.attachComment = (typeof options.attachComment === 'boolean') && options.attachComment;

            if (extra.loc && options.source !== null && options.source !== undefined) {
                extra.source = toString(options.source);
            }

            if (typeof options.tokens === 'boolean' && options.tokens) {
                extra.tokens = [];
            }
            if (typeof options.comment === 'boolean' && options.comment) {
                extra.comments = [];
            }
            if (typeof options.tolerant === 'boolean' && options.tolerant) {
                extra.errors = [];
            }
            if (extra.attachComment) {
                extra.range = true;
                extra.comments = [];
                extra.bottomRightStack = [];
                extra.trailingComments = [];
                extra.leadingComments = [];
            }
            if (options.sourceType === 'module') {
                // very restrictive condition for now
                state.sourceType = options.sourceType;
                strict = true;
            }
        }

        try {
            program = parseProgram();
            if (typeof extra.comments !== 'undefined') {
                program.comments = extra.comments;
            }
            if (typeof extra.tokens !== 'undefined') {
                filterTokenLocation();
                program.tokens = extra.tokens;
            }
            if (typeof extra.errors !== 'undefined') {
                program.errors = extra.errors;
            }
        } catch (e) {
            throw e;
        } finally {
            extra = {};
        }

        return program;
    }

    // Sync with *.json manifests.
    exports.version = '2.7.3';

    exports.tokenize = tokenize;

    exports.parse = parse;

    // Deep copy.
    /* istanbul ignore next */
    exports.Syntax = (function () {
        var name, types = {};

        if (typeof Object.create === 'function') {
            types = Object.create(null);
        }

        for (name in Syntax) {
            if (Syntax.hasOwnProperty(name)) {
                types[name] = Syntax[name];
            }
        }

        if (typeof Object.freeze === 'function') {
            Object.freeze(types);
        }

        return types;
    }());

}));
/* vim: set sw=4 ts=4 et tw=80 : */

},{}],40:[function(require,module,exports){
/*
  Copyright (C) 2012-2013 Yusuke Suzuki <utatane.tea@gmail.com>
  Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
/*jslint vars:false, bitwise:true*/
/*jshint indent:4*/
/*global exports:true, define:true*/
(function (root, factory) {
    'use strict';

    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js,
    // and plain browser loading,
    if (typeof define === 'function' && define.amd) {
        define(['exports'], factory);
    } else if (typeof exports !== 'undefined') {
        factory(exports);
    } else {
        factory((root.estraverse = {}));
    }
}(this, function (exports) {
    'use strict';

    var Syntax,
        isArray,
        VisitorOption,
        VisitorKeys,
        BREAK,
        SKIP;

    Syntax = {
        AssignmentExpression: 'AssignmentExpression',
        ArrayExpression: 'ArrayExpression',
        ArrayPattern: 'ArrayPattern',
        ArrowFunctionExpression: 'ArrowFunctionExpression',
        BlockStatement: 'BlockStatement',
        BinaryExpression: 'BinaryExpression',
        BreakStatement: 'BreakStatement',
        CallExpression: 'CallExpression',
        CatchClause: 'CatchClause',
        ClassBody: 'ClassBody',
        ClassDeclaration: 'ClassDeclaration',
        ClassExpression: 'ClassExpression',
        ConditionalExpression: 'ConditionalExpression',
        ContinueStatement: 'ContinueStatement',
        DebuggerStatement: 'DebuggerStatement',
        DirectiveStatement: 'DirectiveStatement',
        DoWhileStatement: 'DoWhileStatement',
        EmptyStatement: 'EmptyStatement',
        ExpressionStatement: 'ExpressionStatement',
        ForStatement: 'ForStatement',
        ForInStatement: 'ForInStatement',
        FunctionDeclaration: 'FunctionDeclaration',
        FunctionExpression: 'FunctionExpression',
        Identifier: 'Identifier',
        IfStatement: 'IfStatement',
        Literal: 'Literal',
        LabeledStatement: 'LabeledStatement',
        LogicalExpression: 'LogicalExpression',
        MemberExpression: 'MemberExpression',
        MethodDefinition: 'MethodDefinition',
        NewExpression: 'NewExpression',
        ObjectExpression: 'ObjectExpression',
        ObjectPattern: 'ObjectPattern',
        Program: 'Program',
        Property: 'Property',
        ReturnStatement: 'ReturnStatement',
        SequenceExpression: 'SequenceExpression',
        SwitchStatement: 'SwitchStatement',
        SwitchCase: 'SwitchCase',
        ThisExpression: 'ThisExpression',
        ThrowStatement: 'ThrowStatement',
        TryStatement: 'TryStatement',
        UnaryExpression: 'UnaryExpression',
        UpdateExpression: 'UpdateExpression',
        VariableDeclaration: 'VariableDeclaration',
        VariableDeclarator: 'VariableDeclarator',
        WhileStatement: 'WhileStatement',
        WithStatement: 'WithStatement',
        YieldExpression: 'YieldExpression'
    };

    function ignoreJSHintError() { }

    isArray = Array.isArray;
    if (!isArray) {
        isArray = function isArray(array) {
            return Object.prototype.toString.call(array) === '[object Array]';
        };
    }

    function deepCopy(obj) {
        var ret = {}, key, val;
        for (key in obj) {
            if (obj.hasOwnProperty(key)) {
                val = obj[key];
                if (typeof val === 'object' && val !== null) {
                    ret[key] = deepCopy(val);
                } else {
                    ret[key] = val;
                }
            }
        }
        return ret;
    }

    function shallowCopy(obj) {
        var ret = {}, key;
        for (key in obj) {
            if (obj.hasOwnProperty(key)) {
                ret[key] = obj[key];
            }
        }
        return ret;
    }
    ignoreJSHintError(shallowCopy);

    // based on LLVM libc++ upper_bound / lower_bound
    // MIT License

    function upperBound(array, func) {
        var diff, len, i, current;

        len = array.length;
        i = 0;

        while (len) {
            diff = len >>> 1;
            current = i + diff;
            if (func(array[current])) {
                len = diff;
            } else {
                i = current + 1;
                len -= diff + 1;
            }
        }
        return i;
    }

    function lowerBound(array, func) {
        var diff, len, i, current;

        len = array.length;
        i = 0;

        while (len) {
            diff = len >>> 1;
            current = i + diff;
            if (func(array[current])) {
                i = current + 1;
                len -= diff + 1;
            } else {
                len = diff;
            }
        }
        return i;
    }
    ignoreJSHintError(lowerBound);

    VisitorKeys = {
        AssignmentExpression: ['left', 'right'],
        ArrayExpression: ['elements'],
        ArrayPattern: ['elements'],
        ArrowFunctionExpression: ['params', 'defaults', 'rest', 'body'],
        BlockStatement: ['body'],
        BinaryExpression: ['left', 'right'],
        BreakStatement: ['label'],
        CallExpression: ['callee', 'arguments'],
        CatchClause: ['param', 'body'],
        ClassBody: ['body'],
        ClassDeclaration: ['id', 'body', 'superClass'],
        ClassExpression: ['id', 'body', 'superClass'],
        ConditionalExpression: ['test', 'consequent', 'alternate'],
        ContinueStatement: ['label'],
        DebuggerStatement: [],
        DirectiveStatement: [],
        DoWhileStatement: ['body', 'test'],
        EmptyStatement: [],
        ExpressionStatement: ['expression'],
        ForStatement: ['init', 'test', 'update', 'body'],
        ForInStatement: ['left', 'right', 'body'],
        ForOfStatement: ['left', 'right', 'body'],
        FunctionDeclaration: ['id', 'params', 'defaults', 'rest', 'body'],
        FunctionExpression: ['id', 'params', 'defaults', 'rest', 'body'],
        Identifier: [],
        IfStatement: ['test', 'consequent', 'alternate'],
        Literal: [],
        LabeledStatement: ['label', 'body'],
        LogicalExpression: ['left', 'right'],
        MemberExpression: ['object', 'property'],
        MethodDefinition: ['key', 'value'],
        NewExpression: ['callee', 'arguments'],
        ObjectExpression: ['properties'],
        ObjectPattern: ['properties'],
        Program: ['body'],
        Property: ['key', 'value'],
        ReturnStatement: ['argument'],
        SequenceExpression: ['expressions'],
        SwitchStatement: ['discriminant', 'cases'],
        SwitchCase: ['test', 'consequent'],
        ThisExpression: [],
        ThrowStatement: ['argument'],
        TryStatement: ['block', 'handlers', 'handler', 'guardedHandlers', 'finalizer'],
        UnaryExpression: ['argument'],
        UpdateExpression: ['argument'],
        VariableDeclaration: ['declarations'],
        VariableDeclarator: ['id', 'init'],
        WhileStatement: ['test', 'body'],
        WithStatement: ['object', 'body'],
        YieldExpression: ['argument']
    };

    // unique id
    BREAK = {};
    SKIP = {};

    VisitorOption = {
        Break: BREAK,
        Skip: SKIP
    };

    function Reference(parent, key) {
        this.parent = parent;
        this.key = key;
    }

    Reference.prototype.replace = function replace(node) {
        this.parent[this.key] = node;
    };

    function Element(node, path, wrap, ref) {
        this.node = node;
        this.path = path;
        this.wrap = wrap;
        this.ref = ref;
    }

    function Controller() { }

    // API:
    // return property path array from root to current node
    Controller.prototype.path = function path() {
        var i, iz, j, jz, result, element;

        function addToPath(result, path) {
            if (isArray(path)) {
                for (j = 0, jz = path.length; j < jz; ++j) {
                    result.push(path[j]);
                }
            } else {
                result.push(path);
            }
        }

        // root node
        if (!this.__current.path) {
            return null;
        }

        // first node is sentinel, second node is root element
        result = [];
        for (i = 2, iz = this.__leavelist.length; i < iz; ++i) {
            element = this.__leavelist[i];
            addToPath(result, element.path);
        }
        addToPath(result, this.__current.path);
        return result;
    };

    // API:
    // return array of parent elements
    Controller.prototype.parents = function parents() {
        var i, iz, result;

        // first node is sentinel
        result = [];
        for (i = 1, iz = this.__leavelist.length; i < iz; ++i) {
            result.push(this.__leavelist[i].node);
        }

        return result;
    };

    // API:
    // return current node
    Controller.prototype.current = function current() {
        return this.__current.node;
    };

    Controller.prototype.__execute = function __execute(callback, element) {
        var previous, result;

        result = undefined;

        previous  = this.__current;
        this.__current = element;
        this.__state = null;
        if (callback) {
            result = callback.call(this, element.node, this.__leavelist[this.__leavelist.length - 1].node);
        }
        this.__current = previous;

        return result;
    };

    // API:
    // notify control skip / break
    Controller.prototype.notify = function notify(flag) {
        this.__state = flag;
    };

    // API:
    // skip child nodes of current node
    Controller.prototype.skip = function () {
        this.notify(SKIP);
    };

    // API:
    // break traversals
    Controller.prototype['break'] = function () {
        this.notify(BREAK);
    };

    Controller.prototype.__initialize = function(root, visitor) {
        this.visitor = visitor;
        this.root = root;
        this.__worklist = [];
        this.__leavelist = [];
        this.__current = null;
        this.__state = null;
    };

    Controller.prototype.traverse = function traverse(root, visitor) {
        var worklist,
            leavelist,
            element,
            node,
            nodeType,
            ret,
            key,
            current,
            current2,
            candidates,
            candidate,
            sentinel;

        this.__initialize(root, visitor);

        sentinel = {};

        // reference
        worklist = this.__worklist;
        leavelist = this.__leavelist;

        // initialize
        worklist.push(new Element(root, null, null, null));
        leavelist.push(new Element(null, null, null, null));

        while (worklist.length) {
            element = worklist.pop();

            if (element === sentinel) {
                element = leavelist.pop();

                ret = this.__execute(visitor.leave, element);

                if (this.__state === BREAK || ret === BREAK) {
                    return;
                }
                continue;
            }

            if (element.node) {

                ret = this.__execute(visitor.enter, element);

                if (this.__state === BREAK || ret === BREAK) {
                    return;
                }

                worklist.push(sentinel);
                leavelist.push(element);

                if (this.__state === SKIP || ret === SKIP) {
                    continue;
                }

                node = element.node;
                nodeType = element.wrap || node.type;
                candidates = VisitorKeys[nodeType];

                current = candidates.length;
                while ((current -= 1) >= 0) {
                    key = candidates[current];
                    candidate = node[key];
                    if (!candidate) {
                        continue;
                    }

                    if (!isArray(candidate)) {
                        worklist.push(new Element(candidate, key, null, null));
                        continue;
                    }

                    current2 = candidate.length;
                    while ((current2 -= 1) >= 0) {
                        if (!candidate[current2]) {
                            continue;
                        }
                        if ((nodeType === Syntax.ObjectExpression || nodeType === Syntax.ObjectPattern) && 'properties' === candidates[current]) {
                            element = new Element(candidate[current2], [key, current2], 'Property', null);
                        } else {
                            element = new Element(candidate[current2], [key, current2], null, null);
                        }
                        worklist.push(element);
                    }
                }
            }
        }
    };

    Controller.prototype.replace = function replace(root, visitor) {
        var worklist,
            leavelist,
            node,
            nodeType,
            target,
            element,
            current,
            current2,
            candidates,
            candidate,
            sentinel,
            outer,
            key;

        this.__initialize(root, visitor);

        sentinel = {};

        // reference
        worklist = this.__worklist;
        leavelist = this.__leavelist;

        // initialize
        outer = {
            root: root
        };
        element = new Element(root, null, null, new Reference(outer, 'root'));
        worklist.push(element);
        leavelist.push(element);

        while (worklist.length) {
            element = worklist.pop();

            if (element === sentinel) {
                element = leavelist.pop();

                target = this.__execute(visitor.leave, element);

                // node may be replaced with null,
                // so distinguish between undefined and null in this place
                if (target !== undefined && target !== BREAK && target !== SKIP) {
                    // replace
                    element.ref.replace(target);
                }

                if (this.__state === BREAK || target === BREAK) {
                    return outer.root;
                }
                continue;
            }

            target = this.__execute(visitor.enter, element);

            // node may be replaced with null,
            // so distinguish between undefined and null in this place
            if (target !== undefined && target !== BREAK && target !== SKIP) {
                // replace
                element.ref.replace(target);
                element.node = target;
            }

            if (this.__state === BREAK || target === BREAK) {
                return outer.root;
            }

            // node may be null
            node = element.node;
            if (!node) {
                continue;
            }

            worklist.push(sentinel);
            leavelist.push(element);

            if (this.__state === SKIP || target === SKIP) {
                continue;
            }

            nodeType = element.wrap || node.type;
            candidates = VisitorKeys[nodeType];

            current = candidates.length;
            while ((current -= 1) >= 0) {
                key = candidates[current];
                candidate = node[key];
                if (!candidate) {
                    continue;
                }

                if (!isArray(candidate)) {
                    worklist.push(new Element(candidate, key, null, new Reference(node, key)));
                    continue;
                }

                current2 = candidate.length;
                while ((current2 -= 1) >= 0) {
                    if (!candidate[current2]) {
                        continue;
                    }
                    if (nodeType === Syntax.ObjectExpression && 'properties' === candidates[current]) {
                        element = new Element(candidate[current2], [key, current2], 'Property', new Reference(candidate, current2));
                    } else {
                        element = new Element(candidate[current2], [key, current2], null, new Reference(candidate, current2));
                    }
                    worklist.push(element);
                }
            }
        }

        return outer.root;
    };

    function traverse(root, visitor) {
        var controller = new Controller();
        return controller.traverse(root, visitor);
    }

    function replace(root, visitor) {
        var controller = new Controller();
        return controller.replace(root, visitor);
    }

    function extendCommentRange(comment, tokens) {
        var target;

        target = upperBound(tokens, function search(token) {
            return token.range[0] > comment.range[0];
        });

        comment.extendedRange = [comment.range[0], comment.range[1]];

        if (target !== tokens.length) {
            comment.extendedRange[1] = tokens[target].range[0];
        }

        target -= 1;
        if (target >= 0) {
            comment.extendedRange[0] = tokens[target].range[1];
        }

        return comment;
    }

    function attachComments(tree, providedComments, tokens) {
        // At first, we should calculate extended comment ranges.
        var comments = [], comment, len, i, cursor;

        if (!tree.range) {
            throw new Error('attachComments needs range information');
        }

        // tokens array is empty, we attach comments to tree as 'leadingComments'
        if (!tokens.length) {
            if (providedComments.length) {
                for (i = 0, len = providedComments.length; i < len; i += 1) {
                    comment = deepCopy(providedComments[i]);
                    comment.extendedRange = [0, tree.range[0]];
                    comments.push(comment);
                }
                tree.leadingComments = comments;
            }
            return tree;
        }

        for (i = 0, len = providedComments.length; i < len; i += 1) {
            comments.push(extendCommentRange(deepCopy(providedComments[i]), tokens));
        }

        // This is based on John Freeman's implementation.
        cursor = 0;
        traverse(tree, {
            enter: function (node) {
                var comment;

                while (cursor < comments.length) {
                    comment = comments[cursor];
                    if (comment.extendedRange[1] > node.range[0]) {
                        break;
                    }

                    if (comment.extendedRange[1] === node.range[0]) {
                        if (!node.leadingComments) {
                            node.leadingComments = [];
                        }
                        node.leadingComments.push(comment);
                        comments.splice(cursor, 1);
                    } else {
                        cursor += 1;
                    }
                }

                // already out of owned node
                if (cursor === comments.length) {
                    return VisitorOption.Break;
                }

                if (comments[cursor].extendedRange[0] > node.range[1]) {
                    return VisitorOption.Skip;
                }
            }
        });

        cursor = 0;
        traverse(tree, {
            leave: function (node) {
                var comment;

                while (cursor < comments.length) {
                    comment = comments[cursor];
                    if (node.range[1] < comment.extendedRange[0]) {
                        break;
                    }

                    if (node.range[1] === comment.extendedRange[0]) {
                        if (!node.trailingComments) {
                            node.trailingComments = [];
                        }
                        node.trailingComments.push(comment);
                        comments.splice(cursor, 1);
                    } else {
                        cursor += 1;
                    }
                }

                // already out of owned node
                if (cursor === comments.length) {
                    return VisitorOption.Break;
                }

                if (comments[cursor].extendedRange[0] > node.range[1]) {
                    return VisitorOption.Skip;
                }
            }
        });

        return tree;
    }

    exports.version = '1.5.1-dev';
    exports.Syntax = Syntax;
    exports.traverse = traverse;
    exports.replace = replace;
    exports.attachComments = attachComments;
    exports.VisitorKeys = VisitorKeys;
    exports.VisitorOption = VisitorOption;
    exports.Controller = Controller;
}));
/* vim: set sw=4 ts=4 et tw=80 : */

},{}],41:[function(require,module,exports){

},{}],42:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

}).call(this,require("JkpR2F"))
},{"JkpR2F":43}],43:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};

process.nextTick = (function () {
    var canSetImmediate = typeof window !== 'undefined'
    && window.setImmediate;
    var canPost = typeof window !== 'undefined'
    && window.postMessage && window.addEventListener
    ;

    if (canSetImmediate) {
        return function (f) { return window.setImmediate(f) };
    }

    if (canPost) {
        var queue = [];
        window.addEventListener('message', function (ev) {
            var source = ev.source;
            if ((source === window || source === null) && ev.data === 'process-tick') {
                ev.stopPropagation();
                if (queue.length > 0) {
                    var fn = queue.shift();
                    fn();
                }
            }
        }, true);

        return function nextTick(fn) {
            queue.push(fn);
            window.postMessage('process-tick', '*');
        };
    }

    return function nextTick(fn) {
        setTimeout(fn, 0);
    };
})();

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
}

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};

},{}],44:[function(require,module,exports){
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["filbert"] = factory();
	else
		root["filbert"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Sk = __webpack_require__(1);
	var transform = __webpack_require__(2);
	var improveError = __webpack_require__(3);

	var defaultOptions = {
		locations: true,
		ranges: true,
		sippets: true,
		filename: 'file.py',
		useLet: false,
		friendlyErrors: true
	};

	function rangeToLoc(x, offsets) {
		var best = -1;
		for ( var i = 0; i < offsets.length; ++i ) {
			if ( offsets[i] > x ) break;
			best = i;
		}
		var off = best >= 0 ? offsets[best] : 0;
		return {line: best+2, column: x - off, pos: x };
	}

	function locToRange(line, col, offsets) {
		var loff = 0;
		if ( line > 2 && (line-2) < offsets.length ) loff = offsets[line-2];
		return loff + col;
	}

	function decorate(n, code, offsets, options) {
		var numrange = locToRange(n.lineno, n.col_offset, offsets);

		var range = [
			numrange === numrange ? numrange : Infinity,
			numrange === numrange ? numrange : -Infinity
		];
		
		if ( n.value ) range[1] += (n.value.length);

		if ( n.children )
		for ( var i = 0; i < n.children.length; ++i ) {
			var r = decorate(n.children[i], code, offsets, options);
			range[0] = Math.min(range[0], r[0]);
			range[1] = Math.max(range[1], r[1]);
		}

		if ( options.ranges ) n.range = range;
		if ( options.locations ) {
			n.loc = {
				start: rangeToLoc(range[0], offsets),
				end: rangeToLoc(range[1], offsets),
			};
		}
		if ( options.snippets ) n.str = code.substring(range[0], range[1]);

		return range;
	}

	function parser(code, options) {
		var lineOffsets = [];
		var idx = -1;
		var parse, ast;
		options = options || {};
		for ( var opt in defaultOptions ) {
			if ( !(opt in options) ) options[opt] = defaultOptions[opt];
		}

		while ( true ) {
			idx = code.indexOf("\n", idx+1);
			if ( idx < 0 ) break;
			lineOffsets.push(idx+1);
		}

		try {
			parse = Sk.parse(options.filename, code);
			decorate(parse.cst, code, lineOffsets, options);
			parse.flags = parse.flags | Sk.Parser.CO_FUTURE_UNICODE_LITERALS; //Enable future unicode literals
			ast = Sk.astFromParse(parse.cst, options.filename, parse.flags);
		} catch ( e ) {
			if ( e.extra && e.extra.node ) decorate(e.extra.node, code, lineOffsets, options);
			improveError(e, options, code);
			if ( e.loc ) {
				e.pos = locToRange(e.loc.line, e.loc.column, lineOffsets);
			}
			throw e;
		}

		//console.log(JSON.stringify(ast, null, "  "));
		var ctx = {varType: (options.useLet ? 'let' : 'var')};
		var js = transform(ast, ctx);
		return js;
	}

	module.exports = {
		parse: parser,
		pythonRuntime: __webpack_require__(4),
		defaultOptions: {runtimeParamName: '__pythonRuntime'}
	};

/***/ },
/* 1 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {
	/* ---- /Users/rob/skulpty/lib/preamble.js ---- */ 

	var goog = {
		global: global
	};

	var COMPILED = false;

	goog.exportSymbol = function() {};
	goog.require = function() {};

	goog.inherits = function(childCtor, parentCtor) {
	  if ( !parentCtor ) throw new Error("Cant inherit from undefined?");
	  /** @constructor */
	  function tempCtor() {};
	  tempCtor.prototype = parentCtor.prototype;
	  childCtor.superClass_ = parentCtor.prototype;
	  childCtor.prototype = new tempCtor();
	  /** @override */
	  childCtor.prototype.constructor = childCtor;
	};

	goog.asserts = {
		assert: function(what, why) {
	        if ( !what ) throw new Error("AssertionFailed:" + why);
	    }
	};

	var Sk = Sk || {};

	Sk.builtin = Sk.builtin  ||  {};

	Sk.builtin.bool = Boolean;
	Sk.builtin.int_ = function Int(x) {
	  this.v = x;
	};

	Sk.builtin.int_.prototype.threshold$ = Infinity;
	Sk.builtin.int_.prototype.valueOf = function() { return this.v.valueOf(); };

	Sk.builtin.tuple = function(x) {
	  this.v = Array.prototype.slice.call(x, 0);
	};
	Sk.builtin.tuple.prototype.sq$length = function() { return this.length; };

	Sk.builtin.float_ = Number;
	Sk.builtin.long = Number;
	Sk.builtin.func = function(fx) { return fx; };


	/* ---- /Users/rob/skulpty/lib/../node_modules/skulpt/src/type.js ---- */ 

	if(Sk.builtin === undefined) {
	    Sk.builtin = {};
	}

	/**
	 * Maps Python dunder names to the Skulpt Javascript function names that
	 * implement them.
	 *
	 * Note: __add__, __mul__, and __rmul__ can be used for either numeric or
	 * sequence types. Here, they default to the numeric versions (i.e. nb$add,
	 * nb$multiply, and nb$reflected_multiply). This works because Sk.abstr.binary_op_
	 * checks for the numeric shortcuts and not the sequence shortcuts when computing
	 * a binary operation.
	 *
	 * Because many of these functions are used in contexts in which Skulpt does not
	 * [yet] handle suspensions, the assumption is that they must not suspend. However,
	 * some of these built-in functions are acquiring 'canSuspend' arguments to signal
	 * where this is not the case. These need to be spliced out of the argument list before
	 * it is passed to python. Array values in this map contain [dunderName, argumentIdx],
	 * where argumentIdx specifies the index of the 'canSuspend' boolean argument.
	 *
	 * @type {Object}
	 */
	Sk.dunderToSkulpt = {
	    "__eq__": "ob$eq",
	    "__ne__": "ob$ne",
	    "__lt__": "ob$lt",
	    "__le__": "ob$le",
	    "__gt__": "ob$gt",
	    "__ge__": "ob$ge",
	    "__hash__": "tp$hash",
	    "__abs__": "nb$abs",
	    "__neg__": "nb$negative",
	    "__pos__": "nb$positive",
	    "__int__": "nb$int_",
	    "__long__": "nb$lng",
	    "__float__": "nb$float_",
	    "__add__": "nb$add",
	    "__radd__": "nb$reflected_add",
	    "__sub__": "nb$subtract",
	    "__rsub__": "nb$reflected_subtract",
	    "__mul__": "nb$multiply",
	    "__rmul__": "nb$reflected_multiply",
	    "__div__": "nb$divide",
	    "__rdiv__": "nb$reflected_divide",
	    "__floordiv__": "nb$floor_divide",
	    "__rfloordiv__": "nb$reflected_floor_divide",
	    "__mod__": "nb$remainder",
	    "__rmod__": "nb$reflected_remainder",
	    "__divmod__": "nb$divmod",
	    "__rdivmod__": "nb$reflected_divmod",
	    "__pow__": "nb$power",
	    "__rpow__": "nb$reflected_power",
	    "__contains__": "sq$contains",
	    "__len__": ["sq$length", 0]
	};

	/**
	 *
	 * @constructor
	 *
	 * @param {*} name name or object to get type of, if only one arg
	 *
	 * @param {Sk.builtin.tuple=} bases
	 *
	 * @param {Object=} dict
	 *
	 *
	 * This type represents the type of `type'. *Calling* an instance of
	 * this builtin type named "type" creates class objects. The resulting
	 * class objects will have various tp$xyz attributes on them that allow
	 * for the various operations on that object.
	 *
	 * calling the type or calling an instance of the type? or both?
	 */
	Sk.builtin.type = function (name, bases, dict) {
	    var mro;
	    var obj;
	    var klass;
	    var v;
	    if (bases === undefined && dict === undefined) {
	        // 1 arg version of type()
	        // the argument is an object, not a name and returns a type object
	        obj = name;
	        return obj.ob$type;
	    } else {

	        // argument dict must be of type dict
	        if(dict.tp$name !== "dict") {
	            throw new Sk.builtin.TypeError("type() argument 3 must be dict, not " + Sk.abstr.typeName(dict));
	        }

	        // checks if name must be string
	        if(!Sk.builtin.checkString(name)) {
	            throw new Sk.builtin.TypeError("type() argument 1 must be str, not " + Sk.abstr.typeName(name));
	        }

	        // argument bases must be of type tuple
	        if(bases.tp$name !== "tuple") {
	            throw new Sk.builtin.TypeError("type() argument 2 must be tuple, not " + Sk.abstr.typeName(bases));
	        }

	        // type building version of type

	        // dict is the result of running the classes code object
	        // (basically the dict of functions). those become the prototype
	        // object of the class).
	        /**
	        * @constructor
	        */
	        klass = function (kwdict, varargseq, kws, args, canSuspend) {
	            var init;
	            var self = this;
	            var s;
	            var args_copy;
	            if (!(this instanceof klass)) {
	                return new klass(kwdict, varargseq, kws, args, canSuspend);
	            }

	            args = args || [];
	            self["$d"] = new Sk.builtin.dict([]);
	            self["$d"].mp$ass_subscript(new Sk.builtin.str("__dict__"), self["$d"]);

	            if (klass.prototype.tp$base !== undefined) {
	                if (klass.prototype.tp$base.sk$klass) {
	                    klass.prototype.tp$base.call(this, kwdict, varargseq, kws, args.slice(), canSuspend);
	                } else {
	                    // Call super constructor if subclass of a builtin
	                    args_copy = args.slice();
	                    args_copy.unshift(klass, this);
	                    Sk.abstr.superConstructor.apply(undefined, args_copy);
	                }
	            }

	            init = Sk.builtin.type.typeLookup(self.ob$type, "__init__");
	            if (init !== undefined) {
	                // return should be None or throw a TypeError otherwise
	                args.unshift(self);
	                s = Sk.misceval.applyOrSuspend(init, kwdict, varargseq, kws, args);

	                return (function doSusp(s) {
	                    if (s instanceof Sk.misceval.Suspension) {
	                        // TODO I (Meredydd) don't know whether we are ever called
	                        // from anywhere except Sk.misceval.applyOrSuspend().
	                        // If we're not, we don't need a canSuspend parameter at all.
	                        if (canSuspend) {
	                            return new Sk.misceval.Suspension(doSusp, s);
	                        } else {
	                            return Sk.misceval.retryOptionalSuspensionOrThrow(s);
	                        }
	                    } else {
	                        return self;
	                    }
	                })(s);
	            }

	            return self;
	        };

	        var _name = Sk.ffi.remapToJs(name); // unwrap name string to js for latter use

	        var inheritsFromObject = false, inheritsBuiltin = false;

	        if (bases.v.length === 0 && Sk.python3) {
	            // new style class, inherits from object by default
	            inheritsFromObject = true;
	            Sk.abstr.setUpInheritance(_name, klass, Sk.builtin.object);
	        }

	        var parent, it, firstAncestor, builtin_bases = [];
	        // Set up inheritance from any builtins
	        for (it = bases.tp$iter(), parent = it.tp$iternext(); parent !== undefined; parent = it.tp$iternext()) {
	            if (firstAncestor === undefined) {
	                firstAncestor = parent;
	            }
	            if (parent.prototype instanceof Sk.builtin.object || parent === Sk.builtin.object) {

	                while (parent.sk$klass && parent.prototype.tp$base) {
	                    parent = parent.prototype.tp$base;
	                }

	                if (!parent.sk$klass && builtin_bases.indexOf(parent) < 0) {
	                    builtin_bases.push(parent);
	                }

	                // This class inherits from Sk.builtin.object at some level
	                inheritsFromObject = true;
	            }
	        }

	        if (builtin_bases.length > 1) {
	            throw new Sk.builtin.TypeError("Multiple inheritance with more than one builtin type is unsupported");
	        }

	        // Javascript does not support multiple inheritance, so only the first
	        // base (if any) will directly inherit in Javascript
	        if (firstAncestor !== undefined) {
	            goog.inherits(klass, firstAncestor);

	            if (firstAncestor.prototype instanceof Sk.builtin.object || firstAncestor === Sk.builtin.object) {
	                klass.prototype.tp$base = firstAncestor;
	            }
	        }

	        klass.prototype.tp$name = _name;
	        klass.prototype.ob$type = Sk.builtin.type.makeIntoTypeObj(_name, klass);

	        if (!inheritsFromObject) {
	            // old style class, does not inherit from object
	            klass.prototype.tp$getattr = Sk.builtin.object.prototype.GenericGetAttr;
	            klass.prototype.tp$setattr = Sk.builtin.object.prototype.GenericSetAttr;
	        }

	        // set __module__ if not present (required by direct type(name, bases, dict) calls)
	        var module_lk = new Sk.builtin.str("__module__");
	        if(dict.mp$lookup(module_lk) === undefined) {
	            dict.mp$ass_subscript(module_lk, Sk.globals["__name__"]);
	        }

	        // copy properties into our klass object
	        // uses python iter methods
	        var k;
	        for (it = dict.tp$iter(), k = it.tp$iternext(); k !== undefined; k = it.tp$iternext()) {
	            v = dict.mp$subscript(k);
	            if (v === undefined) {
	                v = null;
	            }
	            klass.prototype[k.v] = v;
	            klass[k.v] = v;
	        }

	        klass["__class__"] = klass;
	        klass["__name__"] = name;
	        klass.sk$klass = true;
	        klass.prototype.tp$descr_get = function () {
	            goog.asserts.fail("in type tp$descr_get");
	        };
	        klass.prototype["$r"] = function () {
	            var cname;
	            var mod;
	            // TODO use Sk.abstr.gattr() here so __repr__ can be dynamically provided (eg by __getattr__())
	            var reprf = this.tp$getattr("__repr__");
	            if (reprf !== undefined && reprf.im_func !== Sk.builtin.object.prototype["__repr__"]) {
	                return Sk.misceval.apply(reprf, undefined, undefined, undefined, []);
	            }

	            if ((klass.prototype.tp$base !== undefined) &&
	                (klass.prototype.tp$base !== Sk.builtin.object) &&
	                (klass.prototype.tp$base.prototype["$r"] !== undefined)) {
	                // If subclass of a builtin which is not object, use that class' repr
	                return klass.prototype.tp$base.prototype["$r"].call(this);
	            } else {
	                // Else, use default repr for a user-defined class instance
	                mod = dict.mp$subscript(module_lk); // lookup __module__
	                cname = "";
	                if (mod) {
	                    cname = mod.v + ".";
	                }
	                return new Sk.builtin.str("<" + cname + _name + " object>");
	            }
	        };
	        klass.prototype.tp$str = function () {
	            // TODO use Sk.abstr.gattr() here so __str__ can be dynamically provided (eg by __getattr__())
	            var strf = this.tp$getattr("__str__");
	            if (strf !== undefined && strf.im_func !== Sk.builtin.object.prototype["__str__"]) {
	                return Sk.misceval.apply(strf, undefined, undefined, undefined, []);
	            }
	            if ((klass.prototype.tp$base !== undefined) &&
	                (klass.prototype.tp$base !== Sk.builtin.object) &&
	                (klass.prototype.tp$base.prototype.tp$str !== undefined)) {
	                // If subclass of a builtin which is not object, use that class' repr
	                return klass.prototype.tp$base.prototype.tp$str.call(this);
	            }
	            return this["$r"]();
	        };
	        klass.prototype.tp$length = function (canSuspend) {
	            var r = Sk.misceval.chain(Sk.abstr.gattr(this, "__len__", canSuspend), function(lenf) {
	                return Sk.misceval.applyOrSuspend(lenf, undefined, undefined, undefined, []);
	            });
	            return canSuspend ? r : Sk.misceval.retryOptionalSuspensionOrThrow(r);
	        };
	        klass.prototype.tp$call = function (args, kw) {
	            return Sk.misceval.chain(Sk.abstr.gattr(this, "__call__", true), function(callf) {
	                return Sk.misceval.applyOrSuspend(callf, undefined, undefined, kw, args);
	            });
	        };
	        klass.prototype.tp$iter = function () {
	            var iterf = Sk.abstr.gattr(this, "__iter__", false);
	            return Sk.misceval.callsim(iterf);
	        };
	        klass.prototype.tp$iternext = function (canSuspend) {
	            var self = this;
	            var r = Sk.misceval.chain(
	                Sk.misceval.tryCatch(function() {
	                    return Sk.abstr.gattr(self, "next", canSuspend);
	                }, function(e) {
	                    if (e instanceof Sk.builtin.AttributeError) {
	                        throw new Sk.builtin.TypeError("'" + Sk.abstr.typeName(self) + "' object is not iterable");
	                    } else {
	                        throw e;
	                    }
	                }),
	            function(/** {Object} */ iternextf) {
	                return Sk.misceval.tryCatch(function() {
	                    return Sk.misceval.callsimOrSuspend(iternextf);
	                }, function(e) {
	                    if (e instanceof Sk.builtin.StopIteration) {
	                        return undefined;
	                    } else {
	                        throw e;
	                    }
	                });
	            });

	            return canSuspend ? r : Sk.misceval.retryOptionalSuspensionOrThrow(r);
	        };

	        klass.prototype.tp$getitem = function (key, canSuspend) {
	            var getf = Sk.abstr.gattr(this, "__getitem__", canSuspend), r;
	            if (getf !== undefined) {
	                r = Sk.misceval.applyOrSuspend(getf, undefined, undefined, undefined, [key]);
	                return canSuspend ? r : Sk.misceval.retryOptionalSuspensionOrThrow(r);
	            }
	            throw new Sk.builtin.TypeError("'" + Sk.abstr.typeName(this) + "' object does not support indexing");
	        };
	        klass.prototype.tp$setitem = function (key, value, canSuspend) {
	            var setf = Sk.abstr.gattr(this, "__setitem__", canSuspend), r;
	            if (setf !== undefined) {
	                r = Sk.misceval.applyOrSuspend(setf, undefined, undefined, undefined, [key, value]);
	                return canSuspend ? r : Sk.misceval.retryOptionalSuspensionOrThrow(r);
	            }
	            throw new Sk.builtin.TypeError("'" + Sk.abstr.typeName(this) + "' object does not support item assignment");
	        };

	        if (bases) {
	            //print("building mro for", name);
	            //for (var i = 0; i < bases.length; ++i)
	            //print("base[" + i + "]=" + bases[i].tp$name);
	            klass["$d"] = new Sk.builtin.dict([]);
	            klass["$d"].mp$ass_subscript(Sk.builtin.type.basesStr_, bases);
	            mro = Sk.builtin.type.buildMRO(klass);
	            klass["$d"].mp$ass_subscript(Sk.builtin.type.mroStr_, mro);
	            klass.tp$mro = mro;
	            //print("mro result", Sk.builtin.repr(mro).v);
	        }

	        // fix for class attributes
	        klass.tp$setattr = Sk.builtin.type.prototype.tp$setattr;

	        var shortcutDunder = function (skulpt_name, magic_name, magic_func, canSuspendIdx) {
	            klass.prototype[skulpt_name] = function () {
	                var args = Array.prototype.slice.call(arguments), canSuspend;
	                args.unshift(magic_func, this);

	                if (canSuspendIdx) {
	                    canSuspend = args[canSuspendIdx+1];
	                    args.splice(canSuspendIdx+1, 1);
	                    if (canSuspend) {
	                        return Sk.misceval.callsimOrSuspend.apply(undefined, args);
	                    }
	                }
	                return Sk.misceval.callsim.apply(undefined, args);
	            };
	        };

	        // Register skulpt shortcuts to magic methods defined by this class.
	        // TODO: This is somewhat problematic, as it means that dynamically defined
	        // methods (eg those returned by __getattr__()) cannot be used by these magic
	        // functions.
	        var dunder, skulpt_name, canSuspendIdx;
	        for (dunder in Sk.dunderToSkulpt) {
	            skulpt_name = Sk.dunderToSkulpt[dunder];
	            if (typeof(skulpt_name) === "string") {
	                canSuspendIdx = null;
	            } else {
	                canSuspendIdx = skulpt_name[1];
	                skulpt_name = skulpt_name[0];
	            }

	            if (klass[dunder]) {
	                // scope workaround
	                shortcutDunder(skulpt_name, dunder, klass[dunder], canSuspendIdx);
	            }
	        }

	        return klass;
	    }

	};

	/**
	 *
	 */
	Sk.builtin.type.makeTypeObj = function (name, newedInstanceOfType) {
	    Sk.builtin.type.makeIntoTypeObj(name, newedInstanceOfType);
	    return newedInstanceOfType;
	};

	Sk.builtin.type.makeIntoTypeObj = function (name, t) {
	    goog.asserts.assert(name !== undefined);
	    goog.asserts.assert(t !== undefined);
	    t.ob$type = Sk.builtin.type;
	    t.tp$name = name;
	    t["$r"] = function () {
	        var ctype;
	        var mod = t.__module__;
	        var cname = "";
	        if (mod) {
	            cname = mod.v + ".";
	        }
	        ctype = "class";
	        if (!mod && !t.sk$klass && !Sk.python3) {
	            ctype = "type";
	        }
	        return new Sk.builtin.str("<" + ctype + " '" + cname + t.tp$name + "'>");
	    };
	    t.tp$str = undefined;
	    t.tp$getattr = Sk.builtin.type.prototype.tp$getattr;
	    t.tp$setattr = Sk.builtin.object.prototype.GenericSetAttr;
	    t.tp$richcompare = Sk.builtin.type.prototype.tp$richcompare;
	    t.sk$type = true;

	    return t;
	};

	Sk.builtin.type.ob$type = Sk.builtin.type;
	Sk.builtin.type.tp$name = "type";
	Sk.builtin.type["$r"] = function () {
	    if(Sk.python3) {
	        return new Sk.builtin.str("<class 'type'>");
	    } else {
	        return new Sk.builtin.str("<type 'type'>");
	    }
	};

	//Sk.builtin.type.prototype.tp$descr_get = function() { print("in type descr_get"); };

	//Sk.builtin.type.prototype.tp$name = "type";

	// basically the same as GenericGetAttr except looks in the proto instead
	Sk.builtin.type.prototype.tp$getattr = function (name) {
	    var res;
	    var tp = this;
	    var descr;
	    var f;

	    if (this["$d"]) {
	        res = this["$d"].mp$lookup(new Sk.builtin.str(name));
	        if (res !== undefined) {
	            return res;
	        }
	    }

	    descr = Sk.builtin.type.typeLookup(tp, name);

	    //print("type.tpgetattr descr", descr, descr.tp$name, descr.func_code, name);
	    if (descr !== undefined && descr !== null && descr.ob$type !== undefined) {
	        f = descr.ob$type.tp$descr_get;
	        // todo;if (f && descr.tp$descr_set) // is a data descriptor if it has a set
	        // return f.call(descr, this, this.ob$type);
	    }

	    if (f) {
	        // non-data descriptor
	        return f.call(descr, null, tp);
	    }

	    if (descr !== undefined) {
	        return descr;
	    }

	    return undefined;
	};

	Sk.builtin.type.prototype.tp$setattr = function (name, value) {
	    // class attributes are direct properties of the object
	    this[name] = value;
	};

	Sk.builtin.type.typeLookup = function (type, name) {
	    var mro = type.tp$mro;
	    var pyname = new Sk.builtin.str(name);
	    var base;
	    var res;
	    var i;

	    // todo; probably should fix this, used for builtin types to get stuff
	    // from prototype
	    if (!mro) {
	        if (type.prototype) {
	            return type.prototype[name];
	        }
	        return undefined;
	    }

	    for (i = 0; i < mro.v.length; ++i) {
	        base = mro.v[i];
	        if (base.hasOwnProperty(name)) {
	            return base[name];
	        }
	        res = base["$d"].mp$lookup(pyname);
	        if (res !== undefined) {
	            return res;
	        }
	        if (base.prototype && base.prototype[name] !== undefined) {
	            return base.prototype[name];
	        }
	    }

	    return undefined;
	};

	Sk.builtin.type.mroMerge_ = function (seqs) {
	    /*
	     var tmp = [];
	     for (var i = 0; i < seqs.length; ++i)
	     {
	     tmp.push(new Sk.builtin.list(seqs[i]));
	     }
	     print(Sk.builtin.repr(new Sk.builtin.list(tmp)).v);
	     */
	    var seq;
	    var i;
	    var next;
	    var k;
	    var sseq;
	    var j;
	    var cand;
	    var cands;
	    var res = [];
	    for (; ;) {
	        for (i = 0; i < seqs.length; ++i) {
	            seq = seqs[i];
	            if (seq.length !== 0) {
	                break;
	            }
	        }
	        if (i === seqs.length) { // all empty
	            return res;
	        }
	        cands = [];
	        for (i = 0; i < seqs.length; ++i) {
	            seq = seqs[i];
	            //print("XXX", Sk.builtin.repr(new Sk.builtin.list(seq)).v);
	            if (seq.length !== 0) {
	                cand = seq[0];
	                //print("CAND", Sk.builtin.repr(cand).v);
	                OUTER:
	                    for (j = 0; j < seqs.length; ++j) {
	                        sseq = seqs[j];
	                        for (k = 1; k < sseq.length; ++k) {
	                            if (sseq[k] === cand) {
	                                break OUTER;
	                            }
	                        }
	                    }

	                // cand is not in any sequences' tail -> constraint-free
	                if (j === seqs.length) {
	                    cands.push(cand);
	                }
	            }
	        }

	        if (cands.length === 0) {
	            throw new Sk.builtin.TypeError("Inconsistent precedences in type hierarchy");
	        }

	        next = cands[0];
	        // append next to result and remove from sequences
	        res.push(next);
	        for (i = 0; i < seqs.length; ++i) {
	            seq = seqs[i];
	            if (seq.length > 0 && seq[0] === next) {
	                seq.splice(0, 1);
	            }
	        }
	    }
	};

	Sk.builtin.type.buildMRO_ = function (klass) {
	    // MERGE(klass + mro(bases) + bases)
	    var i;
	    var bases;
	    var all = [
	        [klass]
	    ];

	    //Sk.debugout("buildMRO for", klass.tp$name);

	    var kbases = klass["$d"].mp$subscript(Sk.builtin.type.basesStr_);
	    for (i = 0; i < kbases.v.length; ++i) {
	        all.push(Sk.builtin.type.buildMRO_(kbases.v[i]));
	    }

	    bases = [];
	    for (i = 0; i < kbases.v.length; ++i) {
	        bases.push(kbases.v[i]);
	    }
	    all.push(bases);

	    return Sk.builtin.type.mroMerge_(all);
	};

	/*
	 * C3 MRO (aka CPL) linearization. Figures out which order to search through
	 * base classes to determine what should override what. C3 does the "right
	 * thing", and it's what Python has used since 2.3.
	 *
	 * Kind of complicated to explain, but not really that complicated in
	 * implementation. Explanations:
	 *
	 * http://people.csail.mit.edu/jrb/goo/manual.43/goomanual_55.html
	 * http://www.python.org/download/releases/2.3/mro/
	 * http://192.220.96.201/dylan/linearization-oopsla96.html
	 *
	 * This implementation is based on a post by Samuele Pedroni on python-dev
	 * (http://mail.python.org/pipermail/python-dev/2002-October/029176.html) when
	 * discussing its addition to Python.
	 */
	Sk.builtin.type.buildMRO = function (klass) {
	    return new Sk.builtin.tuple(Sk.builtin.type.buildMRO_(klass));
	};

	Sk.builtin.type.prototype.tp$richcompare = function (other, op) {
	    var r2;
	    var r1;
	    if (other.ob$type != Sk.builtin.type) {
	        return undefined;
	    }
	    if (!this["$r"] || !other["$r"]) {
	        return undefined;
	    }
	    r1 = new Sk.builtin.str(this["$r"]().v.slice(1,6));
	    r2 = new Sk.builtin.str(other["$r"]().v.slice(1,6));
	    if (this["$r"]().v.slice(1,6) !== "class") {
	        r1 = this["$r"]();
	        r2 = other["$r"]();
	    }
	    return r1.tp$richcompare(r2, op);
	};



	/* ---- /Users/rob/skulpty/lib/../node_modules/skulpt/src/abstract.js ---- */ 

	/**
	 * @namespace Sk.abstr
	 *
	 */
	Sk.abstr = {};

	//
	// Number
	//

	Sk.abstr.typeName = function (v) {
	    var vtypename;
	    if (v.tp$name !== undefined) {
	        vtypename = v.tp$name;
	    } else {
	        vtypename = "<invalid type>";
	    }
	    return vtypename;
	};

	Sk.abstr.binop_type_error = function (v, w, name) {
	    var vtypename = Sk.abstr.typeName(v),
	        wtypename = Sk.abstr.typeName(w);

	    throw new Sk.builtin.TypeError("unsupported operand type(s) for " + name + ": '" + vtypename + "' and '" + wtypename + "'");
	};

	Sk.abstr.unop_type_error = function (v, name) {
	    var vtypename = Sk.abstr.typeName(v),
	        uop = {
	            "UAdd"  : "+",
	            "USub"  : "-",
	            "Invert": "~"
	        }[name];

	    throw new Sk.builtin.TypeError("bad operand type for unary " + uop + ": '" + vtypename + "'");
	};

	/**
	 * lookup and return the LHS object slot function method.  This coudl be either a builtin slot function or a dunder method defined by the user.
	 * @param obj
	 * @param name
	 * @returns {Object|null|undefined}
	 * @private
	 */
	Sk.abstr.boNameToSlotFuncLhs_ = function (obj, name) {
	    if (obj === null) {
	        return undefined;
	    }

	    switch (name) {
	    case "Add":
	        return obj.nb$add ? obj.nb$add : obj["__add__"];
	    case "Sub":
	        return obj.nb$subtract ? obj.nb$subtract : obj["__sub__"];
	    case "Mult":
	        return obj.nb$multiply ? obj.nb$multiply : obj["__mul__"];
	    case "Div":
	        return obj.nb$divide ? obj.nb$divide : obj["__div__"];
	    case "FloorDiv":
	        return obj.nb$floor_divide ? obj.nb$floor_divide : obj["__floordiv__"];
	    case "Mod":
	        return obj.nb$remainder ? obj.nb$remainder : obj["__mod__"];
	    case "DivMod":
	        return obj.nb$divmod ? obj.nb$divmod : obj["__divmod__"];
	    case "Pow":
	        return obj.nb$power ? obj.nb$power : obj["__pow__"];
	    case "LShift":
	        return obj.nb$lshift ? obj.nb$lshift : obj["__lshift__"];
	    case "RShift":
	        return obj.nb$rshift ? obj.nb$rshift : obj["__rshift__"];
	    case "BitAnd":
	        return obj.nb$and ? obj.nb$and : obj["__and__"];
	    case "BitXor":
	        return obj.nb$xor ? obj.nb$xor : obj["__xor__"];
	    case "BitOr":
	        return obj.nb$or ? obj.nb$or : obj["__or__"];
	    }
	};

	Sk.abstr.boNameToSlotFuncRhs_ = function (obj, name) {
	    if (obj === null) {
	        return undefined;
	    }

	    switch (name) {
	    case "Add":
	        return obj.nb$reflected_add ? obj.nb$reflected_add : obj["__radd__"];
	    case "Sub":
	        return obj.nb$reflected_subtract ? obj.nb$reflected_subtract : obj["__rsub__"];
	    case "Mult":
	        return obj.nb$reflected_multiply ? obj.nb$reflected_multiply : obj["__rmul__"];
	    case "Div":
	        return obj.nb$reflected_divide ? obj.nb$reflected_divide : obj["__rdiv__"];
	    case "FloorDiv":
	        return obj.nb$reflected_floor_divide ? obj.nb$reflected_floor_divide : obj["__rfloordiv__"];
	    case "Mod":
	        return obj.nb$reflected_remainder ? obj.nb$reflected_remainder : obj["__rmod__"];
	    case "DivMod":
	        return obj.nb$reflected_divmod ? obj.nb$reflected_divmod : obj["__rdivmod__"];
	    case "Pow":
	        return obj.nb$reflected_power ? obj.nb$reflected_power : obj["__rpow__"];
	    case "LShift":
	        return obj.nb$reflected_lshift ? obj.nb$reflected_lshift : obj["__rlshift__"];
	    case "RShift":
	        return obj.nb$reflected_rshift ? obj.nb$reflected_rshift : obj["__rrshift__"];
	    case "BitAnd":
	        return obj.nb$reflected_and ? obj.nb$reflected_and : obj["__rand__"];
	    case "BitXor":
	        return obj.nb$reflected_xor ? obj.nb$reflected_xor : obj["__rxor__"];
	    case "BitOr":
	        return obj.nb$reflected_or ? obj.nb$reflected_or : obj["__ror__"];
	    }
	};

	Sk.abstr.iboNameToSlotFunc_ = function (obj, name) {
	    switch (name) {
	    case "Add":
	        return obj.nb$inplace_add ? obj.nb$inplace_add : obj["__iadd__"];
	    case "Sub":
	        return obj.nb$inplace_subtract ? obj.nb$inplace_subtract : obj["__isub__"];
	    case "Mult":
	        return obj.nb$inplace_multiply ? obj.nb$inplace_multiply : obj["__imul__"];
	    case "Div":
	        return obj.nb$inplace_divide ? obj.nb$inplace_divide : obj["__idiv__"];
	    case "FloorDiv":
	        return obj.nb$inplace_floor_divide ? obj.nb$inplace_floor_divide : obj["__ifloordiv__"];
	    case "Mod":
	        return obj.nb$inplace_remainder;
	    case "Pow":
	        return obj.nb$inplace_power;
	    case "LShift":
	        return obj.nb$inplace_lshift ? obj.nb$inplace_lshift : obj["__ilshift__"];
	    case "RShift":
	        return obj.nb$inplace_rshift ? obj.nb$inplace_rshift : obj["__irshift__"];
	    case "BitAnd":
	        return obj.nb$inplace_and;
	    case "BitOr":
	        return obj.nb$inplace_or;
	    case "BitXor":
	        return obj.nb$inplace_xor ? obj.nb$inplace_xor : obj["__ixor__"];
	    }
	};
	Sk.abstr.uoNameToSlotFunc_ = function (obj, name) {
	    if (obj === null) {
	        return undefined;
	    }
	    switch (name) {
	    case "USub":
	        return obj.nb$negative ? obj.nb$negative : obj["__neg__"];
	    case "UAdd":
	        return obj.nb$positive ? obj.nb$positive : obj["__pos__"];
	    case "Invert":
	        return obj.nb$invert ? obj.nb$invert : obj["__invert__"];
	    }
	};

	Sk.abstr.binary_op_ = function (v, w, opname) {
	    var wop;
	    var ret;
	    var vop;

	    // All Python inheritance is now enforced with Javascript inheritance
	    // (see Sk.abstr.setUpInheritance). This checks if w's type is a strict
	    // subclass of v's type
	    var w_is_subclass = w.constructor.prototype instanceof v.constructor;

	    // From the Python 2.7 docs:
	    //
	    // "If the right operand’s type is a subclass of the left operand’s type and
	    // that subclass provides the reflected method for the operation, this
	    // method will be called before the left operand’s non-reflected method.
	    // This behavior allows subclasses to override their ancestors’ operations."
	    //
	    // -- https://docs.python.org/2/reference/datamodel.html#index-92

	    if (w_is_subclass) {
	        wop = Sk.abstr.boNameToSlotFuncRhs_(w, opname);
	        if (wop !== undefined) {
	            if (wop.call) {
	                ret = wop.call(w, v);
	            } else {
	                ret = Sk.misceval.callsim(wop, w, v);
	            }
	            if (ret !== undefined && ret !== Sk.builtin.NotImplemented.NotImplemented$) {
	                return ret;
	            }
	        }
	    }

	    vop = Sk.abstr.boNameToSlotFuncLhs_(v, opname);
	    if (vop !== undefined) {
	        if (vop.call) {
	            ret = vop.call(v, w);
	        } else {
	            ret = Sk.misceval.callsim(vop, v, w);
	        }
	        if (ret !== undefined && ret !== Sk.builtin.NotImplemented.NotImplemented$) {
	            return ret;
	        }
	    }
	    // Don't retry RHS if failed above
	    if (!w_is_subclass) {
	        wop = Sk.abstr.boNameToSlotFuncRhs_(w, opname);
	        if (wop !== undefined) {
	            if (wop.call) {
	                ret = wop.call(w, v);
	            } else {
	                ret = Sk.misceval.callsim(wop, w, v);
	            }
	            if (ret !== undefined && ret !== Sk.builtin.NotImplemented.NotImplemented$) {
	                return ret;
	            }
	        }
	    }
	    Sk.abstr.binop_type_error(v, w, opname);
	};

	Sk.abstr.binary_iop_ = function (v, w, opname) {
	    var wop;
	    var ret;
	    var vop = Sk.abstr.iboNameToSlotFunc_(v, opname);
	    if (vop !== undefined) {
	        if (vop.call) {
	            ret = vop.call(v, w);
	        } else {  // assume that vop is an __xxx__ type method
	            ret = Sk.misceval.callsim(vop, v, w); //  added to be like not-in-place... is this okay?
	        }
	        if (ret !== undefined && ret !== Sk.builtin.NotImplemented.NotImplemented$) {
	            return ret;
	        }
	    }
	    wop = Sk.abstr.iboNameToSlotFunc_(w, opname);
	    if (wop !== undefined) {
	        if (wop.call) {
	            ret = wop.call(w, v);
	        } else { // assume that wop is an __xxx__ type method
	            ret = Sk.misceval.callsim(wop, w, v); //  added to be like not-in-place... is this okay?
	        }
	        if (ret !== undefined && ret !== Sk.builtin.NotImplemented.NotImplemented$) {
	            return ret;
	        }
	    }
	    Sk.abstr.binop_type_error(v, w, opname);
	};
	Sk.abstr.unary_op_ = function (v, opname) {
	    var ret;
	    var vop = Sk.abstr.uoNameToSlotFunc_(v, opname);
	    if (vop !== undefined) {
	        if (vop.call) {
	            ret = vop.call(v);
	        } else {  // assume that vop is an __xxx__ type method
	            ret = Sk.misceval.callsim(vop, v); //  added to be like not-in-place... is this okay?
	        }
	        if (ret !== undefined) {
	            return ret;
	        }
	    }
	    Sk.abstr.unop_type_error(v, opname);
	};

	//
	// handle upconverting a/b from number to long if op causes too big/small a
	// result, or if either of the ops are already longs
	Sk.abstr.numOpAndPromote = function (a, b, opfn) {
	    var tmp;
	    var ans;
	    if (a === null || b === null) {
	        return undefined;
	    }

	    if (typeof a === "number" && typeof b === "number") {
	        ans = opfn(a, b);
	        // todo; handle float   Removed RNL (bugs in lng, and it should be a question of precision, not magnitude -- this was just wrong)
	        if ((ans > Sk.builtin.int_.threshold$ || ans < -Sk.builtin.int_.threshold$) && Math.floor(ans) === ans) {
	            return [Sk.builtin.lng.fromInt$(a), Sk.builtin.lng.fromInt$(b)];
	        } else {
	            return ans;
	        }
	    } else if (a === undefined || b === undefined) {
	        throw new Sk.builtin.NameError("Undefined variable in expression");
	    }

	    if (a.constructor === Sk.builtin.lng) {
	        return [a, b];
	    } else if ((a.constructor === Sk.builtin.int_ ||
	                a.constructor === Sk.builtin.float_) &&
	                b.constructor === Sk.builtin.complex) {
	        // special case of upconverting nmber and complex
	        // can we use here the Sk.builtin.checkComplex() method?
	        tmp = new Sk.builtin.complex(a);
	        return [tmp, b];
	    } else if (a.constructor === Sk.builtin.int_ ||
	               a.constructor === Sk.builtin.float_) {
	        return [a, b];
	    } else if (typeof a === "number") {
	        tmp = Sk.builtin.assk$(a);
	        return [tmp, b];
	    } else {
	        return undefined;
	    }
	};

	Sk.abstr.boNumPromote_ = {
	    "Add"     : function (a, b) {
	        return a + b;
	    },
	    "Sub"     : function (a, b) {
	        return a - b;
	    },
	    "Mult"    : function (a, b) {
	        return a * b;
	    },
	    "Mod"     : function (a, b) {
	        var m;
	        if (b === 0) {
	            throw new Sk.builtin.ZeroDivisionError("division or modulo by zero");
	        }
	        m = a % b;
	        return ((m * b) < 0 ? (m + b) : m);
	    },
	    "Div"     : function (a, b) {
	        if (b === 0) {
	            throw new Sk.builtin.ZeroDivisionError("division or modulo by zero");
	        } else {
	            return a / b;
	        }
	    },
	    "FloorDiv": function (a, b) {
	        if (b === 0) {
	            throw new Sk.builtin.ZeroDivisionError("division or modulo by zero");
	        } else {
	            return Math.floor(a / b);
	        } // todo; wrong? neg?
	    },
	    "Pow"     : Math.pow,
	    "BitAnd"  : function (a, b) {
	        var m = a & b;
	        if (m < 0) {
	            m = m + 4294967296; // convert back to unsigned
	        }
	        return m;
	    },
	    "BitOr"   : function (a, b) {
	        var m = a | b;
	        if (m < 0) {
	            m = m + 4294967296; // convert back to unsigned
	        }
	        return m;
	    },
	    "BitXor"  : function (a, b) {
	        var m = a ^ b;
	        if (m < 0) {
	            m = m + 4294967296; // convert back to unsigned
	        }
	        return m;
	    },
	    "LShift"  : function (a, b) {
	        var m;
	        if (b < 0) {
	            throw new Sk.builtin.ValueError("negative shift count");
	        }
	        m = a << b;
	        if (m > a) {
	            return m;
	        } else {
	            // Fail, this will get recomputed with longs
	            return a * Math.pow(2, b);
	        }
	    },
	    "RShift"  : function (a, b) {
	        var m;
	        if (b < 0) {
	            throw new Sk.builtin.ValueError("negative shift count");
	        }
	        m = a >> b;
	        if ((a > 0) && (m < 0)) {
	            // fix incorrect sign extension
	            m = m & (Math.pow(2, 32 - b) - 1);
	        }
	        return m;
	    }
	};

	Sk.abstr.numberBinOp = function (v, w, op) {
	    var tmp;
	    var numPromoteFunc = Sk.abstr.boNumPromote_[op];
	    if (numPromoteFunc !== undefined) {
	        tmp = Sk.abstr.numOpAndPromote(v, w, numPromoteFunc);
	        if (typeof tmp === "number") {
	            return tmp;
	        } else if (tmp !== undefined && tmp.constructor === Sk.builtin.int_) {
	            return tmp;
	        } else if (tmp !== undefined && tmp.constructor === Sk.builtin.float_) {
	            return tmp;
	        } else if (tmp !== undefined && tmp.constructor === Sk.builtin.lng) {
	            return tmp;
	        } else if (tmp !== undefined) {
	            v = tmp[0];
	            w = tmp[1];
	        }
	    }

	    return Sk.abstr.binary_op_(v, w, op);
	};
	goog.exportSymbol("Sk.abstr.numberBinOp", Sk.abstr.numberBinOp);

	Sk.abstr.numberInplaceBinOp = function (v, w, op) {
	    var tmp;
	    var numPromoteFunc = Sk.abstr.boNumPromote_[op];
	    if (numPromoteFunc !== undefined) {
	        tmp = Sk.abstr.numOpAndPromote(v, w, numPromoteFunc);
	        if (typeof tmp === "number") {
	            return tmp;
	        } else if (tmp !== undefined && tmp.constructor === Sk.builtin.int_) {
	            return tmp;
	        } else if (tmp !== undefined && tmp.constructor === Sk.builtin.float_) {
	            return tmp;
	        } else if (tmp !== undefined && tmp.constructor === Sk.builtin.lng) {
	            return tmp;
	        } else if (tmp !== undefined) {
	            v = tmp[0];
	            w = tmp[1];
	        }
	    }

	    return Sk.abstr.binary_iop_(v, w, op);
	};
	goog.exportSymbol("Sk.abstr.numberInplaceBinOp", Sk.abstr.numberInplaceBinOp);

	Sk.abstr.numberUnaryOp = function (v, op) {
	    var value;
	    if (op === "Not") {
	        return Sk.misceval.isTrue(v) ? Sk.builtin.bool.false$ : Sk.builtin.bool.true$;
	    } else if (v instanceof Sk.builtin.bool) {
	        value = Sk.builtin.asnum$(v);
	        if (op === "USub") {
	            return new Sk.builtin.int_(-value);
	        }
	        if (op === "UAdd") {
	            return new Sk.builtin.int_(value);
	        }
	        if (op === "Invert") {
	            return new Sk.builtin.int_(~value);
	        }
	    } else {
	        if (op === "USub" && v.nb$negative) {
	            return v.nb$negative();
	        }
	        if (op === "UAdd" && v.nb$positive) {
	            return v.nb$positive();
	        }
	        if (op === "Invert" && v.nb$invert) {
	            return v.nb$invert();
	        }
	    }

	    return Sk.abstr.unary_op_(v, op);
	};
	goog.exportSymbol("Sk.abstr.numberUnaryOp", Sk.abstr.numberUnaryOp);

	//
	// Sequence
	//

	Sk.abstr.fixSeqIndex_ = function (seq, i) {
	    i = Sk.builtin.asnum$(i);
	    if (i < 0 && seq.sq$length) {
	        i += seq.sq$length();
	    }
	    return i;
	};

	/**
	 * @param {*} seq
	 * @param {*} ob
	 * @param {boolean=} canSuspend
	 */
	Sk.abstr.sequenceContains = function (seq, ob, canSuspend) {
	    var seqtypename;
	    var special;
	    var r;

	    if (seq.sq$contains) {
	        return seq.sq$contains(ob);
	    }

	    /**
	     *  Look for special method and call it, we have to distinguish between built-ins and
	     *  python objects
	     */
	    special = Sk.abstr.lookupSpecial(seq, "__contains__");
	    if (special != null) {
	        // method on builtin, provide this arg
	        return Sk.misceval.isTrue(Sk.misceval.callsim(special, seq, ob));
	    }

	    if (!Sk.builtin.checkIterable(seq)) {
	        seqtypename = Sk.abstr.typeName(seq);
	        throw new Sk.builtin.TypeError("argument of type '" + seqtypename + "' is not iterable");
	    }

	    r = Sk.misceval.iterFor(Sk.abstr.iter(seq), function(i) {
	        if (Sk.misceval.richCompareBool(i, ob, "Eq")) {
	            return new Sk.misceval.Break(true);
	        } else {
	            return false;
	        }
	    }, false);

	    return canSuspend ? r : Sk.misceval.retryOptionalSuspensionOrThrow(r);
	};

	Sk.abstr.sequenceConcat = function (seq1, seq2) {
	    var seq1typename;
	    if (seq1.sq$concat) {
	        return seq1.sq$concat(seq2);
	    }
	    seq1typename = Sk.abstr.typeName(seq1);
	    throw new Sk.builtin.TypeError("'" + seq1typename + "' object can't be concatenated");
	};

	Sk.abstr.sequenceGetIndexOf = function (seq, ob) {
	    var seqtypename;
	    var i, it;
	    var index;
	    if (seq.index) {
	        return Sk.misceval.callsim(seq.index, seq, ob);
	    }
	    if (Sk.builtin.checkIterable(seq)) {
	        index = 0;
	        for (it = Sk.abstr.iter(seq), i = it.tp$iternext();
	             i !== undefined; i = it.tp$iternext()) {
	            if (Sk.misceval.richCompareBool(ob, i, "Eq")) {
	                return new Sk.builtin.int_(index);
	            }
	            index += 1;
	        }
	        throw new Sk.builtin.ValueError("sequence.index(x): x not in sequence");
	    }

	    seqtypename = Sk.abstr.typeName(seq);
	    throw new Sk.builtin.TypeError("argument of type '" + seqtypename + "' is not iterable");
	};

	Sk.abstr.sequenceGetCountOf = function (seq, ob) {
	    var seqtypename;
	    var i, it;
	    var count;
	    if (seq.count) {
	        return Sk.misceval.callsim(seq.count, seq, ob);
	    }
	    if (Sk.builtin.checkIterable(seq)) {
	        count = 0;
	        for (it = Sk.abstr.iter(seq), i = it.tp$iternext();
	             i !== undefined; i = it.tp$iternext()) {
	            if (Sk.misceval.richCompareBool(ob, i, "Eq")) {
	                count += 1;
	            }
	        }
	        return new Sk.builtin.int_(count);
	    }

	    seqtypename = Sk.abstr.typeName(seq);
	    throw new Sk.builtin.TypeError("argument of type '" + seqtypename + "' is not iterable");
	};

	Sk.abstr.sequenceGetItem = function (seq, i, canSuspend) {
	    var seqtypename;
	    if (seq.mp$subscript) {
	        return seq.mp$subscript(i);
	    }

	    seqtypename = Sk.abstr.typeName(seq);
	    throw new Sk.builtin.TypeError("'" + seqtypename + "' object is unsubscriptable");
	};

	Sk.abstr.sequenceSetItem = function (seq, i, x, canSuspend) {
	    var seqtypename;
	    if (seq.mp$ass_subscript) {
	        return seq.mp$ass_subscript(i, x);
	    }

	    seqtypename = Sk.abstr.typeName(seq);
	    throw new Sk.builtin.TypeError("'" + seqtypename + "' object does not support item assignment");
	};

	Sk.abstr.sequenceDelItem = function (seq, i) {
	    var seqtypename;
	    if (seq.sq$del_item) {
	        i = Sk.abstr.fixSeqIndex_(seq, i);
	        seq.sq$del_item(i);
	        return;
	    }

	    seqtypename = Sk.abstr.typeName(seq);
	    throw new Sk.builtin.TypeError("'" + seqtypename + "' object does not support item deletion");
	};

	Sk.abstr.sequenceRepeat = function (f, seq, n) {
	    var ntypename;
	    var count;
	    n = Sk.builtin.asnum$(n);
	    count = Sk.misceval.asIndex(n);
	    if (count === undefined) {
	        ntypename = Sk.abstr.typeName(n);
	        throw new Sk.builtin.TypeError("can't multiply sequence by non-int of type '" + ntypename + "'");
	    }
	    return f.call(seq, n);
	};

	Sk.abstr.sequenceGetSlice = function (seq, i1, i2) {
	    var seqtypename;
	    if (seq.sq$slice) {
	        i1 = Sk.abstr.fixSeqIndex_(seq, i1);
	        i2 = Sk.abstr.fixSeqIndex_(seq, i2);
	        return seq.sq$slice(i1, i2);
	    } else if (seq.mp$subscript) {
	        return seq.mp$subscript(new Sk.builtin.slice(i1, i2));
	    }

	    seqtypename = Sk.abstr.typeName(seq);
	    throw new Sk.builtin.TypeError("'" + seqtypename + "' object is unsliceable");
	};

	Sk.abstr.sequenceDelSlice = function (seq, i1, i2) {
	    var seqtypename;
	    if (seq.sq$del_slice) {
	        i1 = Sk.abstr.fixSeqIndex_(seq, i1);
	        i2 = Sk.abstr.fixSeqIndex_(seq, i2);
	        seq.sq$del_slice(i1, i2);
	        return;
	    }

	    seqtypename = Sk.abstr.typeName(seq);
	    throw new Sk.builtin.TypeError("'" + seqtypename + "' doesn't support slice deletion");
	};

	Sk.abstr.sequenceSetSlice = function (seq, i1, i2, x) {
	    var seqtypename;
	    if (seq.sq$ass_slice) {
	        i1 = Sk.abstr.fixSeqIndex_(seq, i1);
	        i2 = Sk.abstr.fixSeqIndex_(seq, i2);
	        seq.sq$ass_slice(i1, i2, x);
	    } else if (seq.mp$ass_subscript) {
	        seq.mp$ass_subscript(new Sk.builtin.slice(i1, i2), x);
	    } else {
	        seqtypename = Sk.abstr.typeName(seq);
	        throw new Sk.builtin.TypeError("'" + seqtypename + "' object doesn't support slice assignment");
	    }
	};

	// seq - Python object to unpack
	// n   - JavaScript number of items to unpack
	Sk.abstr.sequenceUnpack = function (seq, n) {
	    var res = [];
	    var it, i;

	    if (!Sk.builtin.checkIterable(seq)) {
	        throw new Sk.builtin.TypeError("'" + Sk.abstr.typeName(seq) + "' object is not iterable");
	    }

	    for (it = Sk.abstr.iter(seq), i = it.tp$iternext();
	         (i !== undefined) && (res.length < n);
	         i = it.tp$iternext()) {
	        res.push(i);
	    }

	    if (res.length < n) {
	        throw new Sk.builtin.ValueError("need more than " + res.length + " values to unpack");
	    }
	    if (i !== undefined) {
	        throw new Sk.builtin.ValueError("too many values to unpack");
	    }

	    // Return Javascript array of items
	    return res;
	};

	//
	// Object
	//

	Sk.abstr.objectFormat = function (obj, format_spec) {
	    var meth; // PyObject
	    var result; // PyObject

	    // If no format_spec is provided, use an empty string
	    if(format_spec == null) {
	        format_spec = "";
	    }

	    // Find the (unbound!) __format__ method (a borrowed reference)
	    meth = Sk.abstr.lookupSpecial(obj, "__format__");
	    if (meth == null) {
	        throw new Sk.builtin.TypeError("Type " + Sk.abstr.typeName(obj) + "doesn't define __format__");
	    }

	    // And call it
	    result = Sk.misceval.callsim(meth, obj, format_spec);
	    if (!Sk.builtin.checkString(result)) {
	        throw new Sk.builtin.TypeError("__format__ must return a str, not " + Sk.abstr.typeName(result));
	    }

	    return result;
	};

	Sk.abstr.objectAdd = function (a, b) {
	    var btypename;
	    var atypename;
	    if (a.nb$add) {
	        return a.nb$add(b);
	    }

	    atypename = Sk.abstr.typeName(a);
	    btypename = Sk.abstr.typeName(b);
	    throw new Sk.builtin.TypeError("unsupported operand type(s) for +: '" + atypename + "' and '" + btypename + "'");
	};

	// in Python 2.6, this behaviour seems to be defined for numbers and bools (converts bool to int)
	Sk.abstr.objectNegative = function (obj) {
	    var objtypename;
	    var obj_asnum = Sk.builtin.asnum$(obj); // this will also convert bool type to int

	    if (obj instanceof Sk.builtin.bool) {
	        obj = new Sk.builtin.int_(obj_asnum);
	    }

	    if (obj.nb$negative) {
	        return obj.nb$negative();
	    }

	    objtypename = Sk.abstr.typeName(obj);
	    throw new Sk.builtin.TypeError("bad operand type for unary -: '" + objtypename + "'");
	};

	// in Python 2.6, this behaviour seems to be defined for numbers and bools (converts bool to int)
	Sk.abstr.objectPositive = function (obj) {
	    var objtypename = Sk.abstr.typeName(obj);
	    var obj_asnum = Sk.builtin.asnum$(obj); // this will also convert bool type to int

	    if (obj instanceof Sk.builtin.bool) {
	        obj = new Sk.builtin.int_(obj_asnum);
	    }

	    if (obj.nb$negative) {
	        return obj.nb$positive();
	    }

	    throw new Sk.builtin.TypeError("bad operand type for unary +: '" + objtypename + "'");
	};

	Sk.abstr.objectDelItem = function (o, key) {
	    var otypename;
	    var keytypename;
	    var keyValue;
	    if (o !== null) {
	        if (o.mp$del_subscript) {
	            o.mp$del_subscript(key);
	            return;
	        }
	        if (o.sq$ass_item) {
	            keyValue = Sk.misceval.asIndex(key);
	            if (keyValue === undefined) {
	                keytypename = Sk.abstr.typeName(key);
	                throw new Sk.builtin.TypeError("sequence index must be integer, not '" + keytypename + "'");
	            }
	            Sk.abstr.sequenceDelItem(o, keyValue);
	            return;
	        }
	        // if o is a slice do something else...
	    }

	    otypename = Sk.abstr.typeName(o);
	    throw new Sk.builtin.TypeError("'" + otypename + "' object does not support item deletion");
	};
	goog.exportSymbol("Sk.abstr.objectDelItem", Sk.abstr.objectDelItem);

	Sk.abstr.objectGetItem = function (o, key, canSuspend) {
	    var otypename;
	    if (o !== null) {
	        if (o.tp$getitem) {
	            return o.tp$getitem(key, canSuspend);
	        } else if (o.mp$subscript) {
	            return o.mp$subscript(key, canSuspend);
	        } else if (Sk.misceval.isIndex(key) && o.sq$item) {
	            return Sk.abstr.sequenceGetItem(o, Sk.misceval.asIndex(key), canSuspend);
	        }
	    }

	    otypename = Sk.abstr.typeName(o);
	    throw new Sk.builtin.TypeError("'" + otypename + "' does not support indexing");
	};
	goog.exportSymbol("Sk.abstr.objectGetItem", Sk.abstr.objectGetItem);

	Sk.abstr.objectSetItem = function (o, key, v, canSuspend) {
	    var otypename;
	    if (o !== null) {
	        if (o.tp$setitem) {
	            return o.tp$setitem(key, v, canSuspend);
	        } else if (o.mp$ass_subscript) {
	            return o.mp$ass_subscript(key, v, canSuspend);
	        } else if (Sk.misceval.isIndex(key) && o.sq$ass_item) {
	            return Sk.abstr.sequenceSetItem(o, Sk.misceval.asIndex(key), v, canSuspend);
	        }
	    }

	    otypename = Sk.abstr.typeName(o);
	    throw new Sk.builtin.TypeError("'" + otypename + "' does not support item assignment");
	};
	goog.exportSymbol("Sk.abstr.objectSetItem", Sk.abstr.objectSetItem);


	Sk.abstr.gattr = function (obj, nameJS, canSuspend) {
	    var ret, f;
	    var objname = Sk.abstr.typeName(obj);

	    if (obj === null) {
	        throw new Sk.builtin.AttributeError("'" + objname + "' object has no attribute '" + nameJS + "'");
	    }


	    if (obj.tp$getattr !== undefined) {
	        f = obj.tp$getattr("__getattribute__");
	    }

	    if (f !== undefined) {
	        ret = Sk.misceval.callsimOrSuspend(f, new Sk.builtin.str(nameJS));
	    }

	    ret = Sk.misceval.chain(ret, function(ret) {
	        var f;

	        if (ret === undefined && obj.tp$getattr !== undefined) {
	            ret = obj.tp$getattr(nameJS);

	            if (ret === undefined) {
	                f = obj.tp$getattr("__getattr__");

	                if (f !== undefined) {
	                    ret = Sk.misceval.callsimOrSuspend(f, new Sk.builtin.str(nameJS));
	                }
	            }
	        }
	        return ret;
	    }, function(r) {
	        if (r === undefined) {
	            throw new Sk.builtin.AttributeError("'" + objname + "' object has no attribute '" + nameJS + "'");
	        }
	        return r;
	    });

	    return canSuspend ? ret : Sk.misceval.retryOptionalSuspensionOrThrow(ret);
	};
	goog.exportSymbol("Sk.abstr.gattr", Sk.abstr.gattr);

	Sk.abstr.sattr = function (obj, nameJS, data, canSuspend) {
	    var objname = Sk.abstr.typeName(obj), r, setf;

	    if (obj === null) {
	        throw new Sk.builtin.AttributeError("'" + objname + "' object has no attribute '" + nameJS + "'");
	    }

	    if (obj.tp$getattr !== undefined) {
	        setf = obj.tp$getattr("__setattr__");
	        if (setf !== undefined) {
	            r = Sk.misceval.callsimOrSuspend(setf, new Sk.builtin.str(nameJS), data);
	            return canSuspend ? r : Sk.misceval.retryOptionalSuspensionOrThrow(r);
	        }
	    }

	    if (obj.tp$setattr !== undefined) {
	        obj.tp$setattr(nameJS, data);
	    } else {
	        throw new Sk.builtin.AttributeError("'" + objname + "' object has no attribute '" + nameJS + "'");
	    }
	};
	goog.exportSymbol("Sk.abstr.sattr", Sk.abstr.sattr);


	Sk.abstr.iternext = function (it, canSuspend) {
	    return it.tp$iternext(canSuspend);
	};
	goog.exportSymbol("Sk.abstr.iternext", Sk.abstr.iternext);


	/**
	 * Get the iterator for a Python object  This iterator could be one of the following.
	 * This is the preferred mechanism for consistently getting the correct iterator.  You should
	 * not just use tp$iter because that could lead to incorrect behavior of a user created class.
	 *
	 * - tp$iter
	 * - A user defined `__iter__` method
	 * - A user defined `__getitem__` method
	 *
	 * @param obj
	 *
	 * @throws {Sk.builtin.TypeError}
	 * @returns {Object}
	 */

	Sk.abstr.iter = function(obj) {
	    var iter;
	    var getit;
	    var ret;

	    /**
	     * Builds an iterator around classes that have a __getitem__ method.
	     *
	     * @constructor
	     */
	    var seqIter = function (obj) {
	        this.idx = 0;
	        this.myobj = obj;
	        this.getitem = Sk.abstr.lookupSpecial(obj, "__getitem__");
	        this.tp$iternext = function () {
	            var ret;
	            try {
	                ret = Sk.misceval.callsim(this.getitem, this.myobj, Sk.ffi.remapToPy(this.idx));
	            } catch (e) {
	                if (e instanceof Sk.builtin.IndexError || e instanceof Sk.builtin.StopIteration) {
	                    return undefined;
	                } else {
	                    throw e;
	                }
	            }
	            this.idx++;
	            return ret;
	        };
	    };

	    if (obj.tp$getattr) {
	        iter =  Sk.abstr.lookupSpecial(obj,"__iter__");
	        if (iter) {
	            ret = Sk.misceval.callsim(iter, obj);
	            if (ret.tp$iternext) {
	                return ret;
	            }
	        }
	    }
	    if (obj.tp$iter) {
	        try {  // catch and ignore not iterable error here.
	            ret = obj.tp$iter();
	            if (ret.tp$iternext) {
	                return ret;
	            }
	        } catch (e) { }
	    }
	    getit = Sk.abstr.lookupSpecial(obj, "__getitem__");
	    if (getit) {
	        // create internal iterobject if __getitem__
	        return new seqIter(obj);
	    }
	    throw new Sk.builtin.TypeError("'" + Sk.abstr.typeName(obj) + "' object is not iterable");
	};
	goog.exportSymbol("Sk.abstr.iter", Sk.abstr.iter);

	/**
	 * Special method look up. First try getting the method via
	 * internal dict and getattr. If getattr is not present (builtins)
	 * try if method is defined on the object itself
	 *
	 * @returns {null|Object} Return null if not found or the function
	 */
	Sk.abstr.lookupSpecial = function(op, str) {
	    var res;
	    var obtp;
	    if (op.ob$type) {
	        obtp = op.ob$type;
	    } else {
	        return null;
	    }

	    return Sk.builtin.type.typeLookup(obtp, str);
	};
	goog.exportSymbol("Sk.abstr.lookupSpecial", Sk.abstr.lookupSpecial);

	/**
	 * Mark a class as unhashable and prevent its `__hash__` function from being called.
	 * @param  {function(...[?])} thisClass The class to mark as unhashable.
	 * @return {undefined}
	 */
	Sk.abstr.markUnhashable = function (thisClass) {
	    var proto = thisClass.prototype;
	    proto.__hash__ = Sk.builtin.none.none$;
	    proto.tp$hash = Sk.builtin.none.none$;
	};

	/**
	 * Set up inheritance between two Python classes. This allows only for single
	 * inheritance -- multiple inheritance is not supported by Javascript.
	 *
	 * Javascript's inheritance is prototypal. This means that properties must
	 * be defined on the superclass' prototype in order for subclasses to inherit
	 * them.
	 *
	 * ```
	 * Sk.superclass.myProperty                 # will NOT be inherited
	 * Sk.superclass.prototype.myProperty       # will be inherited
	 * ```
	 *
	 * In order for a class to be subclassable, it must (directly or indirectly)
	 * inherit from Sk.builtin.object so that it will be properly initialized in
	 * {@link Sk.doOneTimeInitialization} (in src/import.js). Further, all Python
	 * builtins should inherit from Sk.builtin.object.
	 *
	 * @param {string} childName The Python name of the child (subclass).
	 * @param {function(...[?])} child     The subclass.
	 * @param {function(...[?])} parent    The superclass.
	 * @return {undefined}
	 */
	Sk.abstr.setUpInheritance = function (childName, child, parent) {
	    goog.inherits(child, parent);
	    child.prototype.tp$base = parent;
	    child.prototype.tp$name = childName;
	    child.prototype.ob$type = Sk.builtin.type.makeIntoTypeObj(childName, child);
	};

	/**
	 * Call the super constructor of the provided class, with the object `self` as
	 * the `this` value of that constructor. Any arguments passed to this function
	 * after `self` will be passed as-is to the constructor.
	 *
	 * @param  {function(...[?])} thisClass The subclass.
	 * @param  {Object} self      The instance of the subclas.
	 * @param  {...?} args Arguments to pass to the constructor.
	 * @return {undefined}
	 */
	Sk.abstr.superConstructor = function (thisClass, self, args) {
	    var argumentsForConstructor = Array.prototype.slice.call(arguments, 2);
	    thisClass.prototype.tp$base.apply(self, argumentsForConstructor);
	};



	/* ---- /Users/rob/skulpty/lib/../node_modules/skulpt/src/object.js ---- */ 

	/**
	 * @constructor
	 * Sk.builtin.object
	 *
	 * @description
	 * Constructor for Python object. All Python classes (builtin and user-defined)
	 * should inherit from this class.
	 *
	 * @return {Sk.builtin.object} Python object
	 */
	Sk.builtin.object = function () {
	    if (!(this instanceof Sk.builtin.object)) {
	        return new Sk.builtin.object();
	    }

	    return this;
	};



	var _tryGetSubscript = function(dict, pyName) {
	    try {
	        return dict.mp$subscript(pyName);
	    } catch (x) {
	        return undefined;
	    }
	};

	/**
	 * @return {undefined}
	 */
	Sk.builtin.object.prototype.GenericGetAttr = function (name) {
	    var res;
	    var f;
	    var descr;
	    var tp;
	    var dict;
	    var pyName = new Sk.builtin.str(name);
	    goog.asserts.assert(typeof name === "string");

	    tp = this.ob$type;
	    goog.asserts.assert(tp !== undefined, "object has no ob$type!");

	    dict = this["$d"] || this.constructor["$d"];

	    // todo; assert? force?
	    if (dict) {
	        if (dict.mp$lookup) {
	            res = dict.mp$lookup(pyName);
	        } else if (dict.mp$subscript) {
	            res = _tryGetSubscript(dict, pyName);
	        } else if (typeof dict === "object") {
	            // todo; definitely the wrong place for this. other custom tp$getattr won't work on object -- bnm -- implemented custom __getattr__ in abstract.js
	            res = dict[name];
	        }
	        if (res !== undefined) {
	            return res;
	        }
	    }

	    descr = Sk.builtin.type.typeLookup(tp, name);

	    // otherwise, look in the type for a descr
	    if (descr !== undefined && descr !== null && descr.ob$type !== undefined) {
	        f = descr.ob$type.tp$descr_get;
	        if (!(f) && descr["__get__"]) {
	            f = descr["__get__"];
	            return Sk.misceval.callsimOrSuspend(f, descr, this, Sk.builtin.none.none$);
	        }
	        // todo;
	        // if (f && descr.tp$descr_set) // is a data descriptor if it has a set
	        // return f.call(descr, this, this.ob$type);

	        if (f) {
	            // non-data descriptor
	            return f.call(descr, this, this.ob$type);
	        }
	    }

	    if (descr !== undefined) {
	        return descr;
	    }

	    return undefined;
	};
	goog.exportSymbol("Sk.builtin.object.prototype.GenericGetAttr", Sk.builtin.object.prototype.GenericGetAttr);

	Sk.builtin.object.prototype.GenericPythonGetAttr = function(self, name) {
	    return Sk.builtin.object.prototype.GenericGetAttr.call(self, name.v);
	};
	goog.exportSymbol("Sk.builtin.object.prototype.GenericPythonGetAttr", Sk.builtin.object.prototype.GenericPythonGetAttr);

	Sk.builtin.object.prototype.GenericSetAttr = function (name, value) {
	    var objname = Sk.abstr.typeName(this);
	    var pyname;
	    var dict;
	    var tp = this.ob$type;
	    var descr;
	    var f;

	    goog.asserts.assert(typeof name === "string");
	    goog.asserts.assert(tp !== undefined, "object has no ob$type!");

	    dict = this["$d"] || this.constructor["$d"];

	    descr = Sk.builtin.type.typeLookup(tp, name);

	    // otherwise, look in the type for a descr
	    if (descr !== undefined && descr !== null && descr.ob$type !== undefined) {
	        //f = descr.ob$type.tp$descr_set;
	        if (descr["__set__"]) {
	            f = descr["__set__"];
	            Sk.misceval.callsimOrSuspend(f, descr, this, value);
	            return;
	        }
	        // todo;
	        //if (f && descr.tp$descr_set) // is a data descriptor if it has a set
	        //return f.call(descr, this, this.ob$type);
	    }

	    if (dict.mp$ass_subscript) {
	        pyname = new Sk.builtin.str(name);

	        if (this instanceof Sk.builtin.object && !(this.ob$type.sk$klass) &&
	            dict.mp$lookup(pyname) === undefined) {
	            // Cannot add new attributes to a builtin object
	            throw new Sk.builtin.AttributeError("'" + objname + "' object has no attribute '" + name + "'");
	        }
	        dict.mp$ass_subscript(new Sk.builtin.str(name), value);
	    } else if (typeof dict === "object") {
	        dict[name] = value;
	    }
	};
	goog.exportSymbol("Sk.builtin.object.prototype.GenericSetAttr", Sk.builtin.object.prototype.GenericSetAttr);

	Sk.builtin.object.prototype.GenericPythonSetAttr = function(self, name, value) {
	    return Sk.builtin.object.prototype.GenericSetAttr.call(self, name.v, value);
	};
	goog.exportSymbol("Sk.builtin.object.prototype.GenericPythonSetAttr", Sk.builtin.object.prototype.GenericPythonSetAttr);

	Sk.builtin.object.prototype.HashNotImplemented = function () {
	    throw new Sk.builtin.TypeError("unhashable type: '" + Sk.abstr.typeName(this) + "'");
	};

	Sk.builtin.object.prototype.tp$getattr = Sk.builtin.object.prototype.GenericGetAttr;
	Sk.builtin.object.prototype.tp$setattr = Sk.builtin.object.prototype.GenericSetAttr;

	// Although actual attribute-getting happens in pure Javascript via tp$getattr, classes
	// overriding __getattr__ etc need to be able to call object.__getattr__ etc from Python
	Sk.builtin.object.prototype["__getattr__"] = Sk.builtin.object.prototype.GenericPythonGetAttr;
	Sk.builtin.object.prototype["__setattr__"] = Sk.builtin.object.prototype.GenericPythonSetAttr;

	/**
	 * The name of this class.
	 * @type {string}
	 */
	Sk.builtin.object.prototype.tp$name = "object";

	/**
	 * The type object of this class.
	 * @type {Sk.builtin.type}
	 */
	Sk.builtin.object.prototype.ob$type = Sk.builtin.type.makeIntoTypeObj("object", Sk.builtin.object);
	Sk.builtin.object.prototype.ob$type.sk$klass = undefined;   // Nonsense for closure compiler

	/** Default implementations of dunder methods found in all Python objects */

	/**
	 * Python wrapper for `__repr__` method.
	 * @name  __repr__
	 * @memberOf Sk.builtin.object.prototype
	 * @instance
	 */
	Sk.builtin.object.prototype["__repr__"] = function (self) {
	    Sk.builtin.pyCheckArgs("__repr__", arguments, 0, 0, false, true);

	    return self["$r"]();
	};

	/**
	 * Python wrapper for `__str__` method.
	 * @name  __str__
	 * @memberOf Sk.builtin.object.prototype
	 * @instance
	 */
	Sk.builtin.object.prototype["__str__"] = function (self) {
	    Sk.builtin.pyCheckArgs("__str__", arguments, 0, 0, false, true);

	    return self["$r"]();
	};

	/**
	 * Python wrapper for `__hash__` method.
	 * @name  __hash__
	 * @memberOf Sk.builtin.object.prototype
	 * @instance
	 */
	Sk.builtin.object.prototype["__hash__"] = function (self) {
	    Sk.builtin.pyCheckArgs("__hash__", arguments, 0, 0, false, true);

	    return self.tp$hash();
	};

	/**
	 * Python wrapper for `__eq__` method.
	 * @name  __eq__
	 * @memberOf Sk.builtin.object.prototype
	 * @instance
	 */
	Sk.builtin.object.prototype["__eq__"] = function (self, other) {
	    Sk.builtin.pyCheckArgs("__eq__", arguments, 1, 1, false, true);

	    return self.ob$eq(other);
	};

	/**
	 * Python wrapper for `__ne__` method.
	 * @name  __ne__
	 * @memberOf Sk.builtin.object.prototype
	 * @instance
	 */
	Sk.builtin.object.prototype["__ne__"] = function (self, other) {
	    Sk.builtin.pyCheckArgs("__ne__", arguments, 1, 1, false, true);

	    return self.ob$ne(other);
	};

	/**
	 * Python wrapper for `__lt__` method.
	 * @name  __lt__
	 * @memberOf Sk.builtin.object.prototype
	 * @instance
	 */
	Sk.builtin.object.prototype["__lt__"] = function (self, other) {
	    Sk.builtin.pyCheckArgs("__lt__", arguments, 1, 1, false, true);

	    return self.ob$lt(other);
	};

	/**
	 * Python wrapper for `__le__` method.
	 * @name  __le__
	 * @memberOf Sk.builtin.object.prototype
	 * @instance
	 */
	Sk.builtin.object.prototype["__le__"] = function (self, other) {
	    Sk.builtin.pyCheckArgs("__le__", arguments, 1, 1, false, true);

	    return self.ob$le(other);
	};

	/**
	 * Python wrapper for `__gt__` method.
	 * @name  __gt__
	 * @memberOf Sk.builtin.object.prototype
	 * @instance
	 */
	Sk.builtin.object.prototype["__gt__"] = function (self, other) {
	    Sk.builtin.pyCheckArgs("__gt__", arguments, 1, 1, false, true);

	    return self.ob$gt(other);
	};

	/**
	 * Python wrapper for `__ge__` method.
	 * @name  __ge__
	 * @memberOf Sk.builtin.object.prototype
	 * @instance
	 */
	Sk.builtin.object.prototype["__ge__"] = function (self, other) {
	    Sk.builtin.pyCheckArgs("__ge__", arguments, 1, 1, false, true);

	    return self.ob$ge(other);
	};

	/** Default implementations of Javascript functions used in dunder methods */

	/**
	 * Return the string representation of this instance.
	 *
	 * Javascript function, returns Python object.
	 *
	 * @name  $r
	 * @memberOf Sk.builtin.object.prototype
	 * @return {Sk.builtin.str} The Python string representation of this instance.
	 */
	Sk.builtin.object.prototype["$r"] = function () {
	    return new Sk.builtin.str("<object>");
	};

	Sk.builtin.hashCount = 1;
	Sk.builtin.idCount = 1;

	/**
	 * Return the hash value of this instance.
	 *
	 * Javascript function, returns Python object.
	 *
	 * @return {Sk.builtin.int_} The hash value
	 */
	Sk.builtin.object.prototype.tp$hash = function () {
	    if (!this.$savedHash_) {
	        this.$savedHash_ = new Sk.builtin.int_(Sk.builtin.hashCount++);
	    }

	    return this.$savedHash_;
	};

	/**
	 * Perform equality check between this instance and a Python object (i.e. this == other).
	 *
	 * Implements `__eq__` dunder method.
	 *
	 * Javascript function, returns Python object.
	 *
	 * @param  {Object} other The Python object to check for equality.
	 * @return {(Sk.builtin.bool|Sk.builtin.NotImplemented)} true if equal, false otherwise
	 */
	Sk.builtin.object.prototype.ob$eq = function (other) {
	    if (this === other) {
	        return Sk.builtin.bool.true$;
	    }

	    return Sk.builtin.NotImplemented.NotImplemented$;
	};

	/**
	 * Perform non-equality check between this instance and a Python object (i.e. this != other).
	 *
	 * Implements `__ne__` dunder method.
	 *
	 * Javascript function, returns Python object.
	 *
	 * @param  {Object} other The Python object to check for non-equality.
	 * @return {(Sk.builtin.bool|Sk.builtin.NotImplemented)} true if not equal, false otherwise
	 */
	Sk.builtin.object.prototype.ob$ne = function (other) {
	    if (this === other) {
	        return Sk.builtin.bool.false$;
	    }

	    return Sk.builtin.NotImplemented.NotImplemented$;
	};

	/**
	 * Determine if this instance is less than a Python object (i.e. this < other).
	 *
	 * Implements `__lt__` dunder method.
	 *
	 * Javascript function, returns Python object.
	 *
	 * @param  {Object} other The Python object to compare.
	 * @return {(Sk.builtin.bool|Sk.builtin.NotImplemented)} true if this < other, false otherwise
	 */
	Sk.builtin.object.prototype.ob$lt = function (other) {
	    return Sk.builtin.NotImplemented.NotImplemented$;
	};

	/**
	 * Determine if this instance is less than or equal to a Python object (i.e. this <= other).
	 *
	 * Implements `__le__` dunder method.
	 *
	 * Javascript function, returns Python object.
	 *
	 * @param  {Object} other The Python object to compare.
	 * @return {(Sk.builtin.bool|Sk.builtin.NotImplemented)} true if this <= other, false otherwise
	 */
	Sk.builtin.object.prototype.ob$le = function (other) {
	    return Sk.builtin.NotImplemented.NotImplemented$;
	};

	/**
	 * Determine if this instance is greater than a Python object (i.e. this > other).
	 *
	 * Implements `__gt__` dunder method.
	 *
	 * Javascript function, returns Python object.
	 *
	 * @param  {Object} other The Python object to compare.
	 * @return {(Sk.builtin.bool|Sk.builtin.NotImplemented)} true if this > other, false otherwise
	 */
	Sk.builtin.object.prototype.ob$gt = function (other) {
	    return Sk.builtin.NotImplemented.NotImplemented$;
	};

	/**
	 * Determine if this instance is greater than or equal to a Python object (i.e. this >= other).
	 *
	 * Implements `__ge__` dunder method.
	 *
	 * Javascript function, returns Python object.
	 *
	 * @param  {Object} other The Python object to compare.
	 * @return {(Sk.builtin.bool|Sk.builtin.NotImplemented)} true if this >= other, false otherwise
	 */
	Sk.builtin.object.prototype.ob$ge = function (other) {
	    return Sk.builtin.NotImplemented.NotImplemented$;
	};

	// Wrap the following functions in Sk.builtin.func once that class is initialized
	/**
	 * Array of all the Python functions which are methods of this class.
	 * @type {Array}
	 */
	Sk.builtin.object.pythonFunctions = ["__repr__", "__str__", "__hash__",
	"__eq__", "__ne__", "__lt__", "__le__", "__gt__", "__ge__", "__getattr__", "__setattr__"];

	/**
	 * @constructor
	 * Sk.builtin.none
	 *
	 * @extends {Sk.builtin.object}
	 */
	Sk.builtin.none = function () {
	    this.v = null;
	};
	Sk.abstr.setUpInheritance("NoneType", Sk.builtin.none, Sk.builtin.object);

	/** @override */
	Sk.builtin.none.prototype["$r"] = function () { return new Sk.builtin.str("None"); };

	/** @override */
	Sk.builtin.none.prototype.tp$hash = function () {
	    return new Sk.builtin.int_(0);
	};

	/**
	 * Python None constant.
	 * @type {Sk.builtin.none}
	 */
	Sk.builtin.none.none$ = new Sk.builtin.none();

	/**
	 * @constructor
	 * Sk.builtin.NotImplemented
	 *
	 * @extends {Sk.builtin.object}
	 */
	Sk.builtin.NotImplemented = function() { };
	Sk.abstr.setUpInheritance("NotImplementedType", Sk.builtin.NotImplemented, Sk.builtin.object);

	/** @override */
	Sk.builtin.NotImplemented.prototype["$r"] = function () { return new Sk.builtin.str("NotImplemented"); };

	/**
	 * Python NotImplemented constant.
	 * @type {Sk.builtin.NotImplemented}
	 */
	Sk.builtin.NotImplemented.NotImplemented$ = new Sk.builtin.NotImplemented();

	goog.exportSymbol("Sk.builtin.none", Sk.builtin.none);
	goog.exportSymbol("Sk.builtin.NotImplemented", Sk.builtin.NotImplemented);



	/* ---- /Users/rob/skulpty/lib/../node_modules/skulpt/src/function.js ---- */ 

	/**
	 * @namespace Sk.builtin
	 */


	/**
	 * Check arguments to Python functions to ensure the correct number of
	 * arguments are passed.
	 *
	 * @param {string} name the name of the function
	 * @param {Object} args the args passed to the function
	 * @param {number} minargs the minimum number of allowable arguments
	 * @param {number=} maxargs optional maximum number of allowable
	 * arguments (default: Infinity)
	 * @param {boolean=} kwargs optional true if kwargs, false otherwise
	 * (default: false)
	 * @param {boolean=} free optional true if free vars, false otherwise
	 * (default: false)
	 */
	Sk.builtin.pyCheckArgs = function (name, args, minargs, maxargs, kwargs, free) {
	    var nargs = args.length;
	    var msg = "";

	    if (maxargs === undefined) {
	        maxargs = Infinity;
	    }
	    if (kwargs) {
	        nargs -= 1;
	    }
	    if (free) {
	        nargs -= 1;
	    }
	    if ((nargs < minargs) || (nargs > maxargs)) {
	        if (minargs === maxargs) {
	            msg = name + "() takes exactly " + minargs + " arguments";
	        } else if (nargs < minargs) {
	            msg = name + "() takes at least " + minargs + " arguments";
	        } else {
	            msg = name + "() takes at most " + maxargs + " arguments";
	        }
	        msg += " (" + nargs + " given)";
	        throw new Sk.builtin.TypeError(msg);
	    }
	};
	goog.exportSymbol("Sk.builtin.pyCheckArgs", Sk.builtin.pyCheckArgs);

	/**
	 * Check type of argument to Python functions.
	 *
	 * @param {string} name the name of the argument
	 * @param {string} exptype string of the expected type name
	 * @param {boolean} check truthy if type check passes, falsy otherwise
	 */
	Sk.builtin.pyCheckType = function (name, exptype, check) {
	    if (!check) {
	        throw new Sk.builtin.TypeError(name + " must be a " + exptype);
	    }
	};
	goog.exportSymbol("Sk.builtin.pyCheckType", Sk.builtin.pyCheckType);

	Sk.builtin.checkSequence = function (arg) {
	    return (arg !== null && arg.mp$subscript !== undefined);
	};
	goog.exportSymbol("Sk.builtin.checkSequence", Sk.builtin.checkSequence);

	/**
	 * Use this to test whether or not a Python object is iterable.  You should **not** rely
	 * on the presence of tp$iter on the object as a good test, as it could be a user defined
	 * class with `__iter__` defined or ``__getitem__``  This tests for all of those cases
	 *
	 * @param arg {Object}   A Python object
	 * @returns {boolean} true if the object is iterable
	 */
	Sk.builtin.checkIterable = function (arg) {
	    var ret = false;
	    if (arg !== null ) {
	        try {
	            ret = Sk.abstr.iter(arg);
	            if (ret) {
	                return true;
	            } else {
	                return false;
	            }
	        } catch (e) {
	            if (e instanceof Sk.builtin.TypeError) {
	                return false;
	            } else {
	                throw e;
	            }
	        }
	    }
	    return ret;
	};
	goog.exportSymbol("Sk.builtin.checkIterable", Sk.builtin.checkIterable);

	Sk.builtin.checkCallable = function (obj) {
	    // takes care of builtin functions and methods, builtins
	    if (typeof obj === "function") {
	        return true;
	    }
	    // takes care of python function, methods and lambdas
	    if (obj instanceof Sk.builtin.func) {
	        return true;
	    }
	    // takes care of instances of methods
	    if (obj instanceof Sk.builtin.method) {
	        return true;
	    }
	    // go up the prototype chain to see if the class has a __call__ method
	    if (Sk.abstr.lookupSpecial(obj, "__call__") !== undefined) {
	        return true;
	    } 
	    return false;
	};

	Sk.builtin.checkNumber = function (arg) {
	    return (arg !== null && (typeof arg === "number" ||
	        arg instanceof Sk.builtin.int_ ||
	        arg instanceof Sk.builtin.float_ ||
	        arg instanceof Sk.builtin.lng));
	};
	goog.exportSymbol("Sk.builtin.checkNumber", Sk.builtin.checkNumber);

	/**
	 * Checks for complex type, delegates to internal method
	 * Most skulpt users would search here!
	 */
	Sk.builtin.checkComplex = function (arg) {
	    return Sk.builtin.complex._complex_check(arg);
	};
	goog.exportSymbol("Sk.builtin.checkComplex", Sk.builtin.checkComplex);

	Sk.builtin.checkInt = function (arg) {
	    return (arg !== null) && ((typeof arg === "number" && arg === (arg | 0)) ||
	        arg instanceof Sk.builtin.int_ ||
	        arg instanceof Sk.builtin.lng);
	};
	goog.exportSymbol("Sk.builtin.checkInt", Sk.builtin.checkInt);

	Sk.builtin.checkFloat = function (arg) {
	    return (arg !== null) && (arg instanceof Sk.builtin.float_);
	};
	goog.exportSymbol("Sk.builtin.checkFloat", Sk.builtin.checkFloat);

	Sk.builtin.checkString = function (arg) {
	    return (arg !== null && arg.__class__ == Sk.builtin.str);
	};
	goog.exportSymbol("Sk.builtin.checkString", Sk.builtin.checkString);

	Sk.builtin.checkClass = function (arg) {
	    return (arg !== null && arg.sk$type);
	};
	goog.exportSymbol("Sk.builtin.checkClass", Sk.builtin.checkClass);

	Sk.builtin.checkBool = function (arg) {
	    return (arg instanceof Sk.builtin.bool);
	};
	goog.exportSymbol("Sk.builtin.checkBool", Sk.builtin.checkBool);

	Sk.builtin.checkNone = function (arg) {
	    return (arg instanceof Sk.builtin.none);
	};
	goog.exportSymbol("Sk.builtin.checkNone", Sk.builtin.checkNone);

	Sk.builtin.checkFunction = function (arg) {
	    return (arg !== null && arg.tp$call !== undefined);
	};
	goog.exportSymbol("Sk.builtin.checkFunction", Sk.builtin.checkFunction);

	/**
	 * @constructor
	 * Sk.builtin.func
	 *
	 * @description
	 * This function converts a Javascript function into a Python object that is callable.  Or just
	 * think of it as a Python function rather than a Javascript function now.  This is an important
	 * distinction in skulpt because once you have Python function you cannot just call it.
	 * You must now use Sk.misceval.callsim to call the Python function.
	 *
	 * @param {Function} code the javascript implementation of this function
	 * @param {Object=} globals the globals where this function was defined.
	 * Can be undefined (which will be stored as null) for builtins. (is
	 * that ok?)
	 * @param {Object=} closure dict of free variables
	 * @param {Object=} closure2 another dict of free variables that will be
	 * merged into 'closure'. there's 2 to simplify generated code (one is $free,
	 * the other is $cell)
	 *
	 * closure is the cell variables from the parent scope that we need to close
	 * over. closure2 is the free variables in the parent scope that we also might
	 * need to access.
	 *
	 * NOTE: co_varnames and co_name are defined by compiled code only, so we have
	 * to access them via dict-style lookup for closure.
	 *
	 */
	Sk.builtin.func = function (code, globals, closure, closure2) {
	    var k;
	    this.func_code = code;
	    this.func_globals = globals || null;
	    if (closure2 !== undefined) {
	        // todo; confirm that modification here can't cause problems
	        for (k in closure2) {
	            closure[k] = closure2[k];
	        }
	    }
	    this.func_closure = closure;
	    return this;
	};
	goog.exportSymbol("Sk.builtin.func", Sk.builtin.func);


	Sk.builtin.func.prototype.tp$name = "function";
	Sk.builtin.func.prototype.tp$descr_get = function (obj, objtype) {
	    goog.asserts.assert(obj !== undefined && objtype !== undefined);
	    if (obj == null) {
	        return this;
	    }
	    return new Sk.builtin.method(this, obj, objtype);
	};
	Sk.builtin.func.prototype.tp$call = function (args, kw) {
	    var j;
	    var i;
	    var numvarnames;
	    var varnames;
	    var kwlen;
	    var kwargsarr;
	    var expectskw;
	    var name;
	    var numargs;

	    // note: functions expect 'this' to be globals to avoid having to
	    // slice/unshift onto the main args
	    if (this.func_closure) {
	        // todo; OK to modify?
	        if (this.func_code["$defaults"] && this.func_code["co_varnames"]) {
	            // Make sure all default arguments are in args before adding closure
	            numargs = args.length;
	            numvarnames = this.func_code["co_varnames"].length;
	            for (i = numargs; i < numvarnames; i++) {
	                args.push(undefined);
	            }
	        }
	        args.push(this.func_closure);
	    }

	    expectskw = this.func_code["co_kwargs"];
	    kwargsarr = [];

	    if (this.func_code["no_kw"] && kw) {
	        name = (this.func_code && this.func_code["co_name"] && this.func_code["co_name"].v) || "<native JS>";
	        throw new Sk.builtin.TypeError(name + "() takes no keyword arguments");
	    }

	    if (kw) {
	        // bind the kw args
	        kwlen = kw.length;
	        varnames = this.func_code["co_varnames"];
	        numvarnames = varnames && varnames.length;
	        for (i = 0; i < kwlen; i += 2) {
	            // todo; make this a dict mapping name to offset
	            for (j = 0; j < numvarnames; ++j) {
	                if (kw[i] === varnames[j]) {
	                    break;
	                }
	            }
	            if (varnames && j !== numvarnames) {
	                if (j in args) {
	                    name = (this.func_code && this.func_code["co_name"] && this.func_code["co_name"].v) || "<native JS>";
	                    throw new Sk.builtin.TypeError(name + "() got multiple values for keyword argument '" + kw[i] + "'");
	                }
	                args[j] = kw[i + 1];
	            } else if (expectskw) {
	                // build kwargs dict
	                kwargsarr.push(new Sk.builtin.str(kw[i]));
	                kwargsarr.push(kw[i + 1]);
	            } else {
	                name = (this.func_code && this.func_code["co_name"] && this.func_code["co_name"].v) || "<native JS>";
	                throw new Sk.builtin.TypeError(name + "() got an unexpected keyword argument '" + kw[i] + "'");
	            }
	        }
	    }
	    if (expectskw) {
	        args.unshift(kwargsarr);
	    }

	    //print(JSON.stringify(args, null, 2));

	    return this.func_code.apply(this.func_globals, args);
	};

	Sk.builtin.func.prototype.tp$getattr = function (key) {
	    return this[key];
	};
	Sk.builtin.func.prototype.tp$setattr = function (key, value) {
	    this[key] = value;
	};

	//todo; investigate why the other doesn't work
	//Sk.builtin.type.makeIntoTypeObj('function', Sk.builtin.func);
	Sk.builtin.func.prototype.ob$type = Sk.builtin.type.makeTypeObj("function", new Sk.builtin.func(null, null));

	Sk.builtin.func.prototype["$r"] = function () {
	    var name = (this.func_code && this.func_code["co_name"] && this.func_code["co_name"].v) || "<native JS>";
	    return new Sk.builtin.str("<function " + name + ">");
	};



	/* ---- /Users/rob/skulpty/lib/../node_modules/skulpt/src/seqtype.js ---- */ 

	/**
	 * @constructor
	 * Sk.builtin.seqtype
	 *
	 * @description
	 * Abstract class for Python sequence types.
	 *
	 * @extends {Sk.builtin.object}
	 *
	 * @return {undefined} Cannot instantiate a Sk.builtin.seqtype object
	 */
	Sk.builtin.seqtype = function () {

	    throw new Sk.builtin.ExternalError("Cannot instantiate abstract Sk.builtin.seqtype class");

	};

	Sk.abstr.setUpInheritance("SequenceType", Sk.builtin.seqtype, Sk.builtin.object);

	Sk.builtin.seqtype.sk$abstract = true;

	/**
	 * Python wrapper of `__len__` method.
	 *
	 * @name  __len__
	 * @instance
	 * @memberOf Sk.builtin.seqtype.prototype
	 */
	Sk.builtin.seqtype.prototype["__len__"] = new Sk.builtin.func(function (self) {

	    Sk.builtin.pyCheckArgs("__len__", arguments, 0, 0, false, true);

	    return new Sk.builtin.int_(self.sq$length());    

	});

	/**
	 * Python wrapper of `__iter__` method.
	 *
	 * @name  __iter__
	 * @instance
	 * @memberOf Sk.builtin.seqtype.prototype
	 */
	Sk.builtin.seqtype.prototype["__iter__"] = new Sk.builtin.func(function (self) {

	    Sk.builtin.pyCheckArgs("__iter__", arguments, 0, 0, false, true);

	    return self.tp$iter();

	});

	/**
	 * Python wrapper of `__contains__` method.
	 *
	 * @name  __contains__
	 * @instance
	 * @memberOf Sk.builtin.seqtype.prototype
	 */
	Sk.builtin.seqtype.prototype["__contains__"] = new Sk.builtin.func(function (self, item) {

	    Sk.builtin.pyCheckArgs("__contains__", arguments, 1, 1, false, true);

	    if (self.sq$contains(item)) {
	        return Sk.builtin.bool.true$;
	    } else {
	        return Sk.builtin.bool.false$;
	    }

	});

	/**
	 * Python wrapper of `__getitem__` method.
	 *
	 * @name  __getitem__
	 * @instance
	 * @memberOf Sk.builtin.seqtype.prototype
	 */
	Sk.builtin.seqtype.prototype["__getitem__"] = new Sk.builtin.func(function (self, key) {

	    Sk.builtin.pyCheckArgs("__getitem__", arguments, 1, 1, false, true);

	    return self.mp$subscript(key);

	});

	/**
	 * Python wrapper of `__add__` method.
	 *
	 * @name  __add__
	 * @instance
	 * @memberOf Sk.builtin.seqtype.prototype
	 */
	Sk.builtin.seqtype.prototype["__add__"] = new Sk.builtin.func(function (self, other) {

	    Sk.builtin.pyCheckArgs("__add__", arguments, 1, 1, false, true);

	    return self.sq$concat(other);

	});

	/**
	 * Python wrapper of `__mul__` method.
	 *
	 * @name  __mul__
	 * @instance
	 * @memberOf Sk.builtin.seqtype.prototype
	 */
	Sk.builtin.seqtype.prototype["__mul__"] = new Sk.builtin.func(function (self, n) {

	    Sk.builtin.pyCheckArgs("__mul__", arguments, 1, 1, false, true);

	    if (!Sk.misceval.isIndex(n)) {
	        throw new Sk.builtin.TypeError("can't multiply sequence by non-int of type '" + Sk.abstr.typeName(n) + "'");
	    }

	    return self.sq$repeat(n);

	});

	/**
	 * Python wrapper of `__rmul__` method.
	 *
	 * @name  __rmul__
	 * @instance
	 * @memberOf Sk.builtin.seqtype.prototype
	 */
	Sk.builtin.seqtype.prototype["__rmul__"] = new Sk.builtin.func(function (self, n) {

	    Sk.builtin.pyCheckArgs("__rmul__", arguments, 1, 1, false, true);

	    return self.sq$repeat(n);    

	});



	/* ---- /Users/rob/skulpty/lib/../node_modules/skulpt/src/str.js ---- */ 

	Sk.builtin.interned = {};

	/**
	 * @constructor
	 * @param {*} x
	 * @extends Sk.builtin.object
	 */
	Sk.builtin.str = function (x) {
	    var ret;
	    if (x === undefined) {
	        x = "";
	    }
	    if (x instanceof Sk.builtin.str) {
	        return x;
	    }
	    if (!(this instanceof Sk.builtin.str)) {
	        return new Sk.builtin.str(x);
	    }


	    // convert to js string
	    if (x === true) {
	        ret = "True";
	    } else if (x === false) {
	        ret = "False";
	    } else if ((x === null) || (x instanceof Sk.builtin.none)) {
	        ret = "None";
	    } else if (x instanceof Sk.builtin.bool) {
	        if (x.v) {
	            ret = "True";
	        } else {
	            ret = "False";
	        }
	    } else if (typeof x === "number") {
	        ret = x.toString();
	        if (ret === "Infinity") {
	            ret = "inf";
	        } else if (ret === "-Infinity") {
	            ret = "-inf";
	        }
	    } else if (typeof x === "string") {
	        ret = x;
	    } else if (x.tp$str !== undefined) {
	        ret = x.tp$str();
	        if (!(ret instanceof Sk.builtin.str)) {
	            throw new Sk.builtin.ValueError("__str__ didn't return a str");
	        }
	        return ret;
	    } else {
	        return Sk.misceval.objectRepr(x);
	    }

	    // interning required for strings in py
	    if (Sk.builtin.interned["1" + ret]) {
	        return Sk.builtin.interned["1" + ret];
	    }

	    this.__class__ = Sk.builtin.str;
	    this.v = ret;
	    this["v"] = this.v;
	    Sk.builtin.interned["1" + ret] = this;
	    return this;

	};
	goog.exportSymbol("Sk.builtin.str", Sk.builtin.str);

	Sk.abstr.setUpInheritance("str", Sk.builtin.str, Sk.builtin.seqtype);

	Sk.builtin.str.prototype.mp$subscript = function (index) {
	    var ret;
	    if (Sk.misceval.isIndex(index)) {
	        index = Sk.misceval.asIndex(index);
	        if (index < 0) {
	            index = this.v.length + index;
	        }
	        if (index < 0 || index >= this.v.length) {
	            throw new Sk.builtin.IndexError("string index out of range");
	        }
	        return new Sk.builtin.str(this.v.charAt(index));
	    } else if (index instanceof Sk.builtin.slice) {
	        ret = "";
	        index.sssiter$(this, function (i, wrt) {
	            if (i >= 0 && i < wrt.v.length) {
	                ret += wrt.v.charAt(i);
	            }
	        });
	        return new Sk.builtin.str(ret);
	    } else {
	        throw new Sk.builtin.TypeError("string indices must be integers, not " + Sk.abstr.typeName(index));
	    }
	};

	Sk.builtin.str.prototype.sq$length = function () {
	    return this.v.length;
	};
	Sk.builtin.str.prototype.sq$concat = function (other) {
	    var otypename;
	    if (!other || !Sk.builtin.checkString(other)) {
	        otypename = Sk.abstr.typeName(other);
	        throw new Sk.builtin.TypeError("cannot concatenate 'str' and '" + otypename + "' objects");
	    }
	    return new Sk.builtin.str(this.v + other.v);
	};
	Sk.builtin.str.prototype.nb$add = Sk.builtin.str.prototype.sq$concat;
	Sk.builtin.str.prototype.nb$inplace_add = Sk.builtin.str.prototype.sq$concat;
	Sk.builtin.str.prototype.sq$repeat = function (n) {
	    var i;
	    var ret;

	    if (!Sk.misceval.isIndex(n)) {
	        throw new Sk.builtin.TypeError("can't multiply sequence by non-int of type '" + Sk.abstr.typeName(n) + "'");
	    }

	    n = Sk.misceval.asIndex(n);
	    ret = "";
	    for (i = 0; i < n; ++i) {
	        ret += this.v;
	    }
	    return new Sk.builtin.str(ret);
	};
	Sk.builtin.str.prototype.nb$multiply = Sk.builtin.str.prototype.sq$repeat;
	Sk.builtin.str.prototype.nb$inplace_multiply = Sk.builtin.str.prototype.sq$repeat;
	Sk.builtin.str.prototype.sq$item = function () {
	    goog.asserts.fail();
	};
	Sk.builtin.str.prototype.sq$slice = function (i1, i2) {
	    i1 = Sk.builtin.asnum$(i1);
	    i2 = Sk.builtin.asnum$(i2);
	    if (i1 < 0) {
	        i1 = 0;
	    }
	    return new Sk.builtin.str(this.v.substr(i1, i2 - i1));
	};

	Sk.builtin.str.prototype.sq$contains = function (ob) {
	    if (!(ob instanceof Sk.builtin.str)) {
	        throw new Sk.builtin.TypeError("TypeError: 'In <string> requires string as left operand");
	    }
	    return this.v.indexOf(ob.v) != -1;
	};

	Sk.builtin.str.prototype.__iter__ = new Sk.builtin.func(function (self) {
	    return new Sk.builtin.str_iter_(self);
	});

	Sk.builtin.str.prototype.tp$iter = function () {
	    return new Sk.builtin.str_iter_(this);
	};

	Sk.builtin.str.prototype.tp$richcompare = function (other, op) {
	    if (!(other instanceof Sk.builtin.str)) {
	        return undefined;
	    }

	    switch (op) {
	        case "Lt":
	            return this.v < other.v;
	        case "LtE":
	            return this.v <= other.v;
	        case "Eq":
	            return this.v === other.v;
	        case "NotEq":
	            return this.v !== other.v;
	        case "Gt":
	            return this.v > other.v;
	        case "GtE":
	            return this.v >= other.v;
	        default:
	            goog.asserts.fail();
	    }
	};

	Sk.builtin.str.prototype["$r"] = function () {
	    // single is preferred
	    var ashex;
	    var c;
	    var i;
	    var ret;
	    var len;
	    var quote = "'";
	    //jshint ignore:start
	    if (this.v.indexOf("'") !== -1 && this.v.indexOf('"') === -1) {
	        quote = '"';
	    }
	    //jshint ignore:end
	    len = this.v.length;
	    ret = quote;
	    for (i = 0; i < len; ++i) {
	        c = this.v.charAt(i);
	        if (c === quote || c === "\\") {
	            ret += "\\" + c;
	        } else if (c === "\t") {
	            ret += "\\t";
	        } else if (c === "\n") {
	            ret += "\\n";
	        } else if (c === "\r") {
	            ret += "\\r";
	        } else if (c < " " || c >= 0x7f) {
	            ashex = c.charCodeAt(0).toString(16);
	            if (ashex.length < 2) {
	                ashex = "0" + ashex;
	            }
	            ret += "\\x" + ashex;
	        } else {
	            ret += c;
	        }
	    }
	    ret += quote;
	    return new Sk.builtin.str(ret);
	};


	Sk.builtin.str.re_escape_ = function (s) {
	    var c;
	    var i;
	    var ret = [];
	    var re = /^[A-Za-z0-9]+$/;
	    for (i = 0; i < s.length; ++i) {
	        c = s.charAt(i);

	        if (re.test(c)) {
	            ret.push(c);
	        } else {
	            if (c === "\\000") {
	                ret.push("\\000");
	            } else {
	                ret.push("\\" + c);
	            }
	        }
	    }
	    return ret.join("");
	};

	Sk.builtin.str.prototype["lower"] = new Sk.builtin.func(function (self) {
	    Sk.builtin.pyCheckArgs("lower", arguments, 1, 1);
	    return new Sk.builtin.str(self.v.toLowerCase());
	});

	Sk.builtin.str.prototype["upper"] = new Sk.builtin.func(function (self) {
	    Sk.builtin.pyCheckArgs("upper", arguments, 1, 1);
	    return new Sk.builtin.str(self.v.toUpperCase());
	});

	Sk.builtin.str.prototype["capitalize"] = new Sk.builtin.func(function (self) {
	    var i;
	    var cap;
	    var orig;
	    Sk.builtin.pyCheckArgs("capitalize", arguments, 1, 1);
	    orig = self.v;

	    if (orig.length === 0) {
	        return new Sk.builtin.str("");
	    }
	    cap = orig.charAt(0).toUpperCase();

	    for (i = 1; i < orig.length; i++) {
	        cap += orig.charAt(i).toLowerCase();
	    }
	    return new Sk.builtin.str(cap);
	});

	Sk.builtin.str.prototype["join"] = new Sk.builtin.func(function (self, seq) {
	    var it, i;
	    var arrOfStrs;
	    Sk.builtin.pyCheckArgs("join", arguments, 2, 2);
	    Sk.builtin.pyCheckType("seq", "iterable", Sk.builtin.checkIterable(seq));
	    arrOfStrs = [];
	    for (it = seq.tp$iter(), i = it.tp$iternext(); i !== undefined; i = it.tp$iternext()) {
	        if (i.constructor !== Sk.builtin.str) {
	            throw new Sk.builtin.TypeError("TypeError: sequence item " + arrOfStrs.length + ": expected string, " + typeof i + " found");
	        }
	        arrOfStrs.push(i.v);
	    }
	    return new Sk.builtin.str(arrOfStrs.join(self.v));
	});

	Sk.builtin.str.prototype["split"] = new Sk.builtin.func(function (self, on, howmany) {
	    var splits;
	    var index;
	    var match;
	    var result;
	    var s;
	    var str;
	    var regex;
	    Sk.builtin.pyCheckArgs("split", arguments, 1, 3);
	    if ((on === undefined) || (on instanceof Sk.builtin.none)) {
	        on = null;
	    }
	    if ((on !== null) && !Sk.builtin.checkString(on)) {
	        throw new Sk.builtin.TypeError("expected a string");
	    }
	    if ((on !== null) && on.v === "") {
	        throw new Sk.builtin.ValueError("empty separator");
	    }
	    if ((howmany !== undefined) && !Sk.builtin.checkInt(howmany)) {
	        throw new Sk.builtin.TypeError("an integer is required");
	    }

	    howmany = Sk.builtin.asnum$(howmany);
	    regex = /[\s]+/g;
	    str = self.v;
	    if (on === null) {
	        str = goog.string.trimLeft(str);
	    } else {
	        // Escape special characters in "on" so we can use a regexp
	        s = on.v.replace(/([.*+?=|\\\/()\[\]\{\}^$])/g, "\\$1");
	        regex = new RegExp(s, "g");
	    }

	    // This is almost identical to re.split,
	    // except how the regexp is constructed

	    result = [];
	    index = 0;
	    splits = 0;
	    while ((match = regex.exec(str)) != null) {
	        if (match.index === regex.lastIndex) {
	            // empty match
	            break;
	        }
	        result.push(new Sk.builtin.str(str.substring(index, match.index)));
	        index = regex.lastIndex;
	        splits += 1;
	        if (howmany && (splits >= howmany)) {
	            break;
	        }
	    }
	    str = str.substring(index);
	    if (on !== null || (str.length > 0)) {
	        result.push(new Sk.builtin.str(str));
	    }

	    return new Sk.builtin.list(result);
	});

	Sk.builtin.str.prototype["strip"] = new Sk.builtin.func(function (self, chars) {
	    var regex;
	    var pattern;
	    Sk.builtin.pyCheckArgs("strip", arguments, 1, 2);
	    if ((chars !== undefined) && !Sk.builtin.checkString(chars)) {
	        throw new Sk.builtin.TypeError("strip arg must be None or str");
	    }
	    if (chars === undefined) {
	        pattern = /^\s+|\s+$/g;
	    } else {
	        regex = Sk.builtin.str.re_escape_(chars.v);
	        pattern = new RegExp("^[" + regex + "]+|[" + regex + "]+$", "g");
	    }
	    return new Sk.builtin.str(self.v.replace(pattern, ""));
	});

	Sk.builtin.str.prototype["lstrip"] = new Sk.builtin.func(function (self, chars) {
	    var regex;
	    var pattern;
	    Sk.builtin.pyCheckArgs("lstrip", arguments, 1, 2);
	    if ((chars !== undefined) && !Sk.builtin.checkString(chars)) {
	        throw new Sk.builtin.TypeError("lstrip arg must be None or str");
	    }
	    if (chars === undefined) {
	        pattern = /^\s+/g;
	    } else {
	        regex = Sk.builtin.str.re_escape_(chars.v);
	        pattern = new RegExp("^[" + regex + "]+", "g");
	    }
	    return new Sk.builtin.str(self.v.replace(pattern, ""));
	});

	Sk.builtin.str.prototype["rstrip"] = new Sk.builtin.func(function (self, chars) {
	    var regex;
	    var pattern;
	    Sk.builtin.pyCheckArgs("rstrip", arguments, 1, 2);
	    if ((chars !== undefined) && !Sk.builtin.checkString(chars)) {
	        throw new Sk.builtin.TypeError("rstrip arg must be None or str");
	    }
	    if (chars === undefined) {
	        pattern = /\s+$/g;
	    } else {
	        regex = Sk.builtin.str.re_escape_(chars.v);
	        pattern = new RegExp("[" + regex + "]+$", "g");
	    }
	    return new Sk.builtin.str(self.v.replace(pattern, ""));
	});

	Sk.builtin.str.prototype["partition"] = new Sk.builtin.func(function (self, sep) {
	    var pos;
	    var sepStr;
	    Sk.builtin.pyCheckArgs("partition", arguments, 2, 2);
	    Sk.builtin.pyCheckType("sep", "string", Sk.builtin.checkString(sep));
	    sepStr = new Sk.builtin.str(sep);
	    pos = self.v.indexOf(sepStr.v);
	    if (pos < 0) {
	        return new Sk.builtin.tuple([self, Sk.builtin.str.$emptystr, Sk.builtin.str.$emptystr]);
	    }

	    return new Sk.builtin.tuple([
	        new Sk.builtin.str(self.v.substring(0, pos)),
	        sepStr,
	        new Sk.builtin.str(self.v.substring(pos + sepStr.v.length))]);
	});

	Sk.builtin.str.prototype["rpartition"] = new Sk.builtin.func(function (self, sep) {
	    var pos;
	    var sepStr;
	    Sk.builtin.pyCheckArgs("rpartition", arguments, 2, 2);
	    Sk.builtin.pyCheckType("sep", "string", Sk.builtin.checkString(sep));
	    sepStr = new Sk.builtin.str(sep);
	    pos = self.v.lastIndexOf(sepStr.v);
	    if (pos < 0) {
	        return new Sk.builtin.tuple([Sk.builtin.str.$emptystr, Sk.builtin.str.$emptystr, self]);
	    }

	    return new Sk.builtin.tuple([
	        new Sk.builtin.str(self.v.substring(0, pos)),
	        sepStr,
	        new Sk.builtin.str(self.v.substring(pos + sepStr.v.length))]);
	});

	Sk.builtin.str.prototype["count"] = new Sk.builtin.func(function (self, pat, start, end) {
	    var normaltext;
	    var ctl;
	    var slice;
	    var m;
	    Sk.builtin.pyCheckArgs("count", arguments, 2, 4);
	    if (!Sk.builtin.checkString(pat)) {
	        throw new Sk.builtin.TypeError("expected a character buffer object");
	    }
	    if ((start !== undefined) && !Sk.builtin.checkInt(start)) {
	        throw new Sk.builtin.TypeError("slice indices must be integers or None or have an __index__ method");
	    }
	    if ((end !== undefined) && !Sk.builtin.checkInt(end)) {
	        throw new Sk.builtin.TypeError("slice indices must be integers or None or have an __index__ method");
	    }

	    if (start === undefined) {
	        start = 0;
	    } else {
	        start = Sk.builtin.asnum$(start);
	        start = start >= 0 ? start : self.v.length + start;
	    }

	    if (end === undefined) {
	        end = self.v.length;
	    } else {
	        end = Sk.builtin.asnum$(end);
	        end = end >= 0 ? end : self.v.length + end;
	    }

	    normaltext = pat.v.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
	    m = new RegExp(normaltext, "g");
	    slice = self.v.slice(start, end);
	    ctl = slice.match(m);
	    if (!ctl) {
	        return  new Sk.builtin.int_(0);
	    } else {
	        return new Sk.builtin.int_(ctl.length);
	    }

	});

	Sk.builtin.str.prototype["ljust"] = new Sk.builtin.func(function (self, len, fillchar) {
	    var newstr;
	    Sk.builtin.pyCheckArgs("ljust", arguments, 2, 3);
	    if (!Sk.builtin.checkInt(len)) {
	        throw new Sk.builtin.TypeError("integer argument exepcted, got " + Sk.abstr.typeName(len));
	    }
	    if ((fillchar !== undefined) && (!Sk.builtin.checkString(fillchar) || fillchar.v.length !== 1)) {
	        throw new Sk.builtin.TypeError("must be char, not " + Sk.abstr.typeName(fillchar));
	    }
	    if (fillchar === undefined) {
	        fillchar = " ";
	    } else {
	        fillchar = fillchar.v;
	    }
	    len = Sk.builtin.asnum$(len);
	    if (self.v.length >= len) {
	        return self;
	    } else {
	        newstr = Array.prototype.join.call({length: Math.floor(len - self.v.length) + 1}, fillchar);
	        return new Sk.builtin.str(self.v + newstr);
	    }
	});

	Sk.builtin.str.prototype["rjust"] = new Sk.builtin.func(function (self, len, fillchar) {
	    var newstr;
	    Sk.builtin.pyCheckArgs("rjust", arguments, 2, 3);
	    if (!Sk.builtin.checkInt(len)) {
	        throw new Sk.builtin.TypeError("integer argument exepcted, got " + Sk.abstr.typeName(len));
	    }
	    if ((fillchar !== undefined) && (!Sk.builtin.checkString(fillchar) || fillchar.v.length !== 1)) {
	        throw new Sk.builtin.TypeError("must be char, not " + Sk.abstr.typeName(fillchar));
	    }
	    if (fillchar === undefined) {
	        fillchar = " ";
	    } else {
	        fillchar = fillchar.v;
	    }
	    len = Sk.builtin.asnum$(len);
	    if (self.v.length >= len) {
	        return self;
	    } else {
	        newstr = Array.prototype.join.call({length: Math.floor(len - self.v.length) + 1}, fillchar);
	        return new Sk.builtin.str(newstr + self.v);
	    }

	});

	Sk.builtin.str.prototype["center"] = new Sk.builtin.func(function (self, len, fillchar) {
	    var newstr;
	    var newstr1;
	    Sk.builtin.pyCheckArgs("center", arguments, 2, 3);
	    if (!Sk.builtin.checkInt(len)) {
	        throw new Sk.builtin.TypeError("integer argument exepcted, got " + Sk.abstr.typeName(len));
	    }
	    if ((fillchar !== undefined) && (!Sk.builtin.checkString(fillchar) || fillchar.v.length !== 1)) {
	        throw new Sk.builtin.TypeError("must be char, not " + Sk.abstr.typeName(fillchar));
	    }
	    if (fillchar === undefined) {
	        fillchar = " ";
	    } else {
	        fillchar = fillchar.v;
	    }
	    len = Sk.builtin.asnum$(len);
	    if (self.v.length >= len) {
	        return self;
	    } else {
	        newstr1 = Array.prototype.join.call({length: Math.floor((len - self.v.length) / 2) + 1}, fillchar);
	        newstr = newstr1 + self.v + newstr1;
	        if (newstr.length < len) {
	            newstr = newstr + fillchar;
	        }
	        return new Sk.builtin.str(newstr);
	    }

	});

	Sk.builtin.str.prototype["find"] = new Sk.builtin.func(function (self, tgt, start, end) {
	    var idx;
	    Sk.builtin.pyCheckArgs("find", arguments, 2, 4);
	    if (!Sk.builtin.checkString(tgt)) {
	        throw new Sk.builtin.TypeError("expected a character buffer object");
	    }
	    if ((start !== undefined) && !Sk.builtin.checkInt(start)) {
	        throw new Sk.builtin.TypeError("slice indices must be integers or None or have an __index__ method");
	    }
	    if ((end !== undefined) && !Sk.builtin.checkInt(end)) {
	        throw new Sk.builtin.TypeError("slice indices must be integers or None or have an __index__ method");
	    }

	    if (start === undefined) {
	        start = 0;
	    } else {
	        start = Sk.builtin.asnum$(start);
	        start = start >= 0 ? start : self.v.length + start;
	    }

	    if (end === undefined) {
	        end = self.v.length;
	    } else {
	        end = Sk.builtin.asnum$(end);
	        end = end >= 0 ? end : self.v.length + end;
	    }

	    idx = self.v.indexOf(tgt.v, start);
	    idx = ((idx >= start) && (idx < end)) ? idx : -1;

	    return new Sk.builtin.int_(idx);
	});

	Sk.builtin.str.prototype["index"] = new Sk.builtin.func(function (self, tgt, start, end) {
	    var idx;
	    Sk.builtin.pyCheckArgs("index", arguments, 2, 4);
	    idx = Sk.misceval.callsim(self["find"], self, tgt, start, end);
	    if (Sk.builtin.asnum$(idx) === -1) {
	        throw new Sk.builtin.ValueError("substring not found");
	    }
	    return idx;
	});

	Sk.builtin.str.prototype["rfind"] = new Sk.builtin.func(function (self, tgt, start, end) {
	    var idx;
	    Sk.builtin.pyCheckArgs("rfind", arguments, 2, 4);
	    if (!Sk.builtin.checkString(tgt)) {
	        throw new Sk.builtin.TypeError("expected a character buffer object");
	    }
	    if ((start !== undefined) && !Sk.builtin.checkInt(start)) {
	        throw new Sk.builtin.TypeError("slice indices must be integers or None or have an __index__ method");
	    }
	    if ((end !== undefined) && !Sk.builtin.checkInt(end)) {
	        throw new Sk.builtin.TypeError("slice indices must be integers or None or have an __index__ method");
	    }

	    if (start === undefined) {
	        start = 0;
	    } else {
	        start = Sk.builtin.asnum$(start);
	        start = start >= 0 ? start : self.v.length + start;
	    }

	    if (end === undefined) {
	        end = self.v.length;
	    } else {
	        end = Sk.builtin.asnum$(end);
	        end = end >= 0 ? end : self.v.length + end;
	    }

	    idx = self.v.lastIndexOf(tgt.v, end);
	    idx = (idx !== end) ? idx : self.v.lastIndexOf(tgt.v, end - 1);
	    idx = ((idx >= start) && (idx < end)) ? idx : -1;

	    return new Sk.builtin.int_(idx);
	});

	Sk.builtin.str.prototype["rindex"] = new Sk.builtin.func(function (self, tgt, start, end) {
	    var idx;
	    Sk.builtin.pyCheckArgs("rindex", arguments, 2, 4);
	    idx = Sk.misceval.callsim(self["rfind"], self, tgt, start, end);
	    if (Sk.builtin.asnum$(idx) === -1) {
	        throw new Sk.builtin.ValueError("substring not found");
	    }
	    return idx;
	});

	Sk.builtin.str.prototype["startswith"] = new Sk.builtin.func(function (self, tgt) {
	    Sk.builtin.pyCheckArgs("startswith", arguments, 2, 2);
	    Sk.builtin.pyCheckType("tgt", "string", Sk.builtin.checkString(tgt));
	    return new Sk.builtin.bool( self.v.indexOf(tgt.v) === 0);
	});

	// http://stackoverflow.com/questions/280634/endswith-in-javascript
	Sk.builtin.str.prototype["endswith"] = new Sk.builtin.func(function (self, tgt) {
	    Sk.builtin.pyCheckArgs("endswith", arguments, 2, 2);
	    Sk.builtin.pyCheckType("tgt", "string", Sk.builtin.checkString(tgt));
	    return new Sk.builtin.bool( self.v.indexOf(tgt.v, self.v.length - tgt.v.length) !== -1);
	});

	Sk.builtin.str.prototype["replace"] = new Sk.builtin.func(function (self, oldS, newS, count) {
	    var c;
	    var patt;
	    Sk.builtin.pyCheckArgs("replace", arguments, 3, 4);
	    Sk.builtin.pyCheckType("oldS", "string", Sk.builtin.checkString(oldS));
	    Sk.builtin.pyCheckType("newS", "string", Sk.builtin.checkString(newS));
	    if ((count !== undefined) && !Sk.builtin.checkInt(count)) {
	        throw new Sk.builtin.TypeError("integer argument expected, got " +
	            Sk.abstr.typeName(count));
	    }
	    count = Sk.builtin.asnum$(count);
	    patt = new RegExp(Sk.builtin.str.re_escape_(oldS.v), "g");

	    if ((count === undefined) || (count < 0)) {
	        return new Sk.builtin.str(self.v.replace(patt, newS.v));
	    }

	    c = 0;

	    function replacer (match) {
	        c++;
	        if (c <= count) {
	            return newS.v;
	        }
	        return match;
	    }

	    return new Sk.builtin.str(self.v.replace(patt, replacer));
	});

	Sk.builtin.str.prototype["zfill"] = new Sk.builtin.func(function (self, len) {
	    var str = self.v;
	    var ret;
	    var zeroes;
	    var offset;
	    var pad = "";

	    Sk.builtin.pyCheckArgs("zfill", arguments, 2, 2);
	    if (! Sk.builtin.checkInt(len)) {
	        throw new Sk.builtin.TypeError("integer argument exepected, got " + Sk.abstr.typeName(len));
	    }

	    // figure out how many zeroes are needed to make the proper length
	    zeroes = len.v - str.length;
	    // offset by 1 if there is a +/- at the beginning of the string
	    offset = (str[0] === "+" || str[0] === "-") ? 1 : 0;
	    for(var i = 0; i < zeroes; i++){
	        pad += "0";
	    }
	    // combine the string and the zeroes
	    ret = str.substr(0, offset) + pad + str.substr(offset);
	    return new Sk.builtin.str(ret);


	});

	Sk.builtin.str.prototype["isdigit"] = new Sk.builtin.func(function (self) {
	    Sk.builtin.pyCheckArgs("isdigit", arguments, 1, 1);
	    return new Sk.builtin.bool( /^\d+$/.test(self.v));
	});

	Sk.builtin.str.prototype["isspace"] = new Sk.builtin.func(function (self) {
	    Sk.builtin.pyCheckArgs("isspace", arguments, 1, 1);
	    return new Sk.builtin.bool( /^\s+$/.test(self.v));
	});


	Sk.builtin.str.prototype["expandtabs"] = new Sk.builtin.func(function (self, tabsize) {
	    // var input = self.v;
	    // var expanded = "";
	    // var split;
	    // var spacestr = "";
	    // var spacerem;


	    var spaces;
	    var expanded;

	    Sk.builtin.pyCheckArgs("expandtabs", arguments, 1, 2);


	    if ((tabsize !== undefined) && ! Sk.builtin.checkInt(tabsize)) {
	        throw new Sk.builtin.TypeError("integer argument exepected, got " + Sk.abstr.typeName(tabsize));
	    }
	    if (tabsize === undefined) {
	        tabsize = 8;
	    } else {
	        tabsize = Sk.builtin.asnum$(tabsize);
	    }

	    spaces = (new Array(tabsize + 1)).join(" ");
	    expanded = self.v.replace(/([^\r\n\t]*)\t/g, function(a, b) {
	        return b + spaces.slice(b.length % tabsize);
	    });
	    return new Sk.builtin.str(expanded);
	});

	Sk.builtin.str.prototype["swapcase"] = new Sk.builtin.func(function (self) {
	    var ret;
	    Sk.builtin.pyCheckArgs("swapcase", arguments, 1, 1);


	    ret = self.v.replace(/[a-z]/gi, function(c) {
	        var lc = c.toLowerCase();
	        return lc === c ? c.toUpperCase() : lc;
	    });

	    return new Sk.builtin.str(ret);
	});

	Sk.builtin.str.prototype["splitlines"] = new Sk.builtin.func(function (self, keepends) {
	    var data = self.v;
	    var i = 0;
	    var j = i;
	    var selflen = self.v.length;
	    var strs_w = [];
	    var ch;
	    var eol;
	    var sol = 0;
	    var slice;
	    Sk.builtin.pyCheckArgs("splitlines", arguments, 1, 2);
	    if ((keepends !== undefined) && ! Sk.builtin.checkBool(keepends)) {
	        throw new Sk.builtin.TypeError("boolean argument expected, got " + Sk.abstr.typeName(keepends));
	    }
	    if (keepends === undefined) {
	        keepends = false;
	    } else {
	        keepends = keepends.v;
	    }


	    for (i = 0; i < selflen; i ++) {
	        ch = data.charAt(i);
	        if (data.charAt(i + 1) === "\n" && ch === "\r") {
	            eol = i + 2;
	            slice = data.slice(sol, eol);
	            if (! keepends) {
	                slice = slice.replace(/(\r|\n)/g, "");
	            }
	            strs_w.push(new Sk.builtin.str(slice));
	            sol = eol;
	        } else if ((ch === "\n" && data.charAt(i - 1) !== "\r") || ch === "\r") {
	            eol = i + 1;
	            slice = data.slice(sol, eol);
	            if (! keepends) {
	                slice = slice.replace(/(\r|\n)/g, "");
	            }
	            strs_w.push(new Sk.builtin.str(slice));
	            sol = eol;
	        }

	    }
	    if (sol < selflen) {
	        eol = selflen;
	        slice = data.slice(sol, eol);
	        if (! keepends) {
	            slice = slice.replace(/(\r|\n)/g, "");
	        }
	        strs_w.push(new Sk.builtin.str(slice));
	    }
	    return new Sk.builtin.list(strs_w);
	});

	Sk.builtin.str.prototype["title"] = new Sk.builtin.func(function (self) {
	    var ret;

	    Sk.builtin.pyCheckArgs("title", arguments, 1, 1);

	    ret = self.v.replace(/[a-z][a-z]*/gi, function(str) {
	        return str[0].toUpperCase() + str.substr(1).toLowerCase();
	    });

	    return new Sk.builtin.str(ret);
	});

	Sk.builtin.str.prototype["isalpha"] = new Sk.builtin.func(function (self) {
	    Sk.builtin.pyCheckArgs("isalpha", arguments, 1, 1);
	    return new Sk.builtin.bool( self.v.length && goog.string.isAlpha(self.v));
	});

	Sk.builtin.str.prototype["isalnum"] = new Sk.builtin.func(function (self) {
	    Sk.builtin.pyCheckArgs("isalnum", arguments, 1, 1);
	    return new Sk.builtin.bool( self.v.length && goog.string.isAlphaNumeric(self.v));
	});

	// does not account for unicode numeric values
	Sk.builtin.str.prototype["isnumeric"] = new Sk.builtin.func(function (self) {
	    Sk.builtin.pyCheckArgs("isnumeric", arguments, 1, 1);
	    return new Sk.builtin.bool( self.v.length && goog.string.isNumeric(self.v));
	});

	Sk.builtin.str.prototype["islower"] = new Sk.builtin.func(function (self) {
	    Sk.builtin.pyCheckArgs("islower", arguments, 1, 1);
	    return new Sk.builtin.bool( self.v.length && /[a-z]/.test(self.v) && !/[A-Z]/.test(self.v));
	});

	Sk.builtin.str.prototype["isupper"] = new Sk.builtin.func(function (self) {
	    Sk.builtin.pyCheckArgs("isupper", arguments, 1, 1);
	    return new Sk.builtin.bool( self.v.length && !/[a-z]/.test(self.v) && /[A-Z]/.test(self.v));
	});

	Sk.builtin.str.prototype["istitle"] = new Sk.builtin.func(function (self) {
	    // Comparing to str.title() seems the most intuitive thing, but it fails on "",
	    // Other empty-ish strings with no change.
	    var input = self.v;
	    var cased = false;
	    var previous_is_cased = false;
	    var pos;
	    var ch;
	    Sk.builtin.pyCheckArgs("istitle", arguments, 1, 1);
	    for (pos = 0; pos < input.length; pos ++) {
	        ch = input.charAt(pos);
	        if (! /[a-z]/.test(ch) && /[A-Z]/.test(ch)) {
	            if (previous_is_cased) {
	                return new Sk.builtin.bool( false);
	            }
	            previous_is_cased = true;
	            cased = true;
	        } else if (/[a-z]/.test(ch) && ! /[A-Z]/.test(ch)) {
	            if (! previous_is_cased) {
	                return new Sk.builtin.bool( false);
	            }
	            cased = true;
	        } else {
	            previous_is_cased = false;
	        }
	    }
	    return new Sk.builtin.bool( cased);
	});

	Sk.builtin.str.prototype.nb$remainder = function (rhs) {
	    // % format op. rhs can be a value, a tuple, or something with __getitem__ (dict)

	    // From http://docs.python.org/library/stdtypes.html#string-formatting the
	    // format looks like:
	    // 1. The '%' character, which marks the start of the specifier.
	    // 2. Mapping key (optional), consisting of a parenthesised sequence of characters (for example, (somename)).
	    // 3. Conversion flags (optional), which affect the result of some conversion types.
	    // 4. Minimum field width (optional). If specified as an '*' (asterisk), the actual width is read from the next
	    // element of the tuple in values, and the object to convert comes after the minimum field width and optional
	    // precision. 5. Precision (optional), given as a '.' (dot) followed by the precision. If specified as '*' (an
	    // asterisk), the actual width is read from the next element of the tuple in values, and the value to convert comes
	    // after the precision. 6. Length modifier (optional). 7. Conversion type.  length modifier is ignored

	    var ret;
	    var replFunc;
	    var index;
	    var regex;
	    if (rhs.constructor !== Sk.builtin.tuple && (rhs.mp$subscript === undefined || rhs.constructor === Sk.builtin.str)) {
	        rhs = new Sk.builtin.tuple([rhs]);
	    }

	    // general approach is to use a regex that matches the format above, and
	    // do an re.sub with a function as replacement to make the subs.

	    //           1 2222222222222222   33333333   444444444   5555555555555  66666  777777777777777777
	    regex = /%(\([a-zA-Z0-9]+\))?([#0 +\-]+)?(\*|[0-9]+)?(\.(\*|[0-9]+))?[hlL]?([diouxXeEfFgGcrs%])/g;
	    index = 0;
	    replFunc = function (substring, mappingKey, conversionFlags, fieldWidth, precision, precbody, conversionType) {
	        var result;
	        var convName;
	        var convValue;
	        var base;
	        var r;
	        var mk;
	        var value;
	        var handleWidth;
	        var formatNumber;
	        var alternateForm;
	        var precedeWithSign;
	        var blankBeforePositive;
	        var leftAdjust;
	        var zeroPad;
	        var i;
	        fieldWidth = Sk.builtin.asnum$(fieldWidth);
	        precision = Sk.builtin.asnum$(precision);

	        if (mappingKey === undefined || mappingKey === "") {
	            i = index++;
	        } // ff passes '' not undef for some reason

	        if (precision === "") { // ff passes '' here aswell causing problems with G,g, etc.
	            precision = undefined;
	        }

	        zeroPad = false;
	        leftAdjust = false;
	        blankBeforePositive = false;
	        precedeWithSign = false;
	        alternateForm = false;
	        if (conversionFlags) {
	            if (conversionFlags.indexOf("-") !== -1) {
	                leftAdjust = true;
	            } else if (conversionFlags.indexOf("0") !== -1) {
	                zeroPad = true;
	            }

	            if (conversionFlags.indexOf("+") !== -1) {
	                precedeWithSign = true;
	            } else if (conversionFlags.indexOf(" ") !== -1) {
	                blankBeforePositive = true;
	            }

	            alternateForm = conversionFlags.indexOf("#") !== -1;
	        }

	        if (precision) {
	            precision = parseInt(precision.substr(1), 10);
	        }

	        formatNumber = function (n, base) {
	            var precZeroPadded;
	            var prefix;
	            var didSign;
	            var neg;
	            var r;
	            var j;
	            base = Sk.builtin.asnum$(base);
	            neg = false;
	            didSign = false;
	            if (typeof n === "number") {
	                if (n < 0) {
	                    n = -n;
	                    neg = true;
	                }
	                r = n.toString(base);
	            } else if (n instanceof Sk.builtin.float_) {
	                r = n.str$(base, false);
	                if (r.length > 2 && r.substr(-2) === ".0") {
	                    r = r.substr(0, r.length - 2);
	                }
	                neg = n.nb$isnegative();
	            } else if (n instanceof Sk.builtin.int_) {
	                r = n.str$(base, false);
	                neg = n.nb$isnegative();
	            } else if (n instanceof Sk.builtin.lng) {
	                r = n.str$(base, false);
	                neg = n.nb$isnegative();	//	neg = n.size$ < 0;	RNL long.js change
	            }

	            goog.asserts.assert(r !== undefined, "unhandled number format");

	            precZeroPadded = false;

	            if (precision) {
	                //print("r.length",r.length,"precision",precision);
	                for (j = r.length; j < precision; ++j) {
	                    r = "0" + r;
	                    precZeroPadded = true;
	                }
	            }

	            prefix = "";

	            if (neg) {
	                prefix = "-";
	            } else if (precedeWithSign) {
	                prefix = "+" + prefix;
	            } else if (blankBeforePositive) {
	                prefix = " " + prefix;
	            }

	            if (alternateForm) {
	                if (base === 16) {
	                    prefix += "0x";
	                } else if (base === 8 && !precZeroPadded && r !== "0") {
	                    prefix += "0";
	                }
	            }

	            return [prefix, r];
	        };

	        handleWidth = function (args) {
	            var totLen;
	            var prefix = args[0];
	            var r = args[1];
	            var j;
	            if (fieldWidth) {
	                fieldWidth = parseInt(fieldWidth, 10);
	                totLen = r.length + prefix.length;
	                if (zeroPad) {
	                    for (j = totLen; j < fieldWidth; ++j) {
	                        r = "0" + r;
	                    }
	                } else if (leftAdjust) {
	                    for (j = totLen; j < fieldWidth; ++j) {
	                        r = r + " ";
	                    }
	                } else {
	                    for (j = totLen; j < fieldWidth; ++j) {
	                        prefix = " " + prefix;
	                    }
	                }
	            }
	            return prefix + r;
	        };

	        //print("Rhs:",rhs, "ctor", rhs.constructor);
	        if (rhs.constructor === Sk.builtin.tuple) {
	            value = rhs.v[i];
	        } else if (rhs.mp$subscript !== undefined && mappingKey !== undefined) {
	            mk = mappingKey.substring(1, mappingKey.length - 1);
	            //print("mk",mk);
	            value = rhs.mp$subscript(new Sk.builtin.str(mk));
	        } else if (rhs.constructor === Sk.builtin.dict || rhs.constructor === Sk.builtin.list) {
	            // new case where only one argument is provided
	            value = rhs;
	        } else {
	            throw new Sk.builtin.AttributeError(rhs.tp$name + " instance has no attribute 'mp$subscript'");
	        }
	        base = 10;
	        if (conversionType === "d" || conversionType === "i") {
	            return handleWidth(formatNumber(value, 10));
	        } else if (conversionType === "o") {
	            return handleWidth(formatNumber(value, 8));
	        } else if (conversionType === "x") {
	            return handleWidth(formatNumber(value, 16));
	        } else if (conversionType === "X") {
	            return handleWidth(formatNumber(value, 16)).toUpperCase();
	        } else if (conversionType === "f" || conversionType === "F" || conversionType === "e" || conversionType === "E" || conversionType === "g" || conversionType === "G") {
	            convValue = Sk.builtin.asnum$(value);
	            if (typeof convValue === "string") {
	                convValue = Number(convValue);
	            }
	            if (convValue === Infinity) {
	                return "inf";
	            }
	            if (convValue === -Infinity) {
	                return "-inf";
	            }
	            if (isNaN(convValue)) {
	                return "nan";
	            }
	            convName = ["toExponential", "toFixed", "toPrecision"]["efg".indexOf(conversionType.toLowerCase())];
	            if (precision === undefined || precision === "") {
	                if (conversionType === "e" || conversionType === "E") {
	                    precision = 6;
	                } else if (conversionType === "f" || conversionType === "F") {
	                    precision = 7;
	                }
	            }
	            result = (convValue)[convName](precision); // possible loose of negative zero sign

	            // apply sign to negative zeros, floats only!
	            if(Sk.builtin.checkFloat(value)) {
	                if(convValue === 0 && 1/convValue === -Infinity) {
	                    result = "-" + result; // add sign for zero
	                }
	            }

	            if ("EFG".indexOf(conversionType) !== -1) {
	                result = result.toUpperCase();
	            }
	            return handleWidth(["", result]);
	        } else if (conversionType === "c") {
	            if (typeof value === "number") {
	                return String.fromCharCode(value);
	            } else if (value instanceof Sk.builtin.int_) {
	                return String.fromCharCode(value.v);
	            } else if (value instanceof Sk.builtin.float_) {
	                return String.fromCharCode(value.v);
	            } else if (value instanceof Sk.builtin.lng) {
	                return String.fromCharCode(value.str$(10, false)[0]);
	            } else if (value.constructor === Sk.builtin.str) {
	                return value.v.substr(0, 1);
	            } else {
	                throw new Sk.builtin.TypeError("an integer is required");
	            }
	        } else if (conversionType === "r") {
	            r = Sk.builtin.repr(value);
	            if (precision) {
	                return r.v.substr(0, precision);
	            }
	            return r.v;
	        } else if (conversionType === "s") {
	            r = new Sk.builtin.str(value);
	            if (precision) {
	                return r.v.substr(0, precision);
	            }
	            if(fieldWidth) {
	                r.v = handleWidth([" ", r.v]);
	            }
	            return r.v;
	        } else if (conversionType === "%") {
	            return "%";
	        }
	    };

	    ret = this.v.replace(regex, replFunc);
	    return new Sk.builtin.str(ret);
	};

	/**
	 * @constructor
	 * @param {Object} obj
	 */
	Sk.builtin.str_iter_ = function (obj) {
	    if (!(this instanceof Sk.builtin.str_iter_)) {
	        return new Sk.builtin.str_iter_(obj);
	    }
	    this.$index = 0;
	    this.$obj = obj.v.slice();
	    this.sq$length = this.$obj.length;
	    this.tp$iter = this;
	    this.tp$iternext = function () {
	        if (this.$index >= this.sq$length) {
	            return undefined;
	        }
	        return new Sk.builtin.str(this.$obj.substr(this.$index++, 1));
	    };
	    this.$r = function () {
	        return new Sk.builtin.str("iterator");
	    };
	    return this;
	};

	Sk.abstr.setUpInheritance("iterator", Sk.builtin.str_iter_, Sk.builtin.object);

	Sk.builtin.str_iter_.prototype.__class__ = Sk.builtin.str_iter_;

	Sk.builtin.str_iter_.prototype.__iter__ = new Sk.builtin.func(function (self) {
	    Sk.builtin.pyCheckArgs("__iter__", arguments, 0, 0, true, false);
	    return self;
	});

	Sk.builtin.str_iter_.prototype["next"] = new Sk.builtin.func(function (self) {
	    var ret = self.tp$iternext();
	    if (ret === undefined) {
	        throw new Sk.builtin.StopIteration();
	    }
	    return ret;
	});



	/* ---- /Users/rob/skulpty/lib/../node_modules/skulpt/src/tokenize.js ---- */ 

	/*
	 * This is a port of tokenize.py by Ka-Ping Yee.
	 *
	 * each call to readline should return one line of input as a string, or
	 * undefined if it's finished.
	 *
	 * callback is called for each token with 5 args:
	 * 1. the token type
	 * 2. the token string
	 * 3. [ start_row, start_col ]
	 * 4. [ end_row, end_col ]
	 * 5. logical line where the token was found, including continuation lines
	 *
	 * callback can return true to abort.
	 *
	 */

	/**
	 * @constructor
	 */
	Sk.Tokenizer = function (filename, interactive, callback) {
	    this.filename = filename;
	    this.callback = callback;
	    this.lnum = 0;
	    this.parenlev = 0;
	    this.parenstack = [];
	    this.continued = false;
	    this.namechars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_";
	    this.numchars = "0123456789";
	    this.contstr = "";
	    this.needcont = false;
	    this.contline = undefined;
	    this.indents = [0];
	    this.endprog = /.*/;
	    this.strstart = [-1, -1];
	    this.interactive = interactive;
	    this.doneFunc = function () {
	        var i;
	        for (i = 1; i < this.indents.length; ++i) // pop remaining indent levels
	        {
	            if (this.callback(Sk.Tokenizer.Tokens.T_DEDENT, "", [this.lnum, 0], [this.lnum, 0], "")) {
	                return "done";
	            }
	        }
	        if (this.callback(Sk.Tokenizer.Tokens.T_ENDMARKER, "", [this.lnum, 0], [this.lnum, 0], "")) {
	            return "done";
	        }

	        return "failed";
	    };

	};

	/**
	 * @enum {number}
	 */
	Sk.Tokenizer.Tokens = {
	    T_ENDMARKER       : 0,
	    T_NAME            : 1,
	    T_NUMBER          : 2,
	    T_STRING          : 3,
	    T_NEWLINE         : 4,
	    T_INDENT          : 5,
	    T_DEDENT          : 6,
	    T_LPAR            : 7,
	    T_RPAR            : 8,
	    T_LSQB            : 9,
	    T_RSQB            : 10,
	    T_COLON           : 11,
	    T_COMMA           : 12,
	    T_SEMI            : 13,
	    T_PLUS            : 14,
	    T_MINUS           : 15,
	    T_STAR            : 16,
	    T_SLASH           : 17,
	    T_VBAR            : 18,
	    T_AMPER           : 19,
	    T_LESS            : 20,
	    T_GREATER         : 21,
	    T_EQUAL           : 22,
	    T_DOT             : 23,
	    T_PERCENT         : 24,
	    T_BACKQUOTE       : 25,
	    T_LBRACE          : 26,
	    T_RBRACE          : 27,
	    T_EQEQUAL         : 28,
	    T_NOTEQUAL        : 29,
	    T_LESSEQUAL       : 30,
	    T_GREATEREQUAL    : 31,
	    T_TILDE           : 32,
	    T_CIRCUMFLEX      : 33,
	    T_LEFTSHIFT       : 34,
	    T_RIGHTSHIFT      : 35,
	    T_DOUBLESTAR      : 36,
	    T_PLUSEQUAL       : 37,
	    T_MINEQUAL        : 38,
	    T_STAREQUAL       : 39,
	    T_SLASHEQUAL      : 40,
	    T_PERCENTEQUAL    : 41,
	    T_AMPEREQUAL      : 42,
	    T_VBAREQUAL       : 43,
	    T_CIRCUMFLEXEQUAL : 44,
	    T_LEFTSHIFTEQUAL  : 45,
	    T_RIGHTSHIFTEQUAL : 46,
	    T_DOUBLESTAREQUAL : 47,
	    T_DOUBLESLASH     : 48,
	    T_DOUBLESLASHEQUAL: 49,
	    T_AT              : 50,
	    T_OP              : 51,
	    T_COMMENT         : 52,
	    T_NL              : 53,
	    T_RARROW          : 54,
	    T_ERRORTOKEN      : 55,
	    T_N_TOKENS        : 56,
	    T_NT_OFFSET       : 256
	};

	/** @param {...*} x */
	function group (x) {
	    var args = Array.prototype.slice.call(arguments);
	    return "(" + args.join("|") + ")";
	}

	/** @param {...*} x */
	function any (x) {
	    return group.apply(null, arguments) + "*";
	}

	/** @param {...*} x */
	function maybe (x) {
	    return group.apply(null, arguments) + "?";
	}

	/* we have to use string and ctor to be able to build patterns up. + on /.../
	 * does something strange. */
	var Whitespace = "[ \\f\\t]*";
	var Comment_ = "#[^\\r\\n]*";
	var Ident = "[a-zA-Z_]\\w*";

	var Binnumber = "0[bB][01]*";
	var Hexnumber = "0[xX][\\da-fA-F]*[lL]?";
	var Octnumber = "0[oO]?[0-7]*[lL]?";
	var Decnumber = "[1-9]\\d*[lL]?";
	var Intnumber = group(Binnumber, Hexnumber, Octnumber, Decnumber);

	var Exponent = "[eE][-+]?\\d+";
	var Pointfloat = group("\\d+\\.\\d*", "\\.\\d+") + maybe(Exponent);
	var Expfloat = "\\d+" + Exponent;
	var Floatnumber = group(Pointfloat, Expfloat);
	var Imagnumber = group("\\d+[jJ]", Floatnumber + "[jJ]");
	var Number_ = group(Imagnumber, Floatnumber, Intnumber);

	// tail end of ' string
	var Single = "^[^'\\\\]*(?:\\\\.[^'\\\\]*)*'";
	// tail end of " string
	var Double_ = '^[^"\\\\]*(?:\\\\.[^"\\\\]*)*"';
	// tail end of ''' string
	var Single3 = "[^'\\\\]*(?:(?:\\\\.|'(?!''))[^'\\\\]*)*'''";
	// tail end of """ string
	var Double3 = '[^"\\\\]*(?:(?:\\\\.|"(?!""))[^"\\\\]*)*"""';
	var Triple = group("[ubUB]?[rR]?'''", '[ubUB]?[rR]?"""');
	var String_ = group("[uU]?[rR]?'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*'",
	    '[uU]?[rR]?"[^\\n"\\\\]*(?:\\\\.[^\\n"\\\\]*)*"');

	// Because of leftmost-then-longest match semantics, be sure to put the
	// longest operators first (e.g., if = came before ==, == would get
	// recognized as two instances of =).
	var Operator = group("\\*\\*=?", ">>=?", "<<=?", "<>", "!=",
	    "//=?", "->",
	    "[+\\-*/%&|^=<>]=?",
	    "~");

	var Bracket = "[\\][(){}]";
	var Special = group("\\r?\\n", "[:;.,`@]");
	var Funny = group(Operator, Bracket, Special);

	var ContStr = group("[uUbB]?[rR]?'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*" +
	        group("'", "\\\\\\r?\\n"),
	        "[uUbB]?[rR]?\"[^\\n\"\\\\]*(?:\\\\.[^\\n\"\\\\]*)*" +
	        group("\"", "\\\\\\r?\\n"));
	var PseudoExtras = group("\\\\\\r?\\n", Comment_, Triple);
	// Need to prefix with "^" as we only want to match what's next
	var PseudoToken = "^" + group(PseudoExtras, Number_, Funny, ContStr, Ident);


	var triple_quoted = {
	    "'''"  : true, '"""': true,
	    "r'''" : true, 'r"""': true, "R'''": true, 'R"""': true,
	    "u'''" : true, 'u"""': true, "U'''": true, 'U"""': true,
	    "b'''" : true, 'b"""': true, "B'''": true, 'B"""': true,
	    "ur'''": true, 'ur"""': true, "Ur'''": true, 'Ur"""': true,
	    "uR'''": true, 'uR"""': true, "UR'''": true, 'UR"""': true,
	    "br'''": true, 'br"""': true, "Br'''": true, 'Br"""': true,
	    "bR'''": true, 'bR"""': true, "BR'''": true, 'BR"""': true
	};

	var single_quoted = {
	    "'"  : true, '"': true,
	    "r'" : true, 'r"': true, "R'": true, 'R"': true,
	    "u'" : true, 'u"': true, "U'": true, 'U"': true,
	    "b'" : true, 'b"': true, "B'": true, 'B"': true,
	    "ur'": true, 'ur"': true, "Ur'": true, 'Ur"': true,
	    "uR'": true, 'uR"': true, "UR'": true, 'UR"': true,
	    "br'": true, 'br"': true, "Br'": true, 'Br"': true,
	    "bR'": true, 'bR"': true, "BR'": true, 'BR"': true
	};

	// hack to make closure keep those objects. not sure what a better way is.
	(function () {
	    var k;
	    for (k in triple_quoted) {
	    }
	    for (k in single_quoted) {
	    }
	}());


	var tabsize = 8;

	function contains (a, obj) {
	    var i = a.length;
	    while (i--) {
	        if (a[i] === obj) {
	            return true;
	        }
	    }
	    return false;
	}

	function rstrip (input, what) {
	    var i;
	    for (i = input.length; i > 0; --i) {
	        if (what.indexOf(input.charAt(i - 1)) === -1) {
	            break;
	        }
	    }
	    return input.substring(0, i);
	}

	Sk.Tokenizer.prototype.generateTokens = function (line) {
	    var nl_pos;
	    var newl;
	    var initial;
	    var token;
	    var epos;
	    var spos;
	    var start;
	    var pseudomatch;
	    var capos;
	    var comment_token;
	    var endmatch, pos, column, end, max;


	    // bnm - Move these definitions in this function otherwise test state is preserved between
	    // calls on single3prog and double3prog causing weird errors with having multiple instances
	    // of triple quoted strings in the same program.

	    var pseudoprog = new RegExp(PseudoToken);
	    var single3prog = new RegExp(Single3, "g");
	    var double3prog = new RegExp(Double3, "g");

	    var endprogs = {     "'": new RegExp(Single, "g"), "\"": new RegExp(Double_, "g"),
	        "'''"               : single3prog, '"""': double3prog,
	        "r'''"              : single3prog, 'r"""': double3prog,
	        "u'''"              : single3prog, 'u"""': double3prog,
	        "b'''"              : single3prog, 'b"""': double3prog,
	        "ur'''"             : single3prog, 'ur"""': double3prog,
	        "br'''"             : single3prog, 'br"""': double3prog,
	        "R'''"              : single3prog, 'R"""': double3prog,
	        "U'''"              : single3prog, 'U"""': double3prog,
	        "B'''"              : single3prog, 'B"""': double3prog,
	        "uR'''"             : single3prog, 'uR"""': double3prog,
	        "Ur'''"             : single3prog, 'Ur"""': double3prog,
	        "UR'''"             : single3prog, 'UR"""': double3prog,
	        "bR'''"             : single3prog, 'bR"""': double3prog,
	        "Br'''"             : single3prog, 'Br"""': double3prog,
	        "BR'''"             : single3prog, 'BR"""': double3prog,
	        'r'                 : null, 'R': null,
	        'u'                 : null, 'U': null,
	        'b'                 : null, 'B': null
	    };


	    if (!line) {
	        line = '';
	    }
	    //print("LINE:'"+line+"'");

	    this.lnum += 1;
	    pos = 0;
	    max = line.length;

	    if (this.contstr.length > 0) {
	        if (!line) {
	            throw new Sk.builtin.SyntaxError("EOF in multi-line string", this.filename, this.strstart[0], this.strstart[1], {
	                kind: "STRING_EOF",
	                line: this.contline
	            });
	        }
	        this.endprog.lastIndex = 0;
	        endmatch = this.endprog.test(line);
	        if (endmatch) {
	            pos = end = this.endprog.lastIndex;
	            if (this.callback(Sk.Tokenizer.Tokens.T_STRING, this.contstr + line.substring(0, end),
	                this.strstart, [this.lnum, end], this.contline + line)) {
	                return 'done';
	            }
	            this.contstr = '';
	            this.needcont = false;
	            this.contline = undefined;
	        }
	        else if (this.needcont && line.substring(line.length - 2) !== "\\\n" && line.substring(line.length - 3) !== "\\\r\n") {
	            if (this.callback(Sk.Tokenizer.Tokens.T_ERRORTOKEN, this.contstr + line,
	                this.strstart, [this.lnum, line.length], this.contline)) {
	                return 'done';
	            }
	            this.contstr = '';
	            this.contline = undefined;
	            return false;
	        }
	        else {
	            this.contstr += line;
	            this.contline = this.contline + line;
	            return false;
	        }
	    }
	    else if (this.parenlev === 0 && !this.continued) {
	        if (!line) {
	            return this.doneFunc();
	        }
	        column = 0;
	        while (pos < max) {
	            if (line.charAt(pos) === ' ') {
	                column += 1;
	            }
	            else if (line.charAt(pos) === '\t') {
	                column = (column / tabsize + 1) * tabsize;
	            }
	            else if (line.charAt(pos) === '\f') {
	                column = 0;
	            }
	            else {
	                break;
	            }
	            pos = pos + 1;
	        }
	        if (pos === max) {
	            return this.doneFunc();
	        }

	        if ("#\r\n".indexOf(line.charAt(pos)) !== -1) // skip comments or blank lines
	        {
	            if (line.charAt(pos) === '#') {
	                comment_token = rstrip(line.substring(pos), '\r\n');
	                nl_pos = pos + comment_token.length;
	                if (this.callback(Sk.Tokenizer.Tokens.T_COMMENT, comment_token,
	                    [this.lnum, pos], [this.lnum, pos + comment_token.length], line)) {
	                    return 'done';
	                }
	                //print("HERE:1");
	                if (this.callback(Sk.Tokenizer.Tokens.T_NL, line.substring(nl_pos),
	                    [this.lnum, nl_pos], [this.lnum, line.length], line)) {
	                    return 'done';
	                }
	                return false;
	            }
	            else {
	                //print("HERE:2");
	                if (this.callback(Sk.Tokenizer.Tokens.T_NL, line.substring(pos),
	                    [this.lnum, pos], [this.lnum, line.length], line)) {
	                    return 'done';
	                }
	                if (!this.interactive) {
	                    return false;
	                }
	            }
	        }

	        if (column > this.indents[this.indents.length - 1]) // count indents or dedents
	        {
	            this.indents.push(column);
	            if (this.callback(Sk.Tokenizer.Tokens.T_INDENT, line.substring(0, pos), [this.lnum, 0], [this.lnum, pos], line)) {
	                return 'done';
	            }
	        }
	        while (column < this.indents[this.indents.length - 1]) {
	            if (!contains(this.indents, column)) {
	                throw new Sk.builtin.IndentationError("unindent does not match any outer indentation level",
	                    this.filename, this.lnum, pos, line);
	            }
	            this.indents.splice(this.indents.length - 1, 1);
	            //print("dedent here");
	            if (this.callback(Sk.Tokenizer.Tokens.T_DEDENT, '', [this.lnum, pos], [this.lnum, pos], line)) {
	                return 'done';
	            }
	        }
	    }
	    else // continued statement
	    {
	        if (!line) {
	            throw new Sk.builtin.SyntaxError("EOF in multi-line statement", this.filename, this.lnum, 0, {
	                kind: 'STATEMENT_EOF',
	                parenlev: this.parenlev,
	                parenstack: this.parenstack
	            });
	        }
	        this.continued = false;
	    }

	    while (pos < max) {
	        //print("pos:"+pos+":"+max);
	        // js regexes don't return any info about matches, other than the
	        // content. we'd like to put a \w+ before pseudomatch, but then we
	        // can't get any data
	        capos = line.charAt(pos);
	        while (capos === ' ' || capos === '\f' || capos === '\t') {
	            pos += 1;
	            capos = line.charAt(pos);
	        }
	        pseudoprog.lastIndex = 0;
	        pseudomatch = pseudoprog.exec(line.substring(pos));
	        if (pseudomatch) {
	            start = pos;
	            end = start + pseudomatch[1].length;
	            spos = [this.lnum, start];
	            epos = [this.lnum, end];
	            pos = end;
	            token = line.substring(start, end);
	            initial = line.charAt(start);
	            //Sk.debugout("token:",token, "initial:",initial, start, end);
	            if (this.numchars.indexOf(initial) !== -1 || (initial === '.' && token !== '.')) {
	                if (this.callback(Sk.Tokenizer.Tokens.T_NUMBER, token, spos, epos, line)) {
	                    return 'done';
	                }
	            }
	            else if (initial === '\r' || initial === '\n') {
	                newl = Sk.Tokenizer.Tokens.T_NEWLINE;
	                //print("HERE:3");
	                if (this.parenlev > 0) {
	                    newl = Sk.Tokenizer.Tokens.T_NL;
	                }
	                if (this.callback(newl, token, spos, epos, line)) {
	                    return 'done';
	                }
	            }
	            else if (initial === '#') {
	                if (this.callback(Sk.Tokenizer.Tokens.T_COMMENT, token, spos, epos, line)) {
	                    return 'done';
	                }
	            }
	            else if (triple_quoted.hasOwnProperty(token)) {
	                this.endprog = endprogs[token];
	                this.endprog.lastIndex = 0;
	                endmatch = this.endprog.test(line.substring(pos));
	                if (endmatch) {
	                    pos = this.endprog.lastIndex + pos;
	                    token = line.substring(start, pos);
	                    if (this.callback(Sk.Tokenizer.Tokens.T_STRING, token, spos, [this.lnum, pos], line)) {
	                        return 'done';
	                    }
	                }
	                else {
	                    this.strstart = [this.lnum, start];
	                    this.contstr = line.substring(start);
	                    this.contline = line;
	                    return false;
	                }
	            }
	            else if (single_quoted.hasOwnProperty(initial) ||
	                single_quoted.hasOwnProperty(token.substring(0, 2)) ||
	                single_quoted.hasOwnProperty(token.substring(0, 3))) {
	                if (token[token.length - 1] === '\n') {
	                    this.strstart = [this.lnum, start];
	                    this.endprog = endprogs[initial] || endprogs[token[1]] || endprogs[token[2]];
	                    this.contstr = line.substring(start);
	                    this.needcont = true;
	                    this.contline = line;
	                    //print("i, t1, t2", initial, token[1], token[2]);
	                    //print("ep, cs", this.endprog, this.contstr);
	                    return false;
	                }
	                else {
	                    if (this.callback(Sk.Tokenizer.Tokens.T_STRING, token, spos, epos, line)) {
	                        return 'done';
	                    }
	                }
	            }
	            else if (this.namechars.indexOf(initial) !== -1) {
	                if (this.callback(Sk.Tokenizer.Tokens.T_NAME, token, spos, epos, line)) {
	                    return 'done';
	                }
	            }
	            else if (initial === '\\') {
	                //print("HERE:4");
	                if (this.callback(Sk.Tokenizer.Tokens.T_NL, token, spos, [this.lnum, pos], line)) {
	                    return 'done';
	                }
	                this.continued = true;
	            }
	            else {
	                if ('([{'.indexOf(initial) !== -1) {
	                    this.parenlev += 1;
	                    this.parenstack.push([initial, this.lnum, pos]);
	                }
	                else if (')]}'.indexOf(initial) !== -1) {
	                    this.parenlev -= 1;
	                    this.parenstack.pop();
	                }
	                if (this.callback(Sk.Tokenizer.Tokens.T_OP, token, spos, epos, line)) {
	                    return 'done';
	                }
	            }
	        }
	        else {
	            if (this.callback(Sk.Tokenizer.Tokens.T_ERRORTOKEN, line.charAt(pos),
	                [this.lnum, pos], [this.lnum, pos + 1], line)) {
	                return 'done';
	            }
	            pos += 1;
	        }
	    }

	    return false;
	};

	Sk.Tokenizer.tokenNames = {
	    0  : 'T_ENDMARKER', 1: 'T_NAME', 2: 'T_NUMBER', 3: 'T_STRING', 4: 'T_NEWLINE',
	    5  : 'T_INDENT', 6: 'T_DEDENT', 7: 'T_LPAR', 8: 'T_RPAR', 9: 'T_LSQB',
	    10 : 'T_RSQB', 11: 'T_COLON', 12: 'T_COMMA', 13: 'T_SEMI', 14: 'T_PLUS',
	    15 : 'T_MINUS', 16: 'T_STAR', 17: 'T_SLASH', 18: 'T_VBAR', 19: 'T_AMPER',
	    20 : 'T_LESS', 21: 'T_GREATER', 22: 'T_EQUAL', 23: 'T_DOT', 24: 'T_PERCENT',
	    25 : 'T_BACKQUOTE', 26: 'T_LBRACE', 27: 'T_RBRACE', 28: 'T_EQEQUAL', 29: 'T_NOTEQUAL',
	    30 : 'T_LESSEQUAL', 31: 'T_GREATEREQUAL', 32: 'T_TILDE', 33: 'T_CIRCUMFLEX', 34: 'T_LEFTSHIFT',
	    35 : 'T_RIGHTSHIFT', 36: 'T_DOUBLESTAR', 37: 'T_PLUSEQUAL', 38: 'T_MINEQUAL', 39: 'T_STAREQUAL',
	    40 : 'T_SLASHEQUAL', 41: 'T_PERCENTEQUAL', 42: 'T_AMPEREQUAL', 43: 'T_VBAREQUAL', 44: 'T_CIRCUMFLEXEQUAL',
	    45 : 'T_LEFTSHIFTEQUAL', 46: 'T_RIGHTSHIFTEQUAL', 47: 'T_DOUBLESTAREQUAL', 48: 'T_DOUBLESLASH', 49: 'T_DOUBLESLASHEQUAL',
	    50 : 'T_AT', 51: 'T_OP', 52: 'T_COMMENT', 53: 'T_NL', 54: 'T_RARROW',
	    55 : 'T_ERRORTOKEN', 56: 'T_N_TOKENS',
	    256: 'T_NT_OFFSET'
	};

	goog.exportSymbol("Sk.Tokenizer", Sk.Tokenizer);
	goog.exportSymbol("Sk.Tokenizer.prototype.generateTokens", Sk.Tokenizer.prototype.generateTokens);
	goog.exportSymbol("Sk.Tokenizer.tokenNames", Sk.Tokenizer.tokenNames);



	/* ---- /Users/rob/skulpty/lib/../node_modules/skulpt/gen/parse_tables.js ---- */ 

	// generated by pgen/main.py
	Sk.OpMap = {
	"(": Sk.Tokenizer.Tokens.T_LPAR,
	")": Sk.Tokenizer.Tokens.T_RPAR,
	"[": Sk.Tokenizer.Tokens.T_LSQB,
	"]": Sk.Tokenizer.Tokens.T_RSQB,
	":": Sk.Tokenizer.Tokens.T_COLON,
	",": Sk.Tokenizer.Tokens.T_COMMA,
	";": Sk.Tokenizer.Tokens.T_SEMI,
	"+": Sk.Tokenizer.Tokens.T_PLUS,
	"-": Sk.Tokenizer.Tokens.T_MINUS,
	"*": Sk.Tokenizer.Tokens.T_STAR,
	"/": Sk.Tokenizer.Tokens.T_SLASH,
	"|": Sk.Tokenizer.Tokens.T_VBAR,
	"&": Sk.Tokenizer.Tokens.T_AMPER,
	"<": Sk.Tokenizer.Tokens.T_LESS,
	">": Sk.Tokenizer.Tokens.T_GREATER,
	"=": Sk.Tokenizer.Tokens.T_EQUAL,
	".": Sk.Tokenizer.Tokens.T_DOT,
	"%": Sk.Tokenizer.Tokens.T_PERCENT,
	"`": Sk.Tokenizer.Tokens.T_BACKQUOTE,
	"{": Sk.Tokenizer.Tokens.T_LBRACE,
	"}": Sk.Tokenizer.Tokens.T_RBRACE,
	"@": Sk.Tokenizer.Tokens.T_AT,
	"==": Sk.Tokenizer.Tokens.T_EQEQUAL,
	"!=": Sk.Tokenizer.Tokens.T_NOTEQUAL,
	"<>": Sk.Tokenizer.Tokens.T_NOTEQUAL,
	"<=": Sk.Tokenizer.Tokens.T_LESSEQUAL,
	">=": Sk.Tokenizer.Tokens.T_GREATEREQUAL,
	"~": Sk.Tokenizer.Tokens.T_TILDE,
	"^": Sk.Tokenizer.Tokens.T_CIRCUMFLEX,
	"<<": Sk.Tokenizer.Tokens.T_LEFTSHIFT,
	">>": Sk.Tokenizer.Tokens.T_RIGHTSHIFT,
	"**": Sk.Tokenizer.Tokens.T_DOUBLESTAR,
	"+=": Sk.Tokenizer.Tokens.T_PLUSEQUAL,
	"-=": Sk.Tokenizer.Tokens.T_MINEQUAL,
	"*=": Sk.Tokenizer.Tokens.T_STAREQUAL,
	"/=": Sk.Tokenizer.Tokens.T_SLASHEQUAL,
	"%=": Sk.Tokenizer.Tokens.T_PERCENTEQUAL,
	"&=": Sk.Tokenizer.Tokens.T_AMPEREQUAL,
	"|=": Sk.Tokenizer.Tokens.T_VBAREQUAL,
	"^=": Sk.Tokenizer.Tokens.T_CIRCUMFLEXEQUAL,
	"<<=": Sk.Tokenizer.Tokens.T_LEFTSHIFTEQUAL,
	">>=": Sk.Tokenizer.Tokens.T_RIGHTSHIFTEQUAL,
	"**=": Sk.Tokenizer.Tokens.T_DOUBLESTAREQUAL,
	"//": Sk.Tokenizer.Tokens.T_DOUBLESLASH,
	"//=": Sk.Tokenizer.Tokens.T_DOUBLESLASHEQUAL,
	"->": Sk.Tokenizer.Tokens.T_RARROW
	};
	Sk.ParseTables = {
	sym:
	{and_expr: 257,
	 and_test: 258,
	 arglist: 259,
	 argument: 260,
	 arith_expr: 261,
	 assert_stmt: 262,
	 atom: 263,
	 augassign: 264,
	 break_stmt: 265,
	 classdef: 266,
	 comp_for: 267,
	 comp_if: 268,
	 comp_iter: 269,
	 comp_op: 270,
	 comparison: 271,
	 compound_stmt: 272,
	 continue_stmt: 273,
	 debugger_stmt: 274,
	 decorated: 275,
	 decorator: 276,
	 decorators: 277,
	 del_stmt: 278,
	 dictorsetmaker: 279,
	 dotted_as_name: 280,
	 dotted_as_names: 281,
	 dotted_name: 282,
	 encoding_decl: 283,
	 eval_input: 284,
	 except_clause: 285,
	 exec_stmt: 286,
	 expr: 287,
	 expr_stmt: 288,
	 exprlist: 289,
	 factor: 290,
	 file_input: 291,
	 flow_stmt: 292,
	 for_stmt: 293,
	 fpdef: 294,
	 fplist: 295,
	 funcdef: 296,
	 global_stmt: 297,
	 if_stmt: 298,
	 import_as_name: 299,
	 import_as_names: 300,
	 import_from: 301,
	 import_name: 302,
	 import_stmt: 303,
	 lambdef: 304,
	 list_for: 305,
	 list_if: 306,
	 list_iter: 307,
	 listmaker: 308,
	 not_test: 309,
	 old_lambdef: 310,
	 old_test: 311,
	 or_test: 312,
	 parameters: 313,
	 pass_stmt: 314,
	 power: 315,
	 print_stmt: 316,
	 raise_stmt: 317,
	 return_stmt: 318,
	 shift_expr: 319,
	 simple_stmt: 320,
	 single_input: 256,
	 sliceop: 321,
	 small_stmt: 322,
	 stmt: 323,
	 subscript: 324,
	 subscriptlist: 325,
	 suite: 326,
	 term: 327,
	 test: 328,
	 testlist: 329,
	 testlist1: 330,
	 testlist_comp: 331,
	 testlist_safe: 332,
	 trailer: 333,
	 try_stmt: 334,
	 varargslist: 335,
	 while_stmt: 336,
	 with_item: 337,
	 with_stmt: 338,
	 xor_expr: 339,
	 yield_expr: 340,
	 yield_stmt: 341},
	number2symbol:
	{256: 'single_input',
	 257: 'and_expr',
	 258: 'and_test',
	 259: 'arglist',
	 260: 'argument',
	 261: 'arith_expr',
	 262: 'assert_stmt',
	 263: 'atom',
	 264: 'augassign',
	 265: 'break_stmt',
	 266: 'classdef',
	 267: 'comp_for',
	 268: 'comp_if',
	 269: 'comp_iter',
	 270: 'comp_op',
	 271: 'comparison',
	 272: 'compound_stmt',
	 273: 'continue_stmt',
	 274: 'debugger_stmt',
	 275: 'decorated',
	 276: 'decorator',
	 277: 'decorators',
	 278: 'del_stmt',
	 279: 'dictorsetmaker',
	 280: 'dotted_as_name',
	 281: 'dotted_as_names',
	 282: 'dotted_name',
	 283: 'encoding_decl',
	 284: 'eval_input',
	 285: 'except_clause',
	 286: 'exec_stmt',
	 287: 'expr',
	 288: 'expr_stmt',
	 289: 'exprlist',
	 290: 'factor',
	 291: 'file_input',
	 292: 'flow_stmt',
	 293: 'for_stmt',
	 294: 'fpdef',
	 295: 'fplist',
	 296: 'funcdef',
	 297: 'global_stmt',
	 298: 'if_stmt',
	 299: 'import_as_name',
	 300: 'import_as_names',
	 301: 'import_from',
	 302: 'import_name',
	 303: 'import_stmt',
	 304: 'lambdef',
	 305: 'list_for',
	 306: 'list_if',
	 307: 'list_iter',
	 308: 'listmaker',
	 309: 'not_test',
	 310: 'old_lambdef',
	 311: 'old_test',
	 312: 'or_test',
	 313: 'parameters',
	 314: 'pass_stmt',
	 315: 'power',
	 316: 'print_stmt',
	 317: 'raise_stmt',
	 318: 'return_stmt',
	 319: 'shift_expr',
	 320: 'simple_stmt',
	 321: 'sliceop',
	 322: 'small_stmt',
	 323: 'stmt',
	 324: 'subscript',
	 325: 'subscriptlist',
	 326: 'suite',
	 327: 'term',
	 328: 'test',
	 329: 'testlist',
	 330: 'testlist1',
	 331: 'testlist_comp',
	 332: 'testlist_safe',
	 333: 'trailer',
	 334: 'try_stmt',
	 335: 'varargslist',
	 336: 'while_stmt',
	 337: 'with_item',
	 338: 'with_stmt',
	 339: 'xor_expr',
	 340: 'yield_expr',
	 341: 'yield_stmt'},
	dfas:
	{256: [[[[1, 1], [2, 1], [3, 2]], [[0, 1]], [[2, 1]]],
	       {2: 1,
	        4: 1,
	        5: 1,
	        6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        10: 1,
	        11: 1,
	        12: 1,
	        13: 1,
	        14: 1,
	        15: 1,
	        16: 1,
	        17: 1,
	        18: 1,
	        19: 1,
	        20: 1,
	        21: 1,
	        22: 1,
	        23: 1,
	        24: 1,
	        25: 1,
	        26: 1,
	        27: 1,
	        28: 1,
	        29: 1,
	        30: 1,
	        31: 1,
	        32: 1,
	        33: 1,
	        34: 1,
	        35: 1,
	        36: 1,
	        37: 1}],
	 257: [[[[38, 1]], [[39, 0], [0, 1]]],
	       {6: 1, 8: 1, 9: 1, 14: 1, 15: 1, 19: 1, 22: 1, 26: 1, 30: 1, 37: 1}],
	 258: [[[[40, 1]], [[41, 0], [0, 1]]],
	       {6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        14: 1,
	        15: 1,
	        19: 1,
	        22: 1,
	        26: 1,
	        30: 1,
	        37: 1}],
	 259: [[[[42, 1], [43, 2], [44, 3]],
	        [[45, 4]],
	        [[46, 5], [0, 2]],
	        [[45, 6]],
	        [[46, 7], [0, 4]],
	        [[42, 1], [43, 2], [44, 3], [0, 5]],
	        [[0, 6]],
	        [[43, 4], [44, 3]]],
	       {6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        11: 1,
	        14: 1,
	        15: 1,
	        19: 1,
	        22: 1,
	        26: 1,
	        30: 1,
	        37: 1,
	        42: 1,
	        44: 1}],
	 260: [[[[45, 1]], [[47, 2], [48, 3], [0, 1]], [[45, 3]], [[0, 3]]],
	       {6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        11: 1,
	        14: 1,
	        15: 1,
	        19: 1,
	        22: 1,
	        26: 1,
	        30: 1,
	        37: 1}],
	 261: [[[[49, 1]], [[26, 0], [37, 0], [0, 1]]],
	       {6: 1, 8: 1, 9: 1, 14: 1, 15: 1, 19: 1, 22: 1, 26: 1, 30: 1, 37: 1}],
	 262: [[[[21, 1]], [[45, 2]], [[46, 3], [0, 2]], [[45, 4]], [[0, 4]]],
	       {21: 1}],
	 263: [[[[19, 1], [8, 2], [9, 5], [30, 4], [14, 3], [15, 6], [22, 2]],
	        [[19, 1], [0, 1]],
	        [[0, 2]],
	        [[50, 7], [51, 2]],
	        [[52, 2], [53, 8], [54, 8]],
	        [[55, 2], [56, 9]],
	        [[57, 10]],
	        [[51, 2]],
	        [[52, 2]],
	        [[55, 2]],
	        [[15, 2]]],
	       {8: 1, 9: 1, 14: 1, 15: 1, 19: 1, 22: 1, 30: 1}],
	 264: [[[[58, 1],
	         [59, 1],
	         [60, 1],
	         [61, 1],
	         [62, 1],
	         [63, 1],
	         [64, 1],
	         [65, 1],
	         [66, 1],
	         [67, 1],
	         [68, 1],
	         [69, 1]],
	        [[0, 1]]],
	       {58: 1,
	        59: 1,
	        60: 1,
	        61: 1,
	        62: 1,
	        63: 1,
	        64: 1,
	        65: 1,
	        66: 1,
	        67: 1,
	        68: 1,
	        69: 1}],
	 265: [[[[33, 1]], [[0, 1]]], {33: 1}],
	 266: [[[[10, 1]],
	        [[22, 2]],
	        [[70, 3], [30, 4]],
	        [[71, 5]],
	        [[52, 6], [72, 7]],
	        [[0, 5]],
	        [[70, 3]],
	        [[52, 6]]],
	       {10: 1}],
	 267: [[[[29, 1]],
	        [[73, 2]],
	        [[74, 3]],
	        [[75, 4]],
	        [[76, 5], [0, 4]],
	        [[0, 5]]],
	       {29: 1}],
	 268: [[[[32, 1]], [[77, 2]], [[76, 3], [0, 2]], [[0, 3]]], {32: 1}],
	 269: [[[[78, 1], [48, 1]], [[0, 1]]], {29: 1, 32: 1}],
	 270: [[[[79, 1],
	         [80, 1],
	         [7, 2],
	         [81, 1],
	         [79, 1],
	         [74, 1],
	         [82, 1],
	         [83, 3],
	         [84, 1],
	         [85, 1]],
	        [[0, 1]],
	        [[74, 1]],
	        [[7, 1], [0, 3]]],
	       {7: 1, 74: 1, 79: 1, 80: 1, 81: 1, 82: 1, 83: 1, 84: 1, 85: 1}],
	 271: [[[[86, 1]], [[87, 0], [0, 1]]],
	       {6: 1, 8: 1, 9: 1, 14: 1, 15: 1, 19: 1, 22: 1, 26: 1, 30: 1, 37: 1}],
	 272: [[[[88, 1],
	         [89, 1],
	         [90, 1],
	         [91, 1],
	         [92, 1],
	         [93, 1],
	         [94, 1],
	         [95, 1]],
	        [[0, 1]]],
	       {4: 1, 10: 1, 16: 1, 18: 1, 29: 1, 32: 1, 35: 1, 36: 1}],
	 273: [[[[34, 1]], [[0, 1]]], {34: 1}],
	 274: [[[[13, 1]], [[0, 1]]], {13: 1}],
	 275: [[[[96, 1]], [[94, 2], [91, 2]], [[0, 2]]], {35: 1}],
	 276: [[[[35, 1]],
	        [[97, 2]],
	        [[2, 4], [30, 3]],
	        [[52, 5], [98, 6]],
	        [[0, 4]],
	        [[2, 4]],
	        [[52, 5]]],
	       {35: 1}],
	 277: [[[[99, 1]], [[99, 1], [0, 1]]], {35: 1}],
	 278: [[[[23, 1]], [[73, 2]], [[0, 2]]], {23: 1}],
	 279: [[[[45, 1]],
	        [[70, 2], [48, 3], [46, 4], [0, 1]],
	        [[45, 5]],
	        [[0, 3]],
	        [[45, 6], [0, 4]],
	        [[48, 3], [46, 7], [0, 5]],
	        [[46, 4], [0, 6]],
	        [[45, 8], [0, 7]],
	        [[70, 9]],
	        [[45, 10]],
	        [[46, 7], [0, 10]]],
	       {6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        11: 1,
	        14: 1,
	        15: 1,
	        19: 1,
	        22: 1,
	        26: 1,
	        30: 1,
	        37: 1}],
	 280: [[[[97, 1]], [[100, 2], [0, 1]], [[22, 3]], [[0, 3]]], {22: 1}],
	 281: [[[[101, 1]], [[46, 0], [0, 1]]], {22: 1}],
	 282: [[[[22, 1]], [[102, 0], [0, 1]]], {22: 1}],
	 283: [[[[22, 1]], [[0, 1]]], {22: 1}],
	 284: [[[[72, 1]], [[2, 1], [103, 2]], [[0, 2]]],
	       {6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        11: 1,
	        14: 1,
	        15: 1,
	        19: 1,
	        22: 1,
	        26: 1,
	        30: 1,
	        37: 1}],
	 285: [[[[104, 1]],
	        [[45, 2], [0, 1]],
	        [[100, 3], [46, 3], [0, 2]],
	        [[45, 4]],
	        [[0, 4]]],
	       {104: 1}],
	 286: [[[[17, 1]],
	        [[86, 2]],
	        [[74, 3], [0, 2]],
	        [[45, 4]],
	        [[46, 5], [0, 4]],
	        [[45, 6]],
	        [[0, 6]]],
	       {17: 1}],
	 287: [[[[105, 1]], [[106, 0], [0, 1]]],
	       {6: 1, 8: 1, 9: 1, 14: 1, 15: 1, 19: 1, 22: 1, 26: 1, 30: 1, 37: 1}],
	 288: [[[[72, 1]],
	        [[107, 2], [47, 3], [0, 1]],
	        [[72, 4], [53, 4]],
	        [[72, 5], [53, 5]],
	        [[0, 4]],
	        [[47, 3], [0, 5]]],
	       {6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        11: 1,
	        14: 1,
	        15: 1,
	        19: 1,
	        22: 1,
	        26: 1,
	        30: 1,
	        37: 1}],
	 289: [[[[86, 1]], [[46, 2], [0, 1]], [[86, 1], [0, 2]]],
	       {6: 1, 8: 1, 9: 1, 14: 1, 15: 1, 19: 1, 22: 1, 26: 1, 30: 1, 37: 1}],
	 290: [[[[37, 2], [26, 2], [6, 2], [108, 1]], [[0, 1]], [[109, 1]]],
	       {6: 1, 8: 1, 9: 1, 14: 1, 15: 1, 19: 1, 22: 1, 26: 1, 30: 1, 37: 1}],
	 291: [[[[2, 0], [103, 1], [110, 0]], [[0, 1]]],
	       {2: 1,
	        4: 1,
	        5: 1,
	        6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        10: 1,
	        11: 1,
	        12: 1,
	        13: 1,
	        14: 1,
	        15: 1,
	        16: 1,
	        17: 1,
	        18: 1,
	        19: 1,
	        20: 1,
	        21: 1,
	        22: 1,
	        23: 1,
	        24: 1,
	        25: 1,
	        26: 1,
	        27: 1,
	        28: 1,
	        29: 1,
	        30: 1,
	        31: 1,
	        32: 1,
	        33: 1,
	        34: 1,
	        35: 1,
	        36: 1,
	        37: 1,
	        103: 1}],
	 292: [[[[111, 1], [112, 1], [113, 1], [114, 1], [115, 1]], [[0, 1]]],
	       {5: 1, 20: 1, 27: 1, 33: 1, 34: 1}],
	 293: [[[[29, 1]],
	        [[73, 2]],
	        [[74, 3]],
	        [[72, 4]],
	        [[70, 5]],
	        [[71, 6]],
	        [[116, 7], [0, 6]],
	        [[70, 8]],
	        [[71, 9]],
	        [[0, 9]]],
	       {29: 1}],
	 294: [[[[30, 1], [22, 2]], [[117, 3]], [[0, 2]], [[52, 2]]], {22: 1, 30: 1}],
	 295: [[[[118, 1]], [[46, 2], [0, 1]], [[118, 1], [0, 2]]], {22: 1, 30: 1}],
	 296: [[[[4, 1]], [[22, 2]], [[119, 3]], [[70, 4]], [[71, 5]], [[0, 5]]],
	       {4: 1}],
	 297: [[[[28, 1]], [[22, 2]], [[46, 1], [0, 2]]], {28: 1}],
	 298: [[[[32, 1]],
	        [[45, 2]],
	        [[70, 3]],
	        [[71, 4]],
	        [[116, 5], [120, 1], [0, 4]],
	        [[70, 6]],
	        [[71, 7]],
	        [[0, 7]]],
	       {32: 1}],
	 299: [[[[22, 1]], [[100, 2], [0, 1]], [[22, 3]], [[0, 3]]], {22: 1}],
	 300: [[[[121, 1]], [[46, 2], [0, 1]], [[121, 1], [0, 2]]], {22: 1}],
	 301: [[[[31, 1]],
	        [[97, 2], [102, 3]],
	        [[25, 4]],
	        [[97, 2], [25, 4], [102, 3]],
	        [[122, 5], [42, 5], [30, 6]],
	        [[0, 5]],
	        [[122, 7]],
	        [[52, 5]]],
	       {31: 1}],
	 302: [[[[25, 1]], [[123, 2]], [[0, 2]]], {25: 1}],
	 303: [[[[124, 1], [125, 1]], [[0, 1]]], {25: 1, 31: 1}],
	 304: [[[[11, 1]], [[70, 2], [126, 3]], [[45, 4]], [[70, 2]], [[0, 4]]],
	       {11: 1}],
	 305: [[[[29, 1]],
	        [[73, 2]],
	        [[74, 3]],
	        [[127, 4]],
	        [[128, 5], [0, 4]],
	        [[0, 5]]],
	       {29: 1}],
	 306: [[[[32, 1]], [[77, 2]], [[128, 3], [0, 2]], [[0, 3]]], {32: 1}],
	 307: [[[[129, 1], [130, 1]], [[0, 1]]], {29: 1, 32: 1}],
	 308: [[[[45, 1]],
	        [[129, 2], [46, 3], [0, 1]],
	        [[0, 2]],
	        [[45, 4], [0, 3]],
	        [[46, 3], [0, 4]]],
	       {6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        11: 1,
	        14: 1,
	        15: 1,
	        19: 1,
	        22: 1,
	        26: 1,
	        30: 1,
	        37: 1}],
	 309: [[[[7, 1], [131, 2]], [[40, 2]], [[0, 2]]],
	       {6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        14: 1,
	        15: 1,
	        19: 1,
	        22: 1,
	        26: 1,
	        30: 1,
	        37: 1}],
	 310: [[[[11, 1]], [[70, 2], [126, 3]], [[77, 4]], [[70, 2]], [[0, 4]]],
	       {11: 1}],
	 311: [[[[132, 1], [75, 1]], [[0, 1]]],
	       {6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        11: 1,
	        14: 1,
	        15: 1,
	        19: 1,
	        22: 1,
	        26: 1,
	        30: 1,
	        37: 1}],
	 312: [[[[133, 1]], [[134, 0], [0, 1]]],
	       {6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        14: 1,
	        15: 1,
	        19: 1,
	        22: 1,
	        26: 1,
	        30: 1,
	        37: 1}],
	 313: [[[[30, 1]], [[52, 2], [126, 3]], [[0, 2]], [[52, 2]]], {30: 1}],
	 314: [[[[24, 1]], [[0, 1]]], {24: 1}],
	 315: [[[[135, 1]], [[44, 2], [136, 1], [0, 1]], [[109, 3]], [[0, 3]]],
	       {8: 1, 9: 1, 14: 1, 15: 1, 19: 1, 22: 1, 30: 1}],
	 316: [[[[12, 1]],
	        [[45, 2], [137, 3], [0, 1]],
	        [[46, 4], [0, 2]],
	        [[45, 5]],
	        [[45, 2], [0, 4]],
	        [[46, 6], [0, 5]],
	        [[45, 7]],
	        [[46, 8], [0, 7]],
	        [[45, 7], [0, 8]]],
	       {12: 1}],
	 317: [[[[5, 1]],
	        [[45, 2], [0, 1]],
	        [[46, 3], [0, 2]],
	        [[45, 4]],
	        [[46, 5], [0, 4]],
	        [[45, 6]],
	        [[0, 6]]],
	       {5: 1}],
	 318: [[[[20, 1]], [[72, 2], [0, 1]], [[0, 2]]], {20: 1}],
	 319: [[[[138, 1]], [[139, 0], [137, 0], [0, 1]]],
	       {6: 1, 8: 1, 9: 1, 14: 1, 15: 1, 19: 1, 22: 1, 26: 1, 30: 1, 37: 1}],
	 320: [[[[140, 1]], [[2, 2], [141, 3]], [[0, 2]], [[140, 1], [2, 2]]],
	       {5: 1,
	        6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        11: 1,
	        12: 1,
	        13: 1,
	        14: 1,
	        15: 1,
	        17: 1,
	        19: 1,
	        20: 1,
	        21: 1,
	        22: 1,
	        23: 1,
	        24: 1,
	        25: 1,
	        26: 1,
	        27: 1,
	        28: 1,
	        30: 1,
	        31: 1,
	        33: 1,
	        34: 1,
	        37: 1}],
	 321: [[[[70, 1]], [[45, 2], [0, 1]], [[0, 2]]], {70: 1}],
	 322: [[[[142, 1],
	         [143, 1],
	         [144, 1],
	         [145, 1],
	         [146, 1],
	         [147, 1],
	         [148, 1],
	         [149, 1],
	         [150, 1],
	         [151, 1]],
	        [[0, 1]]],
	       {5: 1,
	        6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        11: 1,
	        12: 1,
	        13: 1,
	        14: 1,
	        15: 1,
	        17: 1,
	        19: 1,
	        20: 1,
	        21: 1,
	        22: 1,
	        23: 1,
	        24: 1,
	        25: 1,
	        26: 1,
	        27: 1,
	        28: 1,
	        30: 1,
	        31: 1,
	        33: 1,
	        34: 1,
	        37: 1}],
	 323: [[[[1, 1], [3, 1]], [[0, 1]]],
	       {4: 1,
	        5: 1,
	        6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        10: 1,
	        11: 1,
	        12: 1,
	        13: 1,
	        14: 1,
	        15: 1,
	        16: 1,
	        17: 1,
	        18: 1,
	        19: 1,
	        20: 1,
	        21: 1,
	        22: 1,
	        23: 1,
	        24: 1,
	        25: 1,
	        26: 1,
	        27: 1,
	        28: 1,
	        29: 1,
	        30: 1,
	        31: 1,
	        32: 1,
	        33: 1,
	        34: 1,
	        35: 1,
	        36: 1,
	        37: 1}],
	 324: [[[[45, 1], [70, 2], [102, 3]],
	        [[70, 2], [0, 1]],
	        [[45, 4], [152, 5], [0, 2]],
	        [[102, 6]],
	        [[152, 5], [0, 4]],
	        [[0, 5]],
	        [[102, 5]]],
	       {6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        11: 1,
	        14: 1,
	        15: 1,
	        19: 1,
	        22: 1,
	        26: 1,
	        30: 1,
	        37: 1,
	        70: 1,
	        102: 1}],
	 325: [[[[153, 1]], [[46, 2], [0, 1]], [[153, 1], [0, 2]]],
	       {6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        11: 1,
	        14: 1,
	        15: 1,
	        19: 1,
	        22: 1,
	        26: 1,
	        30: 1,
	        37: 1,
	        70: 1,
	        102: 1}],
	 326: [[[[1, 1], [2, 2]],
	        [[0, 1]],
	        [[154, 3]],
	        [[110, 4]],
	        [[155, 1], [110, 4]]],
	       {2: 1,
	        5: 1,
	        6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        11: 1,
	        12: 1,
	        13: 1,
	        14: 1,
	        15: 1,
	        17: 1,
	        19: 1,
	        20: 1,
	        21: 1,
	        22: 1,
	        23: 1,
	        24: 1,
	        25: 1,
	        26: 1,
	        27: 1,
	        28: 1,
	        30: 1,
	        31: 1,
	        33: 1,
	        34: 1,
	        37: 1}],
	 327: [[[[109, 1]], [[156, 0], [42, 0], [157, 0], [158, 0], [0, 1]]],
	       {6: 1, 8: 1, 9: 1, 14: 1, 15: 1, 19: 1, 22: 1, 26: 1, 30: 1, 37: 1}],
	 328: [[[[75, 1], [159, 2]],
	        [[32, 3], [0, 1]],
	        [[0, 2]],
	        [[75, 4]],
	        [[116, 5]],
	        [[45, 2]]],
	       {6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        11: 1,
	        14: 1,
	        15: 1,
	        19: 1,
	        22: 1,
	        26: 1,
	        30: 1,
	        37: 1}],
	 329: [[[[45, 1]], [[46, 2], [0, 1]], [[45, 1], [0, 2]]],
	       {6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        11: 1,
	        14: 1,
	        15: 1,
	        19: 1,
	        22: 1,
	        26: 1,
	        30: 1,
	        37: 1}],
	 330: [[[[45, 1]], [[46, 0], [0, 1]]],
	       {6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        11: 1,
	        14: 1,
	        15: 1,
	        19: 1,
	        22: 1,
	        26: 1,
	        30: 1,
	        37: 1}],
	 331: [[[[45, 1]],
	        [[48, 2], [46, 3], [0, 1]],
	        [[0, 2]],
	        [[45, 4], [0, 3]],
	        [[46, 3], [0, 4]]],
	       {6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        11: 1,
	        14: 1,
	        15: 1,
	        19: 1,
	        22: 1,
	        26: 1,
	        30: 1,
	        37: 1}],
	 332: [[[[77, 1]],
	        [[46, 2], [0, 1]],
	        [[77, 3]],
	        [[46, 4], [0, 3]],
	        [[77, 3], [0, 4]]],
	       {6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        11: 1,
	        14: 1,
	        15: 1,
	        19: 1,
	        22: 1,
	        26: 1,
	        30: 1,
	        37: 1}],
	 333: [[[[30, 1], [102, 2], [14, 3]],
	        [[52, 4], [98, 5]],
	        [[22, 4]],
	        [[160, 6]],
	        [[0, 4]],
	        [[52, 4]],
	        [[51, 4]]],
	       {14: 1, 30: 1, 102: 1}],
	 334: [[[[16, 1]],
	        [[70, 2]],
	        [[71, 3]],
	        [[161, 4], [162, 5]],
	        [[70, 6]],
	        [[70, 7]],
	        [[71, 8]],
	        [[71, 9]],
	        [[161, 4], [116, 10], [162, 5], [0, 8]],
	        [[0, 9]],
	        [[70, 11]],
	        [[71, 12]],
	        [[162, 5], [0, 12]]],
	       {16: 1}],
	 335: [[[[42, 1], [118, 2], [44, 3]],
	        [[22, 4]],
	        [[47, 5], [46, 6], [0, 2]],
	        [[22, 7]],
	        [[46, 8], [0, 4]],
	        [[45, 9]],
	        [[42, 1], [118, 2], [44, 3], [0, 6]],
	        [[0, 7]],
	        [[44, 3]],
	        [[46, 6], [0, 9]]],
	       {22: 1, 30: 1, 42: 1, 44: 1}],
	 336: [[[[18, 1]],
	        [[45, 2]],
	        [[70, 3]],
	        [[71, 4]],
	        [[116, 5], [0, 4]],
	        [[70, 6]],
	        [[71, 7]],
	        [[0, 7]]],
	       {18: 1}],
	 337: [[[[45, 1]], [[100, 2], [0, 1]], [[86, 3]], [[0, 3]]],
	       {6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        11: 1,
	        14: 1,
	        15: 1,
	        19: 1,
	        22: 1,
	        26: 1,
	        30: 1,
	        37: 1}],
	 338: [[[[36, 1]], [[163, 2]], [[70, 3], [46, 1]], [[71, 4]], [[0, 4]]],
	       {36: 1}],
	 339: [[[[164, 1]], [[165, 0], [0, 1]]],
	       {6: 1, 8: 1, 9: 1, 14: 1, 15: 1, 19: 1, 22: 1, 26: 1, 30: 1, 37: 1}],
	 340: [[[[27, 1]], [[72, 2], [0, 1]], [[0, 2]]], {27: 1}],
	 341: [[[[53, 1]], [[0, 1]]], {27: 1}]},
	states:
	[[[[1, 1], [2, 1], [3, 2]], [[0, 1]], [[2, 1]]],
	 [[[38, 1]], [[39, 0], [0, 1]]],
	 [[[40, 1]], [[41, 0], [0, 1]]],
	 [[[42, 1], [43, 2], [44, 3]],
	  [[45, 4]],
	  [[46, 5], [0, 2]],
	  [[45, 6]],
	  [[46, 7], [0, 4]],
	  [[42, 1], [43, 2], [44, 3], [0, 5]],
	  [[0, 6]],
	  [[43, 4], [44, 3]]],
	 [[[45, 1]], [[47, 2], [48, 3], [0, 1]], [[45, 3]], [[0, 3]]],
	 [[[49, 1]], [[26, 0], [37, 0], [0, 1]]],
	 [[[21, 1]], [[45, 2]], [[46, 3], [0, 2]], [[45, 4]], [[0, 4]]],
	 [[[19, 1], [8, 2], [9, 5], [30, 4], [14, 3], [15, 6], [22, 2]],
	  [[19, 1], [0, 1]],
	  [[0, 2]],
	  [[50, 7], [51, 2]],
	  [[52, 2], [53, 8], [54, 8]],
	  [[55, 2], [56, 9]],
	  [[57, 10]],
	  [[51, 2]],
	  [[52, 2]],
	  [[55, 2]],
	  [[15, 2]]],
	 [[[58, 1],
	   [59, 1],
	   [60, 1],
	   [61, 1],
	   [62, 1],
	   [63, 1],
	   [64, 1],
	   [65, 1],
	   [66, 1],
	   [67, 1],
	   [68, 1],
	   [69, 1]],
	  [[0, 1]]],
	 [[[33, 1]], [[0, 1]]],
	 [[[10, 1]],
	  [[22, 2]],
	  [[70, 3], [30, 4]],
	  [[71, 5]],
	  [[52, 6], [72, 7]],
	  [[0, 5]],
	  [[70, 3]],
	  [[52, 6]]],
	 [[[29, 1]], [[73, 2]], [[74, 3]], [[75, 4]], [[76, 5], [0, 4]], [[0, 5]]],
	 [[[32, 1]], [[77, 2]], [[76, 3], [0, 2]], [[0, 3]]],
	 [[[78, 1], [48, 1]], [[0, 1]]],
	 [[[79, 1],
	   [80, 1],
	   [7, 2],
	   [81, 1],
	   [79, 1],
	   [74, 1],
	   [82, 1],
	   [83, 3],
	   [84, 1],
	   [85, 1]],
	  [[0, 1]],
	  [[74, 1]],
	  [[7, 1], [0, 3]]],
	 [[[86, 1]], [[87, 0], [0, 1]]],
	 [[[88, 1], [89, 1], [90, 1], [91, 1], [92, 1], [93, 1], [94, 1], [95, 1]],
	  [[0, 1]]],
	 [[[34, 1]], [[0, 1]]],
	 [[[13, 1]], [[0, 1]]],
	 [[[96, 1]], [[94, 2], [91, 2]], [[0, 2]]],
	 [[[35, 1]],
	  [[97, 2]],
	  [[2, 4], [30, 3]],
	  [[52, 5], [98, 6]],
	  [[0, 4]],
	  [[2, 4]],
	  [[52, 5]]],
	 [[[99, 1]], [[99, 1], [0, 1]]],
	 [[[23, 1]], [[73, 2]], [[0, 2]]],
	 [[[45, 1]],
	  [[70, 2], [48, 3], [46, 4], [0, 1]],
	  [[45, 5]],
	  [[0, 3]],
	  [[45, 6], [0, 4]],
	  [[48, 3], [46, 7], [0, 5]],
	  [[46, 4], [0, 6]],
	  [[45, 8], [0, 7]],
	  [[70, 9]],
	  [[45, 10]],
	  [[46, 7], [0, 10]]],
	 [[[97, 1]], [[100, 2], [0, 1]], [[22, 3]], [[0, 3]]],
	 [[[101, 1]], [[46, 0], [0, 1]]],
	 [[[22, 1]], [[102, 0], [0, 1]]],
	 [[[22, 1]], [[0, 1]]],
	 [[[72, 1]], [[2, 1], [103, 2]], [[0, 2]]],
	 [[[104, 1]],
	  [[45, 2], [0, 1]],
	  [[100, 3], [46, 3], [0, 2]],
	  [[45, 4]],
	  [[0, 4]]],
	 [[[17, 1]],
	  [[86, 2]],
	  [[74, 3], [0, 2]],
	  [[45, 4]],
	  [[46, 5], [0, 4]],
	  [[45, 6]],
	  [[0, 6]]],
	 [[[105, 1]], [[106, 0], [0, 1]]],
	 [[[72, 1]],
	  [[107, 2], [47, 3], [0, 1]],
	  [[72, 4], [53, 4]],
	  [[72, 5], [53, 5]],
	  [[0, 4]],
	  [[47, 3], [0, 5]]],
	 [[[86, 1]], [[46, 2], [0, 1]], [[86, 1], [0, 2]]],
	 [[[37, 2], [26, 2], [6, 2], [108, 1]], [[0, 1]], [[109, 1]]],
	 [[[2, 0], [103, 1], [110, 0]], [[0, 1]]],
	 [[[111, 1], [112, 1], [113, 1], [114, 1], [115, 1]], [[0, 1]]],
	 [[[29, 1]],
	  [[73, 2]],
	  [[74, 3]],
	  [[72, 4]],
	  [[70, 5]],
	  [[71, 6]],
	  [[116, 7], [0, 6]],
	  [[70, 8]],
	  [[71, 9]],
	  [[0, 9]]],
	 [[[30, 1], [22, 2]], [[117, 3]], [[0, 2]], [[52, 2]]],
	 [[[118, 1]], [[46, 2], [0, 1]], [[118, 1], [0, 2]]],
	 [[[4, 1]], [[22, 2]], [[119, 3]], [[70, 4]], [[71, 5]], [[0, 5]]],
	 [[[28, 1]], [[22, 2]], [[46, 1], [0, 2]]],
	 [[[32, 1]],
	  [[45, 2]],
	  [[70, 3]],
	  [[71, 4]],
	  [[116, 5], [120, 1], [0, 4]],
	  [[70, 6]],
	  [[71, 7]],
	  [[0, 7]]],
	 [[[22, 1]], [[100, 2], [0, 1]], [[22, 3]], [[0, 3]]],
	 [[[121, 1]], [[46, 2], [0, 1]], [[121, 1], [0, 2]]],
	 [[[31, 1]],
	  [[97, 2], [102, 3]],
	  [[25, 4]],
	  [[97, 2], [25, 4], [102, 3]],
	  [[122, 5], [42, 5], [30, 6]],
	  [[0, 5]],
	  [[122, 7]],
	  [[52, 5]]],
	 [[[25, 1]], [[123, 2]], [[0, 2]]],
	 [[[124, 1], [125, 1]], [[0, 1]]],
	 [[[11, 1]], [[70, 2], [126, 3]], [[45, 4]], [[70, 2]], [[0, 4]]],
	 [[[29, 1]], [[73, 2]], [[74, 3]], [[127, 4]], [[128, 5], [0, 4]], [[0, 5]]],
	 [[[32, 1]], [[77, 2]], [[128, 3], [0, 2]], [[0, 3]]],
	 [[[129, 1], [130, 1]], [[0, 1]]],
	 [[[45, 1]],
	  [[129, 2], [46, 3], [0, 1]],
	  [[0, 2]],
	  [[45, 4], [0, 3]],
	  [[46, 3], [0, 4]]],
	 [[[7, 1], [131, 2]], [[40, 2]], [[0, 2]]],
	 [[[11, 1]], [[70, 2], [126, 3]], [[77, 4]], [[70, 2]], [[0, 4]]],
	 [[[132, 1], [75, 1]], [[0, 1]]],
	 [[[133, 1]], [[134, 0], [0, 1]]],
	 [[[30, 1]], [[52, 2], [126, 3]], [[0, 2]], [[52, 2]]],
	 [[[24, 1]], [[0, 1]]],
	 [[[135, 1]], [[44, 2], [136, 1], [0, 1]], [[109, 3]], [[0, 3]]],
	 [[[12, 1]],
	  [[45, 2], [137, 3], [0, 1]],
	  [[46, 4], [0, 2]],
	  [[45, 5]],
	  [[45, 2], [0, 4]],
	  [[46, 6], [0, 5]],
	  [[45, 7]],
	  [[46, 8], [0, 7]],
	  [[45, 7], [0, 8]]],
	 [[[5, 1]],
	  [[45, 2], [0, 1]],
	  [[46, 3], [0, 2]],
	  [[45, 4]],
	  [[46, 5], [0, 4]],
	  [[45, 6]],
	  [[0, 6]]],
	 [[[20, 1]], [[72, 2], [0, 1]], [[0, 2]]],
	 [[[138, 1]], [[139, 0], [137, 0], [0, 1]]],
	 [[[140, 1]], [[2, 2], [141, 3]], [[0, 2]], [[140, 1], [2, 2]]],
	 [[[70, 1]], [[45, 2], [0, 1]], [[0, 2]]],
	 [[[142, 1],
	   [143, 1],
	   [144, 1],
	   [145, 1],
	   [146, 1],
	   [147, 1],
	   [148, 1],
	   [149, 1],
	   [150, 1],
	   [151, 1]],
	  [[0, 1]]],
	 [[[1, 1], [3, 1]], [[0, 1]]],
	 [[[45, 1], [70, 2], [102, 3]],
	  [[70, 2], [0, 1]],
	  [[45, 4], [152, 5], [0, 2]],
	  [[102, 6]],
	  [[152, 5], [0, 4]],
	  [[0, 5]],
	  [[102, 5]]],
	 [[[153, 1]], [[46, 2], [0, 1]], [[153, 1], [0, 2]]],
	 [[[1, 1], [2, 2]], [[0, 1]], [[154, 3]], [[110, 4]], [[155, 1], [110, 4]]],
	 [[[109, 1]], [[156, 0], [42, 0], [157, 0], [158, 0], [0, 1]]],
	 [[[75, 1], [159, 2]],
	  [[32, 3], [0, 1]],
	  [[0, 2]],
	  [[75, 4]],
	  [[116, 5]],
	  [[45, 2]]],
	 [[[45, 1]], [[46, 2], [0, 1]], [[45, 1], [0, 2]]],
	 [[[45, 1]], [[46, 0], [0, 1]]],
	 [[[45, 1]],
	  [[48, 2], [46, 3], [0, 1]],
	  [[0, 2]],
	  [[45, 4], [0, 3]],
	  [[46, 3], [0, 4]]],
	 [[[77, 1]],
	  [[46, 2], [0, 1]],
	  [[77, 3]],
	  [[46, 4], [0, 3]],
	  [[77, 3], [0, 4]]],
	 [[[30, 1], [102, 2], [14, 3]],
	  [[52, 4], [98, 5]],
	  [[22, 4]],
	  [[160, 6]],
	  [[0, 4]],
	  [[52, 4]],
	  [[51, 4]]],
	 [[[16, 1]],
	  [[70, 2]],
	  [[71, 3]],
	  [[161, 4], [162, 5]],
	  [[70, 6]],
	  [[70, 7]],
	  [[71, 8]],
	  [[71, 9]],
	  [[161, 4], [116, 10], [162, 5], [0, 8]],
	  [[0, 9]],
	  [[70, 11]],
	  [[71, 12]],
	  [[162, 5], [0, 12]]],
	 [[[42, 1], [118, 2], [44, 3]],
	  [[22, 4]],
	  [[47, 5], [46, 6], [0, 2]],
	  [[22, 7]],
	  [[46, 8], [0, 4]],
	  [[45, 9]],
	  [[42, 1], [118, 2], [44, 3], [0, 6]],
	  [[0, 7]],
	  [[44, 3]],
	  [[46, 6], [0, 9]]],
	 [[[18, 1]],
	  [[45, 2]],
	  [[70, 3]],
	  [[71, 4]],
	  [[116, 5], [0, 4]],
	  [[70, 6]],
	  [[71, 7]],
	  [[0, 7]]],
	 [[[45, 1]], [[100, 2], [0, 1]], [[86, 3]], [[0, 3]]],
	 [[[36, 1]], [[163, 2]], [[70, 3], [46, 1]], [[71, 4]], [[0, 4]]],
	 [[[164, 1]], [[165, 0], [0, 1]]],
	 [[[27, 1]], [[72, 2], [0, 1]], [[0, 2]]],
	 [[[53, 1]], [[0, 1]]]],
	labels:
	[[0, 'EMPTY'],
	 [320, null],
	 [4, null],
	 [272, null],
	 [1, 'def'],
	 [1, 'raise'],
	 [32, null],
	 [1, 'not'],
	 [2, null],
	 [26, null],
	 [1, 'class'],
	 [1, 'lambda'],
	 [1, 'print'],
	 [1, 'debugger'],
	 [9, null],
	 [25, null],
	 [1, 'try'],
	 [1, 'exec'],
	 [1, 'while'],
	 [3, null],
	 [1, 'return'],
	 [1, 'assert'],
	 [1, null],
	 [1, 'del'],
	 [1, 'pass'],
	 [1, 'import'],
	 [15, null],
	 [1, 'yield'],
	 [1, 'global'],
	 [1, 'for'],
	 [7, null],
	 [1, 'from'],
	 [1, 'if'],
	 [1, 'break'],
	 [1, 'continue'],
	 [50, null],
	 [1, 'with'],
	 [14, null],
	 [319, null],
	 [19, null],
	 [309, null],
	 [1, 'and'],
	 [16, null],
	 [260, null],
	 [36, null],
	 [328, null],
	 [12, null],
	 [22, null],
	 [267, null],
	 [327, null],
	 [308, null],
	 [10, null],
	 [8, null],
	 [340, null],
	 [331, null],
	 [27, null],
	 [279, null],
	 [330, null],
	 [46, null],
	 [39, null],
	 [41, null],
	 [47, null],
	 [42, null],
	 [43, null],
	 [37, null],
	 [44, null],
	 [49, null],
	 [45, null],
	 [38, null],
	 [40, null],
	 [11, null],
	 [326, null],
	 [329, null],
	 [289, null],
	 [1, 'in'],
	 [312, null],
	 [269, null],
	 [311, null],
	 [268, null],
	 [29, null],
	 [21, null],
	 [28, null],
	 [30, null],
	 [1, 'is'],
	 [31, null],
	 [20, null],
	 [287, null],
	 [270, null],
	 [334, null],
	 [298, null],
	 [293, null],
	 [266, null],
	 [338, null],
	 [336, null],
	 [296, null],
	 [275, null],
	 [277, null],
	 [282, null],
	 [259, null],
	 [276, null],
	 [1, 'as'],
	 [280, null],
	 [23, null],
	 [0, null],
	 [1, 'except'],
	 [339, null],
	 [18, null],
	 [264, null],
	 [315, null],
	 [290, null],
	 [323, null],
	 [265, null],
	 [273, null],
	 [317, null],
	 [318, null],
	 [341, null],
	 [1, 'else'],
	 [295, null],
	 [294, null],
	 [313, null],
	 [1, 'elif'],
	 [299, null],
	 [300, null],
	 [281, null],
	 [302, null],
	 [301, null],
	 [335, null],
	 [332, null],
	 [307, null],
	 [305, null],
	 [306, null],
	 [271, null],
	 [310, null],
	 [258, null],
	 [1, 'or'],
	 [263, null],
	 [333, null],
	 [35, null],
	 [261, null],
	 [34, null],
	 [322, null],
	 [13, null],
	 [292, null],
	 [278, null],
	 [288, null],
	 [314, null],
	 [316, null],
	 [262, null],
	 [286, null],
	 [297, null],
	 [303, null],
	 [274, null],
	 [321, null],
	 [324, null],
	 [5, null],
	 [6, null],
	 [48, null],
	 [17, null],
	 [24, null],
	 [304, null],
	 [325, null],
	 [285, null],
	 [1, 'finally'],
	 [337, null],
	 [257, null],
	 [33, null]],
	keywords:
	{'and': 41,
	 'as': 100,
	 'assert': 21,
	 'break': 33,
	 'class': 10,
	 'continue': 34,
	 'debugger': 13,
	 'def': 4,
	 'del': 23,
	 'elif': 120,
	 'else': 116,
	 'except': 104,
	 'exec': 17,
	 'finally': 162,
	 'for': 29,
	 'from': 31,
	 'global': 28,
	 'if': 32,
	 'import': 25,
	 'in': 74,
	 'is': 83,
	 'lambda': 11,
	 'not': 7,
	 'or': 134,
	 'pass': 24,
	 'print': 12,
	 'raise': 5,
	 'return': 20,
	 'try': 16,
	 'while': 18,
	 'with': 36,
	 'yield': 27},
	tokens:
	{0: 103,
	 1: 22,
	 2: 8,
	 3: 19,
	 4: 2,
	 5: 154,
	 6: 155,
	 7: 30,
	 8: 52,
	 9: 14,
	 10: 51,
	 11: 70,
	 12: 46,
	 13: 141,
	 14: 37,
	 15: 26,
	 16: 42,
	 17: 157,
	 18: 106,
	 19: 39,
	 20: 85,
	 21: 80,
	 22: 47,
	 23: 102,
	 24: 158,
	 25: 15,
	 26: 9,
	 27: 55,
	 28: 81,
	 29: 79,
	 30: 82,
	 31: 84,
	 32: 6,
	 33: 165,
	 34: 139,
	 35: 137,
	 36: 44,
	 37: 64,
	 38: 68,
	 39: 59,
	 40: 69,
	 41: 60,
	 42: 62,
	 43: 63,
	 44: 65,
	 45: 67,
	 46: 58,
	 47: 61,
	 48: 156,
	 49: 66,
	 50: 35},
	start: 256
	};



	/* ---- /Users/rob/skulpty/lib/../node_modules/skulpt/src/parser.js ---- */ 

	// low level parser to a concrete syntax tree, derived from cpython's lib2to3

	/**
	 *
	 * @constructor
	 * @param {Object} grammar
	 *
	 * p = new Parser(grammar);
	 * p.setup([start]);
	 * foreach input token:
	 *     if p.addtoken(...):
	 *         break
	 * root = p.rootnode
	 *
	 * can throw SyntaxError
	 */
	function Parser (filename, grammar) {
	    this.filename = filename;
	    this.grammar = grammar;
	    this.p_flags = 0;
	    return this;
	}

	// all possible parser flags
	Parser.FUTURE_PRINT_FUNCTION = "print_function";
	Parser.FUTURE_UNICODE_LITERALS = "unicode_literals";
	Parser.FUTURE_DIVISION = "division";
	Parser.FUTURE_ABSOLUTE_IMPORT = "absolute_import";
	Parser.FUTURE_WITH_STATEMENT = "with_statement";
	Parser.FUTURE_NESTED_SCOPES = "nested_scopes";
	Parser.FUTURE_GENERATORS = "generators";
	Parser.CO_FUTURE_PRINT_FUNCTION = 0x10000;
	Parser.CO_FUTURE_UNICODE_LITERALS = 0x20000;
	Parser.CO_FUTURE_DIVISON = 0x2000;
	Parser.CO_FUTURE_ABSOLUTE_IMPORT = 0x4000;
	Parser.CO_FUTURE_WITH_STATEMENT = 0x8000;

	Parser.prototype.setup = function (start) {
	    var stackentry;
	    var newnode;
	    start = start || this.grammar.start;
	    //print("START:"+start);

	    newnode =
	    {
	        type    : start,
	        value   : null,
	        context : null,
	        children: []
	    };
	    stackentry =
	    {
	        dfa  : this.grammar.dfas[start],
	        state: 0,
	        node : newnode
	    };
	    this.stack = [stackentry];
	    this.used_names = {};
	};

	function findInDfa (a, obj) {
	    var i = a.length;
	    while (i--) {
	        if (a[i][0] === obj[0] && a[i][1] === obj[1]) {
	            return true;
	        }
	    }
	    return false;
	}


	// Add a token; return true if we're done
	Parser.prototype.addtoken = function (type, value, context) {
	    var errline;
	    var itsfirst;
	    var itsdfa;
	    var state;
	    var v;
	    var t;
	    var newstate;
	    var i;
	    var a;
	    var arcs;
	    var first;
	    var states;
	    var tp;
	    var ilabel = this.classify(type, value, context);
	    //print("ilabel:"+ilabel);

	    OUTERWHILE:
	    while (true) {
	        tp = this.stack[this.stack.length - 1];
	        states = tp.dfa[0];
	        first = tp.dfa[1];
	        arcs = states[tp.state];

	        // look for a state with this label
	        for (a = 0; a < arcs.length; ++a) {
	            i = arcs[a][0];
	            newstate = arcs[a][1];
	            t = this.grammar.labels[i][0];
	            v = this.grammar.labels[i][1];
	            if (ilabel === i) {
	                // look it up in the list of labels
	                goog.asserts.assert(t < 256);
	                // shift a token; we're done with it
	                this.shift(type, value, newstate, context);
	                // pop while we are in an accept-only state
	                state = newstate;
	                //print("before:"+JSON.stringify(states[state]) + ":state:"+state+":"+JSON.stringify(states[state]));
	                /* jshint ignore:start */
	                while (states[state].length === 1
	                    && states[state][0][0] === 0
	                    && states[state][0][1] === state) {
	                    // states[state] == [(0, state)])
	                    this.pop();
	                    //print("in after pop:"+JSON.stringify(states[state]) + ":state:"+state+":"+JSON.stringify(states[state]));
	                    if (this.stack.length === 0) {
	                        // done!
	                        return true;
	                    }
	                    tp = this.stack[this.stack.length - 1];
	                    state = tp.state;
	                    states = tp.dfa[0];
	                    first = tp.dfa[1];
	                    //print(JSON.stringify(states), JSON.stringify(first));
	                    //print("bottom:"+JSON.stringify(states[state]) + ":state:"+state+":"+JSON.stringify(states[state]));
	                }
	                /* jshint ignore:end */
	                // done with this token
	                //print("DONE, return false");
	                return false;
	            } else if (t >= 256) {
	                itsdfa = this.grammar.dfas[t];
	                itsfirst = itsdfa[1];
	                if (itsfirst.hasOwnProperty(ilabel)) {
	                    // push a symbol
	                    this.push(t, this.grammar.dfas[t], newstate, context);
	                    continue OUTERWHILE;
	                }
	            }
	        }

	        //print("findInDfa: " + JSON.stringify(arcs)+" vs. " + tp.state);
	        if (findInDfa(arcs, [0, tp.state])) {
	            // an accepting state, pop it and try somethign else
	            //print("WAA");
	            this.pop();
	            if (this.stack.length === 0) {
	                throw new Sk.builtin.SyntaxError("too much input", this.filename);
	            }
	        } else {
	            // no transition
	            errline = context[0][0];

	            var that = this;
	            var ar = arcs.map(function(a) {
	                var i = a[0];
	                var t = that.grammar.labels[i][0];
	                return Sk.nameForToken(t);
	            });
	            var extra = {
	                kind: "DAG_MISS",
	                expected: ar,
	                found: Sk.nameForToken(type),
	                found_val: value,
	                inside: Sk.nameForToken(tp.node.type),
	                node: tp.node,
	                parent: this.stack.length > 1 ? this.stack[this.stack.length - 2].node : undefined
	            };
	            var reason = "expected " + ar.join(', ') + " but found " + extra.found + " while parsing " + extra.inside;

	            throw new Sk.builtin.SyntaxError(reason, this.filename, errline, context, extra);
	        }
	    }
	};

	// turn a token into a label
	Parser.prototype.classify = function (type, value, context) {
	    var ilabel;
	    if (type === Sk.Tokenizer.Tokens.T_NAME) {
	        this.used_names[value] = true;
	        ilabel = this.grammar.keywords.hasOwnProperty(value) && this.grammar.keywords[value];

	        /* Check for handling print as an builtin function */
	        if(value === "print" && (this.p_flags & Parser.CO_FUTURE_PRINT_FUNCTION || Sk.python3 === true)) {
	            ilabel = false; // ilabel determines if the value is a keyword
	        }

	        if (ilabel) {
	            //print("is keyword");
	            return ilabel;
	        }
	    }
	    ilabel = this.grammar.tokens.hasOwnProperty(type) && this.grammar.tokens[type];
	    if (!ilabel) {
	        // throw new Sk.builtin.SyntaxError("bad token", type, value, context);
	        // Questionable modification to put line number in position 2
	        // like everywhere else and filename in position 1.
	        var extra = {
	            kind: "CLASSIFY",
	            type: type,
	            value: value
	        };
	        throw new Sk.builtin.SyntaxError("bad token", this.filename, context[0][0], context, extra);
	    }
	    return ilabel;
	};

	// shift a token
	Parser.prototype.shift = function (type, value, newstate, context) {
	    var dfa = this.stack[this.stack.length - 1].dfa;
	    var state = this.stack[this.stack.length - 1].state;
	    var node = this.stack[this.stack.length - 1].node;
	    //print("context", context);
	    var newnode = {
	        type      : type,
	        value     : value,
	        lineno    : context[0][0],         // throwing away end here to match cpython
	        col_offset: context[0][1],
	        children  : null
	    };
	    if (newnode) {
	        node.children.push(newnode);
	    }
	    this.stack[this.stack.length - 1] = {
	        dfa  : dfa,
	        state: newstate,
	        node : node
	    };
	};

	// push a nonterminal
	Parser.prototype.push = function (type, newdfa, newstate, context) {
	    var dfa = this.stack[this.stack.length - 1].dfa;
	    var node = this.stack[this.stack.length - 1].node;
	    var newnode = {
	        type      : type,
	        value     : null,
	        lineno    : context[0][0],      // throwing away end here to match cpython
	        col_offset: context[0][1],
	        children  : []
	    };
	    this.stack[this.stack.length - 1] = {
	        dfa  : dfa,
	        state: newstate,
	        node : node
	    };
	    this.stack.push({
	        dfa  : newdfa,
	        state: 0,
	        node : newnode
	    });
	};

	//var ac = 0;
	//var bc = 0;

	// pop a nonterminal
	Parser.prototype.pop = function () {
	    var node;
	    var pop = this.stack.pop();
	    var newnode = pop.node;
	    //print("POP");
	    if (newnode) {
	        //print("A", ac++, newnode.type);
	        //print("stacklen:"+this.stack.length);
	        if (this.stack.length !== 0) {
	            //print("B", bc++);
	            node = this.stack[this.stack.length - 1].node;
	            node.children.push(newnode);
	        } else {
	            //print("C");
	            this.rootnode = newnode;
	            this.rootnode.used_names = this.used_names;
	        }
	    }
	};

	/**
	 * parser for interactive input. returns a function that should be called with
	 * lines of input as they are entered. the function will return false
	 * until the input is complete, when it will return the rootnode of the parse.
	 *
	 * @param {string} filename
	 * @param {string=} style root of parse tree (optional)
	 */
	function makeParser (filename, style) {
	    var tokenizer;
	    var T_OP;
	    var T_NL;
	    var T_COMMENT;
	    var prefix;
	    var column;
	    var lineno;
	    var p;
	    if (style === undefined) {
	        style = "file_input";
	    }
	    p = new Parser(filename, Sk.ParseTables);
	    // for closure's benefit
	    if (style === "file_input") {
	        p.setup(Sk.ParseTables.sym.file_input);
	    } else {
	        goog.asserts.fail("todo;");
	    }
	    lineno = 1;
	    column = 0;
	    prefix = "";
	    T_COMMENT = Sk.Tokenizer.Tokens.T_COMMENT;
	    T_NL = Sk.Tokenizer.Tokens.T_NL;
	    T_OP = Sk.Tokenizer.Tokens.T_OP;
	    tokenizer = new Sk.Tokenizer(filename, style === "single_input", function (type, value, start, end, line) {
	        var s_lineno = start[0];
	        var s_column = start[1];
	        /*
	         if (s_lineno !== lineno && s_column !== column)
	         {
	         // todo; update prefix and line/col
	         }
	         */
	        if (type === T_COMMENT || type === T_NL) {
	            prefix += value;
	            lineno = end[0];
	            column = end[1];
	            if (value[value.length - 1] === "\n") {
	                lineno += 1;
	                column = 0;
	            }
	            //print("  not calling addtoken");
	            return undefined;
	        }
	        if (type === T_OP) {
	            type = Sk.OpMap[value];
	        }
	        if (p.addtoken(type, value, [start, end, line])) {
	            return true;
	        }
	    });

	    // create parser function
	    var parseFunc = function (line) {
	        var ret = tokenizer.generateTokens(line);
	        //print("tok:"+ret);
	        if (ret) {
	            if (ret !== "done") {
	                throw new Sk.builtin.SyntaxError("incomplete input", this.filename);
	            }
	            return p.rootnode;
	        }
	        return false;
	    };

	    // set flags, and return
	    parseFunc.p_flags = p.p_flags;
	    return parseFunc;
	}

	Sk.parse = function parse (filename, input) {
	    var i;
	    var ret;
	    var lines;
	    var parseFunc = makeParser(filename);
	    if (input.substr(input.length - 1, 1) !== "\n") {
	        input += "\n";
	    }
	    //print("input:"+input);
	    lines = input.split("\n");
	    for (i = 0; i < lines.length; ++i) {
	        ret = parseFunc(lines[i] + ((i === lines.length - 1) ? "" : "\n"));
	    }

	    /*
	     * Small adjustments here in order to return th flags and the cst
	     */
	    return {"cst": ret, "flags": parseFunc.p_flags};
	};

	Sk.parseTreeDump = function parseTreeDump (n, indent) {
	    //return JSON.stringify(n, null, 2);
	    var i;
	    var ret;
	    indent = indent || "";
	    ret = "";
	    ret += indent;
	    if (n.type >= 256) { // non-term
	        ret += Sk.ParseTables.number2symbol[n.type] + "\n";
	        for (i = 0; i < n.children.length; ++i) {
	            ret += Sk.parseTreeDump(n.children[i], indent + "  ");
	        }
	    } else {
	        ret += Sk.Tokenizer.tokenNames[n.type] + ": " + new Sk.builtin.str(n.value)["$r"]().v + "\n";
	    }
	    return ret;
	};


	goog.exportSymbol("Sk.parse", Sk.parse);
	goog.exportSymbol("Sk.parseTreeDump", Sk.parseTreeDump);



	/* ---- /Users/rob/skulpty/lib/../node_modules/skulpt/gen/astnodes.js ---- */ 

	/* File automatically generated by ./asdl_js.py. */

	/* ----- expr_context ----- */
	/** @constructor */
	function Load() {}
	/** @constructor */
	function Store() {}
	/** @constructor */
	function Del() {}
	/** @constructor */
	function AugLoad() {}
	/** @constructor */
	function AugStore() {}
	/** @constructor */
	function Param() {}

	/* ----- boolop ----- */
	/** @constructor */
	function And() {}
	/** @constructor */
	function Or() {}

	/* ----- operator ----- */
	/** @constructor */
	function Add() {}
	/** @constructor */
	function Sub() {}
	/** @constructor */
	function Mult() {}
	/** @constructor */
	function Div() {}
	/** @constructor */
	function Mod() {}
	/** @constructor */
	function Pow() {}
	/** @constructor */
	function LShift() {}
	/** @constructor */
	function RShift() {}
	/** @constructor */
	function BitOr() {}
	/** @constructor */
	function BitXor() {}
	/** @constructor */
	function BitAnd() {}
	/** @constructor */
	function FloorDiv() {}

	/* ----- unaryop ----- */
	/** @constructor */
	function Invert() {}
	/** @constructor */
	function Not() {}
	/** @constructor */
	function UAdd() {}
	/** @constructor */
	function USub() {}

	/* ----- cmpop ----- */
	/** @constructor */
	function Eq() {}
	/** @constructor */
	function NotEq() {}
	/** @constructor */
	function Lt() {}
	/** @constructor */
	function LtE() {}
	/** @constructor */
	function Gt() {}
	/** @constructor */
	function GtE() {}
	/** @constructor */
	function Is() {}
	/** @constructor */
	function IsNot() {}
	/** @constructor */
	function In_() {}
	/** @constructor */
	function NotIn() {}







	/* ---------------------- */
	/* constructors for nodes */
	/* ---------------------- */





	/** @constructor */
	function Module(/* {asdl_seq *} */ body)
	{
	    this.body = body;
	    return this;
	}

	/** @constructor */
	function Interactive(/* {asdl_seq *} */ body)
	{
	    this.body = body;
	    return this;
	}

	/** @constructor */
	function Expression(/* {expr_ty} */ body)
	{
	    goog.asserts.assert(body !== null && body !== undefined);
	    this.body = body;
	    return this;
	}

	/** @constructor */
	function Suite(/* {asdl_seq *} */ body)
	{
	    this.body = body;
	    return this;
	}

	/** @constructor */
	function FunctionDef(/* {identifier} */ name, /* {arguments__ty} */ args, /*
	                          {asdl_seq *} */ body, /* {asdl_seq *} */
	                          decorator_list, /* {int} */ lineno, /* {int} */
	                          col_offset)
	{
	    goog.asserts.assert(name !== null && name !== undefined);
	    goog.asserts.assert(args !== null && args !== undefined);
	    this.name = name;
	    this.args = args;
	    this.body = body;
	    this.decorator_list = decorator_list;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function ClassDef(/* {identifier} */ name, /* {asdl_seq *} */ bases, /*
	                       {asdl_seq *} */ body, /* {asdl_seq *} */ decorator_list,
	                       /* {int} */ lineno, /* {int} */ col_offset)
	{
	    goog.asserts.assert(name !== null && name !== undefined);
	    this.name = name;
	    this.bases = bases;
	    this.body = body;
	    this.decorator_list = decorator_list;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Return_(/* {expr_ty} */ value, /* {int} */ lineno, /* {int} */
	                      col_offset)
	{
	    this.value = value;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Delete_(/* {asdl_seq *} */ targets, /* {int} */ lineno, /* {int} */
	                      col_offset)
	{
	    this.targets = targets;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Assign(/* {asdl_seq *} */ targets, /* {expr_ty} */ value, /* {int} */
	                     lineno, /* {int} */ col_offset)
	{
	    goog.asserts.assert(value !== null && value !== undefined);
	    this.targets = targets;
	    this.value = value;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function AugAssign(/* {expr_ty} */ target, /* {operator_ty} */ op, /* {expr_ty}
	                        */ value, /* {int} */ lineno, /* {int} */ col_offset)
	{
	    goog.asserts.assert(target !== null && target !== undefined);
	    goog.asserts.assert(op !== null && op !== undefined);
	    goog.asserts.assert(value !== null && value !== undefined);
	    this.target = target;
	    this.op = op;
	    this.value = value;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Print(/* {expr_ty} */ dest, /* {asdl_seq *} */ values, /* {bool} */
	                    nl, /* {int} */ lineno, /* {int} */ col_offset)
	{
	    this.dest = dest;
	    this.values = values;
	    this.nl = nl;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function For_(/* {expr_ty} */ target, /* {expr_ty} */ iter, /* {asdl_seq *} */
	                   body, /* {asdl_seq *} */ orelse, /* {int} */ lineno, /*
	                   {int} */ col_offset)
	{
	    goog.asserts.assert(target !== null && target !== undefined);
	    goog.asserts.assert(iter !== null && iter !== undefined);
	    this.target = target;
	    this.iter = iter;
	    this.body = body;
	    this.orelse = orelse;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function While_(/* {expr_ty} */ test, /* {asdl_seq *} */ body, /* {asdl_seq *}
	                     */ orelse, /* {int} */ lineno, /* {int} */ col_offset)
	{
	    goog.asserts.assert(test !== null && test !== undefined);
	    this.test = test;
	    this.body = body;
	    this.orelse = orelse;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function If_(/* {expr_ty} */ test, /* {asdl_seq *} */ body, /* {asdl_seq *} */
	                  orelse, /* {int} */ lineno, /* {int} */ col_offset)
	{
	    goog.asserts.assert(test !== null && test !== undefined);
	    this.test = test;
	    this.body = body;
	    this.orelse = orelse;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function With_(/* {expr_ty} */ context_expr, /* {expr_ty} */ optional_vars, /*
	                    {asdl_seq *} */ body, /* {int} */ lineno, /* {int} */
	                    col_offset)
	{
	    goog.asserts.assert(context_expr !== null && context_expr !== undefined);
	    this.context_expr = context_expr;
	    this.optional_vars = optional_vars;
	    this.body = body;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Raise(/* {expr_ty} */ type, /* {expr_ty} */ inst, /* {expr_ty} */
	                    tback, /* {int} */ lineno, /* {int} */ col_offset)
	{
	    this.type = type;
	    this.inst = inst;
	    this.tback = tback;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function TryExcept(/* {asdl_seq *} */ body, /* {asdl_seq *} */ handlers, /*
	                        {asdl_seq *} */ orelse, /* {int} */ lineno, /* {int} */
	                        col_offset)
	{
	    this.body = body;
	    this.handlers = handlers;
	    this.orelse = orelse;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function TryFinally(/* {asdl_seq *} */ body, /* {asdl_seq *} */ finalbody, /*
	                         {int} */ lineno, /* {int} */ col_offset)
	{
	    this.body = body;
	    this.finalbody = finalbody;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Assert(/* {expr_ty} */ test, /* {expr_ty} */ msg, /* {int} */ lineno,
	                     /* {int} */ col_offset)
	{
	    goog.asserts.assert(test !== null && test !== undefined);
	    this.test = test;
	    this.msg = msg;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Import_(/* {asdl_seq *} */ names, /* {int} */ lineno, /* {int} */
	                      col_offset)
	{
	    this.names = names;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function ImportFrom(/* {identifier} */ module, /* {asdl_seq *} */ names, /*
	                         {int} */ level, /* {int} */ lineno, /* {int} */
	                         col_offset)
	{
	    goog.asserts.assert(module !== null && module !== undefined);
	    this.module = module;
	    this.names = names;
	    this.level = level;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Exec(/* {expr_ty} */ body, /* {expr_ty} */ globals, /* {expr_ty} */
	                   locals, /* {int} */ lineno, /* {int} */ col_offset)
	{
	    goog.asserts.assert(body !== null && body !== undefined);
	    this.body = body;
	    this.globals = globals;
	    this.locals = locals;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Global(/* {asdl_seq *} */ names, /* {int} */ lineno, /* {int} */
	                     col_offset)
	{
	    this.names = names;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Expr(/* {expr_ty} */ value, /* {int} */ lineno, /* {int} */ col_offset)
	{
	    goog.asserts.assert(value !== null && value !== undefined);
	    this.value = value;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Pass(/* {int} */ lineno, /* {int} */ col_offset)
	{
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Break_(/* {int} */ lineno, /* {int} */ col_offset)
	{
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Continue_(/* {int} */ lineno, /* {int} */ col_offset)
	{
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Debugger_(/* {int} */ lineno, /* {int} */ col_offset)
	{
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function BoolOp(/* {boolop_ty} */ op, /* {asdl_seq *} */ values, /* {int} */
	                     lineno, /* {int} */ col_offset)
	{
	    goog.asserts.assert(op !== null && op !== undefined);
	    this.op = op;
	    this.values = values;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function BinOp(/* {expr_ty} */ left, /* {operator_ty} */ op, /* {expr_ty} */
	                    right, /* {int} */ lineno, /* {int} */ col_offset)
	{
	    goog.asserts.assert(left !== null && left !== undefined);
	    goog.asserts.assert(op !== null && op !== undefined);
	    goog.asserts.assert(right !== null && right !== undefined);
	    this.left = left;
	    this.op = op;
	    this.right = right;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function UnaryOp(/* {unaryop_ty} */ op, /* {expr_ty} */ operand, /* {int} */
	                      lineno, /* {int} */ col_offset)
	{
	    goog.asserts.assert(op !== null && op !== undefined);
	    goog.asserts.assert(operand !== null && operand !== undefined);
	    this.op = op;
	    this.operand = operand;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Lambda(/* {arguments__ty} */ args, /* {expr_ty} */ body, /* {int} */
	                     lineno, /* {int} */ col_offset)
	{
	    goog.asserts.assert(args !== null && args !== undefined);
	    goog.asserts.assert(body !== null && body !== undefined);
	    this.args = args;
	    this.body = body;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function IfExp(/* {expr_ty} */ test, /* {expr_ty} */ body, /* {expr_ty} */
	                    orelse, /* {int} */ lineno, /* {int} */ col_offset)
	{
	    goog.asserts.assert(test !== null && test !== undefined);
	    goog.asserts.assert(body !== null && body !== undefined);
	    goog.asserts.assert(orelse !== null && orelse !== undefined);
	    this.test = test;
	    this.body = body;
	    this.orelse = orelse;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Dict(/* {asdl_seq *} */ keys, /* {asdl_seq *} */ values, /* {int} */
	                   lineno, /* {int} */ col_offset)
	{
	    this.keys = keys;
	    this.values = values;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Set(/* {asdl_seq *} */ elts, /* {int} */ lineno, /* {int} */
	                  col_offset)
	{
	    this.elts = elts;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function ListComp(/* {expr_ty} */ elt, /* {asdl_seq *} */ generators, /* {int}
	                       */ lineno, /* {int} */ col_offset)
	{
	    goog.asserts.assert(elt !== null && elt !== undefined);
	    this.elt = elt;
	    this.generators = generators;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function SetComp(/* {expr_ty} */ elt, /* {asdl_seq *} */ generators, /* {int}
	                      */ lineno, /* {int} */ col_offset)
	{
	    goog.asserts.assert(elt !== null && elt !== undefined);
	    this.elt = elt;
	    this.generators = generators;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function DictComp(/* {expr_ty} */ key, /* {expr_ty} */ value, /* {asdl_seq *}
	                       */ generators, /* {int} */ lineno, /* {int} */
	                       col_offset)
	{
	    goog.asserts.assert(key !== null && key !== undefined);
	    goog.asserts.assert(value !== null && value !== undefined);
	    this.key = key;
	    this.value = value;
	    this.generators = generators;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function GeneratorExp(/* {expr_ty} */ elt, /* {asdl_seq *} */ generators, /*
	                           {int} */ lineno, /* {int} */ col_offset)
	{
	    goog.asserts.assert(elt !== null && elt !== undefined);
	    this.elt = elt;
	    this.generators = generators;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Yield(/* {expr_ty} */ value, /* {int} */ lineno, /* {int} */
	                    col_offset)
	{
	    this.value = value;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Compare(/* {expr_ty} */ left, /* {asdl_int_seq *} */ ops, /* {asdl_seq
	                      *} */ comparators, /* {int} */ lineno, /* {int} */
	                      col_offset)
	{
	    goog.asserts.assert(left !== null && left !== undefined);
	    this.left = left;
	    this.ops = ops;
	    this.comparators = comparators;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Call(/* {expr_ty} */ func, /* {asdl_seq *} */ args, /* {asdl_seq *} */
	                   keywords, /* {expr_ty} */ starargs, /* {expr_ty} */ kwargs,
	                   /* {int} */ lineno, /* {int} */ col_offset)
	{
	    goog.asserts.assert(func !== null && func !== undefined);
	    this.func = func;
	    this.args = args;
	    this.keywords = keywords;
	    this.starargs = starargs;
	    this.kwargs = kwargs;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Repr(/* {expr_ty} */ value, /* {int} */ lineno, /* {int} */ col_offset)
	{
	    goog.asserts.assert(value !== null && value !== undefined);
	    this.value = value;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Num(/* {object} */ n, /* {int} */ lineno, /* {int} */ col_offset)
	{
	    goog.asserts.assert(n !== null && n !== undefined);
	    this.n = n;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Str(/* {string} */ s, /* {int} */ lineno, /* {int} */ col_offset)
	{
	    goog.asserts.assert(s !== null && s !== undefined);
	    this.s = s;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Attribute(/* {expr_ty} */ value, /* {identifier} */ attr, /*
	                        {expr_context_ty} */ ctx, /* {int} */ lineno, /* {int}
	                        */ col_offset)
	{
	    goog.asserts.assert(value !== null && value !== undefined);
	    goog.asserts.assert(attr !== null && attr !== undefined);
	    goog.asserts.assert(ctx !== null && ctx !== undefined);
	    this.value = value;
	    this.attr = attr;
	    this.ctx = ctx;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Subscript(/* {expr_ty} */ value, /* {slice_ty} */ slice, /*
	                        {expr_context_ty} */ ctx, /* {int} */ lineno, /* {int}
	                        */ col_offset)
	{
	    goog.asserts.assert(value !== null && value !== undefined);
	    goog.asserts.assert(slice !== null && slice !== undefined);
	    goog.asserts.assert(ctx !== null && ctx !== undefined);
	    this.value = value;
	    this.slice = slice;
	    this.ctx = ctx;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Name(/* {identifier} */ id, /* {expr_context_ty} */ ctx, /* {int} */
	                   lineno, /* {int} */ col_offset)
	{
	    goog.asserts.assert(id !== null && id !== undefined);
	    goog.asserts.assert(ctx !== null && ctx !== undefined);
	    this.id = id;
	    this.ctx = ctx;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function List(/* {asdl_seq *} */ elts, /* {expr_context_ty} */ ctx, /* {int} */
	                   lineno, /* {int} */ col_offset)
	{
	    goog.asserts.assert(ctx !== null && ctx !== undefined);
	    this.elts = elts;
	    this.ctx = ctx;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Tuple(/* {asdl_seq *} */ elts, /* {expr_context_ty} */ ctx, /* {int}
	                    */ lineno, /* {int} */ col_offset)
	{
	    goog.asserts.assert(ctx !== null && ctx !== undefined);
	    this.elts = elts;
	    this.ctx = ctx;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Ellipsis()
	{
	    return this;
	}

	/** @constructor */
	function Slice(/* {expr_ty} */ lower, /* {expr_ty} */ upper, /* {expr_ty} */
	                    step)
	{
	    this.lower = lower;
	    this.upper = upper;
	    this.step = step;
	    return this;
	}

	/** @constructor */
	function ExtSlice(/* {asdl_seq *} */ dims)
	{
	    this.dims = dims;
	    return this;
	}

	/** @constructor */
	function Index(/* {expr_ty} */ value)
	{
	    goog.asserts.assert(value !== null && value !== undefined);
	    this.value = value;
	    return this;
	}

	/** @constructor */
	function comprehension(/* {expr_ty} */ target, /* {expr_ty} */ iter, /*
	                            {asdl_seq *} */ ifs)
	{
	    goog.asserts.assert(target !== null && target !== undefined);
	    goog.asserts.assert(iter !== null && iter !== undefined);
	    this.target = target;
	    this.iter = iter;
	    this.ifs = ifs;
	    return this;
	}

	/** @constructor */
	function ExceptHandler(/* {expr_ty} */ type, /* {expr_ty} */ name, /* {asdl_seq
	                            *} */ body, /* {int} */ lineno, /* {int} */
	                            col_offset)
	{
	    this.type = type;
	    this.name = name;
	    this.body = body;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function arguments_(/* {asdl_seq *} */ args, /* {identifier} */ vararg, /*
	                         {identifier} */ kwarg, /* {asdl_seq *} */ defaults)
	{
	    this.args = args;
	    this.vararg = vararg;
	    this.kwarg = kwarg;
	    this.defaults = defaults;
	    return this;
	}

	/** @constructor */
	function keyword(/* {identifier} */ arg, /* {expr_ty} */ value)
	{
	    goog.asserts.assert(arg !== null && arg !== undefined);
	    goog.asserts.assert(value !== null && value !== undefined);
	    this.arg = arg;
	    this.value = value;
	    return this;
	}

	/** @constructor */
	function alias(/* {identifier} */ name, /* {identifier} */ asname)
	{
	    goog.asserts.assert(name !== null && name !== undefined);
	    this.name = name;
	    this.asname = asname;
	    return this;
	}


	Module.prototype._astname = "Module";
	Module.prototype._fields = [
	    "body", function(n) { return n.body; }
	];
	Interactive.prototype._astname = "Interactive";
	Interactive.prototype._fields = [
	    "body", function(n) { return n.body; }
	];
	Expression.prototype._astname = "Expression";
	Expression.prototype._fields = [
	    "body", function(n) { return n.body; }
	];
	Suite.prototype._astname = "Suite";
	Suite.prototype._fields = [
	    "body", function(n) { return n.body; }
	];
	FunctionDef.prototype._astname = "FunctionDef";
	FunctionDef.prototype._fields = [
	    "name", function(n) { return n.name; },
	    "args", function(n) { return n.args; },
	    "body", function(n) { return n.body; },
	    "decorator_list", function(n) { return n.decorator_list; }
	];
	ClassDef.prototype._astname = "ClassDef";
	ClassDef.prototype._fields = [
	    "name", function(n) { return n.name; },
	    "bases", function(n) { return n.bases; },
	    "body", function(n) { return n.body; },
	    "decorator_list", function(n) { return n.decorator_list; }
	];
	Return_.prototype._astname = "Return";
	Return_.prototype._fields = [
	    "value", function(n) { return n.value; }
	];
	Delete_.prototype._astname = "Delete";
	Delete_.prototype._fields = [
	    "targets", function(n) { return n.targets; }
	];
	Assign.prototype._astname = "Assign";
	Assign.prototype._fields = [
	    "targets", function(n) { return n.targets; },
	    "value", function(n) { return n.value; }
	];
	AugAssign.prototype._astname = "AugAssign";
	AugAssign.prototype._fields = [
	    "target", function(n) { return n.target; },
	    "op", function(n) { return n.op; },
	    "value", function(n) { return n.value; }
	];
	Print.prototype._astname = "Print";
	Print.prototype._fields = [
	    "dest", function(n) { return n.dest; },
	    "values", function(n) { return n.values; },
	    "nl", function(n) { return n.nl; }
	];
	For_.prototype._astname = "For";
	For_.prototype._fields = [
	    "target", function(n) { return n.target; },
	    "iter", function(n) { return n.iter; },
	    "body", function(n) { return n.body; },
	    "orelse", function(n) { return n.orelse; }
	];
	While_.prototype._astname = "While";
	While_.prototype._fields = [
	    "test", function(n) { return n.test; },
	    "body", function(n) { return n.body; },
	    "orelse", function(n) { return n.orelse; }
	];
	If_.prototype._astname = "If";
	If_.prototype._fields = [
	    "test", function(n) { return n.test; },
	    "body", function(n) { return n.body; },
	    "orelse", function(n) { return n.orelse; }
	];
	With_.prototype._astname = "With";
	With_.prototype._fields = [
	    "context_expr", function(n) { return n.context_expr; },
	    "optional_vars", function(n) { return n.optional_vars; },
	    "body", function(n) { return n.body; }
	];
	Raise.prototype._astname = "Raise";
	Raise.prototype._fields = [
	    "type", function(n) { return n.type; },
	    "inst", function(n) { return n.inst; },
	    "tback", function(n) { return n.tback; }
	];
	TryExcept.prototype._astname = "TryExcept";
	TryExcept.prototype._fields = [
	    "body", function(n) { return n.body; },
	    "handlers", function(n) { return n.handlers; },
	    "orelse", function(n) { return n.orelse; }
	];
	TryFinally.prototype._astname = "TryFinally";
	TryFinally.prototype._fields = [
	    "body", function(n) { return n.body; },
	    "finalbody", function(n) { return n.finalbody; }
	];
	Assert.prototype._astname = "Assert";
	Assert.prototype._fields = [
	    "test", function(n) { return n.test; },
	    "msg", function(n) { return n.msg; }
	];
	Import_.prototype._astname = "Import";
	Import_.prototype._fields = [
	    "names", function(n) { return n.names; }
	];
	ImportFrom.prototype._astname = "ImportFrom";
	ImportFrom.prototype._fields = [
	    "module", function(n) { return n.module; },
	    "names", function(n) { return n.names; },
	    "level", function(n) { return n.level; }
	];
	Exec.prototype._astname = "Exec";
	Exec.prototype._fields = [
	    "body", function(n) { return n.body; },
	    "globals", function(n) { return n.globals; },
	    "locals", function(n) { return n.locals; }
	];
	Global.prototype._astname = "Global";
	Global.prototype._fields = [
	    "names", function(n) { return n.names; }
	];
	Expr.prototype._astname = "Expr";
	Expr.prototype._fields = [
	    "value", function(n) { return n.value; }
	];
	Pass.prototype._astname = "Pass";
	Pass.prototype._fields = [
	];
	Break_.prototype._astname = "Break";
	Break_.prototype._fields = [
	];
	Continue_.prototype._astname = "Continue";
	Continue_.prototype._fields = [
	];
	Debugger_.prototype._astname = "Debugger";
	Debugger_.prototype._fields = [
	];
	BoolOp.prototype._astname = "BoolOp";
	BoolOp.prototype._fields = [
	    "op", function(n) { return n.op; },
	    "values", function(n) { return n.values; }
	];
	BinOp.prototype._astname = "BinOp";
	BinOp.prototype._fields = [
	    "left", function(n) { return n.left; },
	    "op", function(n) { return n.op; },
	    "right", function(n) { return n.right; }
	];
	UnaryOp.prototype._astname = "UnaryOp";
	UnaryOp.prototype._fields = [
	    "op", function(n) { return n.op; },
	    "operand", function(n) { return n.operand; }
	];
	Lambda.prototype._astname = "Lambda";
	Lambda.prototype._fields = [
	    "args", function(n) { return n.args; },
	    "body", function(n) { return n.body; }
	];
	IfExp.prototype._astname = "IfExp";
	IfExp.prototype._fields = [
	    "test", function(n) { return n.test; },
	    "body", function(n) { return n.body; },
	    "orelse", function(n) { return n.orelse; }
	];
	Dict.prototype._astname = "Dict";
	Dict.prototype._fields = [
	    "keys", function(n) { return n.keys; },
	    "values", function(n) { return n.values; }
	];
	Set.prototype._astname = "Set";
	Set.prototype._fields = [
	    "elts", function(n) { return n.elts; }
	];
	ListComp.prototype._astname = "ListComp";
	ListComp.prototype._fields = [
	    "elt", function(n) { return n.elt; },
	    "generators", function(n) { return n.generators; }
	];
	SetComp.prototype._astname = "SetComp";
	SetComp.prototype._fields = [
	    "elt", function(n) { return n.elt; },
	    "generators", function(n) { return n.generators; }
	];
	DictComp.prototype._astname = "DictComp";
	DictComp.prototype._fields = [
	    "key", function(n) { return n.key; },
	    "value", function(n) { return n.value; },
	    "generators", function(n) { return n.generators; }
	];
	GeneratorExp.prototype._astname = "GeneratorExp";
	GeneratorExp.prototype._fields = [
	    "elt", function(n) { return n.elt; },
	    "generators", function(n) { return n.generators; }
	];
	Yield.prototype._astname = "Yield";
	Yield.prototype._fields = [
	    "value", function(n) { return n.value; }
	];
	Compare.prototype._astname = "Compare";
	Compare.prototype._fields = [
	    "left", function(n) { return n.left; },
	    "ops", function(n) { return n.ops; },
	    "comparators", function(n) { return n.comparators; }
	];
	Call.prototype._astname = "Call";
	Call.prototype._fields = [
	    "func", function(n) { return n.func; },
	    "args", function(n) { return n.args; },
	    "keywords", function(n) { return n.keywords; },
	    "starargs", function(n) { return n.starargs; },
	    "kwargs", function(n) { return n.kwargs; }
	];
	Repr.prototype._astname = "Repr";
	Repr.prototype._fields = [
	    "value", function(n) { return n.value; }
	];
	Num.prototype._astname = "Num";
	Num.prototype._fields = [
	    "n", function(n) { return n.n; }
	];
	Str.prototype._astname = "Str";
	Str.prototype._fields = [
	    "s", function(n) { return n.s; }
	];
	Attribute.prototype._astname = "Attribute";
	Attribute.prototype._fields = [
	    "value", function(n) { return n.value; },
	    "attr", function(n) { return n.attr; },
	    "ctx", function(n) { return n.ctx; }
	];
	Subscript.prototype._astname = "Subscript";
	Subscript.prototype._fields = [
	    "value", function(n) { return n.value; },
	    "slice", function(n) { return n.slice; },
	    "ctx", function(n) { return n.ctx; }
	];
	Name.prototype._astname = "Name";
	Name.prototype._fields = [
	    "id", function(n) { return n.id; },
	    "ctx", function(n) { return n.ctx; }
	];
	List.prototype._astname = "List";
	List.prototype._fields = [
	    "elts", function(n) { return n.elts; },
	    "ctx", function(n) { return n.ctx; }
	];
	Tuple.prototype._astname = "Tuple";
	Tuple.prototype._fields = [
	    "elts", function(n) { return n.elts; },
	    "ctx", function(n) { return n.ctx; }
	];
	Load.prototype._astname = "Load";
	Load.prototype._isenum = true;
	Store.prototype._astname = "Store";
	Store.prototype._isenum = true;
	Del.prototype._astname = "Del";
	Del.prototype._isenum = true;
	AugLoad.prototype._astname = "AugLoad";
	AugLoad.prototype._isenum = true;
	AugStore.prototype._astname = "AugStore";
	AugStore.prototype._isenum = true;
	Param.prototype._astname = "Param";
	Param.prototype._isenum = true;
	Ellipsis.prototype._astname = "Ellipsis";
	Ellipsis.prototype._fields = [
	];
	Slice.prototype._astname = "Slice";
	Slice.prototype._fields = [
	    "lower", function(n) { return n.lower; },
	    "upper", function(n) { return n.upper; },
	    "step", function(n) { return n.step; }
	];
	ExtSlice.prototype._astname = "ExtSlice";
	ExtSlice.prototype._fields = [
	    "dims", function(n) { return n.dims; }
	];
	Index.prototype._astname = "Index";
	Index.prototype._fields = [
	    "value", function(n) { return n.value; }
	];
	And.prototype._astname = "And";
	And.prototype._isenum = true;
	Or.prototype._astname = "Or";
	Or.prototype._isenum = true;
	Add.prototype._astname = "Add";
	Add.prototype._isenum = true;
	Sub.prototype._astname = "Sub";
	Sub.prototype._isenum = true;
	Mult.prototype._astname = "Mult";
	Mult.prototype._isenum = true;
	Div.prototype._astname = "Div";
	Div.prototype._isenum = true;
	Mod.prototype._astname = "Mod";
	Mod.prototype._isenum = true;
	Pow.prototype._astname = "Pow";
	Pow.prototype._isenum = true;
	LShift.prototype._astname = "LShift";
	LShift.prototype._isenum = true;
	RShift.prototype._astname = "RShift";
	RShift.prototype._isenum = true;
	BitOr.prototype._astname = "BitOr";
	BitOr.prototype._isenum = true;
	BitXor.prototype._astname = "BitXor";
	BitXor.prototype._isenum = true;
	BitAnd.prototype._astname = "BitAnd";
	BitAnd.prototype._isenum = true;
	FloorDiv.prototype._astname = "FloorDiv";
	FloorDiv.prototype._isenum = true;
	Invert.prototype._astname = "Invert";
	Invert.prototype._isenum = true;
	Not.prototype._astname = "Not";
	Not.prototype._isenum = true;
	UAdd.prototype._astname = "UAdd";
	UAdd.prototype._isenum = true;
	USub.prototype._astname = "USub";
	USub.prototype._isenum = true;
	Eq.prototype._astname = "Eq";
	Eq.prototype._isenum = true;
	NotEq.prototype._astname = "NotEq";
	NotEq.prototype._isenum = true;
	Lt.prototype._astname = "Lt";
	Lt.prototype._isenum = true;
	LtE.prototype._astname = "LtE";
	LtE.prototype._isenum = true;
	Gt.prototype._astname = "Gt";
	Gt.prototype._isenum = true;
	GtE.prototype._astname = "GtE";
	GtE.prototype._isenum = true;
	Is.prototype._astname = "Is";
	Is.prototype._isenum = true;
	IsNot.prototype._astname = "IsNot";
	IsNot.prototype._isenum = true;
	In_.prototype._astname = "In";
	In_.prototype._isenum = true;
	NotIn.prototype._astname = "NotIn";
	NotIn.prototype._isenum = true;
	comprehension.prototype._astname = "comprehension";
	comprehension.prototype._fields = [
	    "target", function(n) { return n.target; },
	    "iter", function(n) { return n.iter; },
	    "ifs", function(n) { return n.ifs; }
	];
	ExceptHandler.prototype._astname = "ExceptHandler";
	ExceptHandler.prototype._fields = [
	    "type", function(n) { return n.type; },
	    "name", function(n) { return n.name; },
	    "body", function(n) { return n.body; }
	];
	arguments_.prototype._astname = "arguments";
	arguments_.prototype._fields = [
	    "args", function(n) { return n.args; },
	    "vararg", function(n) { return n.vararg; },
	    "kwarg", function(n) { return n.kwarg; },
	    "defaults", function(n) { return n.defaults; }
	];
	keyword.prototype._astname = "keyword";
	keyword.prototype._fields = [
	    "arg", function(n) { return n.arg; },
	    "value", function(n) { return n.value; }
	];
	alias.prototype._astname = "alias";
	alias.prototype._fields = [
	    "name", function(n) { return n.name; },
	    "asname", function(n) { return n.asname; }
	];




	/* ---- /Users/rob/skulpty/lib/../node_modules/skulpt/src/ast.js ---- */ 

	//
	// This is pretty much a straight port of ast.c from CPython 2.6.5.
	//
	// The previous version was easier to work with and more JS-ish, but having a
	// somewhat different ast structure than cpython makes testing more difficult.
	//
	// This way, we can use a dump from the ast module on any arbitrary python
	// code and know that we're the same up to ast level, at least.
	//

	var SYM = Sk.ParseTables.sym;
	var TOK = Sk.Tokenizer.Tokens;
	var COMP_GENEXP = 0;
	var COMP_SETCOMP = 1;

	/** @constructor */
	function Compiling (encoding, filename, c_flags) {
	    this.c_encoding = encoding;
	    this.c_filename = filename;
	    this.c_flags = c_flags || 0;
	}

	/**
	 * @return {number}
	 */
	function NCH (n) {
	    goog.asserts.assert(n !== undefined);
	    if (n.children === null) {
	        return 0;
	    }
	    return n.children.length;
	}

	function CHILD (n, i) {
	    goog.asserts.assert(n !== undefined);
	    goog.asserts.assert(i !== undefined);
	    return n.children[i];
	}

	function REQ (n, type) {
	    goog.asserts.assert(n.type === type, "node wasn't expected type");
	}

	function strobj (s) {
	    goog.asserts.assert(typeof s === "string", "expecting string, got " + (typeof s));
	    return new Sk.builtin.str(s);
	}

	/** @return {number} */
	function numStmts (n) {
	    var ch;
	    var i;
	    var cnt;
	    switch (n.type) {
	        case SYM.single_input:
	            if (CHILD(n, 0).type === TOK.T_NEWLINE) {
	                return 0;
	            }
	            else {
	                return numStmts(CHILD(n, 0));
	            }
	        case SYM.file_input:
	            cnt = 0;
	            for (i = 0; i < NCH(n); ++i) {
	                ch = CHILD(n, i);
	                if (ch.type === SYM.stmt) {
	                    cnt += numStmts(ch);
	                }
	            }
	            return cnt;
	        case SYM.stmt:
	            return numStmts(CHILD(n, 0));
	        case SYM.compound_stmt:
	            return 1;
	        case SYM.simple_stmt:
	            return Math.floor(NCH(n) / 2); // div 2 is to remove count of ;s
	        case SYM.suite:
	            if (NCH(n) === 1) {
	                return numStmts(CHILD(n, 0));
	            }
	            else {
	                cnt = 0;
	                for (i = 2; i < NCH(n) - 1; ++i) {
	                    cnt += numStmts(CHILD(n, i));
	                }
	                return cnt;
	            }
	            break;
	        default:
	            goog.asserts.fail("Non-statement found");
	    }
	    return 0;
	}

	function forbiddenCheck (c, n, x, lineno) {
	    if (x === "None") {
	        throw new Sk.builtin.SyntaxError("assignment to None", c.c_filename, lineno, [], {node: n});
	    }
	    if (x === "True" || x === "False") {
	        throw new Sk.builtin.SyntaxError("assignment to True or False is forbidden", c.c_filename, lineno, [], {node: n});
	    }
	}

	/**
	 * Set the context ctx for e, recursively traversing e.
	 *
	 * Only sets context for expr kinds that can appear in assignment context as
	 * per the asdl file.
	 */
	function setContext (c, e, ctx, n) {
	    var i;
	    var exprName;
	    var s;
	    goog.asserts.assert(ctx !== AugStore && ctx !== AugLoad);
	    s = null;
	    exprName = null;

	    switch (e.constructor) {
	        case Attribute:
	        case Name:
	            if (ctx === Store) {
	                forbiddenCheck(c, n, e.attr, n.lineno);
	            }
	            e.ctx = ctx;
	            break;
	        case Subscript:
	            e.ctx = ctx;
	            break;
	        case List:
	            e.ctx = ctx;
	            s = e.elts;
	            break;
	        case Tuple:
	            if (e.elts.length === 0) {
	                throw new Sk.builtin.SyntaxError("can't assign to ()", c.c_filename, n.lineno, ctx, {node: n});
	            }
	            e.ctx = ctx;
	            s = e.elts;
	            break;
	        case Lambda:
	            exprName = "lambda";
	            break;
	        case Call:
	            exprName = "function call";
	            break;
	        case BoolOp:
	        case BinOp:
	        case UnaryOp:
	            exprName = "operator";
	            break;
	        case GeneratorExp:
	            exprName = "generator expression";
	            break;
	        case Yield:
	            exprName = "yield expression";
	            break;
	        case ListComp:
	            exprName = "list comprehension";
	            break;
	        case SetComp:
	            exprName = "set comprehension";
	            break;
	        case DictComp:
	            exprName = "dict comprehension";
	            break;
	        case Dict:
	        case Set:
	        case Num:
	        case Str:
	            exprName = "literal";
	            break;
	        case Compare:
	            exprName = "comparison";
	            break;
	        case Repr:
	            exprName = "repr";
	            break;
	        case IfExp:
	            exprName = "conditional expression";
	            break;
	        default:
	            goog.asserts.fail("unhandled expression in assignment");
	    }
	    if (exprName) {
	        throw new Sk.builtin.SyntaxError("can't " + (ctx === Store ? "assign to" : "delete") + " " + exprName, c.c_filename, n.lineno, [], {node: n});
	    }

	    if (s) {
	        for (i = 0; i < s.length; ++i) {
	            setContext(c, s[i], ctx, n);
	        }
	    }
	}

	var operatorMap = {};
	(function () {
	    operatorMap[TOK.T_VBAR] = BitOr;
	    operatorMap[TOK.T_CIRCUMFLEX] = BitXor;
	    operatorMap[TOK.T_AMPER] = BitAnd;
	    operatorMap[TOK.T_LEFTSHIFT] = LShift;
	    operatorMap[TOK.T_RIGHTSHIFT] = RShift;
	    operatorMap[TOK.T_PLUS] = Add;
	    operatorMap[TOK.T_MINUS] = Sub;
	    operatorMap[TOK.T_STAR] = Mult;
	    operatorMap[TOK.T_SLASH] = Div;
	    operatorMap[TOK.T_DOUBLESLASH] = FloorDiv;
	    operatorMap[TOK.T_PERCENT] = Mod;
	}());

	function getOperator (n) {
	    goog.asserts.assert(operatorMap[n.type] !== undefined);
	    return operatorMap[n.type];
	}

	function astForCompOp (c, n) {
	    /* comp_op: '<'|'>'|'=='|'>='|'<='|'<>'|'!='|'in'|'not' 'in'|'is'
	     |'is' 'not'
	     */
	    REQ(n, SYM.comp_op);
	    if (NCH(n) === 1) {
	        n = CHILD(n, 0);
	        switch (n.type) {
	            case TOK.T_LESS:
	                return Lt;
	            case TOK.T_GREATER:
	                return Gt;
	            case TOK.T_EQEQUAL:
	                return Eq;
	            case TOK.T_LESSEQUAL:
	                return LtE;
	            case TOK.T_GREATEREQUAL:
	                return GtE;
	            case TOK.T_NOTEQUAL:
	                return NotEq;
	            case TOK.T_NAME:
	                if (n.value === "in") {
	                    return In_;
	                }
	                if (n.value === "is") {
	                    return Is;
	                }
	        }
	    }
	    else if (NCH(n) === 2) {
	        if (CHILD(n, 0).type === TOK.T_NAME) {
	            if (CHILD(n, 1).value === "in") {
	                return NotIn;
	            }
	            if (CHILD(n, 0).value === "is") {
	                return IsNot;
	            }
	        }
	    }
	    goog.asserts.fail("invalid comp_op");
	}

	function seqForTestlist (c, n) {
	    /* testlist: test (',' test)* [','] */
	    var i;
	    var seq = [];
	    goog.asserts.assert(n.type === SYM.testlist ||
	        n.type === SYM.listmaker ||
	        n.type === SYM.testlist_comp ||
	        n.type === SYM.testlist_safe ||
	        n.type === SYM.testlist1);
	    for (i = 0; i < NCH(n); i += 2) {
	        goog.asserts.assert(CHILD(n, i).type === SYM.test || CHILD(n, i).type === SYM.old_test);
	        seq[i / 2] = astForExpr(c, CHILD(n, i));
	    }
	    return seq;
	}

	function astForSuite (c, n) {
	    /* suite: simple_stmt | NEWLINE INDENT stmt+ DEDENT */
	    var j;
	    var num;
	    var i;
	    var end;
	    var ch;
	    var pos;
	    var seq;
	    REQ(n, SYM.suite);
	    seq = [];
	    pos = 0;
	    if (CHILD(n, 0).type === SYM.simple_stmt) {
	        n = CHILD(n, 0);
	        /* simple_stmt always ends with an NEWLINE and may have a trailing
	         * SEMI. */
	        end = NCH(n) - 1;
	        if (CHILD(n, end - 1).type === TOK.T_SEMI) {
	            end -= 1;
	        }
	        for (i = 0; i < end; i += 2) // by 2 to skip ;
	        {
	            seq[pos++] = astForStmt(c, CHILD(n, i));
	        }
	    }
	    else {
	        for (i = 2; i < NCH(n) - 1; ++i) {
	            ch = CHILD(n, i);
	            REQ(ch, SYM.stmt);
	            num = numStmts(ch);
	            if (num === 1) {
	                // small_stmt or compound_stmt w/ only 1 child
	                seq[pos++] = astForStmt(c, ch);
	            }
	            else {
	                ch = CHILD(ch, 0);
	                REQ(ch, SYM.simple_stmt);
	                for (j = 0; j < NCH(ch); j += 2) {
	                    if (NCH(CHILD(ch, j)) === 0) {
	                        goog.asserts.assert(j + 1 === NCH(ch));
	                        break;
	                    }
	                    seq[pos++] = astForStmt(c, CHILD(ch, j));
	                }
	            }
	        }
	    }
	    goog.asserts.assert(pos === numStmts(n));
	    return seq;
	}

	function astForExceptClause (c, exc, body) {
	    /* except_clause: 'except' [test [(',' | 'as') test]] */
	    var e;
	    REQ(exc, SYM.except_clause);
	    REQ(body, SYM.suite);
	    if (NCH(exc) === 1) {
	        return new ExceptHandler(null, null, astForSuite(c, body), exc.lineno, exc.col_offset);
	    }
	    else if (NCH(exc) === 2) {
	        return new ExceptHandler(astForExpr(c, CHILD(exc, 1)), null, astForSuite(c, body), exc.lineno, exc.col_offset);
	    }
	    else if (NCH(exc) === 4) {
	        e = astForExpr(c, CHILD(exc, 3));
	        setContext(c, e, Store, CHILD(exc, 3));
	        return new ExceptHandler(astForExpr(c, CHILD(exc, 1)), e, astForSuite(c, body), exc.lineno, exc.col_offset);
	    }
	    goog.asserts.fail("wrong number of children for except clause");
	}

	function astForTryStmt (c, n) {
	    var exceptSt;
	    var i;
	    var handlers;
	    var nc = NCH(n);
	    var nexcept = (nc - 3) / 3;
	    var body, orelse = [],
	        finally_ = null;

	    REQ(n, SYM.try_stmt);
	    body = astForSuite(c, CHILD(n, 2));
	    if (CHILD(n, nc - 3).type === TOK.T_NAME) {
	        if (CHILD(n, nc - 3).value === "finally") {
	            if (nc >= 9 && CHILD(n, nc - 6).type === TOK.T_NAME) {
	                /* we can assume it's an "else",
	                 because nc >= 9 for try-else-finally and
	                 it would otherwise have a type of except_clause */
	                orelse = astForSuite(c, CHILD(n, nc - 4));
	                nexcept--;
	            }

	            finally_ = astForSuite(c, CHILD(n, nc - 1));
	            nexcept--;
	        }
	        else {
	            /* we can assume it's an "else",
	             otherwise it would have a type of except_clause */
	            orelse = astForSuite(c, CHILD(n, nc - 1));
	            nexcept--;
	        }
	    }
	    else if (CHILD(n, nc - 3).type !== SYM.except_clause) {
	        throw new Sk.builtin.SyntaxError("malformed 'try' statement", c.c_filename, n.lineno);
	    }

	    if (nexcept > 0) {
	        handlers = [];
	        for (i = 0; i < nexcept; ++i) {
	            handlers[i] = astForExceptClause(c, CHILD(n, 3 + i * 3), CHILD(n, 5 + i * 3));
	        }
	        exceptSt = new TryExcept(body, handlers, orelse, n.lineno, n.col_offset);

	        if (!finally_) {
	            return exceptSt;
	        }

	        /* if a 'finally' is present too, we nest the TryExcept within a
	         TryFinally to emulate try ... except ... finally */
	        body = [exceptSt];
	    }

	    goog.asserts.assert(finally_ !== null);
	    return new TryFinally(body, finally_, n.lineno, n.col_offset);
	}


	function astForDottedName (c, n) {
	    var i;
	    var e;
	    var id;
	    var col_offset;
	    var lineno;
	    REQ(n, SYM.dotted_name);
	    lineno = n.lineno;
	    col_offset = n.col_offset;
	    id = strobj(CHILD(n, 0).value);
	    e = new Name(id, Load, lineno, col_offset);
	    for (i = 2; i < NCH(n); i += 2) {
	        id = strobj(CHILD(n, i).value);
	        e = new Attribute(e, id, Load, lineno, col_offset);
	    }
	    return e;
	}

	function astForDecorator (c, n) {
	    /* decorator: '@' dotted_name [ '(' [arglist] ')' ] NEWLINE */
	    var nameExpr;
	    REQ(n, SYM.decorator);
	    REQ(CHILD(n, 0), TOK.T_AT);
	    REQ(CHILD(n, NCH(n) - 1), TOK.T_NEWLINE);
	    nameExpr = astForDottedName(c, CHILD(n, 1));
	    if (NCH(n) === 3) // no args
	    {
	        return nameExpr;
	    }
	    else if (NCH(n) === 5) // call with no args
	    {
	        return new Call(nameExpr, [], [], null, null, n.lineno, n.col_offset);
	    }
	    else {
	        return astForCall(c, CHILD(n, 3), nameExpr);
	    }
	}

	function astForDecorators (c, n) {
	    var i;
	    var decoratorSeq;
	    REQ(n, SYM.decorators);
	    decoratorSeq = [];
	    for (i = 0; i < NCH(n); ++i) {
	        decoratorSeq[i] = astForDecorator(c, CHILD(n, i));
	    }
	    return decoratorSeq;
	}

	function astForDecorated (c, n) {
	    var thing;
	    var decoratorSeq;
	    REQ(n, SYM.decorated);
	    decoratorSeq = astForDecorators(c, CHILD(n, 0));
	    goog.asserts.assert(CHILD(n, 1).type === SYM.funcdef || CHILD(n, 1).type === SYM.classdef);

	    thing = null;
	    if (CHILD(n, 1).type === SYM.funcdef) {
	        thing = astForFuncdef(c, CHILD(n, 1), decoratorSeq);
	    }
	    else if (CHILD(n, 1) === SYM.classdef) {
	        thing = astForClassdef(c, CHILD(n, 1), decoratorSeq);
	    }
	    if (thing) {
	        thing.lineno = n.lineno;
	        thing.col_offset = n.col_offset;
	    }
	    return thing;
	}

	//note: with statements need to be updated to 2.7
	//see: ast.c lines: 3127 -> 3185

	function astForWithVar (c, n) {
	    REQ(n, SYM.with_item);
	    return astForExpr(c, CHILD(n, 1));
	}

	function astForWithStmt (c, n) {
	    /* with_stmt: 'with' test [ with_var ] ':' suite */
	    var optionalVars;
	    var contextExpr;
	    var suiteIndex = 3; // skip with, test, :
	    goog.asserts.assert(n.type === SYM.with_stmt);
	    contextExpr = astForExpr(c, CHILD(n, 1));
	    if (CHILD(n, 2).type === SYM.with_item) {
	        optionalVars = astForWithVar(c, CHILD(n, 2));
	        setContext(c, optionalVars, Store, n);
	        suiteIndex = 4;
	    }
	    return new With_(contextExpr, optionalVars, astForSuite(c, CHILD(n, suiteIndex)), n.lineno, n.col_offset);
	}

	function astForExecStmt (c, n) {
	    var expr1, globals = null, locals = null;
	    var nchildren = NCH(n);
	    goog.asserts.assert(nchildren === 2 || nchildren === 4 || nchildren === 6);

	    /* exec_stmt: 'exec' expr ['in' test [',' test]] */
	    REQ(n, SYM.exec_stmt);
	    expr1 = astForExpr(c, CHILD(n, 1));
	    if (nchildren >= 4) {
	        globals = astForExpr(c, CHILD(n, 3));
	    }
	    if (nchildren === 6) {
	        locals = astForExpr(c, CHILD(n, 5));
	    }
	    return new Exec(expr1, globals, locals, n.lineno, n.col_offset);
	}

	function astForIfStmt (c, n) {
	    /* if_stmt: 'if' test ':' suite ('elif' test ':' suite)*
	     ['else' ':' suite]
	     */
	    var off;
	    var i;
	    var orelse;
	    var hasElse;
	    var nElif;
	    var decider;
	    var s;
	    REQ(n, SYM.if_stmt);
	    if (NCH(n) === 4) {
	        return new If_(
	            astForExpr(c, CHILD(n, 1)),
	            astForSuite(c, CHILD(n, 3)),
	            [], n.lineno, n.col_offset);
	    }

	    s = CHILD(n, 4).value;
	    decider = s.charAt(2); // elSe or elIf
	    if (decider === "s") {
	        return new If_(
	            astForExpr(c, CHILD(n, 1)),
	            astForSuite(c, CHILD(n, 3)),
	            astForSuite(c, CHILD(n, 6)),
	            n.lineno, n.col_offset);
	    }
	    else if (decider === "i") {
	        nElif = NCH(n) - 4;
	        hasElse = false;
	        orelse = [];

	        /* must reference the child nElif+1 since 'else' token is third, not
	         * fourth child from the end. */
	        if (CHILD(n, nElif + 1).type === TOK.T_NAME &&
	            CHILD(n, nElif + 1).value.charAt(2) === "s") {
	            hasElse = true;
	            nElif -= 3;
	        }
	        nElif /= 4;

	        if (hasElse) {
	            orelse = [
	                new If_(
	                    astForExpr(c, CHILD(n, NCH(n) - 6)),
	                    astForSuite(c, CHILD(n, NCH(n) - 4)),
	                    astForSuite(c, CHILD(n, NCH(n) - 1)),
	                    CHILD(n, NCH(n) - 6).lineno,
	                    CHILD(n, NCH(n) - 6).col_offset)];
	            nElif--;
	        }

	        for (i = 0; i < nElif; ++i) {
	            off = 5 + (nElif - i - 1) * 4;
	            orelse = [
	                new If_(
	                    astForExpr(c, CHILD(n, off)),
	                    astForSuite(c, CHILD(n, off + 2)),
	                    orelse,
	                    CHILD(n, off).lineno,
	                    CHILD(n, off).col_offset)];
	        }
	        return new If_(
	            astForExpr(c, CHILD(n, 1)),
	            astForSuite(c, CHILD(n, 3)),
	            orelse, n.lineno, n.col_offset);
	    }

	    goog.asserts.fail("unexpected token in 'if' statement");
	}

	function astForExprlist (c, n, context) {
	    var e;
	    var i;
	    var seq;
	    REQ(n, SYM.exprlist);
	    seq = [];
	    for (i = 0; i < NCH(n); i += 2) {
	        e = astForExpr(c, CHILD(n, i));
	        seq[i / 2] = e;
	        if (context) {
	            setContext(c, e, context, CHILD(n, i));
	        }
	    }
	    return seq;
	}

	function astForDelStmt (c, n) {
	    /* del_stmt: 'del' exprlist */
	    REQ(n, SYM.del_stmt);
	    return new Delete_(astForExprlist(c, CHILD(n, 1), Del), n.lineno, n.col_offset);
	}

	function astForGlobalStmt (c, n) {
	    /* global_stmt: 'global' NAME (',' NAME)* */
	    var i;
	    var s = [];
	    REQ(n, SYM.global_stmt);
	    for (i = 1; i < NCH(n); i += 2) {
	        s[(i - 1) / 2] = strobj(CHILD(n, i).value);
	    }
	    return new Global(s, n.lineno, n.col_offset);
	}

	function astForAssertStmt (c, n) {
	    /* assert_stmt: 'assert' test [',' test] */
	    REQ(n, SYM.assert_stmt);
	    if (NCH(n) === 2) {
	        return new Assert(astForExpr(c, CHILD(n, 1)), null, n.lineno, n.col_offset);
	    }
	    else if (NCH(n) === 4) {
	        return new Assert(astForExpr(c, CHILD(n, 1)), astForExpr(c, CHILD(n, 3)), n.lineno, n.col_offset);
	    }
	    goog.asserts.fail("improper number of parts to assert stmt");
	}

	function aliasForImportName (c, n) {
	    /*
	     import_as_name: NAME ['as' NAME]
	     dotted_as_name: dotted_name ['as' NAME]
	     dotted_name: NAME ('.' NAME)*
	     */

	    var i;
	    var a;
	    var name;
	    var str;
	    loop: while (true) {
	        switch (n.type) {
	            case SYM.import_as_name:
	                str = null;
	                name = strobj(CHILD(n, 0).value);
	                if (NCH(n) === 3) {
	                    str = CHILD(n, 2).value;
	                }
	                return new alias(name, str == null ? null : strobj(str));
	            case SYM.dotted_as_name:
	                if (NCH(n) === 1) {
	                    n = CHILD(n, 0);
	                    continue loop;
	                }
	                else {
	                    a = aliasForImportName(c, CHILD(n, 0));
	                    goog.asserts.assert(!a.asname);
	                    a.asname = strobj(CHILD(n, 2).value);
	                    return a;
	                }
	                break;
	            case SYM.dotted_name:
	                if (NCH(n) === 1) {
	                    return new alias(strobj(CHILD(n, 0).value), null);
	                }
	                else {
	                    // create a string of the form a.b.c
	                    str = "";
	                    for (i = 0; i < NCH(n); i += 2) {
	                        str += CHILD(n, i).value + ".";
	                    }
	                    return new alias(strobj(str.substr(0, str.length - 1)), null);
	                }
	                break;
	            case TOK.T_STAR:
	                return new alias(strobj("*"), null);
	            default:
	                throw new Sk.builtin.SyntaxError("unexpected import name", c.c_filename, n.lineno);
	        }
	        break;
	    }
	}

	function astForImportStmt (c, n) {
	    /*
	     import_stmt: import_name | import_from
	     import_name: 'import' dotted_as_names
	     import_from: 'from' ('.'* dotted_name | '.') 'import'
	     ('*' | '(' import_as_names ')' | import_as_names)
	     */
	    var modname;
	    var idx;
	    var nchildren;
	    var ndots;
	    var mod;
	    var i;
	    var aliases;
	    var col_offset;
	    var lineno;
	    REQ(n, SYM.import_stmt);
	    lineno = n.lineno;
	    col_offset = n.col_offset;
	    n = CHILD(n, 0);
	    if (n.type === SYM.import_name) {
	        n = CHILD(n, 1);
	        REQ(n, SYM.dotted_as_names);
	        aliases = [];
	        for (i = 0; i < NCH(n); i += 2) {
	            aliases[i / 2] = aliasForImportName(c, CHILD(n, i));
	        }
	        return new Import_(aliases, lineno, col_offset);
	    }
	    else if (n.type === SYM.import_from) {
	        mod = null;
	        ndots = 0;

	        for (idx = 1; idx < NCH(n); ++idx) {
	            if (CHILD(n, idx).type === SYM.dotted_name) {
	                mod = aliasForImportName(c, CHILD(n, idx));
	                idx++;
	                break;
	            }
	            else if (CHILD(n, idx).type !== TOK.T_DOT) {
	                break;
	            }
	            ndots++;
	        }
	        ++idx; // skip the import keyword
	        switch (CHILD(n, idx).type) {
	            case TOK.T_STAR:
	                // from ... import
	                n = CHILD(n, idx);
	                nchildren = 1;
	                break;
	            case TOK.T_LPAR:
	                // from ... import (x, y, z)
	                n = CHILD(n, idx + 1);
	                nchildren = NCH(n);
	                break;
	            case SYM.import_as_names:
	                // from ... import x, y, z
	                n = CHILD(n, idx);
	                nchildren = NCH(n);
	                if (nchildren % 2 === 0) {
	                    throw new Sk.builtin.SyntaxError("trailing comma not allowed without surrounding parentheses", c.c_filename, n.lineno);
	                }
	                break;
	            default:
	                throw new Sk.builtin.SyntaxError("Unexpected node-type in from-import", c.c_filename, n.lineno);
	        }
	        aliases = [];
	        if (n.type === TOK.T_STAR) {
	            aliases[0] = aliasForImportName(c, n);
	        }
	        else {
	            for (i = 0; i < NCH(n); i += 2) {
	                aliases[i / 2] = aliasForImportName(c, CHILD(n, i));
	            }
	        }
	        modname = mod ? mod.name.v : "";
	        return new ImportFrom(strobj(modname), aliases, ndots, lineno, col_offset);
	    }
	    throw new Sk.builtin.SyntaxError("unknown import statement", c.c_filename, n.lineno);
	}

	function astForTestlistComp(c, n) {
	    /* testlist_comp: test ( comp_for | (',' test)* [','] ) */
	    /* argument: test [comp_for] */
	    goog.asserts.assert(n.type === SYM.testlist_comp || n.type === SYM.argument);
	    if (NCH(n) > 1 && CHILD(n, 1).type === SYM.comp_for) {
	        return astForGenExpr(c, n);
	    }
	    return astForTestlist(c, n);
	}

	function astForListcomp (c, n) {
	    /* listmaker: test ( list_for | (',' test)* [','] )
	     list_for: 'for' exprlist 'in' testlist_safe [list_iter]
	     list_iter: list_for | list_if
	     list_if: 'if' test [list_iter]
	     testlist_safe: test [(',' test)+ [',']]
	     */

	    function countListFors (c, n) {
	        var nfors = 0;
	        var ch = CHILD(n, 1);
	        count_list_for: while (true) {
	            nfors++;
	            REQ(ch, SYM.list_for);
	            if (NCH(ch) === 5) {
	                ch = CHILD(ch, 4);
	            }
	            else {
	                return nfors;
	            }
	            count_list_iter: while (true) {
	                REQ(ch, SYM.list_iter);
	                ch = CHILD(ch, 0);
	                if (ch.type === SYM.list_for) {
	                    continue count_list_for;
	                }
	                else if (ch.type === SYM.list_if) {
	                    if (NCH(ch) === 3) {
	                        ch = CHILD(ch, 2);
	                        continue count_list_iter;
	                    }
	                    else {
	                        return nfors;
	                    }
	                }
	                break;
	            }
	            break;
	        }
	    }

	    function countListIfs (c, n) {
	        var nifs = 0;
	        while (true) {
	            REQ(n, SYM.list_iter);
	            if (CHILD(n, 0).type === SYM.list_for) {
	                return nifs;
	            }
	            n = CHILD(n, 0);
	            REQ(n, SYM.list_if);
	            nifs++;
	            if (NCH(n) == 2) {
	                return nifs;
	            }
	            n = CHILD(n, 2);
	        }
	    }

	    var j;
	    var ifs;
	    var nifs;
	    var lc;
	    var expression;
	    var t;
	    var forch;
	    var i;
	    var ch;
	    var listcomps;
	    var nfors;
	    var elt;
	    REQ(n, SYM.listmaker);
	    goog.asserts.assert(NCH(n) > 1);
	    elt = astForExpr(c, CHILD(n, 0));
	    nfors = countListFors(c, n);
	    listcomps = [];
	    ch = CHILD(n, 1);
	    for (i = 0; i < nfors; ++i) {
	        REQ(ch, SYM.list_for);
	        forch = CHILD(ch, 1);
	        t = astForExprlist(c, forch, Store);
	        expression = astForTestlist(c, CHILD(ch, 3));
	        if (NCH(forch) === 1) {
	            lc = new comprehension(t[0], expression, []);
	        }
	        else {
	            lc = new comprehension(new Tuple(t, Store, ch.lineno, ch.col_offset), expression, []);
	        }

	        if (NCH(ch) === 5) {
	            ch = CHILD(ch, 4);
	            nifs = countListIfs(c, ch);
	            ifs = [];
	            for (j = 0; j < nifs; ++j) {
	                REQ(ch, SYM.list_iter);
	                ch = CHILD(ch, 0);
	                REQ(ch, SYM.list_if);
	                ifs[j] = astForExpr(c, CHILD(ch, 1));
	                if (NCH(ch) === 3) {
	                    ch = CHILD(ch, 2);
	                }
	            }
	            if (ch.type === SYM.list_iter) {
	                ch = CHILD(ch, 0);
	            }
	            lc.ifs = ifs;
	        }
	        listcomps[i] = lc;
	    }
	    return new ListComp(elt, listcomps, n.lineno, n.col_offset);
	}

	function astForFactor (c, n) {
	    /* some random peephole thing that cpy does */
	    var expression;
	    var pnum;
	    var patom;
	    var ppower;
	    var pfactor;
	    if (CHILD(n, 0).type === TOK.T_MINUS && NCH(n) === 2) {
	        pfactor = CHILD(n, 1);
	        if (pfactor.type === SYM.factor && NCH(pfactor) === 1) {
	            ppower = CHILD(pfactor, 0);
	            if (ppower.type === SYM.power && NCH(ppower) === 1) {
	                patom = CHILD(ppower, 0);
	                if (patom.type === SYM.atom) {
	                    pnum = CHILD(patom, 0);
	                    if (pnum.type === TOK.T_NUMBER) {
	                        pnum.value = "-" + pnum.value;
	                        return astForAtom(c, patom);
	                    }
	                }
	            }
	        }
	    }

	    expression = astForExpr(c, CHILD(n, 1));
	    switch (CHILD(n, 0).type) {
	        case TOK.T_PLUS:
	            return new UnaryOp(UAdd, expression, n.lineno, n.col_offset);
	        case TOK.T_MINUS:
	            return new UnaryOp(USub, expression, n.lineno, n.col_offset);
	        case TOK.T_TILDE:
	            return new UnaryOp(Invert, expression, n.lineno, n.col_offset);
	    }

	    goog.asserts.fail("unhandled factor");
	}

	function astForForStmt (c, n) {
	    /* for_stmt: 'for' exprlist 'in' testlist ':' suite ['else' ':' suite] */
	    var target;
	    var _target;
	    var nodeTarget;
	    var seq = [];
	    REQ(n, SYM.for_stmt);
	    if (NCH(n) === 9) {
	        seq = astForSuite(c, CHILD(n, 8));
	    }
	    nodeTarget = CHILD(n, 1);
	    _target = astForExprlist(c, nodeTarget, Store);
	    if (NCH(nodeTarget) === 1) {
	        target = _target[0];
	    }
	    else {
	        target = new Tuple(_target, Store, n.lineno, n.col_offset);
	    }

	    return new For_(target,
	        astForTestlist(c, CHILD(n, 3)),
	        astForSuite(c, CHILD(n, 5)),
	        seq, n.lineno, n.col_offset);
	}

	function astForCall (c, n, func) {
	    /*
	      arglist: (argument ',')* (argument [',']| '*' test [',' '**' test]
	               | '**' test)
	      argument: test [comp_for] | test '=' test       # Really [keyword '='] test
	    */
	    var tmp;
	    var k;
	    var key;
	    var e;
	    var kwarg;
	    var vararg;
	    var keywords;
	    var args;
	    var ch;
	    var i;
	    var ngens;
	    var nkeywords;
	    var nargs;

	    REQ(n, SYM.arglist);
	    nargs = 0;
	    nkeywords = 0;
	    ngens = 0;
	    for (i = 0; i < NCH(n); i++) {
	        ch = CHILD(n, i);
	        if (ch.type === SYM.argument) {
	            if (NCH(ch) === 1) {
	                nargs++;
	            }
	            else if (CHILD(ch, 1).type === SYM.comp_for) {
	                ngens++;
	            }
	            else {
	                nkeywords++;
	            }
	        }
	    }
	    if (ngens > 1 || (ngens && (nargs || nkeywords))) {
	        throw new Sk.builtin.SyntaxError("Generator expression must be parenthesized if not sole argument", c.c_filename, n.lineno);
	    }
	    if (nargs + nkeywords + ngens > 255) {
	        throw new Sk.builtin.SyntaxError("more than 255 arguments", c.c_filename, n.lineno);
	    }
	    args = [];
	    keywords = [];
	    nargs = 0;
	    nkeywords = 0;
	    vararg = null;
	    kwarg = null;
	    for (i = 0; i < NCH(n); i++) {
	        ch = CHILD(n, i);
	        if (ch.type === SYM.argument) {
	            if (NCH(ch) === 1) {
	                if (nkeywords) {
	                    throw new Sk.builtin.SyntaxError("non-keyword arg after keyword arg", c.c_filename, n.lineno);
	                }
	                if (vararg) {
	                    throw new Sk.builtin.SyntaxError("only named arguments may follow *expression", c.c_filename, n.lineno);
	                }
	                args[nargs++] = astForExpr(c, CHILD(ch, 0));
	            }
	            else if (CHILD(ch, 1).type === SYM.comp_for) {
	                args[nargs++] = astForGenExpr(c, ch);
	            }
	            else {
	                e = astForExpr(c, CHILD(ch, 0));
	                if (e.constructor === Lambda) {
	                    throw new Sk.builtin.SyntaxError("lambda cannot contain assignment", c.c_filename, n.lineno);
	                }
	                else if (e.constructor !== Name) {
	                    throw new Sk.builtin.SyntaxError("keyword can't be an expression", c.c_filename, n.lineno);
	                }
	                key = e.id;
	                forbiddenCheck(c, CHILD(ch, 0), key, n.lineno);
	                for (k = 0; k < nkeywords; ++k) {
	                    tmp = keywords[k].arg;
	                    if (tmp === key) {
	                        throw new Sk.builtin.SyntaxError("keyword argument repeated", c.c_filename, n.lineno);
	                    }
	                }
	                keywords[nkeywords++] = new keyword(key, astForExpr(c, CHILD(ch, 2)));
	            }
	        }
	        else if (ch.type === TOK.T_STAR) {
	            vararg = astForExpr(c, CHILD(n, ++i));
	        }
	        else if (ch.type === TOK.T_DOUBLESTAR) {
	            kwarg = astForExpr(c, CHILD(n, ++i));
	        }
	    }
	    return new Call(func, args, keywords, vararg, kwarg, func.lineno, func.col_offset);
	}

	function astForTrailer (c, n, leftExpr) {
	    /* trailer: '(' [arglist] ')' | '[' subscriptlist ']' | '.' NAME 
	     subscriptlist: subscript (',' subscript)* [',']
	     subscript: '.' '.' '.' | test | [test] ':' [test] [sliceop]
	     */
	    var e;
	    var elts;
	    var slc;
	    var j;
	    var slices;
	    var simple;
	    REQ(n, SYM.trailer);
	    if (CHILD(n, 0).type === TOK.T_LPAR) {
	        if (NCH(n) === 2) {
	            return new Call(leftExpr, [], [], null, null, n.lineno, n.col_offset);
	        }
	        else {
	            return astForCall(c, CHILD(n, 1), leftExpr);
	        }
	    }
	    else if (CHILD(n, 0).type === TOK.T_DOT) {
	        return new Attribute(leftExpr, strobj(CHILD(n, 1).value), Load, n.lineno, n.col_offset);
	    }
	    else {
	        REQ(CHILD(n, 0), TOK.T_LSQB);
	        REQ(CHILD(n, 2), TOK.T_RSQB);
	        n = CHILD(n, 1);
	        if (NCH(n) === 1) {
	            return new Subscript(leftExpr, astForSlice(c, CHILD(n, 0)), Load, n.lineno, n.col_offset);
	        }
	        else {
	            /* The grammar is ambiguous here. The ambiguity is resolved 
	             by treating the sequence as a tuple literal if there are
	             no slice features.
	             */
	            simple = true;
	            slices = [];
	            for (j = 0; j < NCH(n); j += 2) {
	                slc = astForSlice(c, CHILD(n, j));
	                if (slc.constructor !== Index) {
	                    simple = false;
	                }
	                slices[j / 2] = slc;
	            }
	            if (!simple) {
	                return new Subscript(leftExpr, new ExtSlice(slices), Load, n.lineno, n.col_offset);
	            }
	            elts = [];
	            for (j = 0; j < slices.length; ++j) {
	                slc = slices[j];
	                goog.asserts.assert(slc.constructor === Index && slc.value !== null && slc.value !== undefined);
	                elts[j] = slc.value;
	            }
	            e = new Tuple(elts, Load, n.lineno, n.col_offset);
	            return new Subscript(leftExpr, new Index(e), Load, n.lineno, n.col_offset);
	        }
	    }
	}

	function astForFlowStmt (c, n) {
	    /*
	     flow_stmt: break_stmt | continue_stmt | return_stmt | raise_stmt
	     | yield_stmt
	     break_stmt: 'break'
	     continue_stmt: 'continue'
	     return_stmt: 'return' [testlist]
	     yield_stmt: yield_expr
	     yield_expr: 'yield' testlist
	     raise_stmt: 'raise' [test [',' test [',' test]]]
	     */
	    var ch;
	    REQ(n, SYM.flow_stmt);
	    ch = CHILD(n, 0);
	    switch (ch.type) {
	        case SYM.break_stmt:
	            return new Break_(n.lineno, n.col_offset);
	        case SYM.continue_stmt:
	            return new Continue_(n.lineno, n.col_offset);
	        case SYM.yield_stmt:
	            return new Expr(astForExpr(c, CHILD(ch, 0)), n.lineno, n.col_offset);
	        case SYM.return_stmt:
	            if (NCH(ch) === 1) {
	                return new Return_(null, n.lineno, n.col_offset);
	            }
	            else {
	                return new Return_(astForTestlist(c, CHILD(ch, 1)), n.lineno, n.col_offset);
	            }
	            break;
	        case SYM.raise_stmt:
	            if (NCH(ch) === 1) {
	                return new Raise(null, null, null, n.lineno, n.col_offset);
	            }
	            else if (NCH(ch) === 2) {
	                return new Raise(astForExpr(c, CHILD(ch, 1)), null, null, n.lineno, n.col_offset);
	            }
	            else if (NCH(ch) === 4) {
	                return new Raise(
	                    astForExpr(c, CHILD(ch, 1)),
	                    astForExpr(c, CHILD(ch, 3)),
	                    null, n.lineno, n.col_offset);
	            }
	            else if (NCH(ch) === 6) {
	                return new Raise(
	                    astForExpr(c, CHILD(ch, 1)),
	                    astForExpr(c, CHILD(ch, 3)),
	                    astForExpr(c, CHILD(ch, 5)),
	                    n.lineno, n.col_offset);
	            }
	            break;
	        default:
	            goog.asserts.fail("unexpected flow_stmt");
	    }
	    goog.asserts.fail("unhandled flow statement");
	}

	function astForArguments (c, n) {
	    /* parameters: '(' [varargslist] ')'
	     varargslist: (fpdef ['=' test] ',')* ('*' NAME [',' '**' NAME]
	     | '**' NAME) | fpdef ['=' test] (',' fpdef ['=' test])* [',']
	     */
	    var parenthesized;
	    var id;
	    var complexArgs;
	    var k;
	    var j;
	    var i;
	    var foundDefault;
	    var defaults;
	    var args;
	    var ch;
	    var vararg = null;
	    var kwarg = null;
	    if (n.type === SYM.parameters) {
	        if (NCH(n) === 2) // () as arglist
	        {
	            return new arguments_([], null, null, []);
	        }
	        n = CHILD(n, 1);
	    }
	    REQ(n, SYM.varargslist);

	    args = [];
	    defaults = [];

	    /* fpdef: NAME | '(' fplist ')'
	     fplist: fpdef (',' fpdef)* [',']
	     */
	    foundDefault = false;
	    i = 0;
	    j = 0; // index for defaults
	    k = 0; // index for args
	    while (i < NCH(n)) {
	        ch = CHILD(n, i);
	        switch (ch.type) {
	            case SYM.fpdef:
	                complexArgs = 0;
	                parenthesized = 0;
	                handle_fpdef: while (true) {
	                    if (i + 1 < NCH(n) && CHILD(n, i + 1).type === TOK.T_EQUAL) {
	                        defaults[j++] = astForExpr(c, CHILD(n, i + 2));
	                        i += 2;
	                        foundDefault = true;
	                    }
	                    else if (foundDefault) {
	                        /* def f((x)=4): pass should raise an error.
	                         def f((x, (y))): pass will just incur the tuple unpacking warning. */
	                        if (parenthesized && !complexArgs) {
	                            throw new Sk.builtin.SyntaxError("parenthesized arg with default", c.c_filename, n.lineno);
	                        }
	                        throw new Sk.builtin.SyntaxError("non-default argument follows default argument", c.c_filename, n.lineno);
	                    }

	                    if (NCH(ch) === 3) {
	                        ch = CHILD(ch, 1);
	                        // def foo((x)): is not complex, special case.
	                        if (NCH(ch) !== 1) {
	                            throw new Sk.builtin.SyntaxError("tuple parameter unpacking has been removed", c.c_filename, n.lineno);
	                        }
	                        else {
	                            /* def foo((x)): setup for checking NAME below. */
	                            /* Loop because there can be many parens and tuple
	                             unpacking mixed in. */
	                            parenthesized = true;
	                            ch = CHILD(ch, 0);
	                            goog.asserts.assert(ch.type === SYM.fpdef);
	                            continue handle_fpdef;
	                        }
	                    }
	                    if (CHILD(ch, 0).type === TOK.T_NAME) {
	                        forbiddenCheck(c, n, CHILD(ch, 0).value, n.lineno);
	                        id = strobj(CHILD(ch, 0).value);
	                        args[k++] = new Name(id, Param, ch.lineno, ch.col_offset);
	                    }
	                    i += 2;
	                    if (parenthesized) {
	                        throw new Sk.builtin.SyntaxError("parenthesized argument names are invalid", c.c_filename, n.lineno);
	                    }
	                    break;
	                }
	                break;
	            case TOK.T_STAR:
	                forbiddenCheck(c, CHILD(n, i + 1), CHILD(n, i + 1).value, n.lineno);
	                vararg = strobj(CHILD(n, i + 1).value);
	                i += 3;
	                break;
	            case TOK.T_DOUBLESTAR:
	                forbiddenCheck(c, CHILD(n, i + 1), CHILD(n, i + 1).value, n.lineno);
	                kwarg = strobj(CHILD(n, i + 1).value);
	                i += 3;
	                break;
	            default:
	                goog.asserts.fail("unexpected node in varargslist");
	        }
	    }
	    return new arguments_(args, vararg, kwarg, defaults);
	}

	function astForFuncdef (c, n, decoratorSeq) {
	    /* funcdef: 'def' NAME parameters ':' suite */
	    var body;
	    var args;
	    var name;
	    REQ(n, SYM.funcdef);
	    name = strobj(CHILD(n, 1).value);
	    forbiddenCheck(c, CHILD(n, 1), CHILD(n, 1).value, n.lineno);
	    args = astForArguments(c, CHILD(n, 2));
	    body = astForSuite(c, CHILD(n, 4));
	    return new FunctionDef(name, args, body, decoratorSeq, n.lineno, n.col_offset);
	}

	function astForClassBases (c, n) {
	    /* testlist: test (',' test)* [','] */
	    goog.asserts.assert(NCH(n) > 0);
	    REQ(n, SYM.testlist);
	    if (NCH(n) === 1) {
	        return [ astForExpr(c, CHILD(n, 0)) ];
	    }
	    return seqForTestlist(c, n);
	}

	function astForClassdef (c, n, decoratorSeq) {
	    /* classdef: 'class' NAME ['(' testlist ')'] ':' suite */
	    var s;
	    var bases;
	    var classname;
	    REQ(n, SYM.classdef);
	    forbiddenCheck(c, n, CHILD(n, 1).value, n.lineno);
	    classname = strobj(CHILD(n, 1).value);
	    if (NCH(n) === 4) {
	        return new ClassDef(classname, [], astForSuite(c, CHILD(n, 3)), decoratorSeq, n.lineno, n.col_offset);
	    }
	    if (CHILD(n, 3).type === TOK.T_RPAR) {
	        return new ClassDef(classname, [], astForSuite(c, CHILD(n, 5)), decoratorSeq, n.lineno, n.col_offset);
	    }

	    bases = astForClassBases(c, CHILD(n, 3));
	    s = astForSuite(c, CHILD(n, 6));
	    return new ClassDef(classname, bases, s, decoratorSeq, n.lineno, n.col_offset);
	}

	function astForLambdef (c, n) {
	    /* lambdef: 'lambda' [varargslist] ':' test */
	    var args;
	    var expression;
	    if (NCH(n) === 3) {
	        args = new arguments_([], null, null, []);
	        expression = astForExpr(c, CHILD(n, 2));
	    }
	    else {
	        args = astForArguments(c, CHILD(n, 1));
	        expression = astForExpr(c, CHILD(n, 3));
	    }
	    return new Lambda(args, expression, n.lineno, n.col_offset);
	}

	function astForComprehension(c, n) {
	    /* testlist_comp: test ( comp_for | (',' test)* [','] )
	       argument: test [comp_for] | test '=' test       # Really [keyword '='] test */
	    
	    var j;
	    var ifs;
	    var nifs;
	    var ge;
	    var expression;
	    var t;
	    var forch;
	    var i;
	    var ch;
	    var genexps;
	    var nfors;
	    var elt;
	    var comps;
	    var comp;

	    function countCompFors(c, n) {
	        var nfors = 0;
	        count_comp_for: while (true) {
	            nfors++;
	            REQ(n, SYM.comp_for);
	            if (NCH(n) === 5) {
	                n = CHILD(n, 4);
	            } else {
	                return nfors;
	            }
	            count_comp_iter: while (true) {
	                REQ(n, SYM.comp_iter);
	                n = CHILD(n, 0);
	                if (n.type === SYM.comp_for) {
	                    continue count_comp_for;
	                } else if (n.type === SYM.comp_if) {
	                    if (NCH(n) === 3) {
	                        n = CHILD(n, 2);
	                        continue count_comp_iter;
	                    } else {
	                        return nfors;
	                    }
	                }
	                break;
	            }
	            break;
	        }
	        goog.asserts.fail("logic error in countCompFors");
	    }

	    function countCompIfs(c, n) {
	        var nifs = 0;
	        while (true) {
	            REQ(n, SYM.comp_iter);
	            if (CHILD(n, 0).type === SYM.comp_for) {
	                return nifs;
	            }
	            n = CHILD(n, 0);
	            REQ(n, SYM.comp_if);
	            nifs++;
	            if (NCH(n) == 2) {
	                return nifs;
	            }
	            n = CHILD(n, 2);
	        }
	    }

	    nfors = countCompFors(c, n);
	    comps = [];
	    for (i = 0; i < nfors; ++i) {
	        REQ(n, SYM.comp_for);
	        forch = CHILD(n, 1);
	        t = astForExprlist(c, forch, Store);
	        expression = astForExpr(c, CHILD(n, 3));
	        if (NCH(forch) === 1) {
	            comp = new comprehension(t[0], expression, []);
	        } else {
	            comp = new comprehension(new Tuple(t, Store, n.lineno, n.col_offset), expression, []);
	        }
	        if (NCH(n) === 5) {
	            n = CHILD(n, 4);
	            nifs = countCompIfs(c, n);
	            ifs = [];
	            for (j = 0; j < nifs; ++j) {
	                REQ(n, SYM.comp_iter);
	                n = CHILD(n, 0);
	                REQ(n, SYM.comp_if);
	                expression = astForExpr(c, CHILD(n, 1));
	                ifs[j] = expression;
	                if (NCH(n) === 3) {
	                    n = CHILD(n, 2);
	                }
	            }
	            if (n.type === SYM.comp_iter) {
	                n = CHILD(n, 0);
	            }
	            comp.ifs = ifs;
	        }
	        comps[i] = comp;
	    }
	    return comps;
	}

	function astForIterComp(c, n, type) {
	    var elt, comps;
	    goog.asserts.assert(NCH(n) > 1);
	    elt = astForExpr(c, CHILD(n, 0));
	    comps = astForComprehension(c, CHILD(n, 1));
	    if (type === COMP_GENEXP) {
	        return new GeneratorExp(elt, comps, n.lineno, n.col_offset);
	    } else if (type === COMP_SETCOMP) {
	        return new SetComp(elt, comps, n.lineno, n.col_offset);
	    }
	}

	function astForDictComp(c, n) {
	    var key, value;
	    var comps = [];
	    goog.asserts.assert(NCH(n) > 3);
	    REQ(CHILD(n, 1), TOK.T_COLON);
	    key = astForExpr(c, CHILD(n, 0));
	    value = astForExpr(c, CHILD(n, 2));
	    comps = astForComprehension(c, CHILD(n, 3));
	    return new DictComp(key, value, comps, n.lineno, n.col_offset);
	}

	function astForGenExpr(c, n) {
	    goog.asserts.assert(n.type === SYM.testlist_comp || n.type === SYM.argument);
	    return astForIterComp(c, n, COMP_GENEXP);
	}

	function astForSetComp(c, n) {
	    goog.asserts.assert(n.type === SYM.dictorsetmaker);
	    return astForIterComp(c, n, COMP_SETCOMP);
	}

	function astForWhileStmt (c, n) {
	    /* while_stmt: 'while' test ':' suite ['else' ':' suite] */
	    REQ(n, SYM.while_stmt);
	    if (NCH(n) === 4) {
	        return new While_(astForExpr(c, CHILD(n, 1)), astForSuite(c, CHILD(n, 3)), [], n.lineno, n.col_offset);
	    }
	    else if (NCH(n) === 7) {
	        return new While_(astForExpr(c, CHILD(n, 1)), astForSuite(c, CHILD(n, 3)), astForSuite(c, CHILD(n, 6)), n.lineno, n.col_offset);
	    }
	    goog.asserts.fail("wrong number of tokens for 'while' stmt");
	}

	function astForAugassign (c, n) {
	    REQ(n, SYM.augassign);
	    n = CHILD(n, 0);
	    switch (n.value.charAt(0)) {
	        case "+":
	            return Add;
	        case "-":
	            return Sub;
	        case "/":
	            if (n.value.charAt(1) === "/") {
	                return FloorDiv;
	            }
	            return Div;
	        case "%":
	            return Mod;
	        case "<":
	            return LShift;
	        case ">":
	            return RShift;
	        case "&":
	            return BitAnd;
	        case "^":
	            return BitXor;
	        case "|":
	            return BitOr;
	        case "*":
	            if (n.value.charAt(1) === "*") {
	                return Pow;
	            }
	            return Mult;
	        default:
	            goog.asserts.fail("invalid augassign");
	    }
	}

	function astForBinop (c, n) {
	    /* Must account for a sequence of expressions.
	     How should A op B op C by represented?
	     BinOp(BinOp(A, op, B), op, C).
	     */
	    var tmp;
	    var newoperator;
	    var nextOper;
	    var i;
	    var result = new BinOp(
	        astForExpr(c, CHILD(n, 0)),
	        getOperator(CHILD(n, 1)),
	        astForExpr(c, CHILD(n, 2)),
	        n.lineno, n.col_offset);
	    var nops = (NCH(n) - 1) / 2;
	    for (i = 1; i < nops; ++i) {
	        nextOper = CHILD(n, i * 2 + 1);
	        newoperator = getOperator(nextOper);
	        tmp = astForExpr(c, CHILD(n, i * 2 + 2));
	        result = new BinOp(result, newoperator, tmp, nextOper.lineno, nextOper.col_offset);
	    }
	    return result;

	}


	function astForTestlist(c, n) {
	    /* this doesn't show up in Grammar.txt never did: testlist_gexp: test (',' test)* [','] */
	    /* testlist_comp: test (',' test)* [','] */
	    /* testlist: test (',' test)* [','] */
	    /* testlist_safe: test (',' test)+ [','] */
	    /* testlist1: test (',' test)* */
	    goog.asserts.assert(NCH(n) > 0);
	    if (n.type === SYM.testlist_comp) {
	        if (NCH(n) > 1) {
	            goog.asserts.assert(CHILD(n, 1).type !== SYM.comp_for);
	        }
	    }
	    else {
	        goog.asserts.assert(n.type === SYM.testlist || n.type === SYM.testlist_safe || n.type === SYM.testlist1);
	    }

	    if (NCH(n) === 1) {
	        return astForExpr(c, CHILD(n, 0));
	    }
	    else {
	        return new Tuple(seqForTestlist(c, n), Load, n.lineno, n.col_offset);
	    }

	}

	function astForExprStmt (c, n) {
	    var expression;
	    var value;
	    var e;
	    var i;
	    var targets;
	    var expr2;
	    var varName;
	    var expr1;
	    var ch;
	    REQ(n, SYM.expr_stmt);
	    /* expr_stmt: testlist (augassign (yield_expr|testlist) 
	     | ('=' (yield_expr|testlist))*)
	     testlist: test (',' test)* [',']
	     augassign: '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '|=' | '^='
	     | '<<=' | '>>=' | '**=' | '//='
	     test: ... here starts the operator precendence dance
	     */
	    if (NCH(n) === 1) {
	        return new Expr(astForTestlist(c, CHILD(n, 0)), n.lineno, n.col_offset);
	    }
	    else if (CHILD(n, 1).type === SYM.augassign) {
	        ch = CHILD(n, 0);
	        expr1 = astForTestlist(c, ch);
	        switch (expr1.constructor) {
	            case GeneratorExp:
	                throw new Sk.builtin.SyntaxError("augmented assignment to generator expression not possible", c.c_filename, n.lineno);
	            case Yield:
	                throw new Sk.builtin.SyntaxError("augmented assignment to yield expression not possible", c.c_filename, n.lineno);
	            case Name:
	                varName = expr1.id;
	                forbiddenCheck(c, ch, varName, n.lineno);
	                break;
	            case Attribute:
	            case Subscript:
	                break;
	            default:
	                throw new Sk.builtin.SyntaxError("illegal expression for augmented assignment", c.c_filename, n.lineno);
	        }
	        setContext(c, expr1, Store, ch);

	        ch = CHILD(n, 2);
	        if (ch.type === SYM.testlist) {
	            expr2 = astForTestlist(c, ch);
	        }
	        else {
	            expr2 = astForExpr(c, ch);
	        }

	        return new AugAssign(expr1, astForAugassign(c, CHILD(n, 1)), expr2, n.lineno, n.col_offset);
	    }
	    else {
	        // normal assignment
	        REQ(CHILD(n, 1), TOK.T_EQUAL);
	        targets = [];
	        for (i = 0; i < NCH(n) - 2; i += 2) {
	            ch = CHILD(n, i);
	            if (ch.type === SYM.yield_expr) {
	                throw new Sk.builtin.SyntaxError("assignment to yield expression not possible", c.c_filename, n.lineno);
	            }
	            e = astForTestlist(c, ch);
	            setContext(c, e, Store, CHILD(n, i));
	            targets[i / 2] = e;
	        }
	        value = CHILD(n, NCH(n) - 1);
	        if (value.type === SYM.testlist) {
	            expression = astForTestlist(c, value);
	        }
	        else {
	            expression = astForExpr(c, value);
	        }
	        return new Assign(targets, expression, n.lineno, n.col_offset);
	    }
	}

	function astForIfexpr (c, n) {
	    /* test: or_test 'if' or_test 'else' test */
	    goog.asserts.assert(NCH(n) === 5);
	    return new IfExp(
	        astForExpr(c, CHILD(n, 2)),
	        astForExpr(c, CHILD(n, 0)),
	        astForExpr(c, CHILD(n, 4)),
	        n.lineno, n.col_offset);
	}

	/**
	 * s is a python-style string literal, including quote characters and u/r/b
	 * prefixes. Returns decoded string object.
	 */
	function parsestr (c, s) {
	    var encodeUtf8 = function (s) {
	        return unescape(encodeURIComponent(s));
	    };
	    var decodeUtf8 = function (s) {
	        return decodeURIComponent(escape(s));
	    };
	    var decodeEscape = function (s, quote) {
	        var d3;
	        var d2;
	        var d1;
	        var d0;
	        var c;
	        var i;
	        var len = s.length;
	        var ret = "";
	        for (i = 0; i < len; ++i) {
	            c = s.charAt(i);
	            if (c === "\\") {
	                ++i;
	                c = s.charAt(i);
	                if (c === "n") {
	                    ret += "\n";
	                }
	                else if (c === "\\") {
	                    ret += "\\";
	                }
	                else if (c === "t") {
	                    ret += "\t";
	                }
	                else if (c === "r") {
	                    ret += "\r";
	                }
	                else if (c === "b") {
	                    ret += "\b";
	                }
	                else if (c === "f") {
	                    ret += "\f";
	                }
	                else if (c === "v") {
	                    ret += "\v";
	                }
	                else if (c === "0") {
	                    ret += "\0";
	                }
	                else if (c === '"') {
	                    ret += '"';
	                }
	                else if (c === '\'') {
	                    ret += '\'';
	                }
	                else if (c === "\n") /* escaped newline, join lines */ {
	                }
	                else if (c === "x") {
	                    d0 = s.charAt(++i);
	                    d1 = s.charAt(++i);
	                    ret += String.fromCharCode(parseInt(d0 + d1, 16));
	                }
	                else if (c === "u" || c === "U") {
	                    d0 = s.charAt(++i);
	                    d1 = s.charAt(++i);
	                    d2 = s.charAt(++i);
	                    d3 = s.charAt(++i);
	                    ret += String.fromCharCode(parseInt(d0 + d1, 16), parseInt(d2 + d3, 16));
	                }
	                else {
	                    // Leave it alone
	                    ret += "\\" + c;
	                    // goog.asserts.fail("unhandled escape: '" + c.charCodeAt(0) + "'");
	                }
	            }
	            else {
	                ret += c;
	            }
	        }
	        return ret;
	    };

	    //print("parsestr", s);

	    var quote = s.charAt(0);
	    var rawmode = false;
	    var unicode = false;

	    // treats every sequence as unicodes even if they are not treated with uU prefix
	    // kinda hacking though working for most purposes
	    if((c.c_flags & Parser.CO_FUTURE_UNICODE_LITERALS || Sk.python3 === true)) {
	        unicode = true;
	    }

	    if (quote === "u" || quote === "U") {
	        s = s.substr(1);
	        quote = s.charAt(0);
	        unicode = true;
	    }
	    else if (quote === "r" || quote === "R") {
	        s = s.substr(1);
	        quote = s.charAt(0);
	        rawmode = true;
	    }
	    goog.asserts.assert(quote !== "b" && quote !== "B", "todo; haven't done b'' strings yet");

	    goog.asserts.assert(quote === "'" || quote === '"' && s.charAt(s.length - 1) === quote);
	    s = s.substr(1, s.length - 2);
	    if (unicode) {
	        s = encodeUtf8(s);
	    }

	    if (s.length >= 4 && s.charAt(0) === quote && s.charAt(1) === quote) {
	        goog.asserts.assert(s.charAt(s.length - 1) === quote && s.charAt(s.length - 2) === quote);
	        s = s.substr(2, s.length - 4);
	    }

	    if (rawmode || s.indexOf("\\") === -1) {
	        return strobj(decodeUtf8(s));
	    }
	    return strobj(decodeEscape(s, quote));
	}

	function parsestrplus (c, n) {
	    var i;
	    var ret;
	    REQ(CHILD(n, 0), TOK.T_STRING);
	    ret = new Sk.builtin.str("");
	    for (i = 0; i < NCH(n); ++i) {
	        try {
	            ret = ret.sq$concat(parsestr(c, CHILD(n, i).value));
	        } catch (x) {
	            throw new Sk.builtin.SyntaxError("invalid string (possibly contains a unicode character)", c.c_filename, CHILD(n, i).lineno);
	        }
	    }
	    return ret;
	}

	function parsenumber (c, s, lineno) {
	    var neg;
	    var val;
	    var tmp;
	    var end = s.charAt(s.length - 1);

	    // call internal complex type constructor for complex strings
	    if (end === "j" || end === "J") {
	        return Sk.builtin.complex.complex_subtype_from_string(s);
	    }

	    // Handle longs
	    if (end === "l" || end === "L") {
	        return Sk.longFromStr(s.substr(0, s.length - 1), 0);
	    }

	    // todo; we don't currently distinguish between int and float so
	    // str is wrong for these.
	    if (s.indexOf(".") !== -1) {
	        return new Sk.builtin.float_(parseFloat(s));
	    }

	    // Handle integers of various bases
	    tmp = s;
	    neg = false;
	    if (s.charAt(0) === "-") {
	        tmp = s.substr(1);
	        neg = true;
	    }

	    if (tmp.charAt(0) === "0" && (tmp.charAt(1) === "x" || tmp.charAt(1) === "X")) {
	        // Hex
	        tmp = tmp.substring(2);
	        val = parseInt(tmp, 16);
	    } else if ((s.indexOf("e") !== -1) || (s.indexOf("E") !== -1)) {
	        // Float with exponent (needed to make sure e/E wasn't hex first)
	        return new Sk.builtin.float_(parseFloat(s));
	    } else if (tmp.charAt(0) === "0" && (tmp.charAt(1) === "b" || tmp.charAt(1) === "B")) {
	        // Binary
	        tmp = tmp.substring(2);
	        val = parseInt(tmp, 2);
	    } else if (tmp.charAt(0) === "0") {
	        if (tmp === "0") {
	            // Zero
	            val = 0;
	        } else {
	            // Octal
	            tmp = tmp.substring(1);
	            if ((tmp.charAt(0) === "o") || (tmp.charAt(0) === "O")) {
	                tmp = tmp.substring(1);
	            }
	            val = parseInt(tmp, 8);
	        }
	    }
	    else {
	        // Decimal
	        val = parseInt(tmp, 10);
	    }

	    // Convert to long
	    if (val > Sk.builtin.int_.threshold$ &&
	        Math.floor(val) === val &&
	        (s.indexOf("e") === -1 && s.indexOf("E") === -1)) {
	        return Sk.longFromStr(s, 0);
	    }

	    // Small enough, return parsed number
	    if (neg) {
	        return new Sk.builtin.int_(-val);
	    } else {
	        return new Sk.builtin.int_(val);
	    }
	}

	function astForSlice (c, n) {
	    var n2;
	    var step;
	    var upper;
	    var lower;
	    var ch;
	    REQ(n, SYM.subscript);

	    /*
	     subscript: '.' '.' '.' | test | [test] ':' [test] [sliceop]
	     sliceop: ':' [test]
	     */
	    ch = CHILD(n, 0);
	    lower = null;
	    upper = null;
	    step = null;
	    if (ch.type === TOK.T_DOT) {
	        return new Ellipsis();
	    }
	    if (NCH(n) === 1 && ch.type === SYM.test) {
	        return new Index(astForExpr(c, ch));
	    }
	    if (ch.type === SYM.test) {
	        lower = astForExpr(c, ch);
	    }
	    if (ch.type === TOK.T_COLON) {
	        if (NCH(n) > 1) {
	            n2 = CHILD(n, 1);
	            if (n2.type === SYM.test) {
	                upper = astForExpr(c, n2);
	            }
	        }
	    }
	    else if (NCH(n) > 2) {
	        n2 = CHILD(n, 2);
	        if (n2.type === SYM.test) {
	            upper = astForExpr(c, n2);
	        }
	    }

	    ch = CHILD(n, NCH(n) - 1);
	    if (ch.type === SYM.sliceop) {
	        if (NCH(ch) === 1) {
	            ch = CHILD(ch, 0);
	            step = new Name(strobj("None"), Load, ch.lineno, ch.col_offset);
	        }
	        else {
	            ch = CHILD(ch, 1);
	            if (ch.type === SYM.test) {
	                step = astForExpr(c, ch);
	            }
	        }
	    }
	    return new Slice(lower, upper, step);
	}

	function astForAtom(c, n) {
	    /* atom: ('(' [yield_expr|testlist_comp] ')' |
	       '[' [listmaker] ']' |
	       '{' [dictorsetmaker] '}' |
	       '`' testlist1 '`' |
	       NAME | NUMBER | STRING+)
	    */
	    var i;
	    var values;
	    var keys;
	    var size;
	    var ch = CHILD(n, 0);
	    var elts;
	    switch (ch.type) {
	        case TOK.T_NAME:
	            // All names start in Load context, but may be changed later
	            return new Name(strobj(ch.value), Load, n.lineno, n.col_offset);
	        case TOK.T_STRING:
	            return new Str(parsestrplus(c, n), n.lineno, n.col_offset);
	        case TOK.T_NUMBER:
	            return new Num(parsenumber(c, ch.value, n.lineno), n.lineno, n.col_offset);
	        case TOK.T_LPAR: // various uses for parens
	            ch = CHILD(n, 1);
	            if (ch.type === TOK.T_RPAR) {
	                return new Tuple([], Load, n.lineno, n.col_offset);
	            }
	            if (ch.type === SYM.yield_expr) {
	                return astForExpr(c, ch);
	            }
	            //            if (NCH(ch) > 1 && CHILD(ch, 1).type === SYM.comp_for) {
	            //                return astForComprehension(c, ch);
	            //            }
	            return astForTestlistComp(c, ch);
	        case TOK.T_LSQB: // list or listcomp
	            ch = CHILD(n, 1);
	            if (ch.type === TOK.T_RSQB) {
	                return new List([], Load, n.lineno, n.col_offset);
	            }
	            REQ(ch, SYM.listmaker);
	            if (NCH(ch) === 1 || CHILD(ch, 1).type === TOK.T_COMMA) {
	                return new List(seqForTestlist(c, ch), Load, n.lineno, n.col_offset);
	            } 
	            return astForListcomp(c, ch);
	            
	        case TOK.T_LBRACE:
	            /* dictorsetmaker: 
	             *     (test ':' test (comp_for : (',' test ':' test)* [','])) |
	             *     (test (comp_for | (',' test)* [',']))
	             */
	            keys = [];
	            values = [];
	            ch = CHILD(n, 1);
	            if (n.type === TOK.T_RBRACE) {
	                //it's an empty dict
	                return new Dict([], null, n.lineno, n.col_offset);
	            } 
	            else if (NCH(ch) === 1 || (NCH(ch) !== 0 && CHILD(ch, 1).type === TOK.T_COMMA)) {
	                //it's a simple set
	                elts = [];
	                size = Math.floor((NCH(ch) + 1) / 2);
	                for (i = 0; i < NCH(ch); i += 2) {
	                    var expression = astForExpr(c, CHILD(ch, i));
	                    elts[i / 2] = expression;
	                }
	                return new Set(elts, n.lineno, n.col_offset);
	            } 
	            else if (NCH(ch) !== 0 && CHILD(ch, 1).type == SYM.comp_for) {
	                //it's a set comprehension
	                return astForSetComp(c, ch);
	            } 
	            else if (NCH(ch) > 3 && CHILD(ch, 3).type === SYM.comp_for) {
	                //it's a dict compr. I think.
	                return astForDictComp(c, ch);
	            } 
	            else {
	                size = Math.floor((NCH(ch) + 1) / 4); // + 1 for no trailing comma case
	                for (i = 0; i < NCH(ch); i += 4) {
	                    keys[i / 4] = astForExpr(c, CHILD(ch, i));
	                    values[i / 4] = astForExpr(c, CHILD(ch, i + 2));
	                }
	                return new Dict(keys, values, n.lineno, n.col_offset);
	            }
	        case TOK.T_BACKQUOTE:
	            //throw new Sk.builtin.SyntaxError("backquote not supported, use repr()", c.c_filename, n.lineno);
	            return new Repr(astForTestlist(c, CHILD(n, 1)), n.lineno, n.col_offset);
	        default:
	            goog.asserts.fail("unhandled atom", ch.type);

	    }
	}

	function astForPower (c, n) {
	    /* power: atom trailer* ('**' factor)*
	     */
	    var f;
	    var tmp;
	    var ch;
	    var i;
	    var e;
	    REQ(n, SYM.power);
	    e = astForAtom(c, CHILD(n, 0));
	    if (NCH(n) === 1) {
	        return e;
	    }
	    for (i = 1; i < NCH(n); ++i) {
	        ch = CHILD(n, i);
	        if (ch.type !== SYM.trailer) {
	            break;
	        }
	        tmp = astForTrailer(c, ch, e);
	        tmp.lineno = e.lineno;
	        tmp.col_offset = e.col_offset;
	        e = tmp;
	    }
	    if (CHILD(n, NCH(n) - 1).type === SYM.factor) {
	        f = astForExpr(c, CHILD(n, NCH(n) - 1));
	        e = new BinOp(e, Pow, f, n.lineno, n.col_offset);
	    }
	    return e;
	}

	function astForExpr (c, n) {
	    /* handle the full range of simple expressions
	     test: or_test ['if' or_test 'else' test] | lambdef
	     or_test: and_test ('or' and_test)*
	     and_test: not_test ('and' not_test)*
	     not_test: 'not' not_test | comparison
	     comparison: expr (comp_op expr)*
	     expr: xor_expr ('|' xor_expr)*
	     xor_expr: and_expr ('^' and_expr)*
	     and_expr: shift_expr ('&' shift_expr)*
	     shift_expr: arith_expr (('<<'|'>>') arith_expr)*
	     arith_expr: term (('+'|'-') term)*
	     term: factor (('*'|'/'|'%'|'//') factor)*
	     factor: ('+'|'-'|'~') factor | power
	     power: atom trailer* ('**' factor)*

	     As well as modified versions that exist for backward compatibility,
	     to explicitly allow:
	     [ x for x in lambda: 0, lambda: 1 ]
	     (which would be ambiguous without these extra rules)

	     old_test: or_test | old_lambdef
	     old_lambdef: 'lambda' [vararglist] ':' old_test

	     */

	    var exp;
	    var cmps;
	    var ops;
	    var i;
	    var seq;
	    LOOP: while (true) {
	        switch (n.type) {
	            case SYM.test:
	            case SYM.old_test:
	                if (CHILD(n, 0).type === SYM.lambdef || CHILD(n, 0).type === SYM.old_lambdef) {
	                    return astForLambdef(c, CHILD(n, 0));
	                }
	                else if (NCH(n) > 1) {
	                    return astForIfexpr(c, n);
	                }
	            // fallthrough
	            case SYM.or_test:
	            case SYM.and_test:
	                if (NCH(n) === 1) {
	                    n = CHILD(n, 0);
	                    continue LOOP;
	                }
	                seq = [];
	                for (i = 0; i < NCH(n); i += 2) {
	                    seq[i / 2] = astForExpr(c, CHILD(n, i));
	                }
	                if (CHILD(n, 1).value === "and") {
	                    return new BoolOp(And, seq, n.lineno, n.col_offset);
	                }
	                goog.asserts.assert(CHILD(n, 1).value === "or");
	                return new BoolOp(Or, seq, n.lineno, n.col_offset);
	            case SYM.not_test:
	                if (NCH(n) === 1) {
	                    n = CHILD(n, 0);
	                    continue LOOP;
	                }
	                else {
	                    return new UnaryOp(Not, astForExpr(c, CHILD(n, 1)), n.lineno, n.col_offset);
	                }
	                break;
	            case SYM.comparison:
	                if (NCH(n) === 1) {
	                    n = CHILD(n, 0);
	                    continue LOOP;
	                }
	                else {
	                    ops = [];
	                    cmps = [];
	                    for (i = 1; i < NCH(n); i += 2) {
	                        ops[(i - 1) / 2] = astForCompOp(c, CHILD(n, i));
	                        cmps[(i - 1) / 2] = astForExpr(c, CHILD(n, i + 1));
	                    }
	                    return new Compare(astForExpr(c, CHILD(n, 0)), ops, cmps, n.lineno, n.col_offset);
	                }
	                break;
	            case SYM.expr:
	            case SYM.xor_expr:
	            case SYM.and_expr:
	            case SYM.shift_expr:
	            case SYM.arith_expr:
	            case SYM.term:
	                if (NCH(n) === 1) {
	                    n = CHILD(n, 0);
	                    continue LOOP;
	                }
	                return astForBinop(c, n);
	            case SYM.yield_expr:
	                exp = null;
	                if (NCH(n) === 2) {
	                    exp = astForTestlist(c, CHILD(n, 1));
	                }
	                return new Yield(exp, n.lineno, n.col_offset);
	            case SYM.factor:
	                if (NCH(n) === 1) {
	                    n = CHILD(n, 0);
	                    continue LOOP;
	                }
	                return astForFactor(c, n);
	            case SYM.power:
	                return astForPower(c, n);
	            default:
	                goog.asserts.fail("unhandled expr", "n.type: %d", n.type);
	        }
	        break;
	    }
	}

	function astForPrintStmt (c, n) {
	    /* print_stmt: 'print' ( [ test (',' test)* [','] ]
	     | '>>' test [ (',' test)+ [','] ] )
	     */
	    var nl;
	    var i, j;
	    var seq;
	    var start = 1;
	    var dest = null;
	    REQ(n, SYM.print_stmt);
	    if (NCH(n) >= 2 && CHILD(n, 1).type === TOK.T_RIGHTSHIFT) {
	        dest = astForExpr(c, CHILD(n, 2));
	        start = 4;
	    }
	    seq = [];
	    for (i = start, j = 0; i < NCH(n); i += 2, ++j) {
	        seq[j] = astForExpr(c, CHILD(n, i));
	    }
	    nl = (CHILD(n, NCH(n) - 1)).type === TOK.T_COMMA ? false : true;
	    return new Print(dest, seq, nl, n.lineno, n.col_offset);
	}

	function astForStmt (c, n) {
	    var ch;
	    if (n.type === SYM.stmt) {
	        goog.asserts.assert(NCH(n) === 1);
	        n = CHILD(n, 0);
	    }
	    if (n.type === SYM.simple_stmt) {
	        goog.asserts.assert(numStmts(n) === 1);
	        n = CHILD(n, 0);
	    }
	    if (n.type === SYM.small_stmt) {
	        REQ(n, SYM.small_stmt);
	        n = CHILD(n, 0);
	        /* small_stmt: expr_stmt | print_stmt  | del_stmt | pass_stmt
	         | flow_stmt | import_stmt | global_stmt | exec_stmt
	         | assert_stmt
	         */
	        switch (n.type) {
	            case SYM.expr_stmt:
	                return astForExprStmt(c, n);
	            case SYM.print_stmt:
	                return astForPrintStmt(c, n);
	            case SYM.del_stmt:
	                return astForDelStmt(c, n);
	            case SYM.pass_stmt:
	                return new Pass(n.lineno, n.col_offset);
	            case SYM.flow_stmt:
	                return astForFlowStmt(c, n);
	            case SYM.import_stmt:
	                return astForImportStmt(c, n);
	            case SYM.global_stmt:
	                return astForGlobalStmt(c, n);
	            case SYM.exec_stmt:
	                return astForExecStmt(c, n);
	            case SYM.assert_stmt:
	                return astForAssertStmt(c, n);
	            case SYM.debugger_stmt:
	                return new Debugger_(n.lineno, n.col_offset);
	            default:
	                goog.asserts.fail("unhandled small_stmt");
	        }
	    }
	    else {
	        /* compound_stmt: if_stmt | while_stmt | for_stmt | try_stmt
	         | funcdef | classdef | decorated
	         */
	        ch = CHILD(n, 0);
	        REQ(n, SYM.compound_stmt);
	        switch (ch.type) {
	            case SYM.if_stmt:
	                return astForIfStmt(c, ch);
	            case SYM.while_stmt:
	                return astForWhileStmt(c, ch);
	            case SYM.for_stmt:
	                return astForForStmt(c, ch);
	            case SYM.try_stmt:
	                return astForTryStmt(c, ch);
	            case SYM.with_stmt:
	                return astForWithStmt(c, ch);
	            case SYM.funcdef:
	                return astForFuncdef(c, ch, []);
	            case SYM.classdef:
	                return astForClassdef(c, ch, []);
	            case SYM.decorated:
	                return astForDecorated(c, ch);
	            default:
	                goog.asserts.assert("unhandled compound_stmt");
	        }
	    }
	}

	Sk.astFromParse = function (n, filename, c_flags) {
	    var j;
	    var num;
	    var ch;
	    var i;
	    var c = new Compiling("utf-8", filename, c_flags);
	    var stmts = [];
	    var k = 0;
	    switch (n.type) {
	        case SYM.file_input:
	            for (i = 0; i < NCH(n) - 1; ++i) {
	                ch = CHILD(n, i);
	                if (n.type === TOK.T_NEWLINE) {
	                    continue;
	                }
	                REQ(ch, SYM.stmt);
	                num = numStmts(ch);
	                if (num === 1) {
	                    stmts[k++] = astForStmt(c, ch);
	                }
	                else {
	                    ch = CHILD(ch, 0);
	                    REQ(ch, SYM.simple_stmt);
	                    for (j = 0; j < num; ++j) {
	                        stmts[k++] = astForStmt(c, CHILD(ch, j * 2));
	                    }
	                }
	            }
	            return new Module(stmts);
	        case SYM.eval_input:
	            goog.asserts.fail("todo;");
	        case SYM.single_input:
	            goog.asserts.fail("todo;");
	        default:
	            goog.asserts.fail("todo;");
	    }
	};

	Sk.astDump = function (node) {
	    var spaces = function (n) // todo; blurgh
	    {
	        var i;
	        var ret = "";
	        for (i = 0; i < n; ++i) {
	            ret += " ";
	        }
	        return ret;
	    };

	    var _format = function (node, indent) {
	        var ret;
	        var elemsstr;
	        var x;
	        var elems;
	        var fieldstr;
	        var field;
	        var attrs;
	        var fieldlen;
	        var b;
	        var a;
	        var i;
	        var fields;
	        var namelen;
	        if (node === null) {
	            return indent + "None";
	        }
	        else if (node.prototype && node.prototype._astname !== undefined && node.prototype._isenum) {
	            return indent + node.prototype._astname + "()";
	        }
	        else if (node._astname !== undefined) {
	            namelen = spaces(node._astname.length + 1);
	            fields = [];
	            for (i = 0; i < node._fields.length; i += 2) // iter_fields
	            {
	                a = node._fields[i]; // field name
	                b = node._fields[i + 1](node); // field getter func
	                fieldlen = spaces(a.length + 1);
	                fields.push([a, _format(b, indent + namelen + fieldlen)]);
	            }
	            attrs = [];
	            for (i = 0; i < fields.length; ++i) {
	                field = fields[i];
	                attrs.push(field[0] + "=" + field[1].replace(/^\s+/, ""));
	            }
	            fieldstr = attrs.join(",\n" + indent + namelen);
	            return indent + node._astname + "(" + fieldstr + ")";
	        }
	        else if (goog.isArrayLike(node)) {
	            //Sk.debugout("arr", node.length);
	            elems = [];
	            for (i = 0; i < node.length; ++i) {
	                x = node[i];
	                elems.push(_format(x, indent + " "));
	            }
	            elemsstr = elems.join(",\n");
	            return indent + "[" + elemsstr.replace(/^\s+/, "") + "]";
	        }
	        else {
	            if (node === true) {
	                ret = "True";
	            }
	            else if (node === false) {
	                ret = "False";
	            }
	            else if (node instanceof Sk.builtin.lng) {
	                ret = node.tp$str().v;
	            }
	            else if (node instanceof Sk.builtin.str) {
	                ret = node["$r"]().v;
	            }
	            else {
	                ret = "" + node;
	            }
	            return indent + ret;
	        }
	    };

	    return _format(node, "");
	};

	goog.exportSymbol("Sk.astFromParse", Sk.astFromParse);
	goog.exportSymbol("Sk.astDump", Sk.astDump);



	/* ---- /Users/rob/skulpty/lib/afterword.js ---- */ 

	function wrapAstThing(fx, argpos, debug) {
		argpos = argpos || 2;
		return function(x) {
			var n = arguments[argpos-1];
			var result = fx.apply(undefined, arguments);
			result.range = n.range;
			result.str = n.str;
			result.loc = n.loc;
			if ( debug ) {
				console.log(n);
				console.log(result);
			}
			return result;
		};
	}

	astForAtom = wrapAstThing(astForAtom);
	astForCompOp = wrapAstThing(astForCompOp);
	astForSuite = wrapAstThing(astForSuite);
	astForExceptClause = wrapAstThing(astForExceptClause);
	astForDottedName = wrapAstThing(astForDottedName);
	astForDecorator = wrapAstThing(astForDecorator);
	astForDecorators = wrapAstThing(astForDecorators);
	astForDecorated = wrapAstThing(astForDecorated);
	astForWithVar = wrapAstThing(astForWithVar);
	astForWithStmt = wrapAstThing(astForWithStmt);
	astForExecStmt = wrapAstThing(astForExecStmt);
	astForIfStmt = wrapAstThing(astForIfStmt);
	astForExprlist = wrapAstThing(astForExprlist);
	astForDelStmt = wrapAstThing(astForDelStmt);
	astForGlobalStmt = wrapAstThing(astForGlobalStmt);
	astForAssertStmt = wrapAstThing(astForAssertStmt);
	astForImportStmt = wrapAstThing(astForImportStmt);
	astForTestlistComp = wrapAstThing(astForTestlistComp);
	astForListcomp = wrapAstThing(astForListcomp);
	astForFactor = wrapAstThing(astForFactor);
	astForForStmt = wrapAstThing(astForForStmt);
	astForTrailer = wrapAstThing(astForTrailer);
	astForFlowStmt = wrapAstThing(astForFlowStmt);
	astForArguments = wrapAstThing(astForArguments);
	astForFuncdef = wrapAstThing(astForFuncdef);
	astForClassBases = wrapAstThing(astForClassBases);
	astForClassdef = wrapAstThing(astForClassdef);
	astForLambdef = wrapAstThing(astForLambdef);
	astForComprehension = wrapAstThing(astForComprehension);
	astForIterComp = wrapAstThing(astForIterComp);
	astForDictComp = wrapAstThing(astForDictComp);
	astForGenExpr = wrapAstThing(astForGenExpr);
	astForSetComp = wrapAstThing(astForSetComp);
	astForWhileStmt = wrapAstThing(astForWhileStmt);
	astForAugassign = wrapAstThing(astForAugassign);
	astForBinop = wrapAstThing(astForBinop);
	astForTestlist = wrapAstThing(astForTestlist);
	astForExprStmt = wrapAstThing(astForExprStmt);
	astForIfexpr = wrapAstThing(astForIfexpr);
	astForExpr = wrapAstThing(astForExpr);
	Sk.astFromParse = wrapAstThing(Sk.astFromParse, 1);

	Sk.nameForToken = function(v) {
		if ( typeof v === "string" ) return v;
		for ( var name in Sk.Tokenizer.Tokens ) {
			if ( Sk.Tokenizer.Tokens[name] == v ) return name;
		}
		if ( v in Sk.ParseTables.number2symbol ) {
			return Sk.ParseTables.number2symbol[v];
		}

		return '???:' + v;
	};

	//Sk.python3 = true;
	Sk.Parser = Parser;
	Sk.builtin.str.prototype.valueOf = function() { return this.v; };
	Sk.builtin.str.prototype.toString = function() { return this.v; };

	Sk.builtin.SyntaxError = function(str, file, line, ctx, extra) {
		var err = new SyntaxError(str, file, line);
		err.context = ctx;
		err.extra = extra;
		err.line = line;
		return err;
	};

	Sk.builtin.IndentationError = function(str, file, line, row, extra) {
		var err = new SyntaxError('Indentation Error: ' + str, file, line);
		err.context = [[line, row], [line, row]];
		err.extra = {
		};
		err.line = line;
		return err;
	};


	module.exports = Sk;
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 2 */
/***/ function(module, exports) {

	'use strict';

	var isArray = Array.isArray;

	//TODO: Find a way to not have to do this.
	function getOpName(op) {
		if (op.prototype._astname) {
			return op.prototype._astname;
		}
		throw new Error("Coudlnt decode operator name for: " + (op.name || op.toString()));
	}

	function abort(why) {
		console.log(new Error("ABORT:" + why).stack);
		throw new Error(why);
	}

	function isExpression(n) {
		return /Expression$/.test(n.type);
	}

	var idx = 0;
	function createTempName(hint) {
		return '__temp$' + hint + '$' + idx++;
	}

	function ensureStatement(s) {
		var f = s;
		if ( !isArray(s) ) f = [f];
		for ( var i = 0; i < f.length; ++i ) {
			var v = f[i];
			if ( isExpression(v) ) {
				f[i] = {type: "ExpressionStatement", expression: v};
			}
		}

		if ( isArray(s) ) return s;
		else return f[0];
	}

	function ident(n) {
		return {type: "Identifier", name: n.valueOf()};
	}

	function member(o, p) {
		return {
			type: "MemberExpression",
			object: o,
			property: p,
			computed: false
		};
	}

	function literal(v) {
		if ( typeof v === 'object' ) v = v.valueOf();

		if ( typeof v === 'number' && (1 / v !== 1 / Math.abs(v)) ) {
			return {type: "UnaryExpression", argument: literal(-v), operator: '-' };
		}

		return {type: "Literal", value: v, raw: JSON.stringify(v)};
	}

	function binOp(left, op, right) {
		return {
			type: "BinaryExpression",
			left: left,
			right: right,
			operator: op
		};
	}

	function logicOp(left, op, right) {
		return {
			type: "LogicalExpression",
			left: left,
			right: right,
			operator: op
		};
	}

	function ternary(cond, a, b) {
		return {
			type: "ConditionalExpression",
			test: cond,
			consequent: a,
			alternate: b
		};
	}

	function var_(name, init) {
		return {
			type: "VariableDeclaration",
			kind: 'var',
			declarations: [{
				type: "VariableDeclarator",
				id: name,
				init: init ? init : undefined
			}]
		};
	}

	function transform(node, ctx) {
		//console.log(node.lineno, node.col_offset);
		var result = dispatch(node, ctx);
		if ( node.range ) result.range = [node.range[0], node.range[1]];
		if ( node.loc ) result.loc = node.loc;
		result.str = node.str;
		return result;
	}

	function dispatch(node, ctx) {
		if ( !ctx.locals ) ctx.locals = Object.create(null);

		if ( !node ) {
			console.log("WAT!", new Error().stack);
			throw new Error("What?");
		}
		if ( isArray(node) ) {
			var body = [];
			for ( var i = 0; i < node.length; ++i ) {
				var r = transform(node[i], ctx);
				if ( isArray(r) ) body.push.apply(body, r);
				else body.push(r);
			}
			return body;
		}
		switch (node._astname) {
			case 'Attribute': return transformAttribute(node, ctx);
			case 'Assign': return transformAssign(node, ctx);
			case 'AugAssign': return transformAugAssign(node, ctx);
			case 'BinOp': return transformBinOp(node, ctx);
			case 'BoolOp': return transformBoolOp(node, ctx);
			case 'Break': return transformBreak(node, ctx);
			case 'Call': return transformCall(node, ctx);
			case 'ClassDef': return transformClassDef(node, ctx);
			case 'Continue': return tranformContinue(node, ctx);
			case 'Compare': return transformCompare(node, ctx);
			case 'Dict': return transformDict(node, ctx);
			case 'Delete': return transformDel(node, ctx);
			case 'Expr': return transformExpr(node, ctx);
			case 'For': return transformFor(node, ctx);
			case 'FunctionDef': return transformFunctionDef(node, ctx);
			case 'GeneratorExp': return transformListComp(node, ctx); //TODO: Make this seperate
			case 'Global': return transformGlobal(node, ctx);
			case 'If': return transformIf(node, ctx);
			case 'Import': return NoOp();
			case 'Lambda': return transformLambda(node, ctx);
			case 'List': return transformList(node, ctx);
			case 'ListComp': return transformListComp(node, ctx);
			case 'Module': return transformModule(node, ctx);
			case 'Name': return transformName(node, ctx);
			case 'Print': return transformPrint(node, ctx);
			case 'Return': return transformReturn(node, ctx);
			case 'Str': return transformStr(node, ctx);
			case 'Subscript': return transformSubscript(node, ctx);
			case 'Tuple': return transformTuple(node, ctx);
			case 'Num': return transformNum(node, ctx);
			case 'Pass': return transformPass(node, ctx);
			case 'UnaryOp': return transformUnaryOp(node, ctx);
			case 'While': return transformWhile(node, ctx);
			default:
				console.log("Dont know how to transform: " + node._astname);
				console.log(JSON.stringify(node, null, '  '));
				throw new Error("Dont know how to transform: " + node._astname);
		}
	}

	function NoOp() { return []; }



	function makeVariableName(name) {
		var parts = Array.isArray(name) ? name : name.split(/\./g);
		if ( parts.length === 1 ) return ident(name);
		var prop = parts.pop();
		return member(makeVariableName(parts), ident(prop));
	}

	function transformAttribute(node, ctx) {
		var n = node.attr;
		if ( n._astname ) n = transform(n, ctx);
		else n = {type: 'Identifier', name: n.valueOf()};
		return member(transform(node.value, ctx), n);
	}

	function transformAugAssign(node, ctx) {
		//TODO: We need to not inject left into the code twice
		//as it could have side effects.
		var right = transform(node.value, ctx);
		var left = transform(node.target, ctx);
		var tn = createTempName("left");
		var opName = getOpName(node.op);
		return [
			var_(ident(tn), left),
			ensureStatement({
				type: "AssignmentExpression",
				operator: '=',
				left: left,
				right: createBinOp(left, opName, right)
			})
		];
	}

	function transformAssign(node, ctx) {

		var results = [];
		for ( var i = 0; i < node.targets.length; ++i ) {
			var left = node.targets[i];
			if ( ctx.writeTarget ) {
				left = member(ctx.writeTarget, transform(left,ctx));
			}
			results.push.apply(results,createTupleUnpackingAssign(left, transform(node.value, ctx), ctx));
		
		}
		if ( results.length == 1 ) return results[0];
		return {type: "BlockStatement", body: results}; 
	}

	function createBinOp(left, op, right) {

		if ( op === 'FloorDiv' ) {
			return {
				type: "CallExpression",
				callee: makeVariableName('Math.floor'),
				arguments: [{
					type: "BinaryExpression",
					left: left,
					right: right,
					operator: '/'
				}]
			};
		}

		var fxOps = {
			"Add": "__pythonRuntime.ops.add",
			"Mult": "__pythonRuntime.ops.multiply",
			"Pow": "Math.pow"
		};

		if ( op in fxOps  ) {
			var call = {
				type: "CallExpression",
				callee: makeVariableName(fxOps[op]),
				arguments: [left, right]
			};
			return call;
		}

		var operators = {
			"Add": "+",
			"Sub": "-",
			"Mod": "%",
			"Div": "/",
			"BitAnd": "&",
			"BitOr": "|",
			'BitXor': '^',
			"LShift": "<<",
			"RShift": ">>"

		};

		if ( !(op in operators) ) abort("Unknown binary operator: " + op);

		return binOp(left, operators[op], right);
	}

	function transformBinOp(node, ctx) {
		var left = transform(node.left, ctx);
		var right = transform(node.right, ctx);
		return createBinOp(left, getOpName(node.op), right);
	}

	function transformBoolOp(node, ctx) {
		var fvals = new Array(node.values.length);
		for ( var i = 0; i < node.values.length; ++i ) {
			fvals[i] = transform(node.values[i], ctx);
		}
		var opName = getOpName(node.op);
		var operators = {
			'And': '&&',
			'Or': '||'
		};

		if ( !(opName in operators ) ) abort("Unknown bool opeartor: " + opName);
		var opstr = operators[opName];

		var result = fvals.pop();
		while ( fvals.length > 0 ) {
			result = logicOp(fvals.pop(), opstr, result);
		}


		//TODO: Support || as well?
		return result;
	}

	function transformBreak(node, ctx) {
		return {type: "BreakStatement"};
	}

	function transformCall(node, ctx) {
		var builtins = ['len'];
		if ( node.func._astname == 'Name' ) {
			switch ( node.func.id.v ) {
				case 'len':
					return {
						type: "MemberExpression",
						object: transform(node.args[0], ctx),
						property: {type: "Identifier", name: "length"}
					};
				case 'all': case 'ord':
				case 'sum': case 'any':
				case 'str': case 'chr':
				case 'ascii': case 'divmod':
				case 'range': case 'enumerate':
				case 'round': case 'filter':
				case 'abs': case 'float':
				case 'int': case 'hex':
				case 'tuple': case  'map':
				case 'bool': case 'max':
				case 'sorted': case 'min':
				case 'list': case 'oct':
				case 'pow': case  'reversed':
				case 'repr':
					return {
						type: 'CallExpression',
						callee: makeVariableName('__pythonRuntime.functions.' + node.func.id.v),
						arguments: transform(node.args, ctx)
					};
				case 'dict':
					var args = [];
					for ( var i = 0; i < node.keywords.length; ++i ) {
						args.push({
							type: "ArrayExpression",
							elements: [
								literal(node.keywords[i].arg.v),
								transform(node.keywords[i].value, ctx)
							]
						});
					}
					return {
						type: "NewExpression",
						callee: makeVariableName('__pythonRuntime.objects.dict'),
						arguments: args
					};

			}
		}

		var args = transform(node.args, ctx);

		if ( node.keywords.length > 0 ) {
			var paramsDict = {
				type: "ObjectExpression",
				properties: [{
					type: "Property",
					key: ident("__kwp"),
					value: literal(true)
				}]
			};

			for ( var i = 0; i < node.keywords.length; ++i ) {
				var k = node.keywords[i];
				paramsDict.properties.push({
					type: "Property",
					key: ident(k.arg.v),
					value: transform(k.value, ctx)
				});
			}

			var extraArg = {
				type: "CallExpression",
				callee: makeVariableName('__pythonRuntime.utils.createParamsObj'),
				arguments: [paramsDict]
			};

			args.push(extraArg);
		}

		return {
			type: "CallExpression",
			callee: transform(node.func, ctx),
			arguments: args
		};
	}

	function transformClassDef(node, ctx) {
		var body = [];
		var proto = member(ident(node.name), ident('prototype'));
		var nctx = {
			writeTarget: proto,
			inClass: true,
			locals: Object.create(null)
		};

		if ( node.bases.length > 1 ) alert("Multiple base classes not supported.");

		var base = (node.bases.length > 0) ? transform(node.bases[0], ctx) : undefined;

		var ctorBody = [];
		ctorBody.push({
			type: "VariableDeclaration",
			kind: 'var',
			declarations: [{
				type: "VariableDeclarator",
				id: ident('that'),
				init: {type: "ThisExpression"}
			}]
		});

		ctorBody.push({
			type: "IfStatement",
			test: {
				type:"UnaryExpression",
				argument: binOp(ident('that'), "instanceof", ident(node.name)),
				operator: "!"
			},
			consequent: ensureStatement({
				type: "AssignmentExpression",
				left: ident('that'),
				right: {
					type:  "CallExpression",
					callee: makeVariableName('Object.create'),
					arguments: [ proto ]
				},
				operator: '='
			})
		});

		ctorBody.push({
			type: "IfStatement",
			test: {
				type: "CallExpression",
				callee: member(proto, ident('hasOwnProperty')),
				arguments: [literal('__init__')]
			},
			consequent: ensureStatement({
				type: "CallExpression",
				callee: member(member(proto, ident('__init__')), ident('apply')),
				arguments: [ident('that'), ident('arguments')]
			})
		});

		if ( base ) {
			ctorBody.push(ensureStatement({
				type: "CallExpression",
				callee: {
					type: "MemberExpression",
					object: base,
					property: ident('apply'),
					computed: false
				},
				arguments: [ident('that'), ident('arguments')]
			}));
		}

		ctorBody.push({
			type: "ReturnStatement",
			argument: ident('that')
		});


		body.push({
			type: "FunctionDeclaration",
			id: ident(node.name),
			params: [],
			body: {type: "BlockStatement", body:ctorBody}
		});

		if ( base ) {
			body.push({
				type: "AssignmentExpression",
				left: proto,
				right: {
					type:  "CallExpression",
					callee: makeVariableName('Object.create'),
					arguments: [ member(base, ident('prototype')) ]
				},
				operator: "="
			});
		}

		body = body.concat(transform(node.body, nctx));

		body.push({
			type: "ReturnStatement",
			argument: ident(node.name)
		});

		return {
			"type": "VariableDeclaration",
			"declarations": [
			{
			  "type": "VariableDeclarator",
			  "id": ident(node.name),
			  "init": {
			  	type: "CallExpression",
			  	callee: {
			  		type: "FunctionExpression",
			  		params: [],
			  		body: {type: "BlockStatement", body: ensureStatement(body)}
			  	},
			  	arguments: []
			  }
			}],
			"kind": ctx.varType || 'var'
		};
	}


	function tranformContinue(node, ctx) {
		return {type: "ContinueStatement"};
	}

	function makeCop(left, op, right) {

		var fxOps = {
			"In_": "in",
			"In": "in",
			"NotIn": "in"
		};
		var opName = getOpName(op);
		if ( opName in fxOps  ) {
			var call = {
				type: "CallExpression",
				callee: makeVariableName("__pythonRuntime.ops." + fxOps[opName]),
				arguments: [left, right]
			};

			if ( opName == "NotIn" ) {
				return {
					type: "UnaryExpression",
					argument: call,
					operator: "!"
				};
			} else {
				return call;	
			} 
		}

		
		var operators = {
			"Eq": "===",
			"NotEq": "!==",
			"LtE": "<=",
			"Lt": "<",
			"GtE": ">=",
			"Gt": ">",
			"Is": "===",
			"IsNot": "!=="
		};
		
		if ( !(opName in operators) ) abort("Unsuported Compare operator: " + opName);
		return binOp(left, operators[opName], right);
	}

	function transformCompare(node, ctx) {
		var left = transform(node.left, ctx);
		var result;

		for ( var i = 0; i < node.comparators.length; ++i ) {
			var right = transform(node.comparators[i], ctx);
			var cop = makeCop(left, node.ops[i], right);
			if ( result ) {
				result = binOp(result, '&&', cop);
			} else {
				result = cop;
			}
			left = right;
		}

		

		return result;
		
	}

	function transformDel(node, ctx) {
		var result = [];
		for ( var i = 0; i < node.targets.length; ++i ) {
			var st = node.targets[i];
			var partial = transform(st, ctx);
			result.push({
				type: "AssignmentExpression",
				operator: "=",
				left: partial,
				right: {
					type: "UnaryExpression",
					argument: literal(0),
					operator: 'void',
					prefix: true
				}
			});
		}
		return ensureStatement({
			type: "SequenceExpression",
			expressions: result
		});
	}

	function transformDict(node, ctx) {
		var args = [];
		for ( var i = 0; i < node.keys.length; ++i ) {
			args.push({
				type: "ArrayExpression",
				elements: [
					transform(node.keys[i], ctx),
					transform(node.values[i], ctx)
				]
			});
		}
		return {
			type: "NewExpression",
			callee: makeVariableName("__pythonRuntime.objects.dict"),
			arguments: args
		};
	}

	function transformExpr(node, ctx) {
		return {
			type: "ExpressionStatement",
			expression: transform(node.value, ctx)
		};
	}

	function assignPossiblyWithDeclaration(target, value, ctx) {
		var left = target._astname ? transform(target, ctx) : target;
		var varible;

		if ( left.type === "Identifier" ) varible = left.name;

		if ( !varible || !ctx || !ctx.locals || ctx.locals[varible] ) {
			return {type: "ExpressionStatement", expression: {
				type: "AssignmentExpression",
				operator: "=",
				left: left,
				right: value
			}};
		}

		ctx.locals[varible] = true;

		return {
			type: "VariableDeclaration",
			declarations: [{
				type: "VariableDeclarator",
				id: left,
				init: value
			}],
			kind: ctx.varType || 'var'
		};
	}

	function createTupleUnpackingAssign(target, value, ctx) {

		if ( target._astname === 'Tuple' ) {
			var result = [];
			var tn = createTempName("right");
			result.push({
				type: "VariableDeclaration",
				kind: "var",
				declarations: [{
					type: "VariableDeclarator",
					id: ident(tn),
					init: value
				}]
			});
			for ( var i = 0; i < target.elts.length; ++i ) {
				result.push.apply(result,createTupleUnpackingAssign(
					target.elts[i],
					{type: "MemberExpression", object: ident(tn), property: literal(i),  computed: true}
				,ctx));
			}
			return result;
		}

		return [assignPossiblyWithDeclaration(target, value, ctx)];
	}

	function createForLoop(iident, tident, iter, target, body, ctx) {

		body = createTupleUnpackingAssign(
			target, 
			{type: "MemberExpression", object: tident, property: iident, computed: true},
			ctx
		).concat(body);

		var riter = ternary(
			{type: "CallExpression", callee: makeVariableName("Array.isArray"), arguments:[iter]},
			iter,
			{type: "CallExpression", callee: makeVariableName("Object.keys"), arguments:[iter]}
		);

		return {
			type: "ForStatement",
			init: {
				"type": "VariableDeclaration",
				"declarations": [
				{
				  "type": "VariableDeclarator",
				  "id": iident,
				  "init": literal(0)
				},
				{
				  "type": "VariableDeclarator",
				  "id": tident,
				  "init": riter
				}],
				"kind": ctx.varType
			},
			test: binOp(iident, '<', {
				type: "MemberExpression", object: tident, property: {type: "Identifier", name: "length"}
			}),
			update: {
				"type": "UpdateExpression",
				"operator": "++",
				"prefix": true,
				"argument": iident
			},
			body: {type: "BlockStatement", body: body}
		};
	}

	function transformFor(node, ctx) {
		var name = createTempName('idx');
		var iident = ident(name);
		var tname = createTempName('target');
		var tident = {type: "Identifier", name: tname};
		var iter = transform(node.iter, ctx);
		var body = ensureStatement(transform(node.body, ctx));

		if ( node.orelse && node.orelse.length > 0 ) abort("else: for-else statement unsupported.");
		return createForLoop(iident, tident, iter, node.target, body, ctx);
	}

	function prepareFunctionBody(node, ctx) {
		var args = node.args.args.slice(0);
		if  ( ctx.inClass ) {
			//TODO: Make sure it's named self, maybe?
			args.shift();
		}
		var hasAnyArguments = args.length > 0 || node.args.vararg || node.args.kwarg;
		var nctx = {
			locals: Object.create(null),
			varType: ctx.varType
		};
		var body = ensureStatement(transform(node.body, nctx));
		var premble = [];

		if ( ctx.inClass ) {
			premble.push({
				"type": "VariableDeclaration",
				"declarations": [{
					"type": "VariableDeclarator",
					"id": ident('self'),
					"init": {type: "ThisExpression"}
				}],
				"kind": "var"
			});
		}

		if ( hasAnyArguments ) {
			
			var hasParams = createTempName('hasParams');
			var param0 = createTempName('param0');
			var realArgCount = createTempName('realArgCount');
			var argLen = makeVariableName('arguments.length');
			var argN = {type: "MemberExpression", object: ident('arguments'), property: binOp(argLen, '-', literal(1)), computed: true};
			var argNKeywords = {type: "MemberExpression", object: argN, property: ident('keywords'), computed: false};

			premble.push({
				"type": "VariableDeclaration",
				"declarations": [
				{
				  "type": "VariableDeclarator",
				  "id": ident(hasParams),
				  "init": logicOp(binOp(argLen, '>', literal(0)), '&&', logicOp(argN, '&&', argNKeywords))
				}],
				"kind":  "var"
			});

			var main = [];
			main.push({
				"type": "VariableDeclaration",
				"declarations": [{
					"type": "VariableDeclarator",
					"id": ident(param0),
					"init": ternary(ident(hasParams), argNKeywords, {type: "ObjectExpression", properties: []})
				},{
					"type": "VariableDeclarator",
					"id": ident(realArgCount),
					"init": binOp(argLen, '-', ternary(ident(hasParams), literal(1), literal(0)))
				}],
				"kind": "var"
			});

			for ( var i = 0; i < args.length; ++i ) {
				var a = node.args.args[i];
				var didx = i - (node.args.args.length - node.args.defaults.length);
				var def = didx >= 0 ? transform(node.args.defaults[didx], ctx) : ident('undefined');

				main.push({
					type: "IfStatement",
					test: binOp(ident(realArgCount), '<', literal(i+1)),
					consequent: ensureStatement({
						type: "AssignmentExpression",
						operator: "=",
						left: ident(a.id),
						right: ternary(
							binOp(literal(a.id), 'in', ident(param0)),
							{type: "MemberExpression", object: ident(param0), property: ident(a.id), computed: false},
							def
						)
					})
				});
			}

			if ( node.args.vararg ) {
				main.push({
					"type": "VariableDeclaration",
					"declarations": [{
						"type": "VariableDeclarator",
						"id": ident(node.args.vararg),
						"init": {
							type: "CallExpression",
							callee: makeVariableName("Array.prototype.slice.call"),
							arguments: [ident('arguments'), literal(node.args.args.length), hasAnyArguments ? ident(realArgCount) : undefined]
						}
					}],
					"kind": "var"
				});
			}

			if ( node.args.kwarg ) {
				for ( var i = 0; i < node.args.args.length; ++i ) {
					main.push(ensureStatement({
						type: "UnaryExpression",
						operator: "delete",
						argument: {
							type: "MemberExpression",
							object: ident(param0),
							property: ident(node.args.args[i].id),
							computed: false
						}
					}));
				}
				main.push({
					"type": "VariableDeclaration",
					"declarations": [{
						"type": "VariableDeclarator",
						"id": ident(node.args.kwarg),
						"init": ident(param0)
					}],
					"kind": "var"
				});
			}

			premble = premble.concat(main); //TODO: If we dont have defauts, we can guard this with __hasParams	
		}


		body = premble.concat(body);
		var params = transform(args, ctx);
		return {
			premble: premble,
			body: body,
			params: params
		};

	}

	function transformFunctionDef(node, ctx) {
		var data = prepareFunctionBody(node, ctx);



		if ( ctx.writeTarget ) {
			return ensureStatement({
				type: "AssignmentExpression",
				left: {type: "MemberExpression", object: ctx.writeTarget, property: ident(node.name)},
				right: {
					type: "FunctionExpression",
					name: ident(node.name),
					params: data.params,
					body: {type: "BlockStatement", body: data.body}
				},
				operator: '='
			});
		} else {
			return {
				type: "FunctionDeclaration",
				id: {type: "Identifier", name: node.name.v},
				params: data.params,
				body: {type: "BlockStatement", body: data.body}
			};
		}
	}

	function transformGlobal(node, ctx) {
		for ( var i = 0; i < node.names.length; ++i ) {
			ctx.locals[node.names[i].v] = true;
		}
		return [];
	}

	function transformIf(node, ctx) {
		var body = ensureStatement(transform(node.body, ctx));
		return {
			type: "IfStatement",
			test: transform(node.test, ctx),
			consequent: {type: "BlockStatement", body: body},
			alternate: (node.orelse && node.orelse.length > 0) ? {type: "BlockStatement", body: ensureStatement(transform(node.orelse, ctx))} : undefined
		};
	}

	function transformLambda(node, ctx) {
		var data = prepareFunctionBody(node, ctx);
		
		//TODO: This is pretty sketchy.
		var last = data.body[data.body.length - 1];
		data.body[data.body.length - 1] = {type: "ReturnStatement", argument: last.expression};

		return {
			type: "FunctionExpression",
			params: data.params,
			body: {type: "BlockStatement", body: data.body}
		};
	}

	function transformList(node, ctx) {
		var call = {
			type: "CallExpression",
			callee: makeVariableName("__pythonRuntime.objects.list"),
			arguments: transform(node.elts, ctx)
		};
		return call;
	}

	function transformListComp(node, ctx) {	
		var body = [];
		var aggrigator = createTempName('result');

		body.push({
			"type": "VariableDeclaration",
			"declarations": [{
				"type": "VariableDeclarator",
				"id": ident(aggrigator),
				"init": {
					type: "NewExpression",
					callee: makeVariableName('__pythonRuntime.objects.list'),
					arguments: []
				}
			}],
			"kind": "var"
		});

		var insideBody = [];

		insideBody.push(ensureStatement({
			type: "CallExpression",
			callee: {type: "MemberExpression", object: ident(aggrigator), property: ident('push'), computed: false},
			arguments: [transform(node.elt, ctx)]
		}));

		//if ( node.generators.length !== 1 ) abort("Unsuported number of generators");
		var gen = node.generators[0];

		for ( var g = node.generators.length - 1; g >= 0; --g ) {
			var idxName = createTempName('idx');
			var listName = createTempName("list" + g);
			var iterName = createTempName('iter');
			var gen = node.generators[g];
			for ( var i = 0; i < gen.ifs.length; ++i ) {
				insideBody.unshift({
					type: "IfStatement",
					test: {type: "UnaryExpression", argument: transform(gen.ifs[i], ctx), operator: "!"},
					consequent: {type: "ContinueStatement"}
				});
			}

			insideBody = [
				{
					type: "VariableDeclaration",
					kind: "var",
					declarations: [{
						type: "VariableDeclarator",
						id: ident(listName),
						init: transform(gen.iter, ctx)
					}]
				},
				createForLoop(ident(idxName), ident(iterName), ident(listName), gen.target, insideBody, ctx)
			];
		}

		body.push.apply(body, insideBody);
		body.push({
			type: "ReturnStatement",
			argument: ident(aggrigator)
		});

		var expr = {
			type: "FunctionExpression",
			params: [],
			body: {type: "BlockStatement", body: body}
		};

		return {
			type: "CallExpression",
			callee: expr,
			arguments: []
		};
	}

	function transformModule(node, ctx) {
		return {
			type: "Program",
			body: ensureStatement(transform(node.body, ctx))
		};
	}

	function transformName(node, ctx) {
		if ( node.id.v === 'True' ) return {type: "Literal", value: true, raw: "true"};
		if ( node.id.v === 'False' ) return {type: "Literal", value: false, raw: "false"};
		if ( node.id.v === 'None' ) return {type: "Literal", value: null, raw: "null"};

		if ( node.id.v === 'random' ) return makeVariableName('__pythonRuntime.imports.random');
		return ident(node.id);
	}

	function transformNum(node, ctx) {
		return literal(node.n);
	}

	function transformPrint(node, ctx) {
		return {
			type: "CallExpression",
			callee: makeVariableName("console.log"),
			arguments: transform(node.values, ctx)
		};
	}

	function transformReturn(node, ctx) {
		return {
			type: "ReturnStatement",
			argument: node.value ? transform(node.value, ctx) : undefined
		};
	}

	function transformStr(node, ctx) {
		return literal(node.s.valueOf());
	}

	function transformTuple(node, ctx) {
		var call = {
			type: "CallExpression",
			callee: makeVariableName("__pythonRuntime.objects.tuple"),
			arguments: transform(node.elts, ctx)
		};
		return call;
	}

	function transformSubscript(node, ctx) {
		//TODO: Do silly pythonic list offset logic
		var val = transform(node.value, ctx);
		if ( node.slice.value ) {
			var lu = transform(node.slice.value, ctx);
			lu = {
				type: "CallExpression",
				callee: makeVariableName("__pythonRuntime.ops.subscriptIndex"),
				arguments: [val, lu]
			};
			return {
				type: "MemberExpression",
				computed: true,
				object: val,
				property: lu
			};
		}

		return {
			type: "CallExpression",
			callee: makeVariableName('__pythonRuntime.internal.slice'),
			arguments:[
				val,
				node.slice.lower ? transform(node.slice.lower, ctx) : ident('undefined'),
				node.slice.upper ? transform(node.slice.upper, ctx) : ident('undefined'),
				node.slice.step ? transform(node.slice.step, ctx) : ident('undefined'),
			]
		};
	}

	function transformPass(node, ctx) {
		return {type: "EmptyStatement"};
	}

	function transformUnaryOp(node, ctx) {
		var argument = transform(node.operand, ctx);

		var fxOps = {
			"Add": "add",
			"Mult": "multiply",
		};
		var opName = getOpName(node.op);

		if ( opName in fxOps  ) {
			var call = {
				type: "CallExpression",
				callee: makeVariableName("__pythonRuntime.ops." + fxOps[opName]),
				arguments: [argument]
			};
			return call;
		}

		var operators = {
			"Not": "!",
			"USub": "-",
			"Invert": "~"
		};

		if ( !(opName in operators) ) abort("Unknown unary operator: " + opName);

		return {
			type: "UnaryExpression",
			argument: argument,
			operator: operators[opName]
		};
		
	}

	function transformWhile(node, ctx) {
		if ( node.orelse && node.orelse.length > 0 ) abort("else: statement for while unsupported.");
		return {
			type: "WhileStatement",
			test: transform(node.test, ctx),
			body: {type: "BlockStatement", body: ensureStatement(transform(node.body, ctx))}
		};	
	}

	module.exports = transform;


/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Sk = __webpack_require__(1);

	function splat(e) {
		console.log("GOT ERROR!");
		console.log(e, e.extra);
		console.log(JSON.stringify(e.extra.node, function(k,  o) {
			if ( k == 'type' ) return Sk.nameForToken(o);
			else if ( k == 'children' ) return o;
			else if ( k ===  '' ) return o;
			else if ( !isNaN(parseInt(k)) ) return o;
			else return undefined;
		}, '  '));
	}

	function improveError(e, options, code) {
		var r;
		if ( e.context && e.context.length >0 ) {
			r = e.context[0];	
		}

		if ( e.extra && e.extra.node ) {
			if ( !r ) {
				r = [e.extra.node.loc.start.line,e.extra.node.loc.start.column];
			}
		}

		if ( r ) {
			setErrorPos(e, r[0], r[1]);
		}

		if ( options.friendlyErrors && e.extra ) {
			e.message = makeErrorFriendly(e, code);
		}
	}

	function setErrorPos(e, line, col) {
		e.loc = {line: line, column: col};
		e.line = line;
		e.column = col;
	}

	function friendlyString(s) {
		switch (s) {
		case 'if_stmt': return 'if statement';
		case 'while_stmt': return 'while statement';
		case 'funcdef': return 'function';
		default: return '?' + s + '?';
		} 
	}

	function nodeToType(n) {
		var type = Sk.nameForToken(n.type);
		if ( type === 'suite' ) return nodeToType(n.children[0]);
		return friendlyString(type);
	}

	function makeErrorFriendly(e, code) {
		//console.log("EX", e.message, e.extra);
		if ( e.extra.kind == "DAG_MISS" ) {
			if ( e.extra.expected.indexOf('T_COLON') !== -1 ) {
				//We might be missing a colon.
				var after = (e.context && e.context[2] ? e.context[2] : e.extra.found_val).replace(/\s+$/,'');
				var lc = e.extra.node.children[e.extra.node.children.length-1];
				if ( lc.value === 'else' ) after = 'else';

				if ( e.extra.found == 'T_SEMI' ) {
					return "Replace the `;` at the end of `" + after + "` with a `:`";
				} else if ( e.extra.found == 'T_NEWLINE' ) {
					return "Need a `:` on the end of the line following `" + after + "`.";
				} else if ( e.extra.found == 'T_NAME' ) {
					return "Need a `:` after `" + after + "`.";
				} else if ( e.extra.found == 'T_EQUAL' ) {
					return "Can't assign to a variable within the condition of an " + friendlyString(e.extra.inside) + ".  Did you mean to use `==` instead of `=`?";
				}
			}

			if ( e.extra.expected.indexOf('T_DEDENT') !== -1 ) {
				if ( e.extra.found_val.toLowerCase() === 'else' ) {
					return "`else` needs to line up with its `if`.";
				} else {
					return "Indentation error.";
				}
			}

			if ( e.extra.expected.indexOf('T_INDENT') !== -1 ) {
				var lc = e.extra.parent || e.extra.node;
				var name  = nodeToType(lc);
				if ( name === 'if statement' ) {
					//Scan for the most recent part of the ifstatement.
					for ( var i = 0; i < lc.children.length; ++i ) {
						if ( ["if", "elif", "else"].indexOf(lc.children[i].value) !== -1 ) {
							name = lc.children[i].value + ' statement';
						}
					}
				}
				if ( lc.value === 'else' ) name = 'else statement';
				return 'Empty ' + name + '. Put 4 spaces in front of statements inside the ' + name + '.';
			}

			if ( e.extra.found === 'T_NAME' ) {
				switch ( e.extra.found_val ) {
					case 'else':
					case 'elif':
						return '`' + e.extra.found_val + '` must be paired with an `if`';
					case 'elseif':
						return '`elseif` should be shortened to `elif`';
				} 
			}

			if ( e.extra.found === 'T_AMPER' && e.extra.inside == 'and_expr' ) {
				return 'Python uses the word `and` instead of `&&` for boolean AND expressions.';
			}


			if ( e.extra.inside === 'trailer' ) {
				//We are parsing either an arglist or a subscript.
				if ( e.extra.expected.indexOf('T_RPAR') === 0 ) {
					//Expected ), must be a arglsit;
					if ( e.line > e.extra.node.lineno ) {
						//Our arglist is incomplete, and we have made it to the next line,.
						//Likely they just forgot to close their ()'s
						setErrorPos(e, e.extra.node.lineno, e.extra.node.col_offset);
						var t = e.extra.node.loc;
						e.context = [
							[t.start.line,t.start.column],
							[t.end.line,t.end.column]
						];
						return 'Unclosed `(` in function arguments.' + e.extra.node.lineno;

					}
					return 'Function calls paramaters must be seperated by `,`s';
				}
			}

			if ( e.extra.found === 'T_INDENT' ) {
				if ( e.extra.expected.indexOf('stmt') !== -1 ) {
					return 'Too much indentation at the beginning of this line.';
				}
			}

			if ( e.extra.expected.indexOf('subscriptlist') === 0 ) {
				return "Malformed subscript";
			}

			if ( e.extra.expected.indexOf('T_NEWLINE') !== -1 ) {
				var n = e.extra.node;
				
				if ( e.extra.node.children[0] ) {
					var n = e.extra.node.children[0];
					var previousType = Sk.nameForToken(n.type);
				
					if ( previousType == 'small_stmt' ) {
						while ( n.children && n.children.length == 1 ) n = n.children[0];
						var what = code.substring(n.range[0], n.range[1]);
						return 'If you want to call `' + what +'` as function, you need `()`\'s';
					}
				}
			}

			return 'Unexpected token: ' + e.message;
		} else if ( e.extra.kind == "CLASSIFY" ) {
			if ( e.extra.value === '"' ) return 'Unterminated string. Add a matching `"` at the end of your string.';
			return 'Unterminated `' + e.extra.value + '`';
		} else if ( e.extra.kind == "STRING_EOF" ) {
			return 'Unterminated muti-line string. Add a matching `"""` at the end of your string.';
		} else if ( e.extra.kind == "STATEMENT_EOF" ) {
			if ( e.extra.parenlev > 0 ) {
				var top = e.extra.parenstack[e.extra.parenstack.length-1];
				var kind = top[0];
				var types = '([{';
				var pair = ')]}';
				var close = pair[types.indexOf(kind)];
				setErrorPos(e, top[1], top[2]-1);
				return 'Unmatched `' + kind + '`.  Every opening `' + kind + '` needs a closing `' + close + '` to match it.';
			}
			return e.message;
		}

		return e.message;
		
		
	}

	module.exports = improveError;


/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	(function (root, factory) {
	  'use strict';
	  if(true)
	    module.exports = factory();
	  else if(typeof define === 'function' && define.amd)
	    define([], factory);
	  else if(typeof exports === 'object')
	    exports["__pythonRuntime"] = factory();
	  else
	    root["__pythonRuntime"] = factory();
	}(this, function() {
	  'use strict';
	  var pythonRuntime = {
	    internal: {
	      // Only used within runtime
	      isSeq: function (a) { return a && (a._type === "list" || a._type === "tuple"); },
	      slice: function (obj, start, end, step) {
	        var slice;
	        if ( typeof obj === 'string' ) slice = function(x,y) { return obj.substring(x,y); }
	        else slice = obj.slice.bind(obj);

	        if (step == null || step === 0) step = 1; // TODO: step === 0 is a runtime error
	        if (start == null) {
	          if (step < 0) start = obj.length - 1;
	          else start = 0;
	        } else if (start < 0) start += obj.length;
	        if (end == null) {
	          if (step < 0) end = -1;
	          else end = obj.length;
	        } else if (end < 0) end += obj.length;

	        var ret = new pythonRuntime.objects.list(), tmp, i;
	        if (step < 0) {
	          tmp = slice(end + 1, start + 1);
	          for (i = tmp.length - 1; i >= 0; i += step) ret.append(tmp[i]);
	        } else {
	          tmp = slice(start, end);
	          if (step === 1 && typeof tmp !== 'string') ret = pythonRuntime.utils.createList(tmp);
	          else for (i = 0; i < tmp.length; i += step) ret.append(tmp[i]);
	        }
	        if ( typeof obj === 'string' ) return ret.join('');
	        return ret;
	      },
	      isJSArray: Array.isArray || function(obj) {
	        return toString.call(obj) === '[object Array]';
	      }
	    },

	    utils: {
	      createDict: function () {
	        var ret = new pythonRuntime.objects.dict();
	        if (arguments.length === 1 && arguments[0] instanceof Object)
	          for (var k in arguments[0]) ret[k] = arguments[0][k];
	        else
	          throw TypeError("createDict expects a single JavaScript object");
	        return ret;
	      },
	      createParamsObj: function () {
	        // In: expr, expr, ..., {id:expr, __kwp:true}, {id:expr, __kwp:true}, ...
	        // Out: {formals:[expr, expr, ...], keywords:{id:expr, id:expr, ...}}
	        var params = { formals: new pythonRuntime.objects.list(), keywords: new PythonDict() };
	        for (var i = 0; i < arguments.length; i++) {
	          if (arguments[i] && arguments[i].__kwp === true) {
	            for (var k in arguments[i])
	              if (k !== '__kwp') params.keywords[k] = arguments[i][k];
	          }
	          else params.formals.push(arguments[i]);
	        }
	        return params;
	      },
	      convertToList: function (list) {
	        Object.defineProperties(list, pythonRuntime.utils.listPropertyDescriptor);
	        return list;
	      },
	      convertToDict: function (dict) {
	        Object.defineProperties(dict, pythonRuntime.utils.dictPropertyDescriptor);
	        return dict;
	      }, 
	      listPropertyDescriptor: {
	          "_type": {
	            get: function () { return 'list'; },
	            enumerable: false
	          },
	          "_isPython": {
	            get: function () { return true; },
	            enumerable: false
	          },
	          "append": {
	            value: function (x) {
	              this.push(x);
	            },
	            enumerable: false
	          },
	          "clear": {
	            value: function () {
	              this.splice(0, this.length);
	            },
	            enumerable: false
	          },
	          "copy": {
	            value: function () {
	              return this.slice(0);
	            },
	            enumerable: false
	          },
	          "count": {
	            value: function (x) {
	              var c = 0;
	              for (var i = 0; i < this.length; i++)
	                if (this[i] === x) c++;
	              return c;
	            },
	            enumerable: false
	          },
	          "equals": {
	            value: function (x) {
	              try {
	                if (this.length !== x.length) return false;
	                for (var i = 0; i < this.length; i++) {
	                  if (this[i].hasOwnProperty("equals")) {
	                    if (!this[i].equals(x[i])) return false;
	                  } else if (this[i] !== x[i]) return false;
	                }
	                return true;
	              }
	              catch (e) { }
	              return false;
	            },
	            enumerable: false
	          },
	          "extend": {
	            value: function (L) {
	              for (var i = 0; i < L.length; i++) this.push(L[i]);
	            },
	            enumerable: false
	          },
	          "index": {
	            value: function (x) {
	              return this.indexOf(x);
	            },
	            enumerable: false
	          },
	          "indexOf": {
	            value: function (x, fromIndex) {
	              try {
	                for (var i = fromIndex ? fromIndex : 0; i < this.length; i++) {
	                  if (this[i].hasOwnProperty("equals")) {
	                    if (this[i].equals(x)) return i;
	                  } else if (this[i] === x) return i;
	                }
	              }
	              catch (e) { }
	              return -1;
	            },
	            enumerable: false
	          },
	          "insert": {
	            value: function (i, x) {
	              this.splice(i, 0, x);
	            },
	            enumerable: false
	          },
	          "pop": {
	            value: function (i) {
	              if (arguments.length<1) i = this.length - 1;
	              var item = this[i];
	              this.splice(i, 1);
	              return item;
	            },
	            enumerable: false
	          },
	          "_pySlice": {
	            value: function (start, end, step) {
	              return pythonRuntime.internal.slice(this, start, end, step);
	            },
	            enumerable: false
	          },
	          "remove": {
	            value: function (x) {
	              this.splice(this.indexOf(x), 1);
	            },
	            enumerable: false
	          },
	          "sort": {
	            value: function(x, reverse) {
	              var list2 = this.slice(0);
	              var apply_key = function(a, numerical) {
	                var list3 = list2.map(x);
	                // construct a dict that maps the listay before and after the map
	                var mapping = {}
	                for(var i in list3) mapping[list3[i]] = list2[i];
	                if(numerical)
	                  list3.sort(function(a, b) { return a - b; });
	                else
	                  list3.sort()
	                for(var i in a) a[i] = mapping[list3[i]];
	              }
	              for(var i in this) {
	                if(typeof this[i] !== 'number' || !isFinite(this[i])) {
	                  if(typeof x != 'undefined') {
	                    apply_key(this, false);
	                  }
	                  else {
	                    list2.sort();
	                    for (var j in this) this[j] = list2[j];
	                  }
	                  if(reverse)
	                    this.reverse();
	                  return;
	                }
	              }
	              if(typeof x != 'undefined') {
	                apply_key(this, true);
	              }
	              else {
	                list2.sort(function(a, b) { return a - b; });
	                for(var i in this) this[i] = list2[i];
	              }
	              if(reverse)
	                this.reverse();
	            },
	            enumerable: false
	          },
	          "toString": {
	            value: function () {
	              return '[' + this.join(', ') + ']';
	            },
	            enumerable: false
	          }
	      },
	      createList: function () {
	        var ret = new pythonRuntime.objects.list();
	        if (arguments.length === 1 && arguments[0] instanceof Array)
	          for (var i in arguments[0]) ret.push(arguments[0][i]);
	        else
	          for (var i in arguments) ret.push(arguments[i]);
	        return ret;
	      },
	      dictPropertyDescriptor: {
	        "_type": {
	          get: function () { return 'dict';},
	          enumerable: false
	        },
	        "_isPython": {
	          get: function () { return true; },
	          enumerable: false
	        },
	        "items": {
	          value: function () {
	            var items = new pythonRuntime.objects.list();
	            for (var k in this) items.append(new pythonRuntime.objects.tuple(k, this[k]));
	            return items;
	          },
	          enumerable: false
	        },
	        "length": {
	          get: function () {
	            return Object.keys(this).length;
	          },
	          enumerable: false
	        },
	        "clear": {
	          value: function () {
	            for (var i in this) delete this[i];
	          },
	          enumerable: false
	        },
	        "get": {
	          value: function (key, def) {
	            if (key in this) return this[key];
	            else if (def !== undefined) return def;
	            return null;
	          },
	          enumerable: false
	        },
	        "keys": {
	          value: function () {
	            return Object.keys(this);
	          },
	          enumerable: false
	        },
	        "pop": {
	          value: function (key, def) {
	            var value;
	            if (key in this) {
	              value = this[key];
	              delete this[key];
	            } else if (def !== undefined) value = def;
	            else return new Error("KeyError");
	            return value;
	          },
	          enumerable: false
	        }, "values": {
	          value: function () {
	            var values = new pythonRuntime.objects.list();
	            for (var key in this) values.append(this[key]);
	            return values;
	          },
	          enumerable: false
	        }
	      }
	    },
	    ops: {
	      add: function (a, b) {
	        if (typeof a === 'object' && pythonRuntime.internal.isSeq(a) && pythonRuntime.internal.isSeq(b)) {
	          if (a._type !== b._type)
	            throw TypeError("can only concatenate " + a._type + " (not '" + b._type + "') to " + a._type);
	          var ret;
	          if (a._type === 'list') ret = new pythonRuntime.objects.list();
	          else if (a._type === 'tuple') ret = new pythonRuntime.objects.tuple();
	          if (ret) {
	            for (var i = 0; i < a.length; i++) ret.push(a[i]);
	            for (var i = 0; i < b.length; i++) ret.push(b[i]);
	            return ret;
	          }
	        }
	        return a + b;
	      },
	      in: function (a, b, n) {
	        var r = b.hasOwnProperty('indexOf') ? b.indexOf(a) >= 0 : a in b;
	        return n ? !r : r;
	      },
	      multiply: function (a, b) {
	        // TODO: non-sequence operand must be an integer
	        if ( typeof a === 'object' ) {
	          if (pythonRuntime.internal.isSeq(a) && !isNaN(parseInt(b))) {
	            var ret;
	            if (a._type === 'list') ret = new pythonRuntime.objects.list();
	            else if (a._type === 'tuple') ret = new pythonRuntime.objects.tuple();
	            if (ret) {
	              for (var i = 0; i < b; i++)
	                for (var j = 0; j < a.length; j++) ret.push(a[j]);
	              return ret;
	            }
	          } else if (pythonRuntime.internal.isSeq(b) && !isNaN(parseInt(a))) {
	            var ret;
	            if (b._type === 'list') ret = new pythonRuntime.objects.list();
	            else if (b._type === 'tuple') ret = new pythonRuntime.objects.tuple();
	            if (ret) {
	              for (var i = 0; i < a; i++)
	                for (var j = 0; j < b.length; j++) ret.push(b[j]);
	              return ret;
	            }
	          }
	        }
	        return a * b;
	      },
	      subscriptIndex: function (o, i) {
	        if ( i >= 0 ) return i;
	        if ( pythonRuntime.internal.isSeq(o) ) return o.length + i;
	        if ( pythonRuntime.internal.isJSArray(o) ) return o.length + i;
	        if ( typeof o === "string" ) return o.length + i;
	        return i;
	      }
	    },

	    objects: {
	      dict: function () {
	        var obj = new PythonDict();
	        for (var i = 0; i < arguments.length; ++i ) obj[arguments[i][0]] = arguments[i][1];
	        return obj;
	      },
	      list: function () {
	        var arr = [];
	        arr.push.apply(arr, arguments);
	        pythonRuntime.utils.convertToList(arr);
	        return arr;
	      },
	      tuple: function () {
	        var arr = [];
	        arr.push.apply(arr, arguments);
	        Object.defineProperty(arr, "_type",
	        {
	          get: function () { return 'tuple'; },
	          enumerable: false
	        });
	        Object.defineProperty(arr, "_isPython",
	        {
	          get: function () { return true; },
	          enumerable: false
	        });
	        Object.defineProperty(arr, "count",
	        {
	          value: function (x) {
	            var c = 0;
	            for (var i = 0; i < this.length; i++)
	              if (this[i] === x) c++;
	            return c;
	          },
	          enumerable: false
	        });
	        Object.defineProperty(arr, "equals",
	        {
	          value: function (x) {
	            try {
	              if (this.length !== x.length) return false;
	              for (var i = 0; i < this.length; i++) {
	                if (this[i].hasOwnProperty("equals")) {
	                  if (!this[i].equals(x[i])) return false;
	                } else if (this[i] !== x[i]) return false;
	              }
	              return true;
	            }
	            catch (e) { }
	            return false;
	          },
	          enumerable: false
	        });
	        Object.defineProperty(arr, "index",
	        {
	          value: function (x) {
	            return this.indexOf(x);
	          },
	          enumerable: false
	        });
	        Object.defineProperty(arr, "indexOf",
	        {
	          value: function (x, fromIndex) {
	            try {
	              for (var i = fromIndex ? fromIndex : 0; i < this.length; i++) {
	                if (this[i].hasOwnProperty("equals")) {
	                  if (this[i].equals(x)) return i;
	                } else if (this[i] === x) return i;
	              }
	            }
	            catch (e) { }
	            return -1;
	          },
	          enumerable: false
	        });
	        Object.defineProperty(arr, "_pySlice",
	        {
	          value: function (start, end, step) { 
	            return pythonRuntime.internal.slice(this, start, end, step);
	          },
	            enumerable: false
	        });
	        Object.defineProperty(arr, "toString",
	        {
	          value: function () {
	            var s = '(' + this.join(', ');
	            if (this.length === 1) s += ',';
	            s += ')';
	            return s;
	          },
	          enumerable: false
	        });
	        return arr;
	      }
	    },

	    // Python built-in functions

	    functions: {
	      abs: function(x) {
	        return Math.abs(x);
	      },
	      all: function(iterable) {
	        for (var i in iterable) if (pythonRuntime.functions.bool(iterable[i]) !== true) return false;
	        return true;
	      },
	      any: function(iterable) {
	        for (var i in iterable) if (pythonRuntime.functions.bool(iterable[i]) === true) return true;
	        return false;
	      },
	      ascii: function(obj) {
	        var s = pythonRuntime.functions.repr(obj),
	            asc = "",
	            code;
	        for (var i = 0; i < s.length; i++) {
	          code = s.charCodeAt(i);
	          if (code <= 127) asc += s[i];
	          else if (code <= 0xFF) asc += "\\x" + code.toString(16);
	          else if (0xD800 <= code && code <= 0xDBFF) { // UCS-2 for the astral chars
	            // if (i+1 >= s.length) throw "High surrogate not followed by low surrogate"; // Is this needed?
	            code = ((code-0xD800)*0x400)+(s.charCodeAt(++i)-0xDC00)+0x10000;
	            asc += "\\U" + ("000"+code.toString(16)).slice(-8);
	          } else if (code <= 0xFFFF) asc += "\\u" + ("0"+code.toString(16)).slice(-4);
	          else if (code <= 0x10FFFF) asc += "\\U" + ("000"+code.toString(16)).slice(-8);
	          else; // Invalid value, should probably throw something. It should never get here though as strings shouldn't contain them in the first place
	        }
	        return asc;
	      },
	      bool: function(x) {
	        return !(x === undefined || // No argument
	                 x === null || // None
	                 x === false || // False
	                 x === 0 || // Zero
	                 x.length === 0 || // Empty Sequence
	                 // TODO: Empty Mapping, needs more support for python mappings first
	                 (x.__bool__ !== undefined && x.__bool__() === false) || // If it has bool conversion defined
	                 (x.__len__ !== undefined && (x.__len__() === false || x.__len__() === 0))); // If it has length conversion defined
	      },
	      chr: function(i) {
	        return String.fromCharCode(i); // TODO: Error code for not 0 <= i <= 1114111
	      },
	      divmod: function(a, b) {
	        return pythonRuntime.objects.tuple(Math.floor(a/b), a%b);
	      },
	      enumerate: function(iterable, start) {
	        start = start || 0;
	        var ret = new pythonRuntime.objects.list();
	        for (var i in iterable) ret.push(new pythonRuntime.objects.tuple(start++, iterable[i]));
	        return ret;
	      },
	      filter: function(fn, iterable) {
	        fn = fn || function () { return true; };
	        var ret = new pythonRuntime.objects.list();
	        for (var i in iterable) if (fn(iterable[i])) ret.push(iterable[i]);
	        return ret;
	      },
	      float: function(x) {
	        if (x === undefined) return 0.0;
	        else if (typeof x == "string") { // TODO: Fix type check
	          x = x.trim().toLowerCase();
	          if ((/^[+-]?inf(inity)?$/i).exec(x) !== null) return Infinity*(x[0]==="-"?-1:1);
	          else if ((/^nan$/i).exec(x) !== null) return NaN;
	          else return parseFloat(x);
	        } else if (typeof x == "number") { // TODO: Fix type check
	          return x; // TODO: Get python types working right so we can return an actual float
	        } else {
	          if (x.__float__ !== undefined) return x.__float__();
	          else return null; // TODO: Throw TypeError: float() argument must be a string or a number, not '<type of x>'
	        }
	      },
	      hex: function(x) {
	        return x.toString(16);
	      },
	      int: function (s) {
	        return parseInt(s);
	      },
	      len: function (o) {
	        return o.length;
	      },
	      list: function (iterable) {
	        var ret = new pythonRuntime.objects.list();
	        if ( arguments.length == 0 ) return ret;
	        if ( arguments.length > 1 ) throw new TypeError('list() takes at most 1 argument (' + arguments.length + ' given)');
	        if (iterable instanceof Array) for (var i in iterable) ret.push(iterable[i]);
	        else for (var i in iterable) ret.push(i);
	        return ret;
	      },
	      map: function(fn, iterable) {
	        // TODO: support additional iterables passed
	        var ret = new pythonRuntime.objects.list();
	        for (var i in iterable) ret.push(fn(iterable[i]));
	        return ret;
	      },
	      max: function(arg1, arg2) {
	        // TODO: support optional keyword-only arguments
	        // TODO: empty iterable raises Python ValueError
	        if (!arg2) { // iterable
	          var max = null;
	          for (var i in arg1) if (max === null || arg1[i] > max) max = arg1[i];
	          return max;
	        } else return arg1 >= arg2 ? arg1 : arg2;
	      },
	      min: function(arg1, arg2) {
	        // TODO: support optional keyword-only arguments
	        // TODO: empty iterable raises Python ValueError
	        if (!arg2) { // iterable
	          var max = null;
	          for (var i in arg1) if (max === null || arg1[i] < max) max = arg1[i];
	          return max;
	        } else return arg1 <= arg2 ? arg1 : arg2;
	      },
	      oct: function(x) {
	        return x.toString(8);
	      },
	      ord: function(c) {
	        return c.charCodeAt(0);
	      },
	      pow: function(x, y, z) {
	        return z ? Math.pow(x, y) % z : Math.pow(x, y);
	      },
	      print: function () {
	        var s = "";
	        for (var i = 0; i < arguments.length; i++)
	          s += i === 0 ? arguments[i] : " " + arguments[i];
	        console.log(s);
	      },
	      range: function (start, stop, step) {
	        if (stop === undefined) {
	          stop = start;
	          start = 0;
	          step = 1;
	        }
	        else if (step === undefined) step = 1;
	        var len = ~~((stop - start) / step); //~~ is a fast floor
	        if ( len < 0 ) return pythonRuntime.utils.convertToList([]);
	        var r = new Array(len);
	        var element = 0;

	        var i = start;
	        while (i < stop && step > 0 || i > stop && step < 0) {
	          r[element++] = i;
	          i += step;
	        }

	        pythonRuntime.utils.convertToList(r);
	        return r;
	      },
	      repr: function (obj) {
	        if (typeof obj === 'string') return "'" + obj + "'"; // TODO: Patch until typesystem comes up.
	        if (obj.__repr__ !== undefined) return obj.__repr__();
	        else if (obj.__class__ !== undefined && obj.__class__.module !== undefined && obj.__class__.__name__) {
	          return '<'+obj.__class__.__module__+'.'+obj.__class__.__name__+' object>';
	        } else return obj.toString(); // Raise a please report warning here, we should never reach this piece of code
	      },
	      reversed: function (seq) {
	        var ret = new pythonRuntime.objects.list();
	        for (var i in seq) ret.push(seq[i]);
	        return ret.reverse();
	      },
	      round: function (num, ndigits) {
	        if (ndigits) {
	          var scale = Math.pow(10, ndigits);
	          return Math.round(num * scale) / scale;
	        }
	        return Math.round(num);
	      },
	      sorted: function (iterable, key, reverse) {
	        var ret = new pythonRuntime.objects.list();
	        for (var i in iterable) ret.push(iterable[i]);
	        if(key) ret.sort(key); else ret.sort();
	        if (reverse) ret.reverse();
	        return ret;
	      },
	      str: function (obj) {
	        return obj.toString();
	      },
	      sum: function (iterable, start) {
	        // TODO: start can't be a string
	        var ret = start || 0;
	        for (var i in iterable) ret += iterable[i];
	        return ret;
	      },
	      tuple: function (iterable) {
	        var ret = new pythonRuntime.objects.tuple();
	        for (var i in iterable) ret.push(iterable[i]);
	        return ret;
	      }
	    },

	    // Python imports
	    // TODO: from x import y, z

	    imports: {
	      random: {
	        random: function () { return Math.random(); }
	      }
	    }
	  };

	  function PythonDict() {

	  }

	  Object.defineProperties(PythonDict.prototype, pythonRuntime.utils.dictPropertyDescriptor);
	  return pythonRuntime;
	}));



/***/ }
/******/ ])
});
;
},{}],45:[function(require,module,exports){
/*!
 * string_score.js: String Scoring Algorithm 0.1.22
 *
 * http://joshaven.com/string_score
 * https://github.com/joshaven/string_score
 *
 * Copyright (C) 2009-2014 Joshaven Potter <yourtech@gmail.com>
 * Special thanks to all of the contributors listed here https://github.com/joshaven/string_score
 * MIT License: http://opensource.org/licenses/MIT
 *
 * Date: Tue Mar 1 2011
 * Updated: Tue Mar 10 2015
*/

/*jslint nomen:true, white:true, browser:true,devel:true */

/**
 * Scores a string against another string.
 *    'Hello World'.score('he');         //=> 0.5931818181818181
 *    'Hello World'.score('Hello');    //=> 0.7318181818181818
 */
String.prototype.score = function (word, fuzziness) {
  'use strict';

  // If the string is equal to the word, perfect match.
  if (this === word) { return 1; }

  //if it's not a perfect match and is empty return 0
  if (word === "") { return 0; }

  var runningScore = 0,
      charScore,
      finalScore,
      string = this,
      lString = string.toLowerCase(),
      strLength = string.length,
      lWord = word.toLowerCase(),
      wordLength = word.length,
      idxOf,
      startAt = 0,
      fuzzies = 1,
      fuzzyFactor,
      i;

  // Cache fuzzyFactor for speed increase
  if (fuzziness) { fuzzyFactor = 1 - fuzziness; }

  // Walk through word and add up scores.
  // Code duplication occurs to prevent checking fuzziness inside for loop
  if (fuzziness) {
    for (i = 0; i < wordLength; i+=1) {

      // Find next first case-insensitive match of a character.
      idxOf = lString.indexOf(lWord[i], startAt);

      if (idxOf === -1) {
        fuzzies += fuzzyFactor;
      } else {
        if (startAt === idxOf) {
          // Consecutive letter & start-of-string Bonus
          charScore = 0.7;
        } else {
          charScore = 0.1;

          // Acronym Bonus
          // Weighing Logic: Typing the first character of an acronym is as if you
          // preceded it with two perfect character matches.
          if (string[idxOf - 1] === ' ') { charScore += 0.8; }
        }

        // Same case bonus.
        if (string[idxOf] === word[i]) { charScore += 0.1; }

        // Update scores and startAt position for next round of indexOf
        runningScore += charScore;
        startAt = idxOf + 1;
      }
    }
  } else {
    for (i = 0; i < wordLength; i+=1) {
      idxOf = lString.indexOf(lWord[i], startAt);
      if (-1 === idxOf) { return 0; }

      if (startAt === idxOf) {
        charScore = 0.7;
      } else {
        charScore = 0.1;
        if (string[idxOf - 1] === ' ') { charScore += 0.8; }
      }
      if (string[idxOf] === word[i]) { charScore += 0.1; }
      runningScore += charScore;
      startAt = idxOf + 1;
    }
  }

  // Reduce penalty for longer strings.
  finalScore = 0.5 * (runningScore / strLength    + runningScore / wordLength) / fuzzies;

  if ((lWord[0] === lString[0]) && (finalScore < 0.85)) {
    finalScore += 0.15;
  }

  return finalScore;
};

},{}],46:[function(require,module,exports){
/*
Author: Geraint Luff and others
Year: 2013

This code is released into the "public domain" by its author(s).  Anybody may use, alter and distribute the code without restriction.  The author makes no guarantees, and takes no liability of any kind for use of this code.

If you find a bug or make an improvement, it would be courteous to let the author know, but it is not compulsory.
*/
(function (global, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define([], factory);
  } else if (typeof module !== 'undefined' && module.exports){
    // CommonJS. Define export.
    module.exports = factory();
  } else {
    // Browser globals
    global.tv4 = factory();
  }
}(this, function () {

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FObject%2Fkeys
if (!Object.keys) {
	Object.keys = (function () {
		var hasOwnProperty = Object.prototype.hasOwnProperty,
			hasDontEnumBug = !({toString: null}).propertyIsEnumerable('toString'),
			dontEnums = [
				'toString',
				'toLocaleString',
				'valueOf',
				'hasOwnProperty',
				'isPrototypeOf',
				'propertyIsEnumerable',
				'constructor'
			],
			dontEnumsLength = dontEnums.length;

		return function (obj) {
			if (typeof obj !== 'object' && typeof obj !== 'function' || obj === null) {
				throw new TypeError('Object.keys called on non-object');
			}

			var result = [];

			for (var prop in obj) {
				if (hasOwnProperty.call(obj, prop)) {
					result.push(prop);
				}
			}

			if (hasDontEnumBug) {
				for (var i=0; i < dontEnumsLength; i++) {
					if (hasOwnProperty.call(obj, dontEnums[i])) {
						result.push(dontEnums[i]);
					}
				}
			}
			return result;
		};
	})();
}
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create
if (!Object.create) {
	Object.create = (function(){
		function F(){}

		return function(o){
			if (arguments.length !== 1) {
				throw new Error('Object.create implementation only accepts one parameter.');
			}
			F.prototype = o;
			return new F();
		};
	})();
}
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FArray%2FisArray
if(!Array.isArray) {
	Array.isArray = function (vArg) {
		return Object.prototype.toString.call(vArg) === "[object Array]";
	};
}
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FArray%2FindexOf
if (!Array.prototype.indexOf) {
	Array.prototype.indexOf = function (searchElement /*, fromIndex */ ) {
		if (this === null) {
			throw new TypeError();
		}
		var t = Object(this);
		var len = t.length >>> 0;

		if (len === 0) {
			return -1;
		}
		var n = 0;
		if (arguments.length > 1) {
			n = Number(arguments[1]);
			if (n !== n) { // shortcut for verifying if it's NaN
				n = 0;
			} else if (n !== 0 && n !== Infinity && n !== -Infinity) {
				n = (n > 0 || -1) * Math.floor(Math.abs(n));
			}
		}
		if (n >= len) {
			return -1;
		}
		var k = n >= 0 ? n : Math.max(len - Math.abs(n), 0);
		for (; k < len; k++) {
			if (k in t && t[k] === searchElement) {
				return k;
			}
		}
		return -1;
	};
}

// Grungey Object.isFrozen hack
if (!Object.isFrozen) {
	Object.isFrozen = function (obj) {
		var key = "tv4_test_frozen_key";
		while (obj.hasOwnProperty(key)) {
			key += Math.random();
		}
		try {
			obj[key] = true;
			delete obj[key];
			return false;
		} catch (e) {
			return true;
		}
	};
}
var ValidatorContext = function ValidatorContext(parent, collectMultiple, errorMessages, checkRecursive, trackUnknownProperties) {
	this.missing = [];
	this.missingMap = {};
	this.formatValidators = parent ? Object.create(parent.formatValidators) : {};
	this.schemas = parent ? Object.create(parent.schemas) : {};
	this.collectMultiple = collectMultiple;
	this.errors = [];
	this.handleError = collectMultiple ? this.collectError : this.returnError;
	if (checkRecursive) {
		this.checkRecursive = true;
		this.scanned = [];
		this.scannedFrozen = [];
		this.scannedFrozenSchemas = [];
		this.scannedFrozenValidationErrors = [];
		this.validatedSchemasKey = 'tv4_validation_id';
		this.validationErrorsKey = 'tv4_validation_errors_id';
	}
	if (trackUnknownProperties) {
		this.trackUnknownProperties = true;
		this.knownPropertyPaths = {};
		this.unknownPropertyPaths = {};
	}
	this.errorMessages = errorMessages;
	this.definedKeywords = {};
	if (parent) {
		for (var key in parent.definedKeywords) {
			this.definedKeywords[key] = parent.definedKeywords[key].slice(0);
		}
	}
};
ValidatorContext.prototype.defineKeyword = function (keyword, keywordFunction) {
	this.definedKeywords[keyword] = this.definedKeywords[keyword] || [];
	this.definedKeywords[keyword].push(keywordFunction);
};
ValidatorContext.prototype.createError = function (code, messageParams, dataPath, schemaPath, subErrors) {
	var messageTemplate = this.errorMessages[code] || ErrorMessagesDefault[code];
	if (typeof messageTemplate !== 'string') {
		return new ValidationError(code, "Unknown error code " + code + ": " + JSON.stringify(messageParams), dataPath, schemaPath, subErrors);
	}
	// Adapted from Crockford's supplant()
	var message = messageTemplate.replace(/\{([^{}]*)\}/g, function (whole, varName) {
		var subValue = messageParams[varName];
		return typeof subValue === 'string' || typeof subValue === 'number' ? subValue : whole;
	});
	return new ValidationError(code, message, dataPath, schemaPath, subErrors);
};
ValidatorContext.prototype.returnError = function (error) {
	return error;
};
ValidatorContext.prototype.collectError = function (error) {
	if (error) {
		this.errors.push(error);
	}
	return null;
};
ValidatorContext.prototype.prefixErrors = function (startIndex, dataPath, schemaPath) {
	for (var i = startIndex; i < this.errors.length; i++) {
		this.errors[i] = this.errors[i].prefixWith(dataPath, schemaPath);
	}
	return this;
};
ValidatorContext.prototype.banUnknownProperties = function () {
	for (var unknownPath in this.unknownPropertyPaths) {
		var error = this.createError(ErrorCodes.UNKNOWN_PROPERTY, {path: unknownPath}, unknownPath, "");
		var result = this.handleError(error);
		if (result) {
			return result;
		}
	}
	return null;
};

ValidatorContext.prototype.addFormat = function (format, validator) {
	if (typeof format === 'object') {
		for (var key in format) {
			this.addFormat(key, format[key]);
		}
		return this;
	}
	this.formatValidators[format] = validator;
};
ValidatorContext.prototype.resolveRefs = function (schema, urlHistory) {
	if (schema['$ref'] !== undefined) {
		urlHistory = urlHistory || {};
		if (urlHistory[schema['$ref']]) {
			return this.createError(ErrorCodes.CIRCULAR_REFERENCE, {urls: Object.keys(urlHistory).join(', ')}, '', '');
		}
		urlHistory[schema['$ref']] = true;
		schema = this.getSchema(schema['$ref'], urlHistory);
	}
	return schema;
};
ValidatorContext.prototype.getSchema = function (url, urlHistory) {
	var schema;
	if (this.schemas[url] !== undefined) {
		schema = this.schemas[url];
		return this.resolveRefs(schema, urlHistory);
	}
	var baseUrl = url;
	var fragment = "";
	if (url.indexOf('#') !== -1) {
		fragment = url.substring(url.indexOf("#") + 1);
		baseUrl = url.substring(0, url.indexOf("#"));
	}
	if (typeof this.schemas[baseUrl] === 'object') {
		schema = this.schemas[baseUrl];
		var pointerPath = decodeURIComponent(fragment);
		if (pointerPath === "") {
			return this.resolveRefs(schema, urlHistory);
		} else if (pointerPath.charAt(0) !== "/") {
			return undefined;
		}
		var parts = pointerPath.split("/").slice(1);
		for (var i = 0; i < parts.length; i++) {
			var component = parts[i].replace(/~1/g, "/").replace(/~0/g, "~");
			if (schema[component] === undefined) {
				schema = undefined;
				break;
			}
			schema = schema[component];
		}
		if (schema !== undefined) {
			return this.resolveRefs(schema, urlHistory);
		}
	}
	if (this.missing[baseUrl] === undefined) {
		this.missing.push(baseUrl);
		this.missing[baseUrl] = baseUrl;
		this.missingMap[baseUrl] = baseUrl;
	}
};
ValidatorContext.prototype.searchSchemas = function (schema, url) {
	if (schema && typeof schema === "object") {
		if (typeof schema.id === "string") {
			if (isTrustedUrl(url, schema.id)) {
				if (this.schemas[schema.id] === undefined) {
					this.schemas[schema.id] = schema;
				}
			}
		}
		for (var key in schema) {
			if (key !== "enum") {
				if (typeof schema[key] === "object") {
					this.searchSchemas(schema[key], url);
				} else if (key === "$ref") {
					var uri = getDocumentUri(schema[key]);
					if (uri && this.schemas[uri] === undefined && this.missingMap[uri] === undefined) {
						this.missingMap[uri] = uri;
					}
				}
			}
		}
	}
};
ValidatorContext.prototype.addSchema = function (url, schema) {
	//overload
	if (typeof url !== 'string' || typeof schema === 'undefined') {
		if (typeof url === 'object' && typeof url.id === 'string') {
			schema = url;
			url = schema.id;
		}
		else {
			return;
		}
	}
	if (url = getDocumentUri(url) + "#") {
		// Remove empty fragment
		url = getDocumentUri(url);
	}
	this.schemas[url] = schema;
	delete this.missingMap[url];
	normSchema(schema, url);
	this.searchSchemas(schema, url);
};

ValidatorContext.prototype.getSchemaMap = function () {
	var map = {};
	for (var key in this.schemas) {
		map[key] = this.schemas[key];
	}
	return map;
};

ValidatorContext.prototype.getSchemaUris = function (filterRegExp) {
	var list = [];
	for (var key in this.schemas) {
		if (!filterRegExp || filterRegExp.test(key)) {
			list.push(key);
		}
	}
	return list;
};

ValidatorContext.prototype.getMissingUris = function (filterRegExp) {
	var list = [];
	for (var key in this.missingMap) {
		if (!filterRegExp || filterRegExp.test(key)) {
			list.push(key);
		}
	}
	return list;
};

ValidatorContext.prototype.dropSchemas = function () {
	this.schemas = {};
	this.reset();
};
ValidatorContext.prototype.reset = function () {
	this.missing = [];
	this.missingMap = {};
	this.errors = [];
};

ValidatorContext.prototype.validateAll = function (data, schema, dataPathParts, schemaPathParts, dataPointerPath) {
	var topLevel;
	schema = this.resolveRefs(schema);
	if (!schema) {
		return null;
	} else if (schema instanceof ValidationError) {
		this.errors.push(schema);
		return schema;
	}

	var startErrorCount = this.errors.length;
	var frozenIndex, scannedFrozenSchemaIndex = null, scannedSchemasIndex = null;
	if (this.checkRecursive && data && typeof data === 'object') {
		topLevel = !this.scanned.length;
		if (data[this.validatedSchemasKey]) {
			var schemaIndex = data[this.validatedSchemasKey].indexOf(schema);
			if (schemaIndex !== -1) {
				this.errors = this.errors.concat(data[this.validationErrorsKey][schemaIndex]);
				return null;
			}
		}
		if (Object.isFrozen(data)) {
			frozenIndex = this.scannedFrozen.indexOf(data);
			if (frozenIndex !== -1) {
				var frozenSchemaIndex = this.scannedFrozenSchemas[frozenIndex].indexOf(schema);
				if (frozenSchemaIndex !== -1) {
					this.errors = this.errors.concat(this.scannedFrozenValidationErrors[frozenIndex][frozenSchemaIndex]);
					return null;
				}
			}
		}
		this.scanned.push(data);
		if (Object.isFrozen(data)) {
			if (frozenIndex === -1) {
				frozenIndex = this.scannedFrozen.length;
				this.scannedFrozen.push(data);
				this.scannedFrozenSchemas.push([]);
			}
			scannedFrozenSchemaIndex = this.scannedFrozenSchemas[frozenIndex].length;
			this.scannedFrozenSchemas[frozenIndex][scannedFrozenSchemaIndex] = schema;
			this.scannedFrozenValidationErrors[frozenIndex][scannedFrozenSchemaIndex] = [];
		} else {
			if (!data[this.validatedSchemasKey]) {
				try {
					Object.defineProperty(data, this.validatedSchemasKey, {
						value: [],
						configurable: true
					});
					Object.defineProperty(data, this.validationErrorsKey, {
						value: [],
						configurable: true
					});
				} catch (e) {
					//IE 7/8 workaround
					data[this.validatedSchemasKey] = [];
					data[this.validationErrorsKey] = [];
				}
			}
			scannedSchemasIndex = data[this.validatedSchemasKey].length;
			data[this.validatedSchemasKey][scannedSchemasIndex] = schema;
			data[this.validationErrorsKey][scannedSchemasIndex] = [];
		}
	}

	var errorCount = this.errors.length;
	var error = this.validateBasic(data, schema, dataPointerPath)
		|| this.validateNumeric(data, schema, dataPointerPath)
		|| this.validateString(data, schema, dataPointerPath)
		|| this.validateArray(data, schema, dataPointerPath)
		|| this.validateObject(data, schema, dataPointerPath)
		|| this.validateCombinations(data, schema, dataPointerPath)
		|| this.validateFormat(data, schema, dataPointerPath)
		|| this.validateDefinedKeywords(data, schema, dataPointerPath)
		|| null;

	if (topLevel) {
		while (this.scanned.length) {
			var item = this.scanned.pop();
			delete item[this.validatedSchemasKey];
		}
		this.scannedFrozen = [];
		this.scannedFrozenSchemas = [];
	}

	if (error || errorCount !== this.errors.length) {
		while ((dataPathParts && dataPathParts.length) || (schemaPathParts && schemaPathParts.length)) {
			var dataPart = (dataPathParts && dataPathParts.length) ? "" + dataPathParts.pop() : null;
			var schemaPart = (schemaPathParts && schemaPathParts.length) ? "" + schemaPathParts.pop() : null;
			if (error) {
				error = error.prefixWith(dataPart, schemaPart);
			}
			this.prefixErrors(errorCount, dataPart, schemaPart);
		}
	}
	
	if (scannedFrozenSchemaIndex !== null) {
		this.scannedFrozenValidationErrors[frozenIndex][scannedFrozenSchemaIndex] = this.errors.slice(startErrorCount);
	} else if (scannedSchemasIndex !== null) {
		data[this.validationErrorsKey][scannedSchemasIndex] = this.errors.slice(startErrorCount);
	}

	return this.handleError(error);
};
ValidatorContext.prototype.validateFormat = function (data, schema) {
	if (typeof schema.format !== 'string' || !this.formatValidators[schema.format]) {
		return null;
	}
	var errorMessage = this.formatValidators[schema.format].call(null, data, schema);
	if (typeof errorMessage === 'string' || typeof errorMessage === 'number') {
		return this.createError(ErrorCodes.FORMAT_CUSTOM, {message: errorMessage}).prefixWith(null, "format");
	} else if (errorMessage && typeof errorMessage === 'object') {
		return this.createError(ErrorCodes.FORMAT_CUSTOM, {message: errorMessage.message || "?"}, errorMessage.dataPath || null, errorMessage.schemaPath || "/format");
	}
	return null;
};
ValidatorContext.prototype.validateDefinedKeywords = function (data, schema) {
	for (var key in this.definedKeywords) {
		if (typeof schema[key] === 'undefined') {
			continue;
		}
		var validationFunctions = this.definedKeywords[key];
		for (var i = 0; i < validationFunctions.length; i++) {
			var func = validationFunctions[i];
			var result = func(data, schema[key], schema);
			if (typeof result === 'string' || typeof result === 'number') {
				return this.createError(ErrorCodes.KEYWORD_CUSTOM, {key: key, message: result}).prefixWith(null, "format");
			} else if (result && typeof result === 'object') {
				var code = result.code || ErrorCodes.KEYWORD_CUSTOM;
				if (typeof code === 'string') {
					if (!ErrorCodes[code]) {
						throw new Error('Undefined error code (use defineError): ' + code);
					}
					code = ErrorCodes[code];
				}
				var messageParams = (typeof result.message === 'object') ? result.message : {key: key, message: result.message || "?"};
				var schemaPath = result.schemaPath ||( "/" + key.replace(/~/g, '~0').replace(/\//g, '~1'));
				return this.createError(code, messageParams, result.dataPath || null, schemaPath);
			}
		}
	}
	return null;
};

function recursiveCompare(A, B) {
	if (A === B) {
		return true;
	}
	if (typeof A === "object" && typeof B === "object") {
		if (Array.isArray(A) !== Array.isArray(B)) {
			return false;
		} else if (Array.isArray(A)) {
			if (A.length !== B.length) {
				return false;
			}
			for (var i = 0; i < A.length; i++) {
				if (!recursiveCompare(A[i], B[i])) {
					return false;
				}
			}
		} else {
			var key;
			for (key in A) {
				if (B[key] === undefined && A[key] !== undefined) {
					return false;
				}
			}
			for (key in B) {
				if (A[key] === undefined && B[key] !== undefined) {
					return false;
				}
			}
			for (key in A) {
				if (!recursiveCompare(A[key], B[key])) {
					return false;
				}
			}
		}
		return true;
	}
	return false;
}

ValidatorContext.prototype.validateBasic = function validateBasic(data, schema, dataPointerPath) {
	var error;
	if (error = this.validateType(data, schema, dataPointerPath)) {
		return error.prefixWith(null, "type");
	}
	if (error = this.validateEnum(data, schema, dataPointerPath)) {
		return error.prefixWith(null, "type");
	}
	return null;
};

ValidatorContext.prototype.validateType = function validateType(data, schema) {
	if (schema.type === undefined) {
		return null;
	}
	var dataType = typeof data;
	if (data === null) {
		dataType = "null";
	} else if (Array.isArray(data)) {
		dataType = "array";
	}
	var allowedTypes = schema.type;
	if (typeof allowedTypes !== "object") {
		allowedTypes = [allowedTypes];
	}

	for (var i = 0; i < allowedTypes.length; i++) {
		var type = allowedTypes[i];
		if (type === dataType || (type === "integer" && dataType === "number" && (data % 1 === 0))) {
			return null;
		}
	}
	return this.createError(ErrorCodes.INVALID_TYPE, {type: dataType, expected: allowedTypes.join("/")});
};

ValidatorContext.prototype.validateEnum = function validateEnum(data, schema) {
	if (schema["enum"] === undefined) {
		return null;
	}
	for (var i = 0; i < schema["enum"].length; i++) {
		var enumVal = schema["enum"][i];
		if (recursiveCompare(data, enumVal)) {
			return null;
		}
	}
	return this.createError(ErrorCodes.ENUM_MISMATCH, {value: (typeof JSON !== 'undefined') ? JSON.stringify(data) : data});
};

ValidatorContext.prototype.validateNumeric = function validateNumeric(data, schema, dataPointerPath) {
	return this.validateMultipleOf(data, schema, dataPointerPath)
		|| this.validateMinMax(data, schema, dataPointerPath)
		|| null;
};

ValidatorContext.prototype.validateMultipleOf = function validateMultipleOf(data, schema) {
	var multipleOf = schema.multipleOf || schema.divisibleBy;
	if (multipleOf === undefined) {
		return null;
	}
	if (typeof data === "number") {
		if (data % multipleOf !== 0) {
			return this.createError(ErrorCodes.NUMBER_MULTIPLE_OF, {value: data, multipleOf: multipleOf});
		}
	}
	return null;
};

ValidatorContext.prototype.validateMinMax = function validateMinMax(data, schema) {
	if (typeof data !== "number") {
		return null;
	}
	if (schema.minimum !== undefined) {
		if (data < schema.minimum) {
			return this.createError(ErrorCodes.NUMBER_MINIMUM, {value: data, minimum: schema.minimum}).prefixWith(null, "minimum");
		}
		if (schema.exclusiveMinimum && data === schema.minimum) {
			return this.createError(ErrorCodes.NUMBER_MINIMUM_EXCLUSIVE, {value: data, minimum: schema.minimum}).prefixWith(null, "exclusiveMinimum");
		}
	}
	if (schema.maximum !== undefined) {
		if (data > schema.maximum) {
			return this.createError(ErrorCodes.NUMBER_MAXIMUM, {value: data, maximum: schema.maximum}).prefixWith(null, "maximum");
		}
		if (schema.exclusiveMaximum && data === schema.maximum) {
			return this.createError(ErrorCodes.NUMBER_MAXIMUM_EXCLUSIVE, {value: data, maximum: schema.maximum}).prefixWith(null, "exclusiveMaximum");
		}
	}
	return null;
};

ValidatorContext.prototype.validateString = function validateString(data, schema, dataPointerPath) {
	return this.validateStringLength(data, schema, dataPointerPath)
		|| this.validateStringPattern(data, schema, dataPointerPath)
		|| null;
};

ValidatorContext.prototype.validateStringLength = function validateStringLength(data, schema) {
	if (typeof data !== "string") {
		return null;
	}
	if (schema.minLength !== undefined) {
		if (data.length < schema.minLength) {
			return this.createError(ErrorCodes.STRING_LENGTH_SHORT, {length: data.length, minimum: schema.minLength}).prefixWith(null, "minLength");
		}
	}
	if (schema.maxLength !== undefined) {
		if (data.length > schema.maxLength) {
			return this.createError(ErrorCodes.STRING_LENGTH_LONG, {length: data.length, maximum: schema.maxLength}).prefixWith(null, "maxLength");
		}
	}
	return null;
};

ValidatorContext.prototype.validateStringPattern = function validateStringPattern(data, schema) {
	if (typeof data !== "string" || schema.pattern === undefined) {
		return null;
	}
	var regexp = new RegExp(schema.pattern);
	if (!regexp.test(data)) {
		return this.createError(ErrorCodes.STRING_PATTERN, {pattern: schema.pattern}).prefixWith(null, "pattern");
	}
	return null;
};
ValidatorContext.prototype.validateArray = function validateArray(data, schema, dataPointerPath) {
	if (!Array.isArray(data)) {
		return null;
	}
	return this.validateArrayLength(data, schema, dataPointerPath)
		|| this.validateArrayUniqueItems(data, schema, dataPointerPath)
		|| this.validateArrayItems(data, schema, dataPointerPath)
		|| null;
};

ValidatorContext.prototype.validateArrayLength = function validateArrayLength(data, schema) {
	var error;
	if (schema.minItems !== undefined) {
		if (data.length < schema.minItems) {
			error = (this.createError(ErrorCodes.ARRAY_LENGTH_SHORT, {length: data.length, minimum: schema.minItems})).prefixWith(null, "minItems");
			if (this.handleError(error)) {
				return error;
			}
		}
	}
	if (schema.maxItems !== undefined) {
		if (data.length > schema.maxItems) {
			error = (this.createError(ErrorCodes.ARRAY_LENGTH_LONG, {length: data.length, maximum: schema.maxItems})).prefixWith(null, "maxItems");
			if (this.handleError(error)) {
				return error;
			}
		}
	}
	return null;
};

ValidatorContext.prototype.validateArrayUniqueItems = function validateArrayUniqueItems(data, schema) {
	if (schema.uniqueItems) {
		for (var i = 0; i < data.length; i++) {
			for (var j = i + 1; j < data.length; j++) {
				if (recursiveCompare(data[i], data[j])) {
					var error = (this.createError(ErrorCodes.ARRAY_UNIQUE, {match1: i, match2: j})).prefixWith(null, "uniqueItems");
					if (this.handleError(error)) {
						return error;
					}
				}
			}
		}
	}
	return null;
};

ValidatorContext.prototype.validateArrayItems = function validateArrayItems(data, schema, dataPointerPath) {
	if (schema.items === undefined) {
		return null;
	}
	var error, i;
	if (Array.isArray(schema.items)) {
		for (i = 0; i < data.length; i++) {
			if (i < schema.items.length) {
				if (error = this.validateAll(data[i], schema.items[i], [i], ["items", i], dataPointerPath + "/" + i)) {
					return error;
				}
			} else if (schema.additionalItems !== undefined) {
				if (typeof schema.additionalItems === "boolean") {
					if (!schema.additionalItems) {
						error = (this.createError(ErrorCodes.ARRAY_ADDITIONAL_ITEMS, {})).prefixWith("" + i, "additionalItems");
						if (this.handleError(error)) {
							return error;
						}
					}
				} else if (error = this.validateAll(data[i], schema.additionalItems, [i], ["additionalItems"], dataPointerPath + "/" + i)) {
					return error;
				}
			}
		}
	} else {
		for (i = 0; i < data.length; i++) {
			if (error = this.validateAll(data[i], schema.items, [i], ["items"], dataPointerPath + "/" + i)) {
				return error;
			}
		}
	}
	return null;
};

ValidatorContext.prototype.validateObject = function validateObject(data, schema, dataPointerPath) {
	if (typeof data !== "object" || data === null || Array.isArray(data)) {
		return null;
	}
	return this.validateObjectMinMaxProperties(data, schema, dataPointerPath)
		|| this.validateObjectRequiredProperties(data, schema, dataPointerPath)
		|| this.validateObjectProperties(data, schema, dataPointerPath)
		|| this.validateObjectDependencies(data, schema, dataPointerPath)
		|| null;
};

ValidatorContext.prototype.validateObjectMinMaxProperties = function validateObjectMinMaxProperties(data, schema) {
	var keys = Object.keys(data);
	var error;
	if (schema.minProperties !== undefined) {
		if (keys.length < schema.minProperties) {
			error = this.createError(ErrorCodes.OBJECT_PROPERTIES_MINIMUM, {propertyCount: keys.length, minimum: schema.minProperties}).prefixWith(null, "minProperties");
			if (this.handleError(error)) {
				return error;
			}
		}
	}
	if (schema.maxProperties !== undefined) {
		if (keys.length > schema.maxProperties) {
			error = this.createError(ErrorCodes.OBJECT_PROPERTIES_MAXIMUM, {propertyCount: keys.length, maximum: schema.maxProperties}).prefixWith(null, "maxProperties");
			if (this.handleError(error)) {
				return error;
			}
		}
	}
	return null;
};

ValidatorContext.prototype.validateObjectRequiredProperties = function validateObjectRequiredProperties(data, schema) {
	if (schema.required !== undefined) {
		for (var i = 0; i < schema.required.length; i++) {
			var key = schema.required[i];
			if (data[key] === undefined) {
				var error = this.createError(ErrorCodes.OBJECT_REQUIRED, {key: key}).prefixWith(null, "" + i).prefixWith(null, "required");
				if (this.handleError(error)) {
					return error;
				}
			}
		}
	}
	return null;
};

ValidatorContext.prototype.validateObjectProperties = function validateObjectProperties(data, schema, dataPointerPath) {
	var error;
	for (var key in data) {
		var keyPointerPath = dataPointerPath + "/" + key.replace(/~/g, '~0').replace(/\//g, '~1');
		var foundMatch = false;
		if (schema.properties !== undefined && schema.properties[key] !== undefined) {
			foundMatch = true;
			if (error = this.validateAll(data[key], schema.properties[key], [key], ["properties", key], keyPointerPath)) {
				return error;
			}
		}
		if (schema.patternProperties !== undefined) {
			for (var patternKey in schema.patternProperties) {
				var regexp = new RegExp(patternKey);
				if (regexp.test(key)) {
					foundMatch = true;
					if (error = this.validateAll(data[key], schema.patternProperties[patternKey], [key], ["patternProperties", patternKey], keyPointerPath)) {
						return error;
					}
				}
			}
		}
		if (!foundMatch) {
			if (schema.additionalProperties !== undefined) {
				if (this.trackUnknownProperties) {
					this.knownPropertyPaths[keyPointerPath] = true;
					delete this.unknownPropertyPaths[keyPointerPath];
				}
				if (typeof schema.additionalProperties === "boolean") {
					if (!schema.additionalProperties) {
						error = this.createError(ErrorCodes.OBJECT_ADDITIONAL_PROPERTIES, {}).prefixWith(key, "additionalProperties");
						if (this.handleError(error)) {
							return error;
						}
					}
				} else {
					if (error = this.validateAll(data[key], schema.additionalProperties, [key], ["additionalProperties"], keyPointerPath)) {
						return error;
					}
				}
			} else if (this.trackUnknownProperties && !this.knownPropertyPaths[keyPointerPath]) {
				this.unknownPropertyPaths[keyPointerPath] = true;
			}
		} else if (this.trackUnknownProperties) {
			this.knownPropertyPaths[keyPointerPath] = true;
			delete this.unknownPropertyPaths[keyPointerPath];
		}
	}
	return null;
};

ValidatorContext.prototype.validateObjectDependencies = function validateObjectDependencies(data, schema, dataPointerPath) {
	var error;
	if (schema.dependencies !== undefined) {
		for (var depKey in schema.dependencies) {
			if (data[depKey] !== undefined) {
				var dep = schema.dependencies[depKey];
				if (typeof dep === "string") {
					if (data[dep] === undefined) {
						error = this.createError(ErrorCodes.OBJECT_DEPENDENCY_KEY, {key: depKey, missing: dep}).prefixWith(null, depKey).prefixWith(null, "dependencies");
						if (this.handleError(error)) {
							return error;
						}
					}
				} else if (Array.isArray(dep)) {
					for (var i = 0; i < dep.length; i++) {
						var requiredKey = dep[i];
						if (data[requiredKey] === undefined) {
							error = this.createError(ErrorCodes.OBJECT_DEPENDENCY_KEY, {key: depKey, missing: requiredKey}).prefixWith(null, "" + i).prefixWith(null, depKey).prefixWith(null, "dependencies");
							if (this.handleError(error)) {
								return error;
							}
						}
					}
				} else {
					if (error = this.validateAll(data, dep, [], ["dependencies", depKey], dataPointerPath)) {
						return error;
					}
				}
			}
		}
	}
	return null;
};

ValidatorContext.prototype.validateCombinations = function validateCombinations(data, schema, dataPointerPath) {
	return this.validateAllOf(data, schema, dataPointerPath)
		|| this.validateAnyOf(data, schema, dataPointerPath)
		|| this.validateOneOf(data, schema, dataPointerPath)
		|| this.validateNot(data, schema, dataPointerPath)
		|| null;
};

ValidatorContext.prototype.validateAllOf = function validateAllOf(data, schema, dataPointerPath) {
	if (schema.allOf === undefined) {
		return null;
	}
	var error;
	for (var i = 0; i < schema.allOf.length; i++) {
		var subSchema = schema.allOf[i];
		if (error = this.validateAll(data, subSchema, [], ["allOf", i], dataPointerPath)) {
			return error;
		}
	}
	return null;
};

ValidatorContext.prototype.validateAnyOf = function validateAnyOf(data, schema, dataPointerPath) {
	if (schema.anyOf === undefined) {
		return null;
	}
	var errors = [];
	var startErrorCount = this.errors.length;
	var oldUnknownPropertyPaths, oldKnownPropertyPaths;
	if (this.trackUnknownProperties) {
		oldUnknownPropertyPaths = this.unknownPropertyPaths;
		oldKnownPropertyPaths = this.knownPropertyPaths;
	}
	var errorAtEnd = true;
	for (var i = 0; i < schema.anyOf.length; i++) {
		if (this.trackUnknownProperties) {
			this.unknownPropertyPaths = {};
			this.knownPropertyPaths = {};
		}
		var subSchema = schema.anyOf[i];

		var errorCount = this.errors.length;
		var error = this.validateAll(data, subSchema, [], ["anyOf", i], dataPointerPath);

		if (error === null && errorCount === this.errors.length) {
			this.errors = this.errors.slice(0, startErrorCount);

			if (this.trackUnknownProperties) {
				for (var knownKey in this.knownPropertyPaths) {
					oldKnownPropertyPaths[knownKey] = true;
					delete oldUnknownPropertyPaths[knownKey];
				}
				for (var unknownKey in this.unknownPropertyPaths) {
					if (!oldKnownPropertyPaths[unknownKey]) {
						oldUnknownPropertyPaths[unknownKey] = true;
					}
				}
				// We need to continue looping so we catch all the property definitions, but we don't want to return an error
				errorAtEnd = false;
				continue;
			}

			return null;
		}
		if (error) {
			errors.push(error.prefixWith(null, "" + i).prefixWith(null, "anyOf"));
		}
	}
	if (this.trackUnknownProperties) {
		this.unknownPropertyPaths = oldUnknownPropertyPaths;
		this.knownPropertyPaths = oldKnownPropertyPaths;
	}
	if (errorAtEnd) {
		errors = errors.concat(this.errors.slice(startErrorCount));
		this.errors = this.errors.slice(0, startErrorCount);
		return this.createError(ErrorCodes.ANY_OF_MISSING, {}, "", "/anyOf", errors);
	}
};

ValidatorContext.prototype.validateOneOf = function validateOneOf(data, schema, dataPointerPath) {
	if (schema.oneOf === undefined) {
		return null;
	}
	var validIndex = null;
	var errors = [];
	var startErrorCount = this.errors.length;
	var oldUnknownPropertyPaths, oldKnownPropertyPaths;
	if (this.trackUnknownProperties) {
		oldUnknownPropertyPaths = this.unknownPropertyPaths;
		oldKnownPropertyPaths = this.knownPropertyPaths;
	}
	for (var i = 0; i < schema.oneOf.length; i++) {
		if (this.trackUnknownProperties) {
			this.unknownPropertyPaths = {};
			this.knownPropertyPaths = {};
		}
		var subSchema = schema.oneOf[i];

		var errorCount = this.errors.length;
		var error = this.validateAll(data, subSchema, [], ["oneOf", i], dataPointerPath);

		if (error === null && errorCount === this.errors.length) {
			if (validIndex === null) {
				validIndex = i;
			} else {
				this.errors = this.errors.slice(0, startErrorCount);
				return this.createError(ErrorCodes.ONE_OF_MULTIPLE, {index1: validIndex, index2: i}, "", "/oneOf");
			}
			if (this.trackUnknownProperties) {
				for (var knownKey in this.knownPropertyPaths) {
					oldKnownPropertyPaths[knownKey] = true;
					delete oldUnknownPropertyPaths[knownKey];
				}
				for (var unknownKey in this.unknownPropertyPaths) {
					if (!oldKnownPropertyPaths[unknownKey]) {
						oldUnknownPropertyPaths[unknownKey] = true;
					}
				}
			}
		} else if (error) {
			errors.push(error.prefixWith(null, "" + i).prefixWith(null, "oneOf"));
		}
	}
	if (this.trackUnknownProperties) {
		this.unknownPropertyPaths = oldUnknownPropertyPaths;
		this.knownPropertyPaths = oldKnownPropertyPaths;
	}
	if (validIndex === null) {
		errors = errors.concat(this.errors.slice(startErrorCount));
		this.errors = this.errors.slice(0, startErrorCount);
		return this.createError(ErrorCodes.ONE_OF_MISSING, {}, "", "/oneOf", errors);
	} else {
		this.errors = this.errors.slice(0, startErrorCount);
	}
	return null;
};

ValidatorContext.prototype.validateNot = function validateNot(data, schema, dataPointerPath) {
	if (schema.not === undefined) {
		return null;
	}
	var oldErrorCount = this.errors.length;
	var oldUnknownPropertyPaths, oldKnownPropertyPaths;
	if (this.trackUnknownProperties) {
		oldUnknownPropertyPaths = this.unknownPropertyPaths;
		oldKnownPropertyPaths = this.knownPropertyPaths;
		this.unknownPropertyPaths = {};
		this.knownPropertyPaths = {};
	}
	var error = this.validateAll(data, schema.not, null, null, dataPointerPath);
	var notErrors = this.errors.slice(oldErrorCount);
	this.errors = this.errors.slice(0, oldErrorCount);
	if (this.trackUnknownProperties) {
		this.unknownPropertyPaths = oldUnknownPropertyPaths;
		this.knownPropertyPaths = oldKnownPropertyPaths;
	}
	if (error === null && notErrors.length === 0) {
		return this.createError(ErrorCodes.NOT_PASSED, {}, "", "/not");
	}
	return null;
};

// parseURI() and resolveUrl() are from https://gist.github.com/1088850
//   -  released as public domain by author ("Yaffle") - see comments on gist

function parseURI(url) {
	var m = String(url).replace(/^\s+|\s+$/g, '').match(/^([^:\/?#]+:)?(\/\/(?:[^:@]*(?::[^:@]*)?@)?(([^:\/?#]*)(?::(\d*))?))?([^?#]*)(\?[^#]*)?(#[\s\S]*)?/);
	// authority = '//' + user + ':' + pass '@' + hostname + ':' port
	return (m ? {
		href     : m[0] || '',
		protocol : m[1] || '',
		authority: m[2] || '',
		host     : m[3] || '',
		hostname : m[4] || '',
		port     : m[5] || '',
		pathname : m[6] || '',
		search   : m[7] || '',
		hash     : m[8] || ''
	} : null);
}

function resolveUrl(base, href) {// RFC 3986

	function removeDotSegments(input) {
		var output = [];
		input.replace(/^(\.\.?(\/|$))+/, '')
			.replace(/\/(\.(\/|$))+/g, '/')
			.replace(/\/\.\.$/, '/../')
			.replace(/\/?[^\/]*/g, function (p) {
				if (p === '/..') {
					output.pop();
				} else {
					output.push(p);
				}
		});
		return output.join('').replace(/^\//, input.charAt(0) === '/' ? '/' : '');
	}

	href = parseURI(href || '');
	base = parseURI(base || '');

	return !href || !base ? null : (href.protocol || base.protocol) +
		(href.protocol || href.authority ? href.authority : base.authority) +
		removeDotSegments(href.protocol || href.authority || href.pathname.charAt(0) === '/' ? href.pathname : (href.pathname ? ((base.authority && !base.pathname ? '/' : '') + base.pathname.slice(0, base.pathname.lastIndexOf('/') + 1) + href.pathname) : base.pathname)) +
		(href.protocol || href.authority || href.pathname ? href.search : (href.search || base.search)) +
		href.hash;
}

function getDocumentUri(uri) {
	return uri.split('#')[0];
}
function normSchema(schema, baseUri) {
	if (schema && typeof schema === "object") {
		if (baseUri === undefined) {
			baseUri = schema.id;
		} else if (typeof schema.id === "string") {
			baseUri = resolveUrl(baseUri, schema.id);
			schema.id = baseUri;
		}
		if (Array.isArray(schema)) {
			for (var i = 0; i < schema.length; i++) {
				normSchema(schema[i], baseUri);
			}
		} else {
			if (typeof schema['$ref'] === "string") {
				schema['$ref'] = resolveUrl(baseUri, schema['$ref']);
			}
			for (var key in schema) {
				if (key !== "enum") {
					normSchema(schema[key], baseUri);
				}
			}
		}
	}
}

var ErrorCodes = {
	INVALID_TYPE: 0,
	ENUM_MISMATCH: 1,
	ANY_OF_MISSING: 10,
	ONE_OF_MISSING: 11,
	ONE_OF_MULTIPLE: 12,
	NOT_PASSED: 13,
	// Numeric errors
	NUMBER_MULTIPLE_OF: 100,
	NUMBER_MINIMUM: 101,
	NUMBER_MINIMUM_EXCLUSIVE: 102,
	NUMBER_MAXIMUM: 103,
	NUMBER_MAXIMUM_EXCLUSIVE: 104,
	// String errors
	STRING_LENGTH_SHORT: 200,
	STRING_LENGTH_LONG: 201,
	STRING_PATTERN: 202,
	// Object errors
	OBJECT_PROPERTIES_MINIMUM: 300,
	OBJECT_PROPERTIES_MAXIMUM: 301,
	OBJECT_REQUIRED: 302,
	OBJECT_ADDITIONAL_PROPERTIES: 303,
	OBJECT_DEPENDENCY_KEY: 304,
	// Array errors
	ARRAY_LENGTH_SHORT: 400,
	ARRAY_LENGTH_LONG: 401,
	ARRAY_UNIQUE: 402,
	ARRAY_ADDITIONAL_ITEMS: 403,
	// Custom/user-defined errors
	FORMAT_CUSTOM: 500,
	KEYWORD_CUSTOM: 501,
	// Schema structure
	CIRCULAR_REFERENCE: 600,
	// Non-standard validation options
	UNKNOWN_PROPERTY: 1000
};
var ErrorCodeLookup = {};
for (var key in ErrorCodes) {
	ErrorCodeLookup[ErrorCodes[key]] = key;
}
var ErrorMessagesDefault = {
	INVALID_TYPE: "invalid type: {type} (expected {expected})",
	ENUM_MISMATCH: "No enum match for: {value}",
	ANY_OF_MISSING: "Data does not match any schemas from \"anyOf\"",
	ONE_OF_MISSING: "Data does not match any schemas from \"oneOf\"",
	ONE_OF_MULTIPLE: "Data is valid against more than one schema from \"oneOf\": indices {index1} and {index2}",
	NOT_PASSED: "Data matches schema from \"not\"",
	// Numeric errors
	NUMBER_MULTIPLE_OF: "Value {value} is not a multiple of {multipleOf}",
	NUMBER_MINIMUM: "Value {value} is less than minimum {minimum}",
	NUMBER_MINIMUM_EXCLUSIVE: "Value {value} is equal to exclusive minimum {minimum}",
	NUMBER_MAXIMUM: "Value {value} is greater than maximum {maximum}",
	NUMBER_MAXIMUM_EXCLUSIVE: "Value {value} is equal to exclusive maximum {maximum}",
	// String errors
	STRING_LENGTH_SHORT: "String is too short ({length} chars), minimum {minimum}",
	STRING_LENGTH_LONG: "String is too long ({length} chars), maximum {maximum}",
	STRING_PATTERN: "String does not match pattern: {pattern}",
	// Object errors
	OBJECT_PROPERTIES_MINIMUM: "Too few properties defined ({propertyCount}), minimum {minimum}",
	OBJECT_PROPERTIES_MAXIMUM: "Too many properties defined ({propertyCount}), maximum {maximum}",
	OBJECT_REQUIRED: "Missing required property: {key}",
	OBJECT_ADDITIONAL_PROPERTIES: "Additional properties not allowed",
	OBJECT_DEPENDENCY_KEY: "Dependency failed - key must exist: {missing} (due to key: {key})",
	// Array errors
	ARRAY_LENGTH_SHORT: "Array is too short ({length}), minimum {minimum}",
	ARRAY_LENGTH_LONG: "Array is too long ({length}), maximum {maximum}",
	ARRAY_UNIQUE: "Array items are not unique (indices {match1} and {match2})",
	ARRAY_ADDITIONAL_ITEMS: "Additional items not allowed",
	// Format errors
	FORMAT_CUSTOM: "Format validation failed ({message})",
	KEYWORD_CUSTOM: "Keyword failed: {key} ({message})",
	// Schema structure
	CIRCULAR_REFERENCE: "Circular $refs: {urls}",
	// Non-standard validation options
	UNKNOWN_PROPERTY: "Unknown property (not in schema)"
};

function ValidationError(code, message, dataPath, schemaPath, subErrors) {
	Error.call(this);
	if (code === undefined) {
		throw new Error ("No code supplied for error: "+ message);
	}
	this.message = message;
	this.code = code;
	this.dataPath = dataPath || "";
	this.schemaPath = schemaPath || "";
	this.subErrors = subErrors || null;

	var err = new Error(this.message);
	this.stack = err.stack || err.stacktrace;
	if (!this.stack) {
		try {
			throw err;
		}
		catch(err) {
			this.stack = err.stack || err.stacktrace;
		}
	}
}
ValidationError.prototype = Object.create(Error.prototype);
ValidationError.prototype.constructor = ValidationError;
ValidationError.prototype.name = 'ValidationError';

ValidationError.prototype.prefixWith = function (dataPrefix, schemaPrefix) {
	if (dataPrefix !== null) {
		dataPrefix = dataPrefix.replace(/~/g, "~0").replace(/\//g, "~1");
		this.dataPath = "/" + dataPrefix + this.dataPath;
	}
	if (schemaPrefix !== null) {
		schemaPrefix = schemaPrefix.replace(/~/g, "~0").replace(/\//g, "~1");
		this.schemaPath = "/" + schemaPrefix + this.schemaPath;
	}
	if (this.subErrors !== null) {
		for (var i = 0; i < this.subErrors.length; i++) {
			this.subErrors[i].prefixWith(dataPrefix, schemaPrefix);
		}
	}
	return this;
};

function isTrustedUrl(baseUrl, testUrl) {
	if(testUrl.substring(0, baseUrl.length) === baseUrl){
		var remainder = testUrl.substring(baseUrl.length);
		if ((testUrl.length > 0 && testUrl.charAt(baseUrl.length - 1) === "/")
			|| remainder.charAt(0) === "#"
			|| remainder.charAt(0) === "?") {
			return true;
		}
	}
	return false;
}

var languages = {};
function createApi(language) {
	var globalContext = new ValidatorContext();
	var currentLanguage = language || 'en';
	var api = {
		addFormat: function () {
			globalContext.addFormat.apply(globalContext, arguments);
		},
		language: function (code) {
			if (!code) {
				return currentLanguage;
			}
			if (!languages[code]) {
				code = code.split('-')[0]; // fall back to base language
			}
			if (languages[code]) {
				currentLanguage = code;
				return code; // so you can tell if fall-back has happened
			}
			return false;
		},
		addLanguage: function (code, messageMap) {
			var key;
			for (key in ErrorCodes) {
				if (messageMap[key] && !messageMap[ErrorCodes[key]]) {
					messageMap[ErrorCodes[key]] = messageMap[key];
				}
			}
			var rootCode = code.split('-')[0];
			if (!languages[rootCode]) { // use for base language if not yet defined
				languages[code] = messageMap;
				languages[rootCode] = messageMap;
			} else {
				languages[code] = Object.create(languages[rootCode]);
				for (key in messageMap) {
					if (typeof languages[rootCode][key] === 'undefined') {
						languages[rootCode][key] = messageMap[key];
					}
					languages[code][key] = messageMap[key];
				}
			}
			return this;
		},
		freshApi: function (language) {
			var result = createApi();
			if (language) {
				result.language(language);
			}
			return result;
		},
		validate: function (data, schema, checkRecursive, banUnknownProperties) {
			var context = new ValidatorContext(globalContext, false, languages[currentLanguage], checkRecursive, banUnknownProperties);
			if (typeof schema === "string") {
				schema = {"$ref": schema};
			}
			context.addSchema("", schema);
			var error = context.validateAll(data, schema, null, null, "");
			if (!error && banUnknownProperties) {
				error = context.banUnknownProperties();
			}
			this.error = error;
			this.missing = context.missing;
			this.valid = (error === null);
			return this.valid;
		},
		validateResult: function () {
			var result = {};
			this.validate.apply(result, arguments);
			return result;
		},
		validateMultiple: function (data, schema, checkRecursive, banUnknownProperties) {
			var context = new ValidatorContext(globalContext, true, languages[currentLanguage], checkRecursive, banUnknownProperties);
			if (typeof schema === "string") {
				schema = {"$ref": schema};
			}
			context.addSchema("", schema);
			context.validateAll(data, schema, null, null, "");
			if (banUnknownProperties) {
				context.banUnknownProperties();
			}
			var result = {};
			result.errors = context.errors;
			result.missing = context.missing;
			result.valid = (result.errors.length === 0);
			return result;
		},
		addSchema: function () {
			return globalContext.addSchema.apply(globalContext, arguments);
		},
		getSchema: function () {
			return globalContext.getSchema.apply(globalContext, arguments);
		},
		getSchemaMap: function () {
			return globalContext.getSchemaMap.apply(globalContext, arguments);
		},
		getSchemaUris: function () {
			return globalContext.getSchemaUris.apply(globalContext, arguments);
		},
		getMissingUris: function () {
			return globalContext.getMissingUris.apply(globalContext, arguments);
		},
		dropSchemas: function () {
			globalContext.dropSchemas.apply(globalContext, arguments);
		},
		defineKeyword: function () {
			globalContext.defineKeyword.apply(globalContext, arguments);
		},
		defineError: function (codeName, codeNumber, defaultMessage) {
			if (typeof codeName !== 'string' || !/^[A-Z]+(_[A-Z]+)*$/.test(codeName)) {
				throw new Error('Code name must be a string in UPPER_CASE_WITH_UNDERSCORES');
			}
			if (typeof codeNumber !== 'number' || codeNumber%1 !== 0 || codeNumber < 10000) {
				throw new Error('Code number must be an integer > 10000');
			}
			if (typeof ErrorCodes[codeName] !== 'undefined') {
				throw new Error('Error already defined: ' + codeName + ' as ' + ErrorCodes[codeName]);
			}
			if (typeof ErrorCodeLookup[codeNumber] !== 'undefined') {
				throw new Error('Error code already used: ' + ErrorCodeLookup[codeNumber] + ' as ' + codeNumber);
			}
			ErrorCodes[codeName] = codeNumber;
			ErrorCodeLookup[codeNumber] = codeName;
			ErrorMessagesDefault[codeName] = ErrorMessagesDefault[codeNumber] = defaultMessage;
			for (var langCode in languages) {
				var language = languages[langCode];
				if (language[codeName]) {
					language[codeNumber] = language[codeNumber] || language[codeName];
				}
			}
		},
		reset: function () {
			globalContext.reset();
			this.error = null;
			this.missing = [];
			this.valid = true;
		},
		missing: [],
		error: null,
		valid: true,
		normSchema: normSchema,
		resolveUrl: resolveUrl,
		getDocumentUri: getDocumentUri,
		errorCodes: ErrorCodes
	};
	return api;
}

var tv4 = createApi();
tv4.addLanguage('en-gb', ErrorMessagesDefault);

//legacy property
tv4.tv4 = tv4;

return tv4; // used by _header.js to globalise.

}));
},{}]},{},[1]);