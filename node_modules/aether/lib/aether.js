(function() {
  var Aether, defaults, esprima, execution, interpreter, languages, optionsValidator, problems, protectBuiltins, self, transforms, traversal, _, _ref, _ref1, _ref2,
    __slice = [].slice;

  if ((typeof window !== "undefined" && window !== null) && (typeof self === "undefined" || self === null)) {
    self = window;
  }

  if ((typeof global !== "undefined" && global !== null) && (self == null)) {
    self = global;
  }

  if (self.self == null) {
    self.self = self;
  }

  _ = (_ref = (_ref1 = (_ref2 = typeof window !== "undefined" && window !== null ? window._ : void 0) != null ? _ref2 : self != null ? self._ : void 0) != null ? _ref1 : typeof global !== "undefined" && global !== null ? global._ : void 0) != null ? _ref : require('lodash');

  esprima = require('esprima');

  defaults = require('./defaults');

  problems = require('./problems');

  execution = require('./execution');

  traversal = require('./traversal');

  transforms = require('./transforms');

  protectBuiltins = require('./protectBuiltins');

  optionsValidator = require('./validators/options');

  languages = require('./languages/languages');

  interpreter = require('./interpreter');

  module.exports = Aether = (function() {
    Aether.execution = execution;

    Aether.addGlobal = protectBuiltins.addGlobal;

    Aether.replaceBuiltin = protectBuiltins.replaceBuiltin;

    Aether.globals = protectBuiltins.addedGlobals;

    Aether.prototype.depth = 0;

    Aether.prototype.getAddedGlobals = function() {
      return protectBuiltins.addedGlobals;
    };

    Aether.prototype.addGlobal = function(name, value) {
      if (this.esperEngine != null) {
        return this.esperEngine.addGlobal(name, value);
      }
    };

    function Aether(options) {
      var defaultsCopy, validationResults;
      if (options == null) {
        options = {};
      }
      validationResults = optionsValidator(options);
      if (!validationResults.valid) {
        throw new Error("Aether options are invalid: " + JSON.stringify(validationResults.errors, null, 4));
      }
      this.originalOptions = _.cloneDeep(options);
      defaultsCopy = _.cloneDeep(defaults);
      this.options = _.merge(defaultsCopy, options);
      this.setLanguage(this.options.language);
      this.allGlobals = this.options.globals.concat(protectBuiltins.builtinNames, Object.keys(this.language.runtimeGlobals));
      Object.defineProperty(this, 'lastStatementRange', {
        get: function() {
          var rng, _ref3, _ref4, _ref5;
          rng = (_ref3 = this.esperEngine) != null ? (_ref4 = _ref3.evaluator) != null ? (_ref5 = _ref4.lastASTNodeProcessed) != null ? _ref5.originalRange : void 0 : void 0 : void 0;
          if (rng) {
            return [rng.start, rng.end];
          }
        }
      });
    }

    Aether.prototype.setLanguage = function(language) {
      var validationResults;
      if (this.language && this.language.id === language) {
        return;
      }
      validationResults = optionsValidator({
        language: language
      });
      if (!validationResults.valid) {
        throw new Error("New language is invalid: " + JSON.stringify(validationResults.errors, null, 4));
      }
      this.originalOptions.language = this.options.language = language;
      this.language = new languages[language]();
      if (this.languageJS == null) {
        this.languageJS = language === 'javascript' ? this.language : new languages.javascript('ES5');
      }
      this.reset();
      return language;
    };

    Aether.prototype.reset = function() {
      this.problems = {
        errors: [],
        warnings: [],
        infos: []
      };
      this.style = {};
      this.flow = {};
      this.metrics = {};
      return this.pure = null;
    };

    Aether.prototype.serialize = function() {
      return _.pick(this, ['originalOptions', 'raw', 'pure', 'problems', 'flow', 'metrics', 'style', 'ast']);
    };

    Aether.deserialize = function(serialized) {
      var aether, prop, val;
      aether = new Aether(serialized.originalOptions);
      for (prop in serialized) {
        val = serialized[prop];
        if (prop !== "originalOptions") {
          aether[prop] = val;
        }
      }
      return aether;
    };

    Aether.prototype.canTranspile = function(rawCode, thorough) {
      if (thorough == null) {
        thorough = false;
      }
      if (!rawCode) {
        return true;
      }
      if (this.language.obviouslyCannotTranspile(rawCode)) {
        return false;
      }
      if (!thorough) {
        return true;
      }
      return this.lint(rawCode, this).errors.length === 0;
    };

    Aether.prototype.hasChangedSignificantly = function(a, b, careAboutLineNumbers, careAboutLint) {
      if (careAboutLineNumbers == null) {
        careAboutLineNumbers = false;
      }
      if (careAboutLint == null) {
        careAboutLint = false;
      }
      if (!((a != null) && (b != null))) {
        return true;
      }
      if (a === b) {
        return false;
      }
      if (careAboutLineNumbers && this.language.hasChangedLineNumbers(a, b)) {
        return true;
      }
      if (careAboutLint && this.hasChangedLintProblems(a, b)) {
        return true;
      }
      return this.language.hasChangedASTs(a, b);
    };

    Aether.prototype.hasChangedLintProblems = function(a, b) {
      var aLintProblems, bLintProblems, p;
      aLintProblems = (function() {
        var _i, _len, _ref3, _results;
        _ref3 = this.getAllProblems(this.lint(a));
        _results = [];
        for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
          p = _ref3[_i];
          _results.push([p.id, p.message, p.hint]);
        }
        return _results;
      }).call(this);
      bLintProblems = (function() {
        var _i, _len, _ref3, _results;
        _ref3 = this.getAllProblems(this.lint(b));
        _results = [];
        for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
          p = _ref3[_i];
          _results.push([p.id, p.message, p.hint]);
        }
        return _results;
      }).call(this);
      return !_.isEqual(aLintProblems, bLintProblems);
    };

    Aether.prototype.beautify = function(rawCode) {
      return this.language.beautify(rawCode, this);
    };

    Aether.prototype.transpile = function(raw) {
      var loopProblems, rawCode, _ref3, _ref4;
      this.raw = raw;
      this.reset();
      rawCode = this.raw;
      if (this.options.simpleLoops) {
        rawCode = _.cloneDeep(this.raw);
        _ref3 = this.language.replaceLoops(rawCode), rawCode = _ref3[0], this.replacedLoops = _ref3[1], loopProblems = _ref3[2];
      }
      this.problems = this.lint(rawCode);
      if (loopProblems == null) {
        loopProblems = [];
      }
      if (loopProblems.length > 0) {
        (_ref4 = this.problems.warnings).push.apply(_ref4, loopProblems);
      }
      this.pure = this.purifyCode(rawCode);
      return this.pure;
    };

    Aether.prototype.lint = function(rawCode) {
      var lintProblems, problem, _i, _len, _ref3;
      lintProblems = {
        errors: [],
        warnings: [],
        infos: []
      };
      _ref3 = this.language.lint(rawCode, this);
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        problem = _ref3[_i];
        this.addProblem(problem, lintProblems);
      }
      return lintProblems;
    };

    Aether.prototype.createFunction = function() {
      return interpreter.createFunction(this);
    };

    Aether.prototype.createMethod = function(thisValue) {
      return _.bind(this.createFunction(), thisValue);
    };

    Aether.prototype.run = function() {
      var args, error, fn, problem;
      fn = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      try {
        if (fn == null) {
          fn = this.createFunction();
        }
      } catch (_error) {
        error = _error;
        problem = this.createUserCodeProblem({
          error: error,
          code: this.raw,
          type: 'transpile',
          reporter: 'aether'
        });
        this.addProblem(problem);
        return;
      }
      try {
        return fn.apply(null, args);
      } catch (_error) {
        error = _error;
        problem = this.createUserCodeProblem({
          error: error,
          code: this.raw,
          type: 'runtime',
          reporter: 'aether'
        });
        this.addProblem(problem);
      }
    };

    Aether.prototype.createUserCodeProblem = problems.createUserCodeProblem;

    Aether.prototype.createThread = function(fx) {
      return interpreter.createThread(this, fx);
    };

    Aether.prototype.updateProblemContext = function(problemContext) {
      return this.options.problemContext = problemContext;
    };

    Aether.prototype.addProblem = function(problem, problems) {
      if (problems == null) {
        problems = null;
      }
      if (problem.level === "ignore") {
        return;
      }
      (problems != null ? problems : this.problems)[problem.level + "s"].push(problem);
      return problem;
    };

    Aether.prototype.getAllProblems = function(problems) {
      return _.flatten(_.values(problems != null ? problems : this.problems));
    };

    Aether.prototype.purifyCode = function(rawCode) {
      var error, nodeGatherer, originalNodeRanges, parameter, preNormalizationTransforms, preprocessedCode, problemOptions, transformedAST, transformedCode, varNames, wrappedCode, _i, _len, _ref3, _ref4, _ref5,
        _this = this;
      preprocessedCode = this.language.hackCommonMistakes(rawCode, this);
      wrappedCode = this.language.wrap(preprocessedCode, this);
      originalNodeRanges = [];
      varNames = {};
      _ref3 = this.options.functionParameters;
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        parameter = _ref3[_i];
        varNames[parameter] = true;
      }
      preNormalizationTransforms = [transforms.makeGatherNodeRanges(originalNodeRanges, wrappedCode, this.language.wrappedCodePrefix), transforms.makeCheckThisKeywords(this.allGlobals, varNames, this.language, this.options.problemContext), transforms.makeCheckIncompleteMembers(this.language, this.options.problemContext)];
      try {
        _ref4 = this.transform(wrappedCode, preNormalizationTransforms, this.language.parse), transformedCode = _ref4[0], transformedAST = _ref4[1];
        this.ast = transformedAST;
      } catch (_error) {
        error = _error;
        problemOptions = {
          error: error,
          code: wrappedCode,
          codePrefix: this.language.wrappedCodePrefix,
          reporter: this.language.parserID,
          kind: error.index || error.id,
          type: 'transpile'
        };
        this.addProblem(this.createUserCodeProblem(problemOptions));
        if (!this.language.parseDammit) {
          return '';
        }
        originalNodeRanges.splice();
        try {
          _ref5 = this.transform(wrappedCode, preNormalizationTransforms, this.language.parseDammit), transformedCode = _ref5[0], transformedAST = _ref5[1];
          this.ast = transformedAST;
        } catch (_error) {
          error = _error;
          problemOptions.kind = error.index || error.id;
          if (this.language.id === 'javascript') {
            problemOptions.reporter = 'acorn_loose';
          }
          this.addProblem(this.createUserCodeProblem(problemOptions));
          return '';
        }
      }
      nodeGatherer = transforms.makeGatherNodeRanges(originalNodeRanges, wrappedCode, this.language.wrappedCodePrefix);
      traversal.walkASTCorrect(this.ast, function(node) {
        var startEndRangeArray;
        nodeGatherer(node);
        if (node.originalRange != null) {
          startEndRangeArray = _this.language.removeWrappedIndent([node.originalRange.start, node.originalRange.end]);
          return node.originalRange = {
            start: startEndRangeArray[0],
            end: startEndRangeArray[1]
          };
        }
      });
      return rawCode;
    };

    Aether.prototype.transform = function(code, transforms, parseFn) {
      var t, transformedAST, transformedCode;
      transformedCode = traversal.morphAST(code, (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = transforms.length; _i < _len; _i++) {
          t = transforms[_i];
          _results.push(_.bind(t, this));
        }
        return _results;
      }).call(this), parseFn, this);
      transformedAST = parseFn(transformedCode, this);
      return [transformedCode, transformedAST];
    };

    Aether.getFunctionBody = function(func) {
      var indent, line, lines, source;
      source = _.isString(func) ? func : func.toString();
      if (source.trim() === "function () {}") {
        return "";
      }
      source = source.substring(source.indexOf('{') + 2, source.lastIndexOf('}'));
      lines = source.split(/\r?\n/);
      indent = lines.length ? lines[0].length - lines[0].replace(/^ +/, '').length : 0;
      return ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = lines.length; _i < _len; _i++) {
          line = lines[_i];
          _results.push(line.slice(indent));
        }
        return _results;
      })()).join('\n');
    };

    Aether.prototype.convertToNativeType = function(obj) {
      return this.language.convertToNativeType(obj);
    };

    Aether.prototype.getStatementCount = function() {
      var count, root;
      count = 0;
      if (this.language.usesFunctionWrapping()) {
        root = this.ast.body[0].body;
      } else {
        root = this.ast.body;
      }
      traversal.walkASTCorrect(root, function(node) {
        var _ref3;
        if (node.type == null) {
          return;
        }
        if (node.userCode === false) {
          return;
        }
        if ((_ref3 = node.type) === 'ExpressionStatement' || _ref3 === 'ReturnStatement' || _ref3 === 'ForStatement' || _ref3 === 'ForInStatement' || _ref3 === 'WhileStatement' || _ref3 === 'DoWhileStatement' || _ref3 === 'FunctionDeclaration' || _ref3 === 'VariableDeclaration' || _ref3 === 'IfStatement' || _ref3 === 'SwitchStatement' || _ref3 === 'ThrowStatement' || _ref3 === 'ContinueStatement' || _ref3 === 'BreakStatement') {
          return ++count;
        }
      });
      return count;
    };

    return Aether;

  })();

  if (self != null) {
    self.Aether = Aether;
  }

  if (typeof window !== "undefined" && window !== null) {
    window.Aether = Aether;
  }

  if (self != null) {
    if (self.esprima == null) {
      self.esprima = esprima;
    }
  }

  if (typeof window !== "undefined" && window !== null) {
    if (window.esprima == null) {
      window.esprima = esprima;
    }
  }

}).call(this);
