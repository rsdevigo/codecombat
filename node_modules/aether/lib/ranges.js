(function() {
  var buildRowOffsets, lastRowOffsets, lastRowOffsetsPrefix, lastRowOffsetsSource, locToPos, locsToRange, offsetToPos, offsetToRow, offsetsToRange, rowColToPos, rowColsToRange, stringifyPos, stringifyRange;

  module.exports.offsetToPos = offsetToPos = function(offset, source, prefix) {
    var col, row, rowOffsets;
    if (prefix == null) {
      prefix = '';
    }
    rowOffsets = buildRowOffsets(source, prefix);
    offset -= prefix.length;
    row = offsetToRow(offset, rowOffsets);
    col = offset - rowOffsets[row];
    return {
      ofs: offset,
      row: row,
      col: col
    };
  };

  module.exports.offsetsToRange = offsetsToRange = function(start, end, source, prefix) {
    if (prefix == null) {
      prefix = '';
    }
    return {
      start: offsetToPos(start, source, prefix),
      end: offsetToPos(end, source, prefix)
    };
  };

  module.exports.rowColToPos = rowColToPos = function(row, col, source, prefix) {
    var offset, rowOffsets;
    if (prefix == null) {
      prefix = '';
    }
    rowOffsets = buildRowOffsets(source, prefix);
    offset = rowOffsets[row] + col;
    return {
      ofs: offset,
      row: row,
      col: col
    };
  };

  module.exports.rowColsToRange = rowColsToRange = function(start, end, source, prefix) {
    if (prefix == null) {
      prefix = '';
    }
    return {
      start: rowColToPos(start.row, start.col, source, prefix),
      end: rowColToPos(end.row, end.col, source, prefix)
    };
  };

  module.exports.locToPos = locToPos = function(loc, source, prefix) {
    if (prefix == null) {
      prefix = '';
    }
    return rowColToPos(loc.line, loc.column, source, prefix);
  };

  module.exports.locsToRange = locsToRange = function(start, end, source, prefix) {
    if (prefix == null) {
      prefix = '';
    }
    return {
      start: locToPos(start, source, prefix),
      end: locToPos(end, source, prefix)
    };
  };

  module.exports.stringifyPos = stringifyPos = function(pos) {
    return "{ofs: " + pos.ofs + ", row: " + pos.row + ", col: " + pos.col + "}";
  };

  module.exports.stringifyRange = stringifyRange = function(start, end) {
    return "[" + (stringifyPos(start)) + ", " + (stringifyPos(end)) + "]";
  };

  lastRowOffsets = null;

  lastRowOffsetsSource = null;

  lastRowOffsetsPrefix = null;

  buildRowOffsets = function(source, prefix) {
    var c, offset, rowOffsets, _i, _len, _ref;
    if (prefix == null) {
      prefix = '';
    }
    if (source === lastRowOffsetsSource && prefix === lastRowOffsetsPrefix) {
      return lastRowOffsets;
    }
    rowOffsets = [0];
    _ref = source.substr(prefix.length);
    for (offset = _i = 0, _len = _ref.length; _i < _len; offset = ++_i) {
      c = _ref[offset];
      if (c === '\n') {
        rowOffsets.push(offset + 1);
      }
    }
    lastRowOffsets = rowOffsets;
    lastRowOffsetsSource = source;
    lastRowOffsetsPrefix = prefix;
    return rowOffsets;
  };

  offsetToRow = function(offset, rowOffsets) {
    var alen, hi, lo, mid;
    alen = rowOffsets.length;
    if (offset <= 0) {
      return 0;
    }
    if (offset >= rowOffsets[alen - 1]) {
      return alen - 1;
    }
    lo = 0;
    hi = alen - 1;
    while (lo < hi) {
      mid = ~~((hi + lo) / 2);
      if (offset >= rowOffsets[mid] && offset < rowOffsets[mid + 1]) {
        return mid;
      }
      if (offset < rowOffsets[mid]) {
        hi = mid;
      } else {
        lo = mid;
      }
    }
    throw new Error("Bug in offsetToRow()");
  };

}).call(this);
